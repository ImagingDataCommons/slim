{"version":3,"file":"static/js/45.7f594e29.chunk.js","mappings":"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","sources":["components/Description.tsx","valueUtils.ts","components/Patient.tsx","components/Study.tsx","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","data/uids.tsx","components/SlideViewer.tsx","data/slides.tsx","components/CaseViewer.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\nimport { IconType } from 'react-icons'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: IconType\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../valueUtils'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Gender',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../valueUtils'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\n\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\n\ninterface SlideItemProps {\n  client: DicomWebManager\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = {\n    isLoading: false\n  }\n\n  private readonly overviewViewport = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewport.current !== null) {\n        this.overviewViewport.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of series ' +\n          metadata.SeriesInstanceUID\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.client,\n          metadata: metadata,\n          resizeFactor: 1\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewport.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.render({\n        container: this.overviewViewport.current\n      })\n      this.overviewViewer.resize()\n    }\n    const attributes = []\n    const description = this.props.slide.description\n    if (description != null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    const title = this.props.slide.containerIdentifier\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ height: '100px' }} ref={this.overviewViewport} />\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  client: DicomWebManager\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          client={this.props.client}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (checked: boolean, event: Event): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: string[]\n  visibleRoiUIDs: string[]\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: ({ roiUID }: { roiUID: string }) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (checked: boolean, event: Event): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection({ roiUID: object.key })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.includes(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.length > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={this.props.selectedRoiUIDs}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Button,\n  Col,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState({ currentStyle: { opacity: value } })\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value !== undefined) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const identifier = `Annotation Group ${this.props.annotationGroup.number}`\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Label',\n        value: this.props.annotationGroup.label\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.annotationGroup.algorithmName\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      }\n    ]\n\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const measurementsSequence = item.MeasurementsSequence ?? []\n\n    const measurementOptions = measurementsSequence.map(measurementItem => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      const key = `${name.CodingSchemeDesignator}-${name.CodeValue}`\n      return (\n        <Select.Option\n          key={key}\n          value={key}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={9}>\n            Opacity\n          </Col>\n          <Col span={15}>\n            <Slider\n              min={0.01}\n              max={1}\n              step={0.01}\n              defaultValue={this.state.currentStyle.opacity}\n              onAfterChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        <Row justify='center' align='middle'>\n          <Col span={15}>\n            Measurement\n          </Col>\n          <Col span={9}>\n            <Select\n              style={{ minWidth: 30 }}\n              onSelect={this.handleMeasurementSelection}\n              key='annotation-group-measurements'\n              defaultValue={undefined}\n            >\n              {measurementOptions}\n            </Select>\n          </Col>\n        </Row>\n      </div>\n    )\n\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: string[]\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n    }\n  }\n  onAnnotationGroupVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<AnnotationGroupListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.includes(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n        >\n          {this.props.label}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n        >\n          {this.props.label}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    throw new Error(\n      'Content item \"Imaging Measurements\" not found.' +\n      'Content of Comprehensive 3D SR document is not structured based on ' +\n      'TID 1500 \"Measurement Report\".'\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    var observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Tracking Unique Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Finding\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Image Region\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    var scoord3d: dmv.scoord3d.Scoord3D\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        throw new Error(\n          'Content item \"Image Region\" has unknown graphic type ' +\n          `\"${regionItem.GraphicType}\". ` +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen UID\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen Container Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    var groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    var title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          } else {\n            console.debug(`specimen preparation step #${index} not rendered`)\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: {\n        opacity: value\n      }\n    })\n  }\n\n  handleColorRChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      console.log('DEBUG [RED]: ', value, color)\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        value,\n        this.state.currentStyle.color[2]\n      ]\n      console.log('DEBUG [GREEN]: ', value, color)\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        value\n      ]\n      console.log('DEBUG [BLUE]: ', value, color)\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color !== undefined) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else if (this.props.defaultStyle.paletteColorLookupTable !== undefined) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: {\n        limitValues: values,\n        color: this.state.currentStyle.color,\n        opacity: this.state.currentStyle.opacity\n      }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    specimenDescriptions.forEach(description => {\n      const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] = (\n        description.SpecimenPreparationSequence ?? []\n      )\n      specimenPreparationSteps.forEach(\n        (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n          step.SpecimenPreparationStepContentItemSequence.forEach((\n            item: (\n              dcmjs.sr.valueTypes.CodeContentItem |\n              dcmjs.sr.valueTypes.TextContentItem |\n              dcmjs.sr.valueTypes.UIDRefContentItem |\n              dcmjs.sr.valueTypes.PNameContentItem |\n              dcmjs.sr.valueTypes.DateTimeContentItem\n            ),\n            index: number\n          ) => {\n            const name = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptNameCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n            })\n            if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n              item = item as dcmjs.sr.valueTypes.CodeContentItem\n              const value = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptCodeSequence[0].CodeValue,\n                schemeDesignator:\n                  item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptCodeSequence[0].CodeMeaning\n              })\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                  attributes.push({\n                    name: 'Tissue stain',\n                    value: value.CodeMeaning\n                  })\n                }\n              }\n            } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n              item = item as dcmjs.sr.valueTypes.TextContentItem\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                  attributes.push({\n                    name: 'Tissue stain',\n                    value: item.TextValue\n                  })\n                }\n              }\n            } else {\n              console.debug(`specimen preparation step #${index} not rendered`)\n            }\n          })\n        }\n      )\n    })\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.props.defaultStyle.color !== undefined) {\n        colorSettings = (\n          <>\n            <Col span={9}>\n              R\n            </Col>\n            <Col span={15}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                defaultValue={this.props.defaultStyle.color[0]}\n                onAfterChange={this.handleColorRChange}\n              />\n            </Col>\n\n            <Col span={9}>\n              G\n            </Col>\n            <Col span={15}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                defaultValue={this.props.defaultStyle.color[1]}\n                onAfterChange={this.handleColorGChange}\n              />\n            </Col>\n\n            <Col span={9}>\n              B\n            </Col>\n            <Col span={15}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                defaultValue={this.props.defaultStyle.color[2]}\n                onAfterChange={this.handleColorBChange}\n              />\n            </Col>\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.props.defaultStyle.limitValues !== undefined) {\n        windowSettings = (\n          <>\n            <Col span={9}>\n              Window\n            </Col>\n            <Col span={15}>\n              <Slider\n                range\n                min={0}\n                max={maxValue}\n                step={1}\n                defaultValue={[\n                  this.props.defaultStyle.limitValues[0],\n                  this.props.defaultStyle.limitValues[1]\n                ]}\n                onAfterChange={this.handleLimitChange}\n              />\n            </Col>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          <Row justify='center' align='middle'>\n            {colorSettings}\n            {windowSettings}\n            <Col span={9}>\n              Opacity\n            </Col>\n            <Col span={15}>\n              <Slider\n                min={0.01}\n                max={1}\n                step={0.01}\n                defaultValue={this.props.defaultStyle.opacity}\n                onAfterChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle'>\n            <Col span={9}>\n              Opacity\n            </Col>\n            <Col span={15}>\n              <Slider\n                min={0.01}\n                max={1}\n                step={0.01}\n                defaultValue={this.props.defaultStyle.opacity}\n                onAfterChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button, Menu, Select, Space } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: string[]\n  activeOpticalPathIdentifiers: string[]\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.includes(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={id}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.includes(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Button\n            icon={<AppstoreAddOutlined />}\n            type='primary'\n            onClick={this.handleItemAddition}\n          />\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button, Col, Menu, Popover, Row, Slider, Space, Switch } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      mappingUID: this.props.mapping.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState(state => ({\n      currentStyle: {\n        opacity: value\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    const identifier = `Mapping ${this.props.mapping.number}`\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Label',\n        value: this.props.mapping.label\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={9}>\n            Opacity\n          </Col>\n          <Col span={15}>\n            <Slider\n              min={0.01}\n              max={1}\n              step={0.01}\n              defaultValue={this.state.currentStyle.opacity}\n              onAfterChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: string[]\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.includes(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button, Col, Menu, Popover, Row, Slider, Space, Switch } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      segmentUID: this.props.segment.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState({ currentStyle: { opacity: value } })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `Segment ${this.props.segment.number}`\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Label',\n        value: this.props.segment.label\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={9}>\n            Opacity\n          </Col>\n          <Col span={15}>\n            <Slider\n              min={0.01}\n              max={1}\n              step={0.01}\n              defaultValue={this.state.currentStyle.opacity}\n              onAfterChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: string[]\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.includes(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","export enum SOPClassUIDs {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30'\n\n}\n","import React from 'react'\nimport {\n  RouteComponentProps,\n  withRouter\n} from 'react-router-dom'\nimport {\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Checkbox,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space\n} from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { findContentItemsByName } from '../utils/sr'\nimport { Slide } from '../data/slides'\nimport { SOPClassUIDs } from '../data/uids'\n\nconst _buildKey = (concept: dcmjs.sr.coding.CodedConcept): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    throw new Error(`No finding found for ROI ${roi.uid}`)\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _constructViewers = ({ client, slide }: {\n  client: dwc.api.DICOMwebClient\n  slide: Slide\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  const volumeViewer = new dmv.viewer.VolumeImageViewer({\n    client: client,\n    metadata: slide.volumeImages\n  })\n  volumeViewer.toggleOverviewMap()\n  volumeViewer.activateSelectInteraction({})\n\n  let labelViewer\n  if (slide.labelImages.length > 0) {\n    labelViewer = new dmv.viewer.LabelImageViewer({\n      client: client,\n      metadata: slide.labelImages[0],\n      resizeFactor: 1,\n      orientation: 'vertical'\n    })\n  }\n\n  return { volumeViewer, labelViewer }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  client: DicomWebManager\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\ninterface SlideViewerState {\n  selectedRoiUIDs: string[]\n  visibleRoiUIDs: string[]\n  visibleSegmentUIDs: string[]\n  visibleMappingUIDs: string[]\n  visibleAnnotationGroupUIDs: string[]\n  visibleOpticalPathIdentifiers: string[]\n  activeOpticalPathIdentifiers: string[]\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  areRoisHidden: boolean\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: [0, 126, 163],\n      width: 2\n    },\n    fill: {\n      color: [0, 126, 163, 0.1]\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private readonly selectionColor: number[] = [140, 184, 198]\n\n  private readonly selectedRoiStyle: {\n    stroke?: { color: number[], width: number }\n    fill?: { color: number[] }\n  } = {\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\n    fill: { color: [...this.selectionColor, 0.2] }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = annotation.style\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n\n    console.info(\n      'instantiate viewers for slide of series ' +\n      this.props.seriesInstanceUID\n    )\n    const { volumeViewer, labelViewer } = _constructViewers({\n      client: this.props.client,\n      slide: this.props.slide\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    const activeOpticalPathIdentifiers: string[] = []\n    const visibleOpticalPathIdentifiers: string[] = []\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n        visibleOpticalPathIdentifiers.push(identifier)\n      }\n      if (this.volumeViewer.isOpticalPathActive(identifier)) {\n        activeOpticalPathIdentifiers.push(identifier)\n      }\n    })\n\n    this.state = {\n      selectedRoiUIDs: [],\n      visibleRoiUIDs: [],\n      visibleSegmentUIDs: [],\n      visibleMappingUIDs: [],\n      visibleAnnotationGroupUIDs: [],\n      visibleOpticalPathIdentifiers: visibleOpticalPathIdentifiers,\n      activeOpticalPathIdentifiers: activeOpticalPathIdentifiers,\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      areRoisHidden: false\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.slide !== previousProps.slide ||\n      this.props.client !== previousProps.client\n    ) {\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        client: this.props.client,\n        slide: this.props.slide\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n      this.populateViewports()\n    }\n  }\n\n  getRoiStyle = (key: string): dmv.viewer.ROIStyleOptions => {\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotations = (): void => {\n    console.info('search for Comprehensive 3D SR instances')\n    this.props.client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach(i => {\n        const { dataset } = dmv.metadata.formatMetadata(i)\n        const instance = dataset as dmv.metadata.Instance\n        if (instance.SOPClassUID === SOPClassUIDs.COMPREHENSIVE_3D_SR) {\n          console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n          this.props.client.retrieveInstance({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: instance.SeriesInstanceUID,\n            sopInstanceUID: instance.SOPInstanceUID\n          }).then((retrievedInstance): void => {\n            const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n            const { dataset } = dmv.metadata.formatMetadata(data.dict)\n            const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n            /*\n             * Perform a couple of checks to ensure the document content of the\n             * report fullfils the requirements of the application.\n             */\n            if (!_implementsTID1500(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it is not structured according to template ' +\n                'TID 1500 \"MeasurementReport\"'\n              )\n              return\n            }\n            if (!_describesSpecimenSubject(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not describe a specimen subject'\n              )\n              return\n            }\n            if (!_containsROIAnnotations(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not contain any suitable ROI annotations'\n              )\n              return\n            }\n\n            const content = new MeasurementReport(report)\n            content.ROIs.forEach(roi => {\n              console.info(`add ROI \"${roi.uid}\"`)\n              const scoord3d = roi.scoord3d\n              const image = this.props.slide.volumeImages[0]\n              if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                /*\n                 * ROIs may get assigned new UIDs upon re-rendering of the\n                 * page and we need to ensure that we don't add them twice.\n                 * The same ROI may be stored in multiple SR documents and\n                 * we don't want them to show up twice.\n                 * TODO: We should probably either \"merge\" measurements and\n                 * quantitative evaluations or pick the ROI from the \"best\"\n                 * available report (COMPLETE and VERIFIED).\n                 */\n                const doesROIExist = this.volumeViewer.getAllROIs().some(\n                  (otherROI: dmv.roi.ROI): boolean => {\n                    return _areROIsEqual(otherROI, roi)\n                  }\n                )\n                if (!doesROIExist) {\n                  try {\n                    // Add ROI without style such that it won't be visible.\n                    this.volumeViewer.addROI(roi, {})\n                  } catch {\n                    console.error(`could not add ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                }\n              } else {\n                console.debug(\n                  `skip ROI \"${roi.uid}\" ` +\n                  `of SR document \"${report.SOPInstanceUID}\"` +\n                  'because it is defined in another frame of reference'\n                )\n              }\n            })\n          }).catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            message.error('Annotations could not be loaded')\n            console.error(\n              'failed to load ROIs ' +\n              `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n              `of series \"${instance.SeriesInstanceUID}\" ` +\n              `of study \"${this.props.studyInstanceUID}\": `,\n              error\n            )\n          })\n          /*\n           * React is not aware of the fact that ROIs have been added via the\n           * viewer (the viewport is a ref object) and won't show the\n           * annotations in the user interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Annotations could not be loaded')\n      console.error(error)\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = (): void => {\n    console.info('search for Microscopy Bulk Simple Annotations instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'ANN'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          let annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[]\n          annotations = retrievedMetadata.map(metadata => {\n            return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n              metadata\n            })\n          })\n          annotations = annotations.filter(ann => {\n            const refImage = this.props.slide.volumeImages[0]\n            return (\n              ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              ann.ContainerIdentifier === refImage.ContainerIdentifier\n            )\n          })\n          annotations.forEach(ann => {\n            try {\n              this.volumeViewer.addAnnotationGroups(ann)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error(\n                'Microscopy Bulk Simple Annotations cannot be displayed.'\n              )\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              console.error('failed to add annotation groups: ', error)\n            }\n          })\n          /*\n           * React is not aware of the fact that annotation groups have been\n           * added via the viewer (the underlying HTML viewport element is a\n           * ref object) and won't show the annotation groups in the user\n           * interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n            'instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of ' +\n            'Microscopy Bulk Simple Annotations instances: ',\n            error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error(\n        'Search for Microscopy Bulk Simple Annotations instances failed.'\n      )\n      console.error(\n        'failed to search for Microscopy Bulk Simple Annotations instances: ',\n        error\n      )\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = (): void => {\n    console.info('search for Segmentation instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SEG'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach((s, i) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const segmentations: dmv.metadata.Segmentation[] = []\n          retrievedMetadata.forEach(metadata => {\n            const seg = new dmv.metadata.Segmentation({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              seg.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              segmentations.push(seg)\n            }\n          })\n          if (segmentations.length > 0) {\n            try {\n              this.volumeViewer.addSegments(segmentations)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error('Segmentations cannot be displayed')\n              console.error('failed to add segments: ', error)\n            }\n            /*\n           * React is not aware of the fact that segments have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the segments in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Segmentation instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of Segmentation instances: ',\n            error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Search for Segmentation instances failed.')\n      console.error('failed to search for Segmentation instances: ', error)\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = (): void => {\n    console.info('search for Parametric Map instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'OT'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const parametricMaps: dmv.metadata.ParametricMap[] = []\n          retrievedMetadata.forEach(metadata => {\n            const pm = new dmv.metadata.ParametricMap({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              pm.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              parametricMaps.push(pm)\n            }\n          })\n          if (parametricMaps.length > 0) {\n            try {\n              this.volumeViewer.addParameterMappings(parametricMaps)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error('Parametric Map cannot be displayed')\n              console.error('failed to add mappings: ', error)\n            }\n            /*\n           * React is not aware of the fact that mappings have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the mappings in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Parametric Map instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of Parametric Map instances: ', error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Search for Parametric Map instances failed.')\n      console.error('failed to search for Parametric Map instances: ', error)\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({ isLoading: true })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewportRef.current.innerHTML = ''\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewportRef.current.innerHTML = ''\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.addAnnotations()\n    this.addAnnotationGroups()\n    this.addSegmentations()\n    this.addParametricMaps()\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: [...state.visibleRoiUIDs]\n    }))\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => ({\n        visibleRoiUIDs: [...state.visibleRoiUIDs, roi.uid]\n      }))\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi !== null) {\n      console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n      this.volumeViewer.setROIStyle(selectedRoi.uid, this.selectedRoiStyle)\n      const key = _getRoiKey(selectedRoi)\n      this.volumeViewer.getAllROIs().forEach((roi) => {\n        if (roi.uid !== selectedRoi.uid) {\n          this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n        }\n      })\n      this.setState({ selectedRoiUIDs: [selectedRoi.uid] })\n    } else {\n      this.setState({ selectedRoiUIDs: [] })\n    }\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  componentWillUnmount (): void {\n    window.removeEventListener('beforeunload', this.componentCleanup)\n    this.componentCleanup()\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    this.populateViewports()\n  }\n\n  componentDidMount (): void {\n    window.addEventListener('beforeunload', this.componentCleanup)\n    this.componentSetup()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({ isAnnotationModalVisible: false })\n    } else {\n      console.error('could not complete annotation configuration')\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({ isAnnotationModalVisible: false })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    // Metadata should be sorted such that the image with the highest\n    // resolution is the last item in the array.\n    const refImage = metadata[metadata.length - 1]\n    // We assume that there is only one specimen (tissue section) per\n    // ontainer (slide). Only the tissue section is tracked with a unique\n    // identifier, even if the section may be composed of different biological\n    // samples.\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\n      console.error('more than one specimen has been described for the slide')\n    }\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n    console.debug('create Observation Context')\n    var observer\n    if (this.props.user !== undefined) {\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: this.props.user.name,\n        loginName: this.props.user.email\n      })\n    } else {\n      console.warn('no user information available')\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: 'ANONYMOUS'\n      })\n    }\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121006',\n          schemeDesignator: 'DCM',\n          meaning: 'Person'\n        }),\n        observerIdentifyingAttributes: observer\n      }),\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121007',\n          schemeDesignator: 'DCM',\n          meaning: 'Device'\n        }),\n        observerIdentifyingAttributes:\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\n            uid: this.props.app.uid,\n            manufacturerName: 'MGH Computational Pathology',\n            modelName: this.props.app.name\n          })\n      }),\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\n          value: '121027',\n          schemeDesignator: 'DCM',\n          meaning: 'Specimen'\n        }),\n        subjectClassSpecificContext:\n          new dcmjs.sr.templates.SubjectContextSpecimen({\n            uid: refSpecimen.SpecimenUID,\n            identifier: refSpecimen.SpecimenIdentifier,\n            containerIdentifier: refImage.ContainerIdentifier\n          })\n      })\n    })\n\n    console.debug('encode Imaging Measurements')\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\n    for (let i = 0; i < rois.length; i++) {\n      const roi = rois[i]\n      if (!this.state.visibleRoiUIDs.includes(roi.uid as never)) {\n        continue\n      }\n      let findingType = roi.evaluations.find(\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n        }\n      )\n      if (findingType === undefined) {\n        throw new Error(`No finding type was specified for ROI \"${roi.uid}\"`)\n      }\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.properties.trackingUID ?? roi.uid,\n          identifier: `ROI #${i + 1}`\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: findingType.ConceptCodeSequence[0].CodeValue,\n          schemeDesignator:\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n        }),\n        qualitativeEvaluations: roi.evaluations.filter(\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n          }\n        ),\n        measurements: roi.measurements\n      })\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\n      measurements[0].ContentTemplateSequence = [{\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }]\n      imagingMeasurements.push(...measurements)\n    }\n\n    console.debug('create Measurement Report document content')\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\n      observationContext: observationContext,\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\n        value: '112703',\n        schemeDesignator: 'DCM',\n        meaning: 'Whole Slide Imaging'\n      }),\n      imagingMeasurements: imagingMeasurements\n    })\n\n    console.info('create Comprehensive 3D SR document')\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n      content: measurementReport[0],\n      evidence: [refImage],\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      seriesNumber: 1,\n      seriesDescription: 'Annotation',\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      instanceNumber: 1,\n      manufacturer: 'MGH Computational Pathology',\n      previousVersions: undefined // TODO\n    })\n\n    this.setState({\n      isReportModalVisible: true,\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      var dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      this.props.client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Annotations could not be saved')\n        console.error(error)\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when an annotation has been selected from the\n   * current list of annotations.\n   */\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\n    console.log(`selected ROI ${roiUID}`)\n    this.setState({ selectedRoiUIDs: [roiUID] })\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      var style = {}\n      if (roi.uid === roiUID) {\n        style = this.selectedRoiStyle\n        this.setState(state => ({\n          visibleRoiUIDs: [...state.visibleRoiUIDs, roiUID]\n        }))\n      } else {\n        if (this.state.visibleRoiUIDs.includes(roi.uid as never)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n      this.setState(state => {\n        if (!state.visibleRoiUIDs.includes(roiUID)) {\n          return {\n            visibleRoiUIDs: [...state.visibleRoiUIDs, roiUID]\n          }\n        } else {\n          return {\n            visibleRoiUIDs: state.visibleRoiUIDs\n          }\n        }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => ({\n        visibleRoiUIDs: state.visibleRoiUIDs.filter(uid => uid !== roiUID),\n        selectedRoiUIDs: state.selectedRoiUIDs.filter(uid => uid !== roiUID)\n      }))\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      this.setState(state => ({\n        visibleAnnotationGroupUIDs: state.visibleAnnotationGroupUIDs.concat(\n          annotationGroupUID\n        )\n      }))\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => ({\n        visibleAnnotationGroupUIDs: state.visibleAnnotationGroupUIDs.filter(\n          uid => uid !== annotationGroupUID\n        )\n      }))\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of annotation group ${annotationGroupUID}`)\n    this.volumeViewer.setAnnotationGroupStyle(annotationGroupUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => ({\n        visibleSegmentUIDs: state.visibleSegmentUIDs.concat(segmentUID)\n      }))\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => ({\n        visibleSegmentUIDs: state.visibleSegmentUIDs.filter(uid => {\n          return uid !== segmentUID\n        })\n      }))\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => ({\n        visibleMappingUIDs: state.visibleMappingUIDs.concat(mappingUID)\n      }))\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => ({\n        visibleMappingUIDs: state.visibleMappingUIDs.filter(uid => {\n          return uid !== mappingUID\n        })\n      }))\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => ({\n        visibleOpticalPathIdentifiers:\n          state.visibleOpticalPathIdentifiers.concat(opticalPathIdentifier)\n      }))\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => ({\n        visibleOpticalPathIdentifiers:\n          state.visibleOpticalPathIdentifiers.filter(\n            identifier => identifier !== opticalPathIdentifier\n          )\n      }))\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => ({\n        activeOpticalPathIdentifiers:\n          state.activeOpticalPathIdentifiers.concat(opticalPathIdentifier)\n      }))\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => ({\n        activeOpticalPathIdentifiers:\n          state.activeOpticalPathIdentifiers.filter(\n            identifier => identifier !== opticalPathIdentifier\n          )\n      }))\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.volumeViewer.isDrawInteractionActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.length > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: [],\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: [],\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (this.volumeViewer.areROIsVisible) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    annotationGroups.push(...this.volumeViewer.getAllAnnotationGroups())\n\n    const openSubMenuItems = ['specimens', 'opticalpaths', 'annotations']\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map(finding => {\n      return (\n        <Select.Option\n          key={finding.CodeValue}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptions = [\n      <Select.Option key='point' value='point'>Point</Select.Option>,\n      <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      <Select.Option key='box' value='box'>Rectangle</Select.Option>,\n      <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      <Select.Option key='line' value='line'>Line</Select.Option>,\n      (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    ]\n\n    const selections: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationGeometryTypeSelection}\n          key='annotation-geometry-type'\n        >\n          {geometryTypeOptions}\n        </Select>\n      ),\n      (\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      ),\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach(evaluation => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={code.CodeValue}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        selections.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const defaultOpticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const style = this.volumeViewer.getOpticalPathStyle(identifier)\n      defaultOpticalPathStyles[identifier] = style\n      opticalPathMetadata[identifier] = this.volumeViewer.getOpticalPathMetadata(\n        identifier\n      )\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='opticalpaths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={defaultOpticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n        />\n      </Menu.SubMenu>\n    )\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetricmaps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametricmaps')\n    }\n\n    let annotationGroupMenu\n    if (annotationGroups.length > 0) {\n      const defaultAnnotationGroupStyles: {\n        [annotationGroupUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const annotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotationGroups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row>\n          <Button\n            tooltip='Draw ROI'\n            icon={FaDrawPolygon}\n            onClick={this.handleRoiDrawing}\n            isSelected={this.state.isRoiDrawingActive}\n          />\n          <Button\n            tooltip='Modify ROIs'\n            icon={FaHandPointer}\n            onClick={this.handleRoiModification}\n            isSelected={this.state.isRoiModificationActive}\n          />\n          <Button\n            tooltip='Shift ROIs'\n            icon={FaHandPaper}\n            onClick={this.handleRoiTranslation}\n            isSelected={this.state.isRoiTranslationActive}\n          />\n          <Button\n            tooltip='Remove selected ROI'\n            onClick={this.handleRoiRemoval}\n            icon={FaTrash}\n          />\n          <Button\n            tooltip='Show/Hide ROIs'\n            icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n            onClick={this.handleRoiVisibilityChange}\n            isSelected={this.state.areRoisHidden}\n          />\n          <Button\n            tooltip='Save ROIs'\n            icon={FaSave}\n            onClick={this.handleReportGeneration}\n          />\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    /* It would be nicer to use the ant Spin component, but that causes issues\n     * with the positioning of the viewport.\n     */\n    let loadingDisplay = 'none'\n    if (this.state.isLoading) {\n      loadingDisplay = 'block'\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div className='dimmer' style={{ display: loadingDisplay }} />\n          <div className='spinner' style={{ display: loadingDisplay }} />\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden'\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            visible={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {selections}\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n          >\n            <Menu.SubMenu key='label' title='Slide label'>\n              <Menu.Item style={{ height: '100%' }}>\n                <div\n                  style={{ height: '220px' }}\n                  ref={this.labelViewportRef}\n                />\n              </Menu.Item>\n            </Menu.SubMenu>\n            {specimenMenu}\n            {opticalPathMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\ninterface SlideImageCollection {\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      throw new Error('Value of option \"images\" have been non-zero length.')\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = new Set([] as string[])\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      frameOfReferenceUIDs.add(image.FrameOfReferenceUID)\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (hasImageFlavor(image, ImageFlavors.VOLUME)) {\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.THUMBNAIL)) {\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        overviewImages.push(image)\n      }\n    })\n    if (volumeImages.length === 0) {\n      throw new Error('At least one volume image must be provided for a slide.')\n    } else {\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        throw new Error(\n          'All volume images of a slide must have the same number of ' +\n          'Samples per Pixel.'\n        )\n      }\n    }\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n    if (containerIdentifiers.size !== 1) {\n      throw new Error(\n        'All images of a slide must have the same Container Identifier.'\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n    if (frameOfReferenceUIDs.size !== 1) {\n      throw new Error(\n        'All images of a slide must have the same Frame of Reference UID.'\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs][0]\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) => {\n        return (\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n        )\n      })\n      const labelImages = series.filter((image) => {\n        return hasImageFlavor(image, ImageFlavors.LABEL)\n      })\n      const overviewImages = series.filter((image) => {\n        return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n      })\n\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const filteredOverviewImages = overviewImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: labelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...labelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imageA = a.volumeImages[0]\n    const imageB = b.volumeImages[0]\n    if (imageA.SeriesNumber != null && imageB.SeriesNumber != null) {\n      return Number(imageA.SeriesNumber) - Number(imageB.SeriesNumber)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import React from 'react'\nimport {\n  Switch,\n  Route,\n  RouteComponentProps,\n  withRouter\n} from 'react-router-dom'\nimport {\n  Layout,\n  message,\n  Menu\n} from 'antd'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { Slide, createSlides } from '../data/slides'\nimport { SOPClassUIDs } from '../data/uids'\n\ninterface ViewerProps extends RouteComponentProps {\n  client: DicomWebManager\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\ninterface ViewerState {\n  slides: Slide[]\n  isLoading: boolean\n}\n\nclass Viewer extends React.Component<ViewerProps, ViewerState> {\n  state = {\n    slides: [],\n    isLoading: false\n  }\n\n  constructor (props: ViewerProps) {\n    super(props)\n    this.handleSeriesSelection = this.handleSeriesSelection.bind(this)\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    this.fetchImageMetadata().then(\n      (metadata: dmv.metadata.VLWholeSlideMicroscopyImage[][]) => {\n        this.setState({\n          slides: createSlides(metadata),\n          isLoading: false\n        })\n      }\n    ).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error(\n        'An error occured. ' +\n          'Image metadata could not be retrieved or decoded.'\n      )\n      console.error(error)\n      this.setState({ isLoading: false })\n    })\n  }\n\n  /**\n   * Fetch metadata for VL Whole Slide Microscopy Image instances of the study.\n   *\n   * @returns Metadata of image instances of the study grouped per series\n   */\n  async fetchImageMetadata (): Promise<dmv.metadata.VLWholeSlideMicroscopyImage[][]> {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    const studyInstanceUID = this.props.studyInstanceUID\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n    const matchedSeries = await this.props.client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(matchedSeries.map(async (s) => {\n      const { dataset } = dmv.metadata.formatMetadata(s)\n      const loadingSeries = dataset as dmv.metadata.Series\n      console.info(\n        `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n      )\n      const retrievedMetadata = await this.props.client.retrieveSeriesMetadata({\n        studyInstanceUID: this.props.studyInstanceUID,\n        seriesInstanceUID: loadingSeries.SeriesInstanceUID\n      })\n\n      const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n      retrievedMetadata.forEach((item, index) => {\n        if (item['00080016'] !== undefined) {\n          const sopClassUID = item['00080016'].Value[0]\n          if (sopClassUID === SOPClassUIDs.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        }\n      })\n\n      if (seriesImages.length > 0) {\n        images.push(seriesImages)\n      }\n    }))\n\n    return images\n  }\n\n  handleSeriesSelection (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ): void {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    this.props.history.push(\n      `/studies/${this.props.studyInstanceUID}/series/${seriesInstanceUID}`\n    )\n  }\n\n  render (): React.ReactNode {\n    if (this.state.slides.length === 0) {\n      return null\n    }\n    const firstSlide = this.state.slides[0] as Slide\n    const volumeInstances = firstSlide.volumeImages\n    if (volumeInstances.length === 0) {\n      return null\n    }\n    const refImage = volumeInstances[0]\n\n    /* If a series is encoded in the path, route the viewer to this series.\n     * Otherwise select the first series correspondent to\n     * the first slide contained in the study.\n     */\n    let selectedSeriesInstanceUID: string\n    if (this.props.location.pathname.includes('series/')) {\n      const fragments = this.props.location.pathname.split('/')\n      selectedSeriesInstanceUID = fragments[4]\n    } else {\n      selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Sider\n          width={300}\n          style={{\n            height: '100%',\n            borderRight: 'solid',\n            borderRightWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={['patient', 'case', 'slides']}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n          >\n            <Menu.SubMenu key='patient' title='Patient'>\n              <Patient metadata={refImage} />\n            </Menu.SubMenu>\n            <Menu.SubMenu key='case' title='Case'>\n              <Study metadata={refImage} />\n            </Menu.SubMenu>\n            <Menu.SubMenu key='slides' title='Slides'>\n              <SlideList\n                client={this.props.client}\n                metadata={this.state.slides}\n                selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n                onSeriesSelection={this.handleSeriesSelection}\n              />\n            </Menu.SubMenu>\n          </Menu>\n        </Layout.Sider>\n\n        <Switch>\n          <Route\n            exact\n            path='/studies/:StudyInstanceUID/series/:SeriesInstanceUID'\n            render={(routeProps) => {\n              const selectedSlide = this.state.slides.find((slide: Slide) => {\n                return slide.seriesInstanceUIDs.find((uid: string) => {\n                  return uid === routeProps.match.params.SeriesInstanceUID\n                })\n              })\n              let viewer = null\n              if (selectedSlide != null) {\n                viewer = (\n                  <SlideViewer\n                    client={this.props.client}\n                    studyInstanceUID={this.props.studyInstanceUID}\n                    seriesInstanceUID={routeProps.match.params.SeriesInstanceUID}\n                    slide={selectedSlide}\n                    annotations={this.props.annotations}\n                    enableAnnotationTools={this.props.enableAnnotationTools}\n                    app={this.props.app}\n                    user={this.props.user}\n                  />\n                )\n              }\n              return viewer\n            }}\n          />\n        </Switch>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(Viewer)\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Avatar,\n  Col,\n  Descriptions,\n  Input,\n  Layout,\n  Modal,\n  Row,\n  Space\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  UnorderedListOutlined,\n  UserOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\n\ninterface HeaderProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  showServerSelectionButton: boolean\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    this.state = {\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: true\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  render (): React.ReactNode {\n    var user = null\n    if (this.props.user !== undefined) {\n      user = (\n        <>\n          <Avatar shape='square' icon={<UserOutlined />} />\n          <span>\n            {this.props.user.name} ({this.props.user.email})\n          </span>\n        </>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const handleServerSelectionInput = (event: any): void => {\n      const value = event.target.value\n      let isDisabled = true\n      if (value != null) {\n        try {\n          const url = new URL(value)\n          if (url.protocol.startsWith('http') && url.pathname.length > 0) {\n            isDisabled = false\n          }\n        } catch (TypeError) {}\n      }\n      this.setState({\n        selectedServerUrl: value,\n        isServerSelectionDisabled: isDisabled\n      })\n    }\n\n    const handleServerSelectionCancellation = (event: any): void => {\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const handleServerSelection = (event: any): void => {\n      const url = this.state.selectedServerUrl\n      let closeModal = false\n      if (url != null && url !== '') {\n        if (url.startsWith('http://') || url.startsWith('https://')) {\n          this.props.onServerSelection({ url })\n          closeModal = true\n        }\n      }\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: !closeModal,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row>\n            <Col>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' />\n            <Col>\n              <Space align='center' direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          visible={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={handleServerSelection}\n          onCancel={handleServerSelectionCancellation}\n        >\n          <Input\n            placeholder='Enter base URL of DICOMweb Study Service'\n            onChange={handleServerSelectionInput}\n            onPressEnter={handleServerSelection}\n            addonAfter={\n              this.state.isServerSelectionDisabled\n                ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n            }\n          />\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default Header\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\nimport {\n  Button,\n  Input,\n  message,\n  Space,\n  Table,\n  TablePaginationConfig\n} from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { parseDate, parseName, parseSex, parseTime } from '../valueUtils'\n\ninterface WorklistProps extends RouteComponentProps {\n  client: DicomWebManager\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    this.props.client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map((study) => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('An error occured. Search for studies failed.')\n      console.error(error)\n    })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.client !== previousProps.client) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.history.push(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    this.props.client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map((study) => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    }).catch(() => message.error('Request to search for studies failed.'))\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\n\nconst createUser = (userData: UserData): User => {\n  const profile = userData.profile\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      throw Error('Failed to obtain user \"name\" and \"email\".')\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    throw Error('Failed to obtain user profile.')\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private readonly _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true\n    })\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn !== undefined) {\n        onSignIn({ user: user, authorization: authorization })\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        const user = createUser(userData)\n        const authorization = `${userData.token_type} ${userData.access_token}`\n        if (onSignIn !== undefined) {\n          onSignIn({ user: user, authorization: authorization })\n        }\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('revoking authorization')\n    return await this._oidc.removeUser()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        throw Error('Failed to obtain access token.')\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        throw Error('Failed to obtain user information.')\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        throw Error('At least one server needs to be configured.')\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        throw new Error(\n          'Either path or full URL needs to be configured for server.'\n        )\n      }\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      throw new Error('Only one store is supported for now.')\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveStudyMetadata(options)\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveSeriesMetadata(options)\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    return await this.stores[0].client.retrieveInstance(options)\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Redirect,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { joinUrl } from './utils/url'\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport DicomWebManager from './DicomWebManager'\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  client: DicomWebManager\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach(\n        ({ status, message }: ErrorMessageSettings) => {\n          if (error.status === status) {\n            this.setState({\n              error: {\n                status: error.status,\n                message\n              }\n            })\n          }\n        }\n      )\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      throw Error('One server needs to be configured.')\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n\n    this.state = {\n      client: new DicomWebManager({\n        baseUri: baseUri,\n        settings: props.config.servers,\n        onError: this.handleDICOMwebError\n      }),\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    const client = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    client.updateHeaders(this.state.client.headers)\n    this.setState({ client })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    const client = this.state.client\n    client.updateHeaders({ Authorization: authorization })\n    const fullPath = window.location.pathname\n    const basePath = this.props.config.path\n    const path = fullPath.substring(basePath.length - 1)\n    this.setState({\n      user: user,\n      client: client,\n      wasAuthSuccessful: true,\n      isLoading: false,\n      redirectTo: path\n    })\n  }\n\n  componentDidMount (): void {\n    if (this.auth !== undefined) {\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in successful')\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error('sign-in failed ', error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Could not sign-in user')\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableAnnotationTools = !(\n      this.props.config.disableAnnotationTools ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist client={this.state.client} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Redirect push to={this.state.redirectTo} />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={enableServerSelection}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <div>Sign-in failed.</div>\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Switch>\n            <Route\n              path='/studies/:StudyInstanceUID'\n              render={(routeProps) => (\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <CaseViewer\n                      client={this.state.client}\n                      user={this.state.user}\n                      annotations={this.props.config.annotations}\n                      app={appInfo}\n                      enableAnnotationTools={enableAnnotationTools}\n                      studyInstanceUID={routeProps.match.params.StudyInstanceUID}\n                    />\n                  </Layout.Content>\n                </Layout>\n              )}\n            />\n            <Route exact path='/'>\n              <Layout style={layoutStyle}>\n                <Header\n                  app={appInfo}\n                  user={this.state.user}\n                  showWorklistButton={false}\n                  onServerSelection={this.handleServerSelection}\n                  showServerSelectionButton={enableServerSelection}\n                />\n                <Layout.Content style={layoutContentStyle}>\n                  {worklist}\n                </Layout.Content>\n              </Layout>\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","Patient","metadata","PatientID","PatientName","PatientSex","PatientBirthDate","Study","AccessionNumber","StudyID","StudyDate","StudyTime","SlideItem","state","isLoading","overviewViewport","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","console","info","SeriesInstanceUID","dmv","client","resizeFactor","render","container","resize","description","push","containerIdentifier","style","height","ref","seriesInstanceUIDs","SlideList","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","AnnotationItem","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","AnnotationList","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","includes","paddingTop","paddingBottom","selectedRoiUIDs","onClick","AnnotationGroupItem","handleMeasurementSelection","handleOpacityChange","currentStyle","opacity","defaultStyle","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","option","codeComponents","measurement","schemeDesignator","meaning","number","algorithmName","propertyCategory","propertyType","AnnotationGroupSequence","findIndex","AnnotationGroupUID","measurementOptions","MeasurementsSequence","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","settings","justify","min","max","step","defaultValue","onAfterChange","minWidth","direction","placement","content","type","shape","SettingOutlined","AnnotationGroupList","annotationGroups","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupVisibilityChange","onAnnotationGroupStyleChange","Button","handleClick","button","Icon","isSelected","tooltip","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","Error","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","GraphicType","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","slice","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ContainerIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","Report","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","Item","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","SpecimenItem","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","debug","SpecimenList","overflowY","OpticalPathItem","handleLimitChange","handleColorRChange","handleColorGChange","handleColorBChange","handleRemoval","getCurrentColors","color","limitValues","opticalPath","opticalPathIdentifier","log","rgb2hex","values","paletteColorLookupTable","data","onRemoval","illuminationWaveLength","illuminationColor","maxValue","Math","pow","BitsAllocated","isMonochromatic","colorSettings","windowSettings","range","colors","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","OpticalPathList","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","MappingItem","mappingUID","mapping","MappingList","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","SegmentItem","segmentUID","segment","SegmentList","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","SOPClassUIDs","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","_constructViewers","labelViewer","volumeViewer","volumeImages","toggleOverviewMap","activateSelectInteraction","labelImages","SlideViewer","findingOptions","evaluationOptions","volumeViewportRef","labelViewportRef","defaultRoiStyle","stroke","fill","roiStyles","selectionColor","selectedRoiStyle","getRoiStyle","addAnnotations","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","instance","SOPClassUID","COMPREHENSIVE_3D_SR","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","dict","templateSeq","ContentTemplateSequence","TemplateIdentifier","_implementsTID1500","subjectClassValue","retrievedConcept","expectedConcept","_describesSpecimenSubject","measurementGroups","foundRegion","regions","_containsROIAnnotations","image","FrameOfReferenceUID","doesROIExist","getAllROIs","some","otherROI","a","b","graphicType","graphicData","s1","s2","j","_areROIsEqual","addROI","error","catch","message","forceUpdate","addAnnotationGroups","searchForSeries","matchedSeries","s","series","retrieveSeriesMetadata","retrievedMetadata","filter","ann","refImage","addSegmentations","segmentations","seg","addSegments","addParametricMaps","parametricMaps","pm","addParameterMappings","populateViewports","onRoiModified","onRoiDrawn","detail","payload","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","onRoiSelected","selectedRoi","setROIStyle","onLoadingStarted","onLoadingEnded","onRoiRemoved","annotation","finding","componentSetup","componentCleanup","handleRoiDrawing","handleRoiTranslation","handleRoiModification","handleRoiVisibilityChange","handleRoiRemoval","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationVisibilityChange","handleAnnotationGroupVisibilityChange","handleAnnotationGroupStyleChange","handleReportGeneration","handleReportVerification","handleReportCancellation","handleSegmentVisibilityChange","handleSegmentStyleChange","handleMappingVisibilityChange","handleMappingStyleChange","handleOpticalPathVisibilityChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","getAllOpticalPaths","isOpticalPathVisible","isOpticalPathActive","generatedReport","isAnnotationModalVisible","isReportModalVisible","isRoiDrawingActive","isRoiTranslationActive","isRoiModificationActive","areRoisHidden","previousProps","previousState","location","pathname","cleanup","document","body","removeEventListener","window","addEventListener","areVolumeImagesMonochrome","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","target","selectedMarkup","code","filteredEvaluations","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","observer","refSpecimen","user","loginName","email","warn","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","app","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","find","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","evidence","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","getROI","showAnnotationGroup","concat","hideAnnotationGroup","setAnnotationGroupStyle","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","showOpticalPath","hideOpticalPath","setOpticalPathStyle","activateOpticalPath","deactivateOpticalPath","isDrawInteractionActive","deactivateDrawInteraction","deactivateSelectInteraction","deactivateSnapInteraction","deactivateTranslateInteraction","deactivateModifyInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areROIsVisible","hideROIs","showROIs","getAllSegments","getAllParameterMappings","getAllAnnotationGroups","annotationMenuItems","openSubMenuItems","geometryTypeOptions","selections","defaultActiveFirstOption","onClear","specimenMenu","opticalPathMetadata","getOpticalPathStyle","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","enableAnnotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","loadingDisplay","hasSider","className","display","overflow","visible","onOk","onCancel","okText","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","withRouter","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","Slide","options","opticalPathIdentifiers","Set","containerIdentifiers","frameOfReferenceUIDs","add","VOLUME","THUMBNAIL","LABEL","OVERVIEW","samplesPerPixel","SamplesPerPixel","PhotometricInterpretation","createSlides","slideMetadata","filteredVolumeImages","filteredOverviewImages","slideMetadataIndex","_doesImageBelongToSlide","slideMetadataItem","slides","sort","imageA","imageB","SeriesNumber","Number","Viewer","handleSeriesSelection","fetchImageMetadata","StudyInstanceUID","Promise","all","loadingSeries","seriesImages","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","history","volumeInstances","borderRight","borderRightWidth","exact","path","routeProps","selectedSlide","match","params","viewer","Header","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleServerSelectionButtonClick","isServerSelectionModalVisible","isServerSelectionDisabled","worklistButton","UserOutlined","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","showServerSelectionButton","ApiOutlined","handleServerSelection","url","selectedServerUrl","closeModal","startsWith","onServerSelection","src","process","alt","margin","flex","placeholder","isDisabled","URL","protocol","TypeError","onPressEnter","addonAfter","StopOutlined","CheckOutlined","alignItems","justifyContent","subTitle","Worklist","defaultPageSize","handleSearch","confirm","dataIndex","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","e","marginBottom","SearchOutlined","filterIcon","filtered","fetchData","handleChange","studies","numStudies","pageSize","searchOptions","ModalitiesInStudy","searchForStudies","study","limit","searchCriteria","fuzzymatching","pagination","filters","columns","String","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","cursor","rowKey","record","dataSource","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","searchParams","URLSearchParams","search","hashParams","hash","replace","Boolean","get","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","signinCallback","authorization","token_type","access_token","getUser","expired","signinRedirect","signOut","removeUser","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","args","apply","status","errorMessage","attemptFailedError","open","DicomWebManager","onError","stores","handleError","updateHeaders","fields","f","headers","reject","retrieveStudyMetadata","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","qidoPathPrefix","qidoURLPrefix","wadoPathPrefix","wadoURLPrefix","stowPathPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","errorInterceptor","read","dwc","baseURL","App","auth","handleDICOMwebError","errorMessages","handleSignIn","Authorization","fullPath","basePath","config","wasAuthSuccessful","redirectTo","host","appUri","oidcSettings","oidc","servers","duration","worklist","appInfo","organization","enableWorklist","disableWorklist","disableAnnotationTools","enableServerSelection","layoutStyle","layoutContentStyle","basename","CaseViewer"],"sourceRoot":""}