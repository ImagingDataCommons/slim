{"version":3,"file":"static/js/687.3cb2d3b4.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","utils/PubSub.js","utils/CustomError.js","services/NotificationMiddleware.js","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","utils/router.tsx","components/ColorSettingsMenu.tsx","components/AnnotationCategoryItem.tsx","components/AnnotationCategoryList.tsx","components/HoveredRoiTooltip.tsx","services/RoiToAnnotationAdapter.ts","components/SlideViewer.tsx","data/slides.tsx","services/fetchImageMetadata.ts","hooks/useSlides.ts","components/CaseViewer.tsx","components/DicomTagBrowser/dicomTagUtils.ts","utils/formatDicomDate.ts","utils/pubSubServiceInterface.ts","utils/createSeriesMetadata.ts","utils/createStudyMetadata.ts","services/DICOMMetadataStore.ts","hooks/useDebounce.ts","components/DicomTagBrowser/DicomTagBrowser.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Gender',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","// Use symbols to prevent exposing private attributes\nconst _subscriptions = Symbol('subscriptions')\nconst _lastSubscriptionId = Symbol('lastSubscriptionId')\n\n/**\n * Class to enable implementation of publish/subscribe pattern\n * @class\n * @classdesc Enables publishing/subscribing\n */\nexport default class PubSub {\n  constructor () {\n    this[_subscriptions] = {}\n    this[_lastSubscriptionId] = 0\n  }\n\n  /**\n   * Adds a subscription callback to the provided event name\n   * @param {string} eventName Event name that will trigger the callback\n   * @param {Function} callback Function to be executed when event is published\n   * @returns {void}\n   */\n  subscribe (eventName, callback) {\n    if (eventName === undefined) {\n      throw new Error('Trying to subscribe to an inexistent event')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('The provided callback must be a function')\n    }\n\n    if (!this[_subscriptions].hasOwnProperty(eventName)) {\n      this[_subscriptions][eventName] = {}\n    }\n\n    const subscriptionId = `sub${this[_lastSubscriptionId]++}`\n    this[_subscriptions][eventName][subscriptionId] = callback\n  }\n\n  /**\n   * Removes a subscription callback for the provided event name\n   * @param {string} eventName Event name for the registerd callback\n   * @param {Function} [callback] Function to have its subscription removed\n   * @returns {void}\n   */\n  unsubscribe (eventName, callback) {\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      if (!callback) {\n        delete callbacks[subscriptionId]\n      } else if (callbacks[subscriptionId] === callback) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n\n  /**\n   * Trigger all registered subscription callbacks for a specific event name\n   * @param {String} eventName Event name to trigger subscriptions from\n   * @param {any} [payload] Payload that will be passed to the callback fuction\n   * @returns {void}\n   */\n  publish (eventName, ...payload) {\n    if (eventName === undefined) {\n      throw new Error('Trying to publish an inexistent event')\n    }\n\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      callbacks[subscriptionId](...payload)\n    }\n  }\n\n  /**\n   * Cleares all subscriptions for current instance\n   * @returns {void}\n   */\n  unsubscribeFromAll () {\n    for (const eventName in this[_subscriptions]) {\n      const callbacks = this[_subscriptions][eventName]\n      for (const subscriptionId in callbacks) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n}\n","const errorTypes = {\n  AUTHENTICATION: 'Authentication',\n  COMMUNICATION: 'Communication',\n  ENCODINGANDDECODING: 'EncodingDecoding',\n  VISUALIZATION: 'Visualization'\n}\n\nclass CustomError extends Error {\n  constructor (type, message) {\n    super()\n    this.message = message\n    this.stack = new Error().stack\n    this.type = type\n  }\n}\n\nexport { errorTypes, CustomError }\n","import PubSub from '../utils/PubSub'\nimport { notification } from 'antd'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nexport const NotificationMiddlewareEvents = {\n  OnError: 'onError',\n  OnWarning: 'onWarning'\n}\n\nexport const NotificationMiddlewareContext = {\n  DICOMWEB: 'dicomweb-client',\n  DMV: 'dicom-microscopy-viewer',\n  DCMJS: 'dcmjs',\n  SLIM: 'slim',\n  AUTH: 'authentication'\n}\n\nconst NotificationType = {\n  TOAST: 'toast',\n  CONSOLE: 'console'\n}\n\n/* Sources of Error:\n  1. 'dicomweb-client': Error while requesting/fetching data, tagged as 'Communication'\n  2. 'slim' and 'dicom-microscopy-viewer' library: Error related to dicom data encoding/decoding,\n  could directly/indirectly impact image-related visualization, tagged as 'Visualization' or\n  'Encoding/Decoding' accordingly\n  3. 'dcmjs' library: Data parsing error, tagged as 'DICOMError'\n  4. 'authentication': Error during user authentication, tagged as 'Authentication'\n  */\nconst NotificationSourceDefinition = {\n  sources: [\n    {\n      category: errorTypes.AUTHENTICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.COMMUNICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.VISUALIZATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.ENCODINGANDDECODING,\n      notificationType: NotificationType.CONSOLE\n    },\n    {\n      category: 'Warning',\n      notificationType: NotificationType.TOAST\n    }\n  ]\n}\n\nclass NotificationMiddleware extends PubSub {\n  constructor () {\n    super()\n\n    const outerContext = (args) => {\n      this.publish(NotificationMiddlewareEvents.OnWarning, Array.from(args).join(' '))\n    }\n\n    (function () {\n      const warn = console.warn\n      console.warn = function () {\n        if (!JSON.stringify(arguments).includes('request')) {\n          outerContext(arguments)\n        }\n        warn.apply(this, Array.prototype.slice.call(arguments))\n      }\n    }())\n  }\n\n  /**\n   * Error handling middleware function\n   *\n   * @param source - source of error - dicomweb-client, dmv, dcmjs or slim itself\n   * @param error - error object\n   */\n  onError (source, error) {\n    const errorCategory = error.type\n    const sourceConfig = NotificationSourceDefinition.sources.find(\n      s => s.category === errorCategory\n    )\n\n    const { notificationType } = sourceConfig\n\n    this.publish(NotificationMiddlewareEvents.OnError, {\n      source,\n      error\n    })\n\n    let notificationMsg\n    if (error instanceof CustomError) {\n      notificationMsg = error.message\n    } else {\n      notificationMsg = String(error)\n    }\n\n    switch (notificationType) {\n      case NotificationType.TOAST:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        return notification.error({\n          message: `${errorCategory} error`,\n          description: notificationMsg,\n          duration: 3\n        })\n\n      case NotificationType.CONSOLE:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        break\n\n      default:\n    }\n  }\n}\n\nexport default new NotificationMiddleware()\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          disableInteractions: true,\n          metadata,\n          resizeFactor: 1,\n          errorInterceptor: (error: CustomError) => {\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.DMV,\n              error\n            )\n          }\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n    const attributes = []\n    const description = this.props.slide.description\n    if (description != null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ height: '100px' }} ref={this.overviewViewportRef} />\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: ({ roiUID }: { roiUID: string }) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection({ roiUID: object.key })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color,\n          limitValues: this.state.currentStyle.limitValues\n        }\n      })\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      uid: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value != null && option.children != null) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      },\n      {\n        name: 'Annotation coordinate type',\n        value: this.props.metadata.AnnotationCoordinateType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const measurementOptions = measurementsSequence.map((measurementItem, i) => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      return (\n        <Select.Option\n          key={i}\n          value={`${name.CodingSchemeDesignator}-${name.CodeValue}`}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    })\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        <></>\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>\n            Color\n          </Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Red\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Green\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Blue\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues != null) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>\n            Exploration\n          </Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>\n              Measurement\n            </Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible = (\n      this.state.isVisible && this.state.currentStyle.measurement == null\n    )\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Badge\n            offset={[-20, 20]}\n            count={' '}\n            style={{\n              borderStyle: 'solid',\n              borderWidth: '1px',\n              borderColor: 'gray',\n              visibility: isBadgeVisible ? 'visible' : 'hidden',\n              backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n            }}\n          >\n            <Description\n              header={this.props.annotationGroup.label}\n              attributes={attributes}\n              selectable\n              hasLongValues\n            />\n          </Badge>\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<AnnotationGroupListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.ENCODINGANDDECODING,\n        'Content item \"Imaging Measurements\" not found.' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\".'\n      )\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Tracking Unique Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Finding\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Image Region\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: any\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Content item \"Image Region\" has unknown graphic type ' +\n            `\"${regionItem.GraphicType}\". ` +\n            'Content of Comprehensive 3D SR document is not structured ' +\n            'based on TID 1500 \"Measurement Report\" -> ' +\n            'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n          )\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen UID\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Container Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number | null\n  ): void {\n    if (value != null) {\n      const identifier = this.props.opticalPath.identifier\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { opacity: value }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          color: state.currentStyle.color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: value,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    try {\n      specimenDescriptions.forEach(description => {\n        const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] =\n          description.SpecimenPreparationSequence ?? []\n        specimenPreparationSteps.forEach(\n          (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n            step.SpecimenPreparationStepContentItemSequence.forEach((\n              item: (\n                dcmjs.sr.valueTypes.CodeContentItem |\n                dcmjs.sr.valueTypes.TextContentItem |\n                dcmjs.sr.valueTypes.UIDRefContentItem |\n                dcmjs.sr.valueTypes.PNameContentItem |\n                dcmjs.sr.valueTypes.DateTimeContentItem\n              ),\n              index: number\n            ) => {\n              const name = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptNameCodeSequence[0].CodeValue,\n                schemeDesignator:\n                    item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n              })\n              if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n                item = item as dcmjs.sr.valueTypes.CodeContentItem\n                const value = new dcmjs.sr.coding.CodedConcept({\n                  value: item.ConceptCodeSequence[0].CodeValue,\n                  schemeDesignator:\n                      item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                  meaning: item.ConceptCodeSequence[0].CodeMeaning\n                })\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: value.CodeMeaning\n                    })\n                  }\n                }\n              } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n                item = item as dcmjs.sr.valueTypes.TextContentItem\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: item.TextValue\n                    })\n                  }\n                }\n              }\n            })\n          }\n        )\n      })\n    } catch (error: any) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DCMJS,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          error.message\n        )\n      )\n    }\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        mappingUID: this.props.mapping.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: value\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({ currentStyle: { opacity: value } })\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","import React from 'react'\nimport { Checkbox, Col, Divider, InputNumber, Row, Slider } from 'antd'\n\ninterface ColorSettingsMenuProps {\n  annotationGroupsUIDs: string[]\n  defaultStyle: {\n    opacity: number\n    color: number[]\n    contourOnly: boolean\n  }\n  onStyleChange: Function\n}\n\ninterface ColorSettingsMenuState {\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    contourOnly: boolean\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass ColorSettingsMenu extends React.Component<\nColorSettingsMenuProps,\nColorSettingsMenuState\n> {\n  constructor (props: ColorSettingsMenuProps) {\n    super(props)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        contourOnly: this.props.defaultStyle.contourOnly\n      }\n    }\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: this.state.currentStyle.color,\n            opacity: value,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n      this.updateCurrentStyle({ opacity: value })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleShowOutlineOnly (value: boolean): void {\n    this.updateCurrentStyle({ contourOnly: value })\n\n    this.props.annotationGroupsUIDs.forEach((uid) => {\n      this.props.onStyleChange({\n        uid,\n        styleOptions: {\n          color: this.state.currentStyle.color,\n          opacity: this.state.currentStyle.opacity,\n          contourOnly: value\n        }\n      })\n    })\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  updateCurrentStyle ({\n    color,\n    opacity,\n    contourOnly\n  }: {\n    color?: number[]\n    opacity?: number\n    contourOnly?: boolean\n  }): void {\n    this.setState((state) => ({\n      currentStyle: {\n        opacity: opacity ?? state.currentStyle.opacity,\n        color: color ?? state.currentStyle.color,\n        contourOnly: contourOnly ?? state.currentStyle.contourOnly\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    return (\n      <div>\n        {colorSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Checkbox\n            value={this.state.currentStyle.contourOnly}\n            onChange={(event) =>\n              this.handleShowOutlineOnly(event.target.checked)}\n          >\n            Show outline only\n          </Checkbox>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default ColorSettingsMenu\n","import React from 'react'\nimport { Menu, Space, Checkbox, Tooltip, Popover, Button } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { Category, Type } from './AnnotationCategoryList'\nimport ColorSettingsMenu from './ColorSettingsMenu'\n\nconst AnnotationCategoryItem = ({\n  category,\n  onChange,\n  checkedAnnotationUids,\n  onStyleChange,\n  defaultAnnotationStyles,\n  ...props\n}: {\n  category: Category\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const { types } = category\n\n  const onCheckCategoryChange = (e: any): void => {\n    const isVisible = e.target.checked\n    types.forEach((type: Type) => {\n      handleChangeCheckedType({ type, isVisible })\n    })\n  }\n\n  const checkAll = types.every((type: Type) =>\n    type.uids.every((uid: string) => checkedAnnotationUids.has(uid))\n  )\n  const indeterminate =\n    !checkAll &&\n    types.some((type: Type) =>\n      type.uids.some((uid: string) => checkedAnnotationUids.has(uid))\n    )\n\n  const handleChangeCheckedType = ({\n    type,\n    isVisible\n  }: {\n    type: Type\n    isVisible: boolean\n  }): void => {\n    type.uids.forEach((uid: string) => {\n      onChange({ roiUID: uid, isVisible })\n    })\n  }\n\n  return (\n    <Menu.Item\n      style={{ height: '100%', paddingLeft: '3px' }}\n      {...props}\n    >\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px', color: 'black' }}>\n          <Space direction='vertical' align='end'>\n            <Checkbox\n              indeterminate={indeterminate}\n              checked={checkAll}\n              onChange={onCheckCategoryChange}\n            >\n              <Tooltip\n                title={`${category.CodeValue}:${category.CodingSchemeDesignator}`}\n                mouseEnterDelay={1}\n              >\n                {category.CodeMeaning}\n              </Tooltip>\n              <Popover\n                placement='topLeft'\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n                content={() => (\n                  <ColorSettingsMenu\n                    annotationGroupsUIDs={types.reduce(\n                      (acc: string[], type) => {\n                        return [...acc, ...type.uids]\n                      },\n                      []\n                    )}\n                    onStyleChange={onStyleChange}\n                    defaultStyle={\n                      defaultAnnotationStyles[types[0].uids[0]]\n                    }\n                  />\n                )}\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  style={{ marginLeft: '10px' }}\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Checkbox>\n          </Space>\n          {types.map((type: Type) => {\n            const { CodeMeaning, CodingSchemeDesignator, CodeValue, uids } =\n              type\n            const shortenedCodeMeaning = CodeMeaning.slice(0, 22)\n            const displayCodeMeaning = shortenedCodeMeaning === CodeMeaning ? CodeMeaning : `${shortenedCodeMeaning}...`\n            const isChecked = uids.every((uid: string) =>\n              checkedAnnotationUids.has(uid)\n            )\n            const indeterminateType =\n              !isChecked &&\n              uids.some((uid: string) => checkedAnnotationUids.has(uid))\n            return (\n              <div\n                key={`${type.CodingSchemeDesignator}:${type.CodeMeaning}`}\n                style={{\n                  paddingLeft: '25px',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'row'\n                }}\n              >\n                <Checkbox\n                  indeterminate={indeterminateType}\n                  checked={isChecked}\n                  onChange={(e: any) =>\n                    handleChangeCheckedType({\n                      type,\n                      isVisible: e.target.checked\n                    })}\n                />\n                <div style={{ paddingLeft: '5px' }}>\n                  <Tooltip\n                    title={`${CodeValue}:${CodingSchemeDesignator}`}\n                    mouseEnterDelay={1}\n                  >\n                    {displayCodeMeaning}\n                  </Tooltip>\n                  <Popover\n                    placement='topLeft'\n                    overlayStyle={{ width: '350px' }}\n                    title='Display Settings'\n                    content={() => (\n                      <ColorSettingsMenu\n                        annotationGroupsUIDs={type.uids}\n                        onStyleChange={onStyleChange}\n                        defaultStyle={defaultAnnotationStyles[type.uids[0]]}\n                      />\n                    )}\n                  >\n                    <Button\n                      type='primary'\n                      shape='circle'\n                      style={{ marginLeft: '10px' }}\n                      icon={<SettingOutlined />}\n                    />\n                  </Popover>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </Space>\n    </Menu.Item>\n  )\n}\n\nexport default AnnotationCategoryItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport AnnotationCategoryItem from './AnnotationCategoryItem'\n\nexport interface AnnotationCategoryAndType {\n  uid: string\n  type: Omit<Type, 'uids'>\n  category: Omit<Category, 'types'>\n}\nexport interface Type {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  uids: string[]\n}\nexport interface Category {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  types: Type[]\n}\n\nconst getCategories = (annotations: any): Record<string, Category> => {\n  const categories = annotations?.reduce(\n    (\n      categoriesAcc: Record<string, Category & { types: Record<string, Type> }>,\n      annotation: AnnotationCategoryAndType\n    ) => {\n      const { category, type, uid } = annotation\n      const categoryKey = category.CodeMeaning\n      const typeKey = type.CodeMeaning\n\n      const oldCategory = categoriesAcc[categoryKey] ?? {\n        ...category,\n        types: {}\n      }\n      const oldType = oldCategory.types[typeKey] ?? {\n        ...type,\n        uids: []\n      }\n\n      return {\n        ...categoriesAcc,\n        [categoryKey]: {\n          ...oldCategory,\n          types: {\n            ...oldCategory.types,\n            [typeKey]: { ...oldType, uids: [...oldType.uids, uid] }\n          }\n        }\n      }\n    },\n    {}\n  )\n\n  // Normalizing types so that it's an array instead of an object:\n  Object.keys(categories).forEach((categoryKey: string) => {\n    const category = categories[categoryKey]\n    const { types } = category\n    const typesArr = Object.keys(types).map(\n      (typeKey: string) => types[typeKey]\n    )\n    categories[categoryKey].types = typesArr\n  })\n\n  return categories\n}\n\nconst AnnotationCategoryList = ({\n  annotations,\n  onChange,\n  onStyleChange,\n  defaultAnnotationStyles,\n  checkedAnnotationUids\n}: {\n  annotations: AnnotationCategoryAndType[]\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const categories: Record<string, Category> = getCategories(annotations)\n\n  if (Object.keys(categories).length === 0) {\n    return <></>\n  }\n\n  const items = Object.keys(categories).map((categoryKey: string) => {\n    const category = categories[categoryKey]\n    return (\n      <AnnotationCategoryItem\n        key={category.CodeMeaning !== '' ? category.CodeMeaning : `category-${categoryKey}`}\n        category={category}\n        onChange={onChange}\n        onStyleChange={onStyleChange}\n        defaultAnnotationStyles={defaultAnnotationStyles}\n        checkedAnnotationUids={checkedAnnotationUids}\n      />\n    )\n  })\n\n  return <Menu selectable={false}>{items}</Menu>\n}\nexport default AnnotationCategoryList\n","const HoveredRoiTooltip = ({\n  xPosition,\n  yPosition,\n  rois\n}: {\n  xPosition: number\n  yPosition: number\n  rois: Array<{ index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n}): JSX.Element => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: `${yPosition}px`,\n        left: `${xPosition}px`,\n        backgroundColor: 'rgba(230, 230, 230, 0.65)',\n        minWidth: '150px',\n        minHeight: '60px',\n        padding: '20px',\n        fontWeight: 'bold',\n        pointerEvents: 'none'\n      }}\n    >\n      {rois.map((roi, i) => {\n        const attributes = roi.attributes\n        return (\n          <div key={roi.roiUid}>\n            <span>ROI {roi.index}</span>\n            {attributes.map((attr) => {\n              return (\n                <div key={attr.name + roi.roiUid}>\n                  {attr.name}: <span style={{ fontWeight: 500 }}>{attr.value}</span>\n                </div>\n              )\n            })}\n          </div>\n\n        )\n      })}\n    </div>\n  )\n}\n\nexport default HoveredRoiTooltip\n","import * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { AnnotationCategoryAndType } from '../components/AnnotationCategoryList'\n\nexport const adaptRoiToAnnotation = (roi: dmv.roi.ROI): AnnotationCategoryAndType => {\n  const { uid, evaluations } = roi\n\n  const result = {\n    category: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    },\n    type: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    }\n  }\n\n  evaluations.forEach((\n    item: (\n      dcmjs.sr.valueTypes.TextContentItem |\n      dcmjs.sr.valueTypes.CodeContentItem\n    )\n  ) => {\n    const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n    if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n      const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n      const value = codeContentItem.ConceptCodeSequence[0]\n      // For consistency with Segment and Annotation Group\n      if (nameValue === '276214006') {\n        result.category = { ...value }\n      } else if (nameValue === '121071') {\n        result.type = { ...value }\n      }\n    }\n  })\n\n  return {\n    ...result,\n    uid\n  }\n}\n","import React from 'react'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  Descriptions,\n  Divider,\n  InputNumber,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space,\n  Tooltip\n} from 'antd'\nimport { UndoOutlined, CheckOutlined, StopOutlined } from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Equipment from './Equipment'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { findContentItemsByName } from '../utils/sr'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport AnnotationCategoryList from './AnnotationCategoryList'\nimport HoveredRoiTooltip from './HoveredRoiTooltip'\nimport { adaptRoiToAnnotation } from '../services/RoiToAnnotationAdapter'\n\nconst DEFAULT_ROI_STROKE_COLOR: number[] = [255, 234, 0] // [0, 126, 163]\nconst DEFAULT_ROI_FILL_COLOR: number[] = [255, 234, 0, 0.2] // [0, 126, 163, 0.2]\nconst DEFAULT_ROI_STROKE_WIDTH: number = 2\nconst DEFAULT_ROI_RADIUS: number = 5\n\nconst DEFAULT_ANNOTATION_OPACITY = 0.4\nconst DEFAULT_ANNOTATION_STROKE_COLOR = [0, 0, 0]\nconst DEFAULT_ANNOTATION_COLOR_PALETTE = [\n  [255, 0, 0],\n  [0, 255, 0],\n  [0, 0, 255],\n  [255, 255, 0],\n  [0, 255, 255],\n  [0, 0, 0]\n]\n\nconst _buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    console.warn(`no finding found for ROI ${roi.uid}`)\n    return\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: DEFAULT_ROI_STROKE_COLOR,\n    width: DEFAULT_ROI_STROKE_WIDTH\n  }\n  if (style.stroke != null) {\n    if (style.stroke.color != null) {\n      stroke.color = style.stroke.color\n    }\n    if (style.stroke.width != null) {\n      stroke.width = style.stroke.width\n    }\n  }\n  const fill = {\n    color: DEFAULT_ROI_FILL_COLOR\n  }\n  if (style.fill != null) {\n    if (style.fill.color != null) {\n      fill.color = style.fill.color\n    }\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius != null\n          ? style.radius\n          : Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n\nconst _constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      preload: preload,\n      errorInterceptor: (error: CustomError) => {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DMV, error\n        )\n      }\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical',\n        errorInterceptor: (error: CustomError) => {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.DMV,\n            error\n          )\n        }\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'Failed to instantiate viewer'\n      )\n    )\n    throw error\n  }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface Measurement {\n  name: dcmjs.sr.coding.CodedConcept\n  value?: number\n  unit: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n  derivedDataset?: dmv.metadata.Dataset // Add this line\n}\n\ninterface SlideViewerState {\n  visibleRoiUIDs: Set<string>\n  visibleSegmentUIDs: Set<string>\n  visibleMappingUIDs: Set<string>\n  visibleAnnotationGroupUIDs: Set<string>\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  selectedRoi?: dmv.roi.ROI\n  selectedRoiUIDs: Set<string>\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isSelectedRoiModalVisible: boolean\n  isHoveredRoiTooltipVisible: boolean\n  hoveredRoiAttributes: Array<{index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n  hoveredRoiTooltipX: number\n  hoveredRoiTooltipY: number\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  isGoToModalVisible: boolean\n  isSelectedMagnificationValid: boolean\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  selectedXCoordinate?: number\n  validXCoordinateRange: number[]\n  selectedYCoordinate?: number\n  validYCoordinateRange: number[]\n  selectedMagnification?: number\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n  loadingFrames: Set<string>\n  isICCProfilesEnabled: boolean\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private hoveredRois = [] as dmv.roi.ROI[]\n\n  private lastPixel = [0, 0] as [number, number]\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  } = {}\n\n  private readonly selectionColor: number[] = [140, 184, 198]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\n    fill: { color: [...this.selectionColor, 0.2] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = _formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n\n    this.onWindowResize = this.onWindowResize.bind(this)\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleRoiSelectionCancellation = this.handleRoiSelectionCancellation.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleRoiStyleChange = this.handleRoiStyleChange.bind(this)\n    this.handleGoTo = this.handleGoTo.bind(this)\n    this.handleXCoordinateSelection = this.handleXCoordinateSelection.bind(this)\n    this.handleYCoordinateSelection = this.handleYCoordinateSelection.bind(this)\n    this.handleMagnificationSelection = this.handleMagnificationSelection.bind(this)\n    this.handleSlidePositionSelection = this.handleSlidePositionSelection.bind(this)\n    this.handleSlidePositionSelectionCancellation = this.handleSlidePositionSelectionCancellation.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n    this.handleICCProfilesToggle = this.handleICCProfilesToggle.bind(this)\n\n    const { volumeViewer, labelViewer } = _constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isHoveredRoiTooltipVisible: false,\n      hoveredRoiTooltipX: 0,\n      hoveredRoiTooltipY: 0,\n      hoveredRoiAttributes: [],\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set(),\n      isICCProfilesEnabled: true\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current != null) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        if (this.labelViewportRef.current != null) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance, index) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                this.props.selectedPresentationStateUID == null\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Presentation State could not be loaded'\n            )\n          )\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Presentation State could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID != null\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key == null) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  loadDerivedDataset = (derivedDataset: dmv.metadata.Dataset): void => {\n    console.debug('Loading derived dataset')\n    const Comprehensive3DSR = '1.2.840.10008.5.1.4.1.1.88.34'\n    const MicroscopyBulkSimpleAnnotation = '1.2.840.10008.5.1.4.1.1.88.24'\n    const Segmentation = '1.2.840.10008.5.1.4.1.1.66.4'\n    const ParametricMap = '1.2.840.10008.5.1.4.1.1.88.22'\n    const OpticalPath = '1.2.840.10008.5.1.4.1.1.88.21'\n    if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Comprehensive3DSR) {\n      const allRois = this.volumeViewer.getAllROIs()\n      allRois.forEach((roi) => {\n        this.handleAnnotationVisibilityChange({ roiUID: roi.uid, isVisible: true })\n      })\n      console.debug('Loading Comprehensive 3D SR')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === MicroscopyBulkSimpleAnnotation) {\n      const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      allAnnotationGroups.forEach((annotationGroup) => {\n        this.handleAnnotationGroupVisibilityChange({ annotationGroupUID: annotationGroup.uid, isVisible: true })\n      })\n      console.debug('Loading Microscopy Bulk Simple Annotation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Segmentation) {\n      const allSegments = this.volumeViewer.getAllSegments()\n      allSegments.forEach((segment) => {\n        this.handleSegmentVisibilityChange({ segmentUID: segment.uid, isVisible: true })\n      })\n      console.debug('Loading Segmentation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === ParametricMap) {\n      const allParameterMappings = this.volumeViewer.getAllParameterMappings()\n      allParameterMappings.forEach((parameterMapping) => {\n        this.handleMappingVisibilityChange({ mappingUID: parameterMapping.uid, isVisible: true })\n      })\n      console.debug('Loading Parametric Map')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === OpticalPath) {\n      const allOpticalPaths = this.volumeViewer.getAllOpticalPaths()\n      allOpticalPaths.forEach((opticalPath) => {\n        this.handleOpticalPathVisibilityChange({ opticalPathIdentifier: opticalPath.identifier, isVisible: true })\n      })\n      console.debug('Loading Optical Path')\n    }\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  async addAnnotations (): Promise<void> {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Comprehensive 3D SR instances')\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.searchForInstances({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SR'\n        }\n      }).then((matchedInstances): void => {\n        if (matchedInstances == null) {\n          matchedInstances = []\n        }\n        matchedInstances.forEach(i => {\n          const { dataset } = dmv.metadata.formatMetadata(i)\n          const instance = dataset as dmv.metadata.Instance\n          if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n            console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n            client.retrieveInstance({\n              studyInstanceUID: this.props.studyInstanceUID,\n              seriesInstanceUID: instance.SeriesInstanceUID,\n              sopInstanceUID: instance.SOPInstanceUID\n            }).then((retrievedInstance): void => {\n              const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n              const { dataset } = dmv.metadata.formatMetadata(data.dict)\n              const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n              /*\n              * Perform a couple of checks to ensure the document content of the\n              * report fullfils the requirements of the application.\n              */\n              if (!_implementsTID1500(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it is not structured according to template ' +\n                  'TID 1500 \"MeasurementReport\"'\n                )\n                return\n              }\n              if (!_describesSpecimenSubject(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not describe a specimen subject'\n                )\n                return\n              }\n              if (!_containsROIAnnotations(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not contain any suitable ROI annotations'\n                )\n                return\n              }\n\n              const content = new MeasurementReport(report)\n              content.ROIs.forEach(roi => {\n                console.info(`add ROI \"${roi.uid}\"`)\n                const scoord3d = roi.scoord3d\n                const image = this.props.slide.volumeImages[0]\n                if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                  /*\n                  * ROIs may get assigned new UIDs upon re-rendering of the\n                  * page and we need to ensure that we don't add them twice.\n                  * The same ROI may be stored in multiple SR documents and\n                  * we don't want them to show up twice.\n                  * TODO: We should probably either \"merge\" measurements and\n                  * quantitative evaluations or pick the ROI from the \"best\"\n                  * available report (COMPLETE and VERIFIED).\n                  */\n                  const doesROIExist = this.volumeViewer.getAllROIs().some(\n                    (otherROI: dmv.roi.ROI): boolean => {\n                      return _areROIsEqual(otherROI, roi)\n                    }\n                  )\n                  if (!doesROIExist) {\n                    try {\n                      // Add ROI without style such that it won't be visible.\n                      this.volumeViewer.addROI(roi, {})\n                    } catch {\n                      console.error(`could not add ROI \"${roi.uid}\"`)\n                    }\n                  } else {\n                    console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(\n                    `skip ROI \"${roi.uid}\" ` +\n                    `of SR document \"${report.SOPInstanceUID}\"` +\n                    'because it is defined in another frame of reference'\n                  )\n                }\n              })\n\n              resolve()\n            }).catch((error) => {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Annotations could not be loaded'\n                )\n              )\n              console.error(\n                'failed to load ROIs ' +\n                `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n                `of series \"${instance.SeriesInstanceUID}\" ` +\n                `of study \"${this.props.studyInstanceUID}\": `,\n                error\n              )\n            })\n            /*\n            * React is not aware of the fact that ROIs have been added via the\n            * viewer (the viewport is a ref object) and won't show the\n            * annotations in the user interface unless an update is forced.\n            */\n            this.forceUpdate()\n          }\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Annotations could not be loaded'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Microscopy Bulk Simple Annotations instances')\n      const client = this.props.clients[\n        StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n      ]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'ANN'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[] = retrievedMetadata.map(metadata => {\n              return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n                metadata\n              })\n            })\n            // annotations = annotations.filter(ann => {\n            //   const refImage = this.props.slide.volumeImages[0]\n            //   return (\n            //     ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n            //     ann.ContainerIdentifier === refImage.ContainerIdentifier\n            //   )\n            // })\n            annotations.forEach(ann => {\n              try {\n                this.volumeViewer.addAnnotationGroups(ann)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Microscopy Bulk Simple Annotations cannot be displayed.'\n                  )\n                )\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                console.error('failed to add annotation groups:', error)\n              }\n              ann.AnnotationGroupSequence.forEach(item => {\n                const annotationGroupUID = item.AnnotationGroupUID\n                const finding = item.AnnotationPropertyTypeCodeSequence[0]\n                const key = _buildKey(finding)\n                const style = this.roiStyles[key]\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                if (style != null && style.fill != null) {\n                  this.volumeViewer.setAnnotationGroupStyle(\n                    annotationGroupUID,\n                    { color: style.fill.color }\n                  )\n                }\n              })\n            })\n            /*\n            * React is not aware of the fact that annotation groups have been\n            * added via the viewer (the underlying HTML viewport element is a\n            * ref object) and won't show the annotation groups in the user\n            * interface unless an update is forced.\n            */\n            this.forceUpdate()\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n                'instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Microscopy Bulk Simple Annotations instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Segmentation instances')\n      const client = this.props.clients[StorageClasses.SEGMENTATION]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SEG'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach((s, i) => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const segmentations: dmv.metadata.Segmentation[] = []\n            retrievedMetadata.forEach(metadata => {\n              const seg = new dmv.metadata.Segmentation({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                seg.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                segmentations.push(seg)\n              }\n            })\n            if (segmentations.length > 0) {\n              try {\n                this.volumeViewer.addSegments(segmentations)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Segmentations cannot be displayed'\n                  )\n                )\n                console.error('failed to add segments: ', error)\n              }\n              /*\n              * React is not aware of the fact that segments have been added via\n              * the viewer (the underlying HTML viewport element is a ref object)\n              * and won't show the segments in the user interface unless an update\n              * is forced.\n              */\n              this.forceUpdate()\n            }\n\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Segmentation instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Segmentation instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Parametric Map instances')\n      const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'OT'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const parametricMaps: dmv.metadata.ParametricMap[] = []\n            retrievedMetadata.forEach(metadata => {\n              const pm = new dmv.metadata.ParametricMap({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                pm.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                parametricMaps.push(pm)\n              } else {\n                console.warn(\n                  `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n                )\n              }\n            })\n            if (parametricMaps.length > 0) {\n              try {\n                this.volumeViewer.addParameterMappings(parametricMaps)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Parametric Map cannot be displayed'\n                  )\n                )\n                console.error('failed to add mappings: ', error)\n              }\n              /*\n               * React is not aware of the fact that mappings have been added via\n               * the viewer (the underlying HTML viewport element is a ref object)\n               * and won't show the mappings in the user interface unless an update\n               * is forced.\n               */\n              this.forceUpdate()\n            }\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Parametric Map instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Parametric Map instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    // Handle promises properly with catch blocks\n    void this.addAnnotations()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotations:', error)\n      })\n\n    void this.addAnnotationGroups()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotation groups:', error)\n      })\n\n    void this.addSegmentations()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add segmentations:', error)\n      })\n\n    void this.addParametricMaps()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add parametric maps:', error)\n      })\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer != null) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiDoubleClicked = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi != null) {\n      this.setState({\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  setHoveredRoiAttributes = (hoveredRois: dmv.roi.ROI[]): void => {\n    const rois = this.volumeViewer.getAllROIs()\n    if (rois.length === 0) {\n      this.setState({ hoveredRoiAttributes: [] })\n      return\n    }\n\n    const result = hoveredRois.map((roi) => {\n      const attributes: Array<{ name: string, value: string }> = []\n      const evaluations = roi.evaluations\n      evaluations.forEach((\n        item: (\n          dcmjs.sr.valueTypes.TextContentItem |\n          dcmjs.sr.valueTypes.CodeContentItem\n        )\n      ) => {\n        const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n        const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n        const name = `${nameMeaning}`\n        if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n          const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n          // For consistency with Segment and Annotation Group\n          if (nameValue === '276214006') {\n            attributes.push({\n              name: 'Property category',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '121071') {\n            attributes.push({\n              name: 'Property type',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '111001') {\n            attributes.push({\n              name: 'Algorithm Name',\n              value: `${valueMeaning}`\n            })\n          } else {\n            attributes.push({\n              name: name,\n              value: `${valueMeaning}`\n            })\n          }\n        } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n          const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n          attributes.push({\n            name: name,\n            value: textContentItem.TextValue\n          })\n        }\n      })\n\n      const index = (rois.findIndex((r) => r.uid === roi.uid) ?? 0) + 1\n      return { index, roiUid: roi.uid, attributes }\n    }, [] as Array<dcmjs.sr.valueTypes.CodeContentItem | dcmjs.sr.valueTypes.TextContentItem>)\n\n    this.setState({ hoveredRoiAttributes: result })\n  }\n\n  clearHoveredRois = (): void => {\n    this.hoveredRois = [] as any\n  }\n\n  getUniqueHoveredRois = (newRoi: dmv.roi.ROI | null): dmv.roi.ROI[] => {\n    if (newRoi == null) {\n      return []\n    }\n    const allRois = [...this.hoveredRois, newRoi]\n    const uniqueIds = Array.from(new Set(allRois.map(roi => roi.uid)))\n    return uniqueIds.map(id => allRois.find(roi => roi.uid === id))\n      .filter((roi): roi is dmv.roi.ROI => roi !== undefined)\n  }\n\n  isSamePixelAsLast = (event: any): boolean => {\n    return event.clientX === this.lastPixel[0] && event.clientY === this.lastPixel[1]\n  }\n\n  onPointerMove = (event: CustomEventInit): void => {\n    const { feature: hoveredRoi, event: evt } = event.detail.payload\n    const originalEvent = evt.originalEvent\n\n    if (!this.isSamePixelAsLast(originalEvent)) {\n      this.lastPixel = [originalEvent.clientX, originalEvent.clientY]\n      this.clearHoveredRois()\n    }\n\n    this.hoveredRois = this.getUniqueHoveredRois(hoveredRoi)\n\n    if (this.hoveredRois.length > 0) {\n      this.setHoveredRoiAttributes(this.hoveredRois)\n      this.setState({\n        isHoveredRoiTooltipVisible: true,\n        hoveredRoiTooltipX: originalEvent.clientX,\n        hoveredRoiTooltipY: originalEvent.clientY\n      })\n    } else {\n      this.setState({\n        isHoveredRoiTooltipVisible: false\n      })\n    }\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI | null\n    if (selectedRoi == null) {\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        selectedRoi: undefined\n      })\n      return\n    }\n\n    console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n    const oldSelectedRois = Array.from(this.state.selectedRoiUIDs)\n    this.setState({\n      selectedRoiUIDs: new Set([...oldSelectedRois, selectedRoi.uid]),\n      selectedRoi: selectedRoi\n    })\n  }\n\n  handleRoiSelectionCancellation (): void {\n    this.setState({\n      isSelectedRoiModalVisible: false\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load frame')\n  }\n\n  onLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load data')\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    const message = (event.detail?.payload?.message === null ? 'Failed to load data' : event.detail?.payload?.message) as string\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        message\n      ) as any\n    )\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray != null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID == null) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount (): void {\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_error',\n      this.onLoadingError\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_error',\n      this.onFrameLoadingError\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.addEventListener('beforeunload', this.componentCleanup)\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount (): void {\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection (value: any): void {\n    if (value != null) {\n      const x = Number(value)\n      const start = this.state.validXCoordinateRange[0]\n      const end = this.state.validXCoordinateRange[1]\n      if (x >= start && x <= end) {\n        this.setState({\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedXCoordinate: undefined,\n      isSelectedXCoordinateValid: false\n    })\n  }\n\n  handleYCoordinateSelection (value: any): void {\n    if (value != null) {\n      const y = Number(value)\n      const start = this.state.validYCoordinateRange[0]\n      const end = this.state.validYCoordinateRange[1]\n      if (y >= start && y <= end) {\n        this.setState({\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedYCoordinate: undefined,\n      isSelectedYCoordinateValid: false\n    })\n  }\n\n  handleMagnificationSelection (value: any): void {\n    if (value != null) {\n      if (value > 0 && value <= 40) {\n        this.setState({\n          selectedMagnification: Number(value),\n          isSelectedMagnificationValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedMagnification: undefined,\n      isSelectedMagnificationValid: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection (): void {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n      this.state.selectedXCoordinate != null &&\n      this.state.selectedYCoordinate != null &&\n      this.state.selectedMagnification != null\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation (): void {\n    console.log('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      isSelectedMagnificationValid: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Could not complete annotation configuration'\n        )\n      )\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    // Metadata should be sorted such that the image with the highest\n    // resolution is the last item in the array.\n    const refImage = metadata[metadata.length - 1]\n    // We assume that there is only one specimen (tissue section) per\n    // ontainer (slide). Only the tissue section is tracked with a unique\n    // identifier, even if the section may be composed of different biological\n    // samples.\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'More than one specimen has been described for the slide'\n        )\n      )\n    }\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n    console.debug('create Observation Context')\n    let observer\n    if (this.props.user !== undefined) {\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: this.props.user.name,\n        loginName: this.props.user.email\n      })\n    } else {\n      console.warn('no user information available')\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: 'ANONYMOUS'\n      })\n    }\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121006',\n          schemeDesignator: 'DCM',\n          meaning: 'Person'\n        }),\n        observerIdentifyingAttributes: observer\n      }),\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121007',\n          schemeDesignator: 'DCM',\n          meaning: 'Device'\n        }),\n        observerIdentifyingAttributes:\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\n            uid: this.props.app.uid,\n            manufacturerName: 'MGH Computational Pathology',\n            modelName: this.props.app.name\n          })\n      }),\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\n          value: '121027',\n          schemeDesignator: 'DCM',\n          meaning: 'Specimen'\n        }),\n        subjectClassSpecificContext:\n          new dcmjs.sr.templates.SubjectContextSpecimen({\n            uid: refSpecimen.SpecimenUID,\n            identifier: refSpecimen.SpecimenIdentifier,\n            containerIdentifier: refImage.ContainerIdentifier\n          })\n      })\n    })\n\n    console.debug('encode Imaging Measurements')\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\n    for (let i = 0; i < rois.length; i++) {\n      const roi = rois[i]\n      if (!this.state.visibleRoiUIDs.has(roi.uid)) {\n        continue\n      }\n      let findingType = roi.evaluations.find(\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n        }\n      )\n      if (findingType === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            `No finding type was specified for ROI \"${roi.uid}\"`\n          )\n        )\n      }\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.properties.trackingUID ?? roi.uid,\n          identifier: `ROI #${i + 1}`\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: findingType.ConceptCodeSequence[0].CodeValue,\n          schemeDesignator:\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n        }),\n        qualitativeEvaluations: roi.evaluations.filter(\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n          }\n        ),\n        measurements: roi.measurements\n      })\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\n      measurements[0].ContentTemplateSequence = [{\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }]\n      imagingMeasurements.push(...measurements)\n    }\n\n    console.debug('create Measurement Report document content')\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\n      observationContext: observationContext,\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\n        value: '112703',\n        schemeDesignator: 'DCM',\n        meaning: 'Whole Slide Imaging'\n      }),\n      imagingMeasurements: imagingMeasurements\n    })\n\n    console.info('create Comprehensive 3D SR document')\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n      content: measurementReport[0],\n      evidence: [refImage],\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      seriesNumber: 1,\n      seriesDescription: 'Annotation',\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      instanceNumber: 1,\n      manufacturer: 'MGH Computational Pathology',\n      previousVersions: undefined // TODO\n    })\n\n    this.setState({\n      isReportModalVisible: true,\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Annotations could not be saved'\n          )\n        )\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when an annotation has been selected from the\n   * current list of annotations.\n   */\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\n    console.log(`selected ROI ${roiUID}`)\n    this.setState({ selectedRoiUIDs: new Set([roiUID]) })\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (roi.uid === roiUID) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(roi.uid, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Failed to show annotation group.'\n          )\n        )\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void {\n    console.log(`change style of annotation group ${uid}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        uid,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of annotation group.'\n        )\n      )\n      throw error\n    }\n  }\n\n  generateRoiStyle (\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      contourOnly: boolean\n    }): dmv.viewer.ROIStyleOptions {\n    const opacity = styleOptions.opacity ?? DEFAULT_ANNOTATION_OPACITY\n    const strokeColor = styleOptions.color ?? DEFAULT_ANNOTATION_STROKE_COLOR\n    const fillColor = styleOptions.contourOnly ? [0, 0, 0, 0] : strokeColor.map((c) => Math.min(c + 25, 255))\n    const style = _formatRoiStyle({\n      fill: { color: [...fillColor, opacity] },\n      stroke: { color: [...strokeColor, opacity] },\n      radius: this.defaultRoiStyle.stroke?.width\n    })\n    return style\n  }\n\n  handleRoiStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }): void {\n    console.log(`change style of ROI ${uid}`)\n    try {\n      this.defaultAnnotationStyles[uid] = styleOptions\n      const style = this.generateRoiStyle(styleOptions)\n\n      const roi = this.volumeViewer.getROI(uid)\n      const key = _getRoiKey(roi) as string\n      this.roiStyles[key] = style\n      this.volumeViewer.setROIStyle(uid, style)\n      this.state.visibleRoiUIDs.add(uid)\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of ROI.'\n        )\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState (): void {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState != null) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Presentation State could not be found'\n          )\n        )\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (!this.state.areRoisHidden) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  /**\n   * Handler that will toggle the ICC profile color management, i.e., either\n   * enable or disable it, depending on its current state.\n   */\n  handleICCProfilesToggle = (event: CheckboxChangeEvent): void => {\n    const checked = event.target.checked\n    this.setState({ isICCProfilesEnabled: checked })\n    this.volumeViewer.toggleICCProfiles()\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const filteredAnnotationGroups = allAnnotationGroups?.filter((annotationGroup) =>\n      annotationGroup.referencedSeriesInstanceUID === this.props.seriesInstanceUID\n    )\n    annotationGroups.push(...filteredAnnotationGroups)\n\n    const annotations = rois.map(roi => adaptRoiToAnnotation(roi))\n\n    const openSubMenuItems = [\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\n    ]\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map((finding, index) => {\n      return (\n        <Select.Option\n          key={(finding.CodeValue !== undefined && finding.CodeValue !== '') ? finding.CodeValue : `finding-${index}`}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n          placeholder='Select finding'\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach((evaluation, index) => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={(code.CodeValue !== undefined && code.CodeValue !== '') ? code.CodeValue : `evaluation-${index}`}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n            placeholder='Select geometry type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const equipmentMenu = (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach((instance, index) => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={(instance.SOPInstanceUID !== undefined && instance.SOPInstanceUID !== '') ? instance.SOPInstanceUID : `presentation-state-${index}`}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription !== undefined && instance.ContentDescription !== '' ? instance.ContentDescription : 'Untitled'}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={undefined}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          <></>\n        </Select.Option>\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={<UndoOutlined />}\n                type='primary'\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametric-maps')\n    }\n\n    let annotationGroupMenu\n\n    if (annotations.length > 0) {\n      annotations.forEach((annotation) => {\n        const roi = this.volumeViewer.getROI(annotation.uid)\n        const key = _getRoiKey(roi) as string\n        const color = this.roiStyles[key] !== undefined\n          ? this.roiStyles[key].stroke?.color.slice(0, 3)\n          : DEFAULT_ANNOTATION_COLOR_PALETTE[\n            Object.keys(this.roiStyles).length % DEFAULT_ANNOTATION_COLOR_PALETTE.length\n          ]\n        this.defaultAnnotationStyles[annotation.uid] = {\n          color,\n          opacity: DEFAULT_ANNOTATION_OPACITY,\n          contourOnly: false\n        } as any\n\n        this.roiStyles[key] = this.generateRoiStyle(\n          this.defaultAnnotationStyles[annotation.uid]\n        )\n      })\n    }\n\n    if (annotationGroups.length > 0) {\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const defaultAnnotationGroupStyles: {\n        [annotationUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            // when adding annotationGroups to annotationCategory list,\n            // make so that this is uses this.defaultAnnotationStyles later instead of defaultAnnotationGroupStyles\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    const annotationTools = [\n      <Button\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Button\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Button\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Button\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Button\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Button\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Button\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    let cursor = 'default'\n    if (this.state.isLoading) {\n      cursor = 'progress'\n    }\n\n    let selectedRoiInformation\n    if (this.state.selectedRoi != null) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence != null) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit != null) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      selectedRoiInformation = (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n\n    const iccProfilesMenu = this.volumeViewer.getICCProfiles().length > 0 && (\n      <div style={{ margin: '0.9rem' }}>\n        <Checkbox\n          checked={this.state.isICCProfilesEnabled}\n          onChange={this.handleICCProfilesToggle}\n        >\n          ICC Profiles\n        </Checkbox>\n      </div>\n    )\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden',\n              cursor: cursor\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            open={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            okButtonProps={{ disabled: !(this.state.selectedFinding !== undefined && this.state.selectedGeometryType !== undefined) }}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {annotationConfigurations}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isSelectedRoiModalVisible}\n            title='Selected ROI'\n            onCancel={this.handleRoiSelectionCancellation}\n            maskClosable\n            footer={null}\n          >\n            <Space align='start' direction='vertical'>\n              {selectedRoiInformation}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isGoToModalVisible}\n            title='Go to slide position'\n            onOk={this.handleSlidePositionSelection}\n            onCancel={this.handleSlidePositionSelectionCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validXCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validXCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='X Coordinate [mm]'\n                onChange={this.handleXCoordinateSelection}\n                onPressEnter={this.handleXCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedXCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validYCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validYCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='Y Coordinate [mm]'\n                onChange={this.handleYCoordinateSelection}\n                onPressEnter={this.handleYCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedYCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder='[0 - 40]'\n                prefix='Magnification'\n                onChange={this.handleMagnificationSelection}\n                onPressEnter={this.handleMagnificationSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedMagnificationValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n            onOpenChange={() => {\n              // Give menu item time to render before updating viewer size\n              setTimeout(() => {\n                if (this.labelViewer != null) {\n                  this.labelViewer.resize()\n                }\n              }, 100)\n            }}\n          >\n            {this.labelViewportRef.current != null && (\n              <Menu.SubMenu key='label' title='Slide label'>\n                <Menu.Item style={{ height: '100%' }} key='image'>\n                  <div\n                    style={{ height: '220px' }}\n                    ref={this.labelViewportRef}\n                  />\n                </Menu.Item>\n              </Menu.SubMenu>\n            )}\n            {specimenMenu}\n            {iccProfilesMenu}\n            {equipmentMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {annotations.length === 0\n              ? (\n                <></>\n                )\n              : (\n                <Menu.SubMenu\n                  key='annotation-categories'\n                  title='Annotation Categories'\n                >\n                  <AnnotationCategoryList\n                    annotations={annotations}\n                    onChange={this.handleAnnotationVisibilityChange}\n                    checkedAnnotationUids={this.state.visibleRoiUIDs}\n                    onStyleChange={this.handleRoiStyleChange}\n                    defaultAnnotationStyles={this.defaultAnnotationStyles}\n                  />\n                </Menu.SubMenu>\n                )}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n        {this.state.isHoveredRoiTooltipVisible &&\n        this.state.hoveredRoiAttributes.length > 0\n          ? (\n            <HoveredRoiTooltip\n              xPosition={this.state.hoveredRoiTooltipX}\n              yPosition={this.state.hoveredRoiTooltipY}\n              rois={this.state.hoveredRoiAttributes}\n            />\n            )\n          : (\n            <></>\n            )}\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID != null) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null | undefined\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Value of option \"images\" have been non-zero length.'\n        )\n      )\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID != null) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (\n        hasImageFlavor(image, ImageFlavors.VOLUME) ||\n        hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      ) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID != null) {\n          for (const identifier in opticalPathIdentifiers) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n\n    if (volumeImages.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'At least one VOLUME image must be provided for a slide.'\n        )\n      )\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n            'image that has not been resampled per optical path'\n        )\n      }\n    }\n\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All images of a slide must have the same Container Identifier.'\n        )\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must have ' +\n          'the same Frame of Reference UID.'\n        )\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `All VOLUME images for optical path \"${identifier}\"` +\n              'must be part of the same multi-resolution pyramid.'\n            )\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must be part of the same  ' +\n          'acquisition and have the same Acquisition UID.'\n        )\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) => {\n        return (\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n        )\n      })\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import * as dmv from 'dicom-microscopy-viewer'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './NotificationMiddleware'\nimport { createSlides, Slide } from '../data/slides'\n\ninterface FetchImageMetadataParams {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  onSuccess: (slides: Slide[]) => void\n  onError: (error: Error) => void\n}\n\nexport const fetchImageMetadata = async ({\n  clients,\n  studyInstanceUID,\n  onSuccess,\n  onError\n}: FetchImageMetadataParams): Promise<void> => {\n  try {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n\n    const client = clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(\n      matchedSeries.map(async (s) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const loadingSeries = dataset as dmv.metadata.Series\n        console.info(\n          `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n        )\n        const retrievedMetadata = await client.retrieveSeriesMetadata({\n          studyInstanceUID: studyInstanceUID,\n          seriesInstanceUID: loadingSeries.SeriesInstanceUID\n        })\n\n        const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n        retrievedMetadata.forEach((item) => {\n          if (\n            item['00080016']?.Value?.[0] ===\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        })\n\n        if (seriesImages.length > 0) {\n          images.push(seriesImages)\n        }\n      })\n    )\n    const newSlides = createSlides(images)\n    onSuccess(newSlides)\n  } catch (err) {\n    console.error(err)\n    const customError = new CustomError(\n      errorTypes.ENCODINGANDDECODING,\n      'Image metadata could not be retrieved or decoded.'\n    )\n    onError(customError)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      customError\n    )\n  }\n}\n","import { useState, useEffect } from 'react'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\nimport { fetchImageMetadata } from '../services/fetchImageMetadata'\n\ninterface UseSlidesProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\ninterface UseSlidesReturn {\n  slides: Slide[]\n  isLoading: boolean\n  error: Error | null\n}\n\nconst slidesCache = new Map<string, Slide[]>()\nconst pendingRequests = new Map<string, Promise<Slide[]>>()\n\n/**\n * Hook to fetch and manage whole slide microscopy images for a given study.\n * Values are cached so they can be reused if props are not provided.\n *\n * @param props - Hook configuration props\n * @param props.clients - Map of DICOM web clients keyed by storage class\n */\nexport const useSlides = ({ clients, studyInstanceUID }: UseSlidesProps): UseSlidesReturn => {\n  const [slides, setSlides] = useState<Slide[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    if (studyInstanceUID === undefined) {\n      setSlides([])\n      setIsLoading(false)\n      return\n    }\n\n    const cachedData = slidesCache.get(studyInstanceUID)\n    if (cachedData !== undefined) {\n      setSlides(cachedData)\n      setIsLoading(false)\n      return\n    }\n\n    setIsLoading(true)\n\n    const fetchSlides = async (): Promise<void> => {\n      // Check if there's already a pending request for this study\n      let pendingRequest = pendingRequests.get(studyInstanceUID)\n\n      if (pendingRequest === undefined) {\n        // Create a new promise for this request\n        pendingRequest = new Promise((resolve, reject): void => {\n          fetchImageMetadata({\n            clients,\n            studyInstanceUID,\n            onSuccess: (newSlides) => {\n              slidesCache.set(studyInstanceUID, newSlides)\n              resolve(newSlides)\n            },\n            onError: (err) => {\n              reject(err)\n            }\n          }).catch((err) => {\n            reject(err)\n          })\n        })\n        pendingRequests.set(studyInstanceUID, pendingRequest)\n      }\n\n      try {\n        const newSlides = await pendingRequest\n        setSlides(newSlides)\n        setError(null)\n      } catch (err) {\n        setError(err as Error)\n        setSlides([])\n      } finally {\n        pendingRequests.delete(studyInstanceUID)\n        setIsLoading(false)\n      }\n    }\n\n    void fetchSlides()\n  }, [clients, studyInstanceUID])\n\n  return { slides, isLoading, error }\n}\n","import { Routes, Route, useLocation, useParams } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\nimport * as dcmjs from 'dcmjs'\nimport { useEffect, useState } from 'react'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide } from '../data/slides'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { useSlides } from '../hooks/useSlides'\nimport { StorageClasses } from '../data/uids'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface NaturalizedInstance {\n  SeriesInstanceUID: string\n  SOPInstanceUID: string\n  ReferencedSeriesSequence?: Array<{\n    SeriesInstanceUID: string\n  }>\n  ContentSequence?: Array<{\n    ConceptNameCodeSequence: Array<{\n      CodeValue: string\n    }>\n    ContentSequence?: Array<{\n      ContentSequence: Array<{\n        ReferencedSOPSequence: Array<{\n          ReferencedSOPInstanceUID: string\n        }>\n      }>\n    }>\n  }>\n}\n\ninterface ReferencedSlideResult {\n  slide: Slide | undefined\n  metadata: NaturalizedInstance\n}\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID = '', seriesInstanceUID = '' } = useParams<{ studyInstanceUID: string, seriesInstanceUID: string }>()\n  const location = useLocation()\n  const [selectedSlide, setSelectedSlide] = useState(slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  }))\n  const [derivedDataset, setDerivedDataset] = useState<NaturalizedInstance | null>(null)\n\n  useEffect(() => {\n    const findReferencedSlide = async ({ clients, studyInstanceUID, seriesInstanceUID }: {\n      clients: { [key: string]: DicomWebManager }\n      studyInstanceUID: string\n      seriesInstanceUID: string\n    }): Promise<ReferencedSlideResult | null> => await new Promise<ReferencedSlideResult | null>((resolve, reject) => {\n      try {\n        const allClients = Object.values(StorageClasses).map((storageClass) => clients[storageClass])\n        Promise.all(allClients.map(async (client) => {\n          const seriesMetadata = await client.retrieveSeriesMetadata({\n            studyInstanceUID: studyInstanceUID,\n            seriesInstanceUID: seriesInstanceUID\n          })\n          const [naturalizedSeriesMetadata] = seriesMetadata.map((metadata) => naturalizeDataset(metadata)) as NaturalizedInstance[]\n\n          if (naturalizedSeriesMetadata.ReferencedSeriesSequence != null) {\n            const referencedSeriesInstanceUID = naturalizedSeriesMetadata.ReferencedSeriesSequence[0].SeriesInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.seriesInstanceUIDs.find((uid: string) => {\n                return uid === referencedSeriesInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n\n          const IMAGE_LIBRARY_CONCEPT_NAME_CODE = '111028'\n          const imageLibrary = naturalizedSeriesMetadata.ContentSequence?.find(\n            contentItem => contentItem.ConceptNameCodeSequence[0].CodeValue === IMAGE_LIBRARY_CONCEPT_NAME_CODE\n          )\n          if ((imageLibrary?.ContentSequence?.[0]?.ContentSequence?.[0]?.ReferencedSOPSequence?.[0]) != null) {\n            const referencedSOPInstanceUID = imageLibrary.ContentSequence[0].ContentSequence[0].ReferencedSOPSequence[0].ReferencedSOPInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.volumeImages.find((image: { SOPInstanceUID: string }) => {\n                return image.SOPInstanceUID === referencedSOPInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n        })).catch(reject)\n      } catch (error) {\n        reject(error)\n      }\n    })\n\n    if (selectedSlide == null) {\n      void findReferencedSlide({ clients, studyInstanceUID, seriesInstanceUID }).then((result: ReferencedSlideResult | null) => {\n        if (result != null) {\n          setSelectedSlide(result.slide)\n          setDerivedDataset(result.metadata)\n        }\n      }).catch(error => {\n        console.error('Error finding referenced slide:', error)\n      })\n    }\n  }, [slides, clients, selectedSlide, studyInstanceUID, seriesInstanceUID])\n\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string | null | undefined\n  if (!searchParams.has('access_token')) {\n    presentationStateUID = searchParams.get('state')\n    if (presentationStateUID === null) {\n      presentationStateUID = undefined\n    }\n  }\n  let viewer = null\n  if (selectedSlide != null) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n        derivedDataset={derivedDataset}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\nfunction Viewer (props: ViewerProps): JSX.Element | null {\n  const { clients, studyInstanceUID, location, navigate } = props\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n\n  const handleSeriesSelection = ({ seriesInstanceUID }: { seriesInstanceUID: string }): void => {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n\n    if (location.pathname.includes('/projects/')) {\n      urlPath = location.pathname\n      if (!location.pathname.includes('/series/')) {\n        urlPath += `/series/${seriesInstanceUID}`\n      } else {\n        urlPath = urlPath.replace(/\\/series\\/[^/]+/, `/series/${seriesInstanceUID}`)\n      }\n    }\n\n    if (\n      location.pathname.includes('/series/') &&\n      location.search != null\n    ) {\n      urlPath += location.search\n    }\n\n    navigate(urlPath, { replace: true })\n  }\n\n  if (isLoading) {\n    return null\n  }\n\n  if (slides.length === 0) {\n    return null\n  }\n\n  const firstSlide = slides[0]\n  const volumeInstances = firstSlide.volumeImages\n  if (volumeInstances.length === 0) {\n    return null\n  }\n  const refImage = volumeInstances[0]\n\n  /* If a series is encoded in the path, route the viewer to this series.\n   * Otherwise select the first series correspondent to\n   * the first slide contained in the study.\n   */\n  let selectedSeriesInstanceUID: string\n  if (location.pathname.includes('series/')) {\n    const seriesFragment = location.pathname.split('series/')[1]\n    selectedSeriesInstanceUID = seriesFragment.includes('/') ? seriesFragment.split('/')[0] : seriesFragment\n  } else {\n    selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n  }\n\n  let clinicalTrialMenu\n  if (refImage.ClinicalTrialSponsorName != null) {\n    clinicalTrialMenu = (\n      <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n        <ClinicalTrial metadata={refImage} />\n      </Menu.SubMenu>\n    )\n  }\n\n  return (\n    <Layout style={{ height: '100%' }} hasSider>\n      <Layout.Sider\n        width={300}\n        style={{\n          height: '100%',\n          borderRight: 'solid',\n          borderRightWidth: 0.25,\n          overflow: 'hidden',\n          background: 'none'\n        }}\n      >\n        <Menu\n          mode='inline'\n          defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n          style={{ height: '100%' }}\n          inlineIndent={14}\n        >\n          <Menu.SubMenu key='patient' title='Patient'>\n            <Patient metadata={refImage} />\n          </Menu.SubMenu>\n          <Menu.SubMenu key='study' title='Study'>\n            <Study metadata={refImage} />\n          </Menu.SubMenu>\n          {clinicalTrialMenu}\n          <Menu.SubMenu key='slides' title='Slides'>\n            <SlideList\n              clients={props.clients}\n              metadata={slides}\n              selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n              onSeriesSelection={handleSeriesSelection}\n            />\n          </Menu.SubMenu>\n        </Menu>\n      </Layout.Sider>\n\n      <Routes>\n        <Route\n          path='/series/:seriesInstanceUID'\n          element={\n            <ParametrizedSlideViewer\n              clients={props.clients}\n              slides={slides}\n              preload={props.preload}\n              annotations={props.annotations}\n              enableAnnotationTools={props.enableAnnotationTools}\n              app={props.app}\n              user={props.user}\n            />\n          }\n        />\n      </Routes>\n    </Layout>\n  )\n}\n\nexport default withRouter(Viewer)\n","import dcmjs from 'dcmjs'\n\nconst { DicomMetaDictionary } = dcmjs.data\n\ninterface TagInfo {\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TagInfo[]\n  level: number\n}\n\nexport interface DicomTag {\n  name: string\n  vr: string\n  Value?: any[]\n  [key: string]: any\n}\n\nconst formatValue = (val: any): string => {\n  if (typeof val === 'object' && val !== null) {\n    return JSON.stringify(val)\n  }\n  return String(val)\n}\n\nexport const formatTagValue = (tag: DicomTag): string => {\n  if (tag.Value == null) return ''\n\n  if (Array.isArray(tag.Value)) {\n    return tag.Value.map(formatValue).join(', ')\n  }\n\n  return formatValue(tag.Value)\n}\n\n/**\n * Processes DICOM metadata and returns a flattened array of tag information\n * @param metadata - The DICOM metadata object to process\n * @param depth - The current depth level for nested sequences (default: 0)\n * @returns Array of processed tag information\n */\nexport function getRows (metadata: Record<string, any>, depth = 0): TagInfo[] {\n  if (metadata === undefined || metadata === null) return []\n  const keywords = Object.keys(metadata).filter(key => key !== '_vrMap')\n\n  return keywords.flatMap(keyword => {\n    // @ts-expect-error\n    const tagInfo = DicomMetaDictionary.nameMap[keyword] as TagInfo | undefined\n    let value = metadata[keyword]\n\n    // Handle private or unknown tags\n    if (tagInfo === undefined) {\n      const regex = /[0-9A-Fa-f]{6}/g\n      if (keyword.match(regex) == null) return []\n\n      return [{\n        tag: `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`,\n        vr: '',\n        keyword: 'Private Tag',\n        value: value?.toString() ?? '',\n        level: depth\n      }]\n    }\n\n    // Handle sequence values (SQ VR)\n    if (tagInfo.vr === 'SQ' && value !== undefined) {\n      const sequenceItems = Array.isArray(value) ? value : [value]\n\n      // Create a parent sequence node\n      const sequenceNode: TagInfo = {\n        tag: tagInfo.tag,\n        vr: tagInfo.vr,\n        keyword,\n        value: `Sequence with ${sequenceItems.length} item(s)`,\n        level: depth,\n        children: []\n      }\n\n      // Create individual nodes for each sequence item\n      sequenceNode.children = sequenceItems.map((item, index) => {\n        const itemNode: TagInfo = {\n          tag: `${tagInfo.tag}.${index + 1}`,\n          vr: 'Item',\n          keyword: `Item ${index + 1}`,\n          value: `Sequence Item ${index + 1}`,\n          level: depth + 1,\n          children: getRows(item, depth + 2)\n        }\n        return itemNode\n      })\n\n      return [sequenceNode]\n    }\n\n    // Handle array values\n    if (Array.isArray(value)) {\n      value = value.map(formatValue).join('\\\\')\n    } else if (typeof value === 'object' && value !== null) {\n      value = formatValue(value)\n    }\n\n    return [{\n      tag: tagInfo.tag,\n      vr: tagInfo.vr,\n      keyword: keyword.replace('RETIRED_', ''),\n      value: value?.toString() ?? '',\n      level: depth\n    }]\n  })\n}\n\n/**\n * Sorts DICOM tags alphabetically by tag value\n * @param metadata - The DICOM metadata object to process\n * @returns Sorted array of tag information\n */\nexport function getSortedTags (metadata: Record<string, any>): TagInfo[] {\n  const tagList = getRows(metadata)\n  return tagList.sort((a, b) => a.tag.localeCompare(b.tag))\n}\n","/**\n * Formats a DICOM datetime string (YYYYMMDD:HHmmss) into a human-readable format\n *\n * @param dateStr - DICOM datetime string in format \"YYYYMMDD:HHmmss\"\n * @returns Formatted date string (e.g., \"Mon, Jan 1 2024\")\n * @example\n * formatDicomDate(\"20240101:120000\") // Returns \"Mon, Jan 1 2024\"\n * formatDicomDate(\"invalid\") // Returns \"invalid\"\n */\nexport const formatDicomDate = (dateStr: string): string => {\n  // Parse YYYYMMDD:HHmmss format\n  const match = dateStr.match(/^(\\d{4})(\\d{2})(\\d{2}):(\\d{2})(\\d{2})(\\d{2})/)\n  if (match == null) return dateStr\n\n  const [, year, month, day, hour, minute, second] = match\n\n  // Validate month and day\n  const monthNum = parseInt(month)\n  const dayNum = parseInt(day)\n  if (monthNum < 1 || monthNum > 12 || dayNum < 1 || dayNum > 31) {\n    return dateStr\n  }\n\n  const date = new Date(\n    parseInt(year),\n    monthNum - 1, // months are 0-based\n    dayNum,\n    parseInt(hour),\n    parseInt(minute),\n    parseInt(second)\n  )\n\n  // Check if the date is invalid or if the month/day combination is invalid\n  // This catches cases like February 31st where the date rolls over to March\n  if (\n    date.getMonth() !== monthNum - 1 || // month rolled over\n    date.getDate() !== dayNum // day rolled over\n  ) {\n    return dateStr\n  }\n\n  // Format parts separately to avoid the extra comma\n  const weekday = date.toLocaleDateString('en-US', { weekday: 'short' })\n  const monthName = date.toLocaleDateString('en-US', { month: 'short' })\n  const dayFormatted = date.getDate()\n  const yearNum = date.getFullYear()\n\n  return `${weekday}, ${monthName} ${dayFormatted} ${yearNum}`\n}\n","import { v4 as generateUUID } from 'uuid'\n\n/**\n * Consumer must implement:\n * this.listeners = {}\n * this.EVENTS = { \"EVENT_KEY\": \"EVENT_VALUE\" }\n */\nconst pubSubInterface = {\n  subscribe,\n  _broadcastEvent,\n  _unsubscribe,\n  _isValidEvent\n}\n\nexport default pubSubInterface\n\n/**\n * Subscribe to updates.\n *\n * @param {string} eventName The name of the event\n * @param {Function} callback Events callback\n * @return {Object} Observable object with actions\n */\nfunction subscribe (this: PubSubService, eventName: string, callback: Function): { unsubscribe: () => any } {\n  if (this._isValidEvent(eventName)) {\n    const listenerId = generateUUID()\n    const subscription = { id: listenerId, callback }\n\n    // console.info(`Subscribing to '${eventName}'.`);\n    if (Array.isArray(this.listeners[eventName])) {\n      this.listeners[eventName].push(subscription)\n    } else {\n      this.listeners[eventName] = [subscription]\n    }\n\n    return {\n      unsubscribe: () => this._unsubscribe(eventName, listenerId)\n    }\n  } else {\n    throw new Error(`Event ${eventName} not supported.`)\n  }\n}\n\n/**\n * Unsubscribe to measurement updates.\n *\n * @param {string} eventName The name of the event\n * @param {string} listenerId The listeners id\n * @return void\n */\nfunction _unsubscribe (this: PubSubService, eventName: string, listenerId: string): void {\n  if (this.listeners[eventName] === undefined) {\n    return\n  }\n\n  const listeners = this.listeners[eventName]\n  if (Array.isArray(listeners)) {\n    this.listeners[eventName] = listeners.filter(({ id }) => id !== listenerId)\n  } else {\n    this.listeners[eventName] = []\n  }\n}\n\n/**\n * Check if a given event is valid.\n *\n * @param {string} eventName The name of the event\n * @return {boolean} Event name validation\n */\nfunction _isValidEvent (this: PubSubService, eventName: string): boolean {\n  return Object.values(this.EVENTS).includes(eventName)\n}\n\n/**\n * Broadcasts changes.\n *\n * @param {string} eventName - The event name\n * @param {func} callbackProps - Properties to pass callback\n * @return void\n */\nfunction _broadcastEvent (this: PubSubService, eventName: string, callbackProps: any): void {\n  const hasListeners = Object.keys(this.listeners).length > 0\n  const hasCallbacks = Array.isArray(this.listeners[eventName])\n\n  if (hasListeners && hasCallbacks) {\n    this.listeners[eventName].forEach((listener: { id: string, callback: Function }) => {\n      listener.callback(callbackProps)\n    })\n  }\n}\n\n/** Export a PubSubService class to be used instead of the individual items */\nexport class PubSubService {\n  EVENTS: any\n  subscribe: (\n    eventName: string,\n    callback: Function\n  ) => { unsubscribe: () => any }\n\n  _broadcastEvent: (eventName: string, callbackProps: any) => void\n  _unsubscribe: (eventName: string, listenerId: string) => void\n  _isValidEvent: (eventName: string) => boolean\n  listeners: { [key: string]: Array<{ id: string, callback: Function }> }\n  unsubscriptions: any[]\n  constructor (EVENTS: Record<string, string>) {\n    this.EVENTS = EVENTS\n    this.subscribe = subscribe\n    this._broadcastEvent = _broadcastEvent\n    this._unsubscribe = _unsubscribe\n    this._isValidEvent = _isValidEvent\n    this.listeners = {}\n    this.unsubscriptions = []\n  }\n\n  reset (): void {\n    this.unsubscriptions.forEach((unsub) => unsub())\n    this.unsubscriptions = []\n  }\n\n  /**\n   * Creates an event that records whether or not someone\n   * has consumed it.  Call eventData.consume() to consume the event.\n   * Check eventData.isConsumed to see if it is consumed or not.\n   * @param props - to include in the event\n   */\n  protected createConsumableEvent (props: Record<string, any>): Record<string, any> {\n    return {\n      ...props,\n      isConsumed: false,\n      consume: function Consume () {\n        this.isConsumed = true\n      }\n    }\n  }\n}\n","import { Instance, Series } from '../services/DICOMMetadataStore'\n\nfunction createSeriesMetadata (SeriesInstanceUID: string, defaultInstances?: Instance[]): Series {\n  const instances: Instance[] = []\n  const instancesMap = new Map<string, Instance>()\n\n  return {\n    SeriesInstanceUID,\n    Modality: '',\n    SeriesNumber: 0,\n    SeriesDescription: '',\n    SeriesDate: '',\n    SeriesTime: '',\n    ...defaultInstances?.[0],\n    instances,\n    addInstance: function (newInstance: Instance) {\n      this.addInstances([newInstance])\n    },\n    addInstances: function (newInstances: Instance[]) {\n      for (let i = 0, len = newInstances.length; i < len; i++) {\n        const instance = newInstances[i]\n\n        if (!instancesMap.has(instance.SOPInstanceUID)) {\n          instancesMap.set(instance.SOPInstanceUID, instance)\n          instances.push(instance)\n        }\n      }\n    },\n    getInstance: function (SOPInstanceUID: string) {\n      return instancesMap.get(SOPInstanceUID)\n    }\n  }\n}\n\nexport default createSeriesMetadata\n","import createSeriesMetadata from './createSeriesMetadata'\n\nimport { Study, Series, Instance } from '../services/DICOMMetadataStore'\n\nfunction createStudyMetadata (StudyInstanceUID: string): Study {\n  return {\n    StudyInstanceUID,\n    StudyDescription: '',\n    PatientID: '',\n    PatientName: '',\n    StudyDate: '',\n    AccessionNumber: '',\n    NumInstances: 0,\n    ModalitiesInStudy: [],\n    isLoaded: false,\n    series: [] as Series[],\n    /**\n     * @param {object} instance\n     */\n    addInstanceToSeries: function (instance: Instance) {\n      this.addInstancesToSeries([instance])\n    },\n    /**\n     * @param {object[]} instances\n     * @param {string} instances[].SeriesInstanceUID\n     * @param {string} instances[].StudyDescription\n     */\n    addInstancesToSeries: function (instances: Instance[]) {\n      const { SeriesInstanceUID } = instances[0]\n\n      if (this.StudyDescription !== '' && this.StudyDescription !== undefined) {\n        this.StudyDescription = instances[0].StudyDescription\n      }\n\n      let series = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (series == null) {\n        series = createSeriesMetadata(SeriesInstanceUID, instances)\n        this.series.push(series)\n      }\n\n      series.addInstances(instances)\n    },\n\n    setSeriesMetadata: function (\n      SeriesInstanceUID: string,\n      seriesMetadata: any\n    ) {\n      let existingSeries = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (existingSeries != null) {\n        existingSeries = Object.assign(existingSeries, seriesMetadata)\n      } else {\n        const series = createSeriesMetadata(SeriesInstanceUID)\n        this.series.push(Object.assign(series, seriesMetadata))\n      }\n    }\n  }\n}\n\nexport default createStudyMetadata\n","import dcmjs from 'dcmjs'\n\nimport pubSubServiceInterface from '../utils/pubSubServiceInterface'\nimport createStudyMetadata from '../utils/createStudyMetadata'\n\nexport const EVENTS = {\n  STUDY_ADDED: 'event::dicomMetadataStore:studyAdded',\n  INSTANCES_ADDED: 'event::dicomMetadataStore:instancesAdded',\n  SERIES_ADDED: 'event::dicomMetadataStore:seriesAdded',\n  SERIES_UPDATED: 'event::dicomMetadataStore:seriesUpdated'\n}\n\nexport interface Instance {\n  SOPInstanceUID: string\n  SOPClassUID: string\n  Rows: number\n  Columns: number\n  PatientSex: string\n  Modality: string\n  InstanceNumber: string\n  imageId?: string\n  [key: string]: any // For dynamic metadata properties\n}\n\nexport interface Series {\n  Modality: string\n  SeriesInstanceUID: string\n  SeriesNumber: number\n  SeriesDate: string\n  SeriesTime: string\n  SeriesDescription: string\n  instances: Instance[]\n  addInstance: (newInstance: Instance) => void\n  addInstances: (newInstances: Instance[]) => void\n  getInstance: (SOPInstanceUID: string) => Instance | undefined\n}\n\nexport interface Study {\n  StudyInstanceUID: string\n  StudyDescription: string\n  PatientID: string\n  PatientName: string\n  StudyDate: string\n  AccessionNumber: string\n  NumInstances: number\n  ModalitiesInStudy: any[]\n  NumberOfStudyRelatedSeries?: number\n  isLoaded: boolean\n  series: Series[]\n  addInstanceToSeries: (instance: Instance) => void\n  addInstancesToSeries: (instances: Instance[]) => void\n  setSeriesMetadata: (SeriesInstanceUID: string, metadata: any) => void\n}\n\ninterface Model {\n  studies: Study[]\n}\n\nconst _model: Model = {\n  studies: []\n}\n\nfunction _getStudyInstanceUIDs (): string[] {\n  return _model.studies.map((aStudy) => aStudy.StudyInstanceUID)\n}\n\nfunction _getStudy (StudyInstanceUID: string): Study | undefined {\n  return _model.studies.find(\n    (aStudy) => aStudy.StudyInstanceUID === StudyInstanceUID\n  )\n}\n\nfunction _getSeries (StudyInstanceUID: string, SeriesInstanceUID: string): Series | undefined {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  return study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n}\n\nfunction _getInstance (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  SOPInstanceUID: string\n): Instance | undefined {\n  const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n\n  if (series == null) {\n    return\n  }\n\n  return series.getInstance(SOPInstanceUID)\n}\n\nfunction _getInstanceByImageId (imageId: string): Instance | undefined {\n  for (const study of _model.studies) {\n    for (const series of study.series) {\n      for (const instance of series.instances) {\n        if (instance.imageId === imageId) {\n          return instance\n        }\n      }\n    }\n  }\n}\n\n/**\n * Update the metadata of a specific series\n * @param {*} StudyInstanceUID\n * @param {*} SeriesInstanceUID\n * @param {*} metadata metadata inform of key value pairs\n * @returns\n */\nfunction _updateMetadataForSeries (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  metadata: Record<string, any>\n): void {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  const series = study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n\n  if (series == null) {\n    return\n  }\n\n  const { instances } = series\n  instances.forEach((instance) => {\n    Object.keys(metadata).forEach((key) => {\n      if (typeof metadata[key] === 'object') {\n        instance[key] = { ...instance[key], ...metadata[key] }\n      } else {\n        instance[key] = metadata[key]\n      }\n    })\n  })\n}\n\ninterface BaseImplementationType {\n  EVENTS: typeof EVENTS\n  listeners: Record<string, any>\n  addInstance: (dicomJSONDatasetOrP10ArrayBuffer: ArrayBuffer | Record<string, any>) => void\n  addInstances: (instances: Instance[], madeInClient?: boolean) => void\n  updateSeriesMetadata: (seriesMetadata: Record<string, any>) => void\n  addSeriesMetadata: (seriesSummaryMetadata: Array<Record<string, any>>, madeInClient?: boolean) => void\n  addStudy: (study: Record<string, any>) => void\n  getStudyInstanceUIDs: typeof _getStudyInstanceUIDs\n  getStudy: typeof _getStudy\n  getSeries: typeof _getSeries\n  getInstance: typeof _getInstance\n  getInstanceByImageId: typeof _getInstanceByImageId\n  updateMetadataForSeries: typeof _updateMetadataForSeries\n  _broadcastEvent: (eventName: string, data: any) => void\n}\n\nconst BaseImplementation: BaseImplementationType = {\n  EVENTS,\n  listeners: {},\n  addInstance (dicomJSONDatasetOrP10ArrayBuffer) {\n    let dicomJSONDataset\n\n    // If Arraybuffer, parse to DICOMJSON before naturalizing.\n    if (dicomJSONDatasetOrP10ArrayBuffer instanceof ArrayBuffer) {\n      const dicomData = dcmjs.data.DicomMessage.readFile(\n        dicomJSONDatasetOrP10ArrayBuffer\n      )\n\n      dicomJSONDataset = dicomData.dict\n    } else {\n      dicomJSONDataset = dicomJSONDatasetOrP10ArrayBuffer\n    }\n\n    let naturalizedDataset: Instance\n\n    if (!('SeriesInstanceUID' in dicomJSONDataset)) {\n      naturalizedDataset =\n        dcmjs.data.DicomMetaDictionary.naturalizeDataset(dicomJSONDataset) as Instance\n    } else {\n      naturalizedDataset = dicomJSONDataset as unknown as Instance\n    }\n\n    const { StudyInstanceUID } = naturalizedDataset\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstanceToSeries(naturalizedDataset)\n  },\n  addInstances (instances, madeInClient = false) {\n    const { StudyInstanceUID, SeriesInstanceUID } = instances[0]\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstancesToSeries(instances)\n\n    // Broadcast an event even if we used cached data.\n    // This is because the mode needs to listen to instances that are added to build up its active displaySets.\n    // It will see there are cached displaySets and end early if this Series has already been fired in this\n    // Mode session for some reason.\n    this._broadcastEvent(EVENTS.INSTANCES_ADDED, {\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      madeInClient\n    })\n  },\n  updateSeriesMetadata (seriesMetadata) {\n    const { StudyInstanceUID, SeriesInstanceUID } = seriesMetadata\n    const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n    if (series == null) {\n      return\n    }\n\n    const study = _getStudy(StudyInstanceUID)\n    if (study != null) {\n      study.setSeriesMetadata(SeriesInstanceUID, seriesMetadata)\n    }\n  },\n  addSeriesMetadata (seriesSummaryMetadata, madeInClient = false) {\n    if (\n      seriesSummaryMetadata === undefined ||\n      seriesSummaryMetadata.length === 0 ||\n      seriesSummaryMetadata[0] === undefined\n    ) {\n      return\n    }\n\n    const { StudyInstanceUID } = seriesSummaryMetadata[0]\n    let study = _getStudy(StudyInstanceUID)\n    if (study == null) {\n      study = createStudyMetadata(StudyInstanceUID)\n      // Will typically be undefined with a compliant DICOMweb server, reset later\n      study.StudyDescription = seriesSummaryMetadata[0].StudyDescription\n      seriesSummaryMetadata?.forEach((item) => {\n        if (study !== undefined && !study.ModalitiesInStudy?.includes(item.Modality)) {\n          study.ModalitiesInStudy?.push(item.Modality)\n        }\n      })\n      study.NumberOfStudyRelatedSeries = seriesSummaryMetadata.length\n      _model.studies.push(study)\n    }\n\n    seriesSummaryMetadata.forEach((series) => {\n      const { SeriesInstanceUID } = series\n      study?.setSeriesMetadata(SeriesInstanceUID, series)\n    })\n\n    this._broadcastEvent(EVENTS.SERIES_ADDED, {\n      StudyInstanceUID,\n      seriesSummaryMetadata,\n      madeInClient\n    })\n  },\n  addStudy (study) {\n    const { StudyInstanceUID } = study\n\n    const existingStudy = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (existingStudy == null) {\n      const newStudy = createStudyMetadata(StudyInstanceUID)\n\n      newStudy.PatientID = study.PatientID\n      newStudy.PatientName = study.PatientName\n      newStudy.StudyDate = study.StudyDate\n      newStudy.ModalitiesInStudy = study.ModalitiesInStudy\n      newStudy.StudyDescription = study.StudyDescription\n      newStudy.AccessionNumber = study.AccessionNumber\n      newStudy.NumInstances = study.NumInstances // todo: Correct naming?\n\n      _model.studies.push(newStudy)\n    }\n  },\n  getStudyInstanceUIDs: _getStudyInstanceUIDs,\n  getStudy: _getStudy,\n  getSeries: _getSeries,\n  getInstance: _getInstance,\n  getInstanceByImageId: _getInstanceByImageId,\n  updateMetadataForSeries: _updateMetadataForSeries,\n  _broadcastEvent (eventName: string, data: any): void {\n  }\n}\n\ninterface DicomMetadataStoreType extends BaseImplementationType {\n  subscribe: (event: string, callback: (data: any) => void) => { unsubscribe: () => any }\n  unsubscribe: (event: string, callback: (data: any) => void) => void\n}\n\nconst DicomMetadataStore = Object.assign(\n  {},\n  BaseImplementation,\n  pubSubServiceInterface\n) as unknown as DicomMetadataStoreType\n\nexport { DicomMetadataStore }\nexport default DicomMetadataStore\n","import { useState, useEffect } from 'react'\n\n/**\n * A hook that delays updating a value for the specified time\n * @param value The value to debounce\n * @param delay The delay time in milliseconds\n * @returns The debounced value\n * @example\n * const debouncedSearchTerm = useDebounce(searchTerm, 300)\n */\nexport const useDebounce = <T,>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import { useState, useMemo, useEffect } from 'react'\nimport { Select, Input, Slider, Typography, Table } from 'antd'\nimport { SearchOutlined } from '@ant-design/icons'\n\nimport DicomWebManager from '../../DicomWebManager'\nimport './DicomTagBrowser.css'\nimport { useSlides } from '../../hooks/useSlides'\nimport { getSortedTags } from './dicomTagUtils'\nimport { formatDicomDate } from '../../utils/formatDicomDate'\nimport DicomMetadataStore, { Series, Study } from '../../services/DICOMMetadataStore'\nimport { useDebounce } from '../../hooks/useDebounce'\n\nconst { Option } = Select\n\ninterface DisplaySet {\n  displaySetInstanceUID: number\n  SeriesDate?: string\n  SeriesTime?: string\n  SeriesNumber: string\n  SeriesDescription?: string\n  Modality: string\n  images: any[]\n}\n\ninterface TableDataItem {\n  key: string\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TableDataItem[]\n}\n\ninterface DicomTagBrowserProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\nconst DicomTagBrowser = ({ clients, studyInstanceUID }: DicomTagBrowserProps): JSX.Element => {\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n  const [study, setStudy] = useState<Study | undefined>(undefined)\n\n  const [displaySets, setDisplaySets] = useState<DisplaySet[]>([])\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] = useState(0)\n  const [instanceNumber, setInstanceNumber] = useState(1)\n  const [filterValue, setFilterValue] = useState('')\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([])\n  const [searchInput, setSearchInput] = useState('')\n\n  const debouncedSearchValue = useDebounce(searchInput, 300)\n\n  useEffect(() => {\n    if (debouncedSearchValue === '') {\n      setFilterValue('')\n      setExpandedKeys([])\n    } else {\n      setFilterValue(debouncedSearchValue)\n    }\n  }, [debouncedSearchValue])\n\n  useEffect(() => {\n    const handler = (event: any): void => {\n      const study: Study | undefined = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n      setStudy(study)\n    }\n    const seriesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.SERIES_ADDED, handler)\n    const instancesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.INSTANCES_ADDED, handler)\n\n    const study = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n    setStudy(study)\n\n    return () => {\n      seriesAddedSubscription.unsubscribe()\n      instancesAddedSubscription.unsubscribe()\n    }\n  }, [studyInstanceUID])\n\n  useEffect(() => {\n    let displaySets: DisplaySet[] = []\n    let derivedDisplaySets: DisplaySet[] = []\n    const processedSeries: string[] = []\n    let index = 0\n\n    if (slides.length > 0) {\n      displaySets = slides\n        .map((slide): DisplaySet | null => {\n          const { volumeImages } = slide\n          if (volumeImages?.[0] === undefined) return null\n\n          const {\n            SeriesDate,\n            SeriesTime,\n            SeriesNumber,\n            SeriesInstanceUID,\n            SeriesDescription,\n            Modality\n          } = volumeImages[0]\n\n          processedSeries.push(SeriesInstanceUID)\n\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate,\n            SeriesTime,\n            SeriesInstanceUID,\n            // @ts-expect-error\n            SeriesNumber,\n            SeriesDescription,\n            Modality,\n            images: volumeImages\n          }\n          index++\n          return ds\n        })\n        .filter((set): set is DisplaySet => set !== null)\n    }\n\n    if (study !== undefined && study.series?.length > 0) {\n      derivedDisplaySets = study.series.filter(s => !processedSeries.includes(s.SeriesInstanceUID))\n        .map((series: Series): DisplaySet => {\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate: series.SeriesDate,\n            SeriesTime: series.SeriesTime,\n            // @ts-expect-error\n            SeriesNumber: series.SeriesNumber,\n            SeriesDescription: series.SeriesDescription,\n            SeriesInstanceUID: series.SeriesInstanceUID,\n            Modality: series.Modality,\n            images: series?.instances?.length > 0 ? series.instances : [series]\n          }\n          index++\n          return ds\n        })\n    }\n\n    setDisplaySets([...displaySets, ...derivedDisplaySets])\n  }, [slides, study])\n\n  const displaySetList = useMemo(() => {\n    displaySets.sort((a, b) => Number(a.SeriesNumber) - Number(b.SeriesNumber))\n    return displaySets.map((displaySet, index) => {\n      const {\n        SeriesDate = '',\n        SeriesTime = '',\n        SeriesNumber = '',\n        SeriesDescription = '',\n        Modality = ''\n      } = displaySet\n\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0]\n      const displayDate = formatDicomDate(dateStr)\n\n      return {\n        value: index,\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\n        description: displayDate\n      }\n    })\n  }, [displaySets])\n\n  const showInstanceList =\n    displaySets[selectedDisplaySetInstanceUID]?.images.length > 1\n\n  console.debug('displaySets:', displaySets)\n\n  const instanceSliderMarks = useMemo(() => {\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return {}\n    const totalInstances = displaySets[selectedDisplaySetInstanceUID].images.length\n\n    // Create marks for first, middle, and last instances\n    const marks: Record<number, string> = {\n      1: '1', // First\n      [Math.ceil(totalInstances / 2)]: String(Math.ceil(totalInstances / 2)), // Middle\n      [totalInstances]: String(totalInstances) // Last\n    }\n\n    return marks\n  }, [selectedDisplaySetInstanceUID, displaySets])\n\n  const columns = [\n    {\n      title: 'Tag',\n      dataIndex: 'tag',\n      key: 'tag',\n      width: '30%'\n    },\n    {\n      title: 'VR',\n      dataIndex: 'vr',\n      key: 'vr',\n      width: '5%'\n    },\n    {\n      title: 'Keyword',\n      dataIndex: 'keyword',\n      key: 'keyword',\n      width: '30%'\n    },\n    {\n      title: 'Value',\n      dataIndex: 'value',\n      key: 'value',\n      width: '40%'\n    }\n  ]\n\n  const tableData = useMemo(() => {\n    const transformTagsToTableData = (tags: any[], parentKey = ''): TableDataItem[] => {\n      return tags.map((tag, index) => {\n        // Create a unique key using tag value if available, otherwise use index\n        const keyBase: string = tag.tag !== '' ? tag.tag.replace(/[(),]/g, '') : index.toString()\n        const currentKey: string = parentKey !== '' ? `${parentKey}-${keyBase}` : keyBase\n\n        const item: TableDataItem = {\n          key: currentKey,\n          tag: tag.tag,\n          vr: tag.vr,\n          keyword: tag.keyword,\n          value: tag.value\n        }\n\n        if (tag.children !== undefined && tag.children.length > 0) {\n          item.children = transformTagsToTableData(tag.children, currentKey)\n        }\n\n        return item\n      })\n    }\n\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return []\n    const metadata = displaySets[selectedDisplaySetInstanceUID]?.images[instanceNumber - 1]\n    const tags = getSortedTags(metadata)\n    return transformTagsToTableData(tags)\n  }, [instanceNumber, selectedDisplaySetInstanceUID, displaySets])\n\n  const filteredData = useMemo(() => {\n    if (filterValue === undefined || filterValue === '') return tableData\n\n    const searchLower = filterValue.toLowerCase()\n    const matchedKeys = new Set<string>()\n\n    const nodeMatches = (node: TableDataItem): boolean => {\n      return (\n        (node.tag?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.vr?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.keyword?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.value?.toString().toLowerCase() ?? '').includes(searchLower)\n      )\n    }\n\n    // First pass: find all matching nodes and their parent paths\n    const findMatchingPaths = (\n      node: TableDataItem,\n      parentPath: TableDataItem[] = []\n    ): TableDataItem[][] => {\n      const currentPath = [...parentPath, node]\n      let matchingPaths: TableDataItem[][] = []\n\n      if (nodeMatches(node)) {\n        matchingPaths.push(currentPath)\n      }\n\n      if (node.children != null) {\n        node.children.forEach(child => {\n          const childPaths = findMatchingPaths(child, currentPath)\n          matchingPaths = [...matchingPaths, ...childPaths]\n        })\n      }\n\n      return matchingPaths\n    }\n\n    // Find all paths that contain matches\n    const matchingPaths = tableData.flatMap(node => findMatchingPaths(node))\n\n    // Second pass: reconstruct the tree with matching paths\n    const reconstructTree = (\n      paths: TableDataItem[][],\n      level = 0\n    ): TableDataItem[] => {\n      if (paths.length === 0 || level >= paths[0].length) return []\n\n      const nodesAtLevel = new Map<string, {\n        node: TableDataItem\n        childPaths: TableDataItem[][]\n      }>()\n\n      paths.forEach(path => {\n        if (level < path.length) {\n          const node = path[level]\n          if (!nodesAtLevel.has(node.key)) {\n            nodesAtLevel.set(node.key, {\n              node: { ...node },\n              childPaths: []\n            })\n          }\n          if (level + 1 < path.length) {\n            nodesAtLevel.get(node.key)?.childPaths.push(path)\n          }\n        }\n      })\n\n      return Array.from(nodesAtLevel.values()).map(({ node, childPaths }) => {\n        matchedKeys.add(node.key)\n        const children = reconstructTree(childPaths, level + 1)\n        return children.length > 0 ? { ...node, children } : node\n      })\n    }\n\n    const filtered = reconstructTree(matchingPaths)\n    setExpandedKeys(Array.from(matchedKeys))\n\n    return filtered\n  }, [tableData, filterValue])\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div className='dicom-tag-browser'>\n      <div\n        style={{\n          width: '100%',\n          padding: '16px 20px 20px'\n        }}\n      >\n        <div style={{ display: 'flex', gap: '24px', marginBottom: '32px' }}>\n          <div style={{ flex: 1 }}>\n            <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>Slides</Typography.Text>\n            <Select\n              style={{ width: '100%' }}\n              value={selectedDisplaySetInstanceUID}\n              onChange={(value) => {\n                setSelectedDisplaySetInstanceUID(value)\n                setInstanceNumber(1)\n              }}\n              optionLabelProp='label'\n              optionFilterProp='label'\n            >\n              {displaySetList.map((item) => (\n                <Option key={item.value} value={item.value} label={item.label}>\n                  <div>\n                    <div>{item.label}</div>\n                    <div\n                      style={{ fontSize: '12px', color: 'rgba(0, 0, 0, 0.45)' }}\n                    >\n                      {item.description}\n                    </div>\n                  </div>\n                </Option>\n              ))}\n            </Select>\n          </div>\n\n          {showInstanceList && (\n            <div style={{ flex: 1 }}>\n              <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>\n                Instance Number: {instanceNumber}\n              </Typography.Text>\n              <Slider\n                min={1}\n                max={displaySets[selectedDisplaySetInstanceUID]?.images.length}\n                value={instanceNumber}\n                onChange={(value) => setInstanceNumber(value)}\n                marks={instanceSliderMarks}\n                tooltip={{\n                  formatter: (value: number | undefined) => value !== undefined ? `Instance ${value}` : ''\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        <Input\n          style={{ marginBottom: '20px' }}\n          placeholder='Search DICOM tags...'\n          prefix={<SearchOutlined />}\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n        />\n\n        <Table\n          columns={columns}\n          dataSource={filteredData}\n          pagination={false}\n          expandable={{\n            expandedRowKeys: expandedKeys,\n            onExpandedRowsChange: (keys) => setExpandedKeys(keys as string[])\n          }}\n          size='small'\n          scroll={{ y: 500 }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default DicomTagBrowser\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Modal,\n  Row,\n  Space,\n  Badge,\n  Collapse\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  FileSearchOutlined,\n  UnorderedListOutlined,\n  UserOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport NotificationMiddleware, { NotificationMiddlewareEvents } from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\nimport { v4 as uuidv4 } from 'uuid'\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser'\nimport DicomWebManager from '../DicomWebManager'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  clients: { [key: string]: DicomWebManager }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface ExtendedCustomError extends CustomError {\n  source: string\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n  errorObj: ExtendedCustomError[]\n  errorCategory: string[]\n  warnings: string[]\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    this.state = {\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: true,\n      errorObj: [],\n      errorCategory: [],\n      warnings: []\n    }\n\n    const onErrorHandler = ({ source, error }: {\n      source: string\n      error: CustomError\n    }): void => {\n      this.setState(state => ({\n        ...state,\n        errorObj: [...state.errorObj, { ...error, source }],\n        errorCategory: [...state.errorCategory, error.type]\n      }))\n    }\n\n    const onWarningHandler = (warning: string): void => {\n      this.setState(state => ({\n        ...state,\n        warnings: [...state.warnings, warning]\n      }))\n    }\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnError,\n      onErrorHandler\n    )\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnWarning,\n      onWarningHandler\n    )\n  }\n\n  componentDidUpdate (prevProps: Readonly<HeaderProps>, prevState: Readonly<HeaderState>): void {\n    if (((prevState.warnings.length > 0) || (prevState.errorObj.length > 0)) && this.props.location.pathname !== prevProps.location.pathname) {\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true,\n        errorObj: [],\n        errorCategory: [],\n        warnings: []\n      })\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleDicomTagBrowserButtonClick = (): void => {\n    const width = window.innerWidth - 200\n    Modal.info({\n      title: 'DICOM Tag Browser',\n      width,\n      content: <DicomTagBrowser\n        clients={this.props.clients}\n        studyInstanceUID={this.props.params.studyInstanceUID ?? ''}\n               />,\n      onOk (): void {}\n    })\n  }\n\n  handleDebugButtonClick = (): void => {\n    const errorMsgs: {\n      Authentication: string[]\n      Communication: string[]\n      EncodingDecoding: string[]\n      Visualization: string[]\n    } = {\n      Authentication: [],\n      Communication: [],\n      EncodingDecoding: [],\n      Visualization: []\n    }\n\n    type ObjectKey = keyof typeof errorMsgs\n    const errorNum = this.state.errorObj.length\n\n    if (errorNum > 0) {\n      for (let i = 0; i < errorNum; i++) {\n        const category = this.state.errorCategory[i] as ObjectKey\n        errorMsgs[category].push(`${this.state.errorObj[i].message as string} (Source: ${this.state.errorObj[i].source})`)\n      }\n    }\n\n    const { Panel } = Collapse\n\n    const showErrorCount = (errcount: number): JSX.Element => (\n      <Badge count={errcount} />\n    )\n\n    const showWarningCount = (warncount: number): JSX.Element => (\n      <Badge color='green' count={warncount} />\n    )\n\n    Modal.info({\n      title: 'Debug Information\\n (Check console for more information)',\n      width: 800,\n      content: (\n        <Collapse>\n          <Panel\n            header='Communication Error'\n            key='communicationerror'\n            extra={showErrorCount(errorMsgs.Communication.length)}\n          >\n            <ol>\n              {errorMsgs.Communication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Data Encoding/Decoding error'\n            key='encodedecodeerror'\n            extra={showErrorCount(errorMsgs.EncodingDecoding.length)}\n          >\n            <ol>\n              {errorMsgs.EncodingDecoding.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Visualization error'\n            key='visualizationerror'\n            extra={showErrorCount(errorMsgs.Visualization.length)}\n          >\n            <ol>\n              {errorMsgs.Visualization.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Authentication error'\n            key='autherror'\n            extra={showErrorCount(errorMsgs.Authentication.length)}\n          >\n            <ol>\n              {errorMsgs.Authentication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Warning'\n            key='warning'\n            extra={showWarningCount(this.state.warnings.length)}\n          >\n            <ol>\n              {this.state.warnings.map(warning => (\n                <li key={uuidv4()}>{warning}</li>\n              ))}\n            </ol>\n          </Panel>\n        </Collapse>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = { items: userMenuItems }\n      user = (\n        <Dropdown menu={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    const debugButton = (\n      <Badge count={this.state.errorObj.length} style={{ zIndex: 1000 }}>\n        <Badge color='green' count={this.state.warnings.length} style={{ zIndex: 1001 }}>\n          <Button\n            icon={SettingOutlined}\n            tooltip='Debug info'\n            onClick={this.handleDebugButtonClick}\n          />\n        </Badge>\n      </Badge>\n    )\n\n    const showDicomTagBrowser = this.props.location.pathname.includes('/studies/')\n\n    const dicomTagBrowserButton = showDicomTagBrowser\n      ? (\n        <Button\n          icon={FileSearchOutlined}\n          tooltip='Dicom Tag Browser'\n          onClick={this.handleDicomTagBrowserButtonClick}\n        />\n        )\n      : null\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const handleServerSelectionInput = (\n      event: React.FormEvent<HTMLInputElement>\n    ): void => {\n      const value = event.currentTarget.value\n      let isDisabled = true\n      if (value != null) {\n        try {\n          const url = new URL(value)\n          if (url.protocol.startsWith('http') && url.pathname.length > 0) {\n            isDisabled = false\n          }\n        } catch (TypeError) {}\n      }\n      this.setState({\n        selectedServerUrl: value,\n        isServerSelectionDisabled: isDisabled\n      })\n    }\n\n    const handleServerSelectionCancellation = (): void => {\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const handleServerSelection = (): void => {\n      const url = this.state.selectedServerUrl\n      let closeModal = false\n      if (url != null && url !== '') {\n        if (url.startsWith('http://') || url.startsWith('https://')) {\n          this.props.onServerSelection({ url })\n          closeModal = true\n        }\n      }\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: !closeModal,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row>\n            <Col>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' />\n            <Col>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {debugButton}\n                {dicomTagBrowserButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          open={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={handleServerSelection}\n          onCancel={handleServerSelectionCancellation}\n        >\n          <Input\n            placeholder='Enter base URL of DICOMweb Study Service'\n            onChange={handleServerSelectionInput}\n            onPressEnter={handleServerSelection}\n            addonAfter={\n              this.state.isServerSelectionDisabled\n                ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n            }\n          />\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { Button, Input, Space, Table, TablePaginationConfig } from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'An error occured. Search for studies failed.'\n          )\n        )\n      })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Request to search for studies failed.'\n          )\n        )\n      })\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\nimport NotificationMiddleware,\n{ NotificationMiddlewareContext } from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nconst createUser = (userData: UserData | null): User => {\n  let profile\n  if (userData !== null) {\n    profile = userData.profile\n  }\n\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.AUTH,\n        new CustomError(\n          errorTypes.AUTHENTICATION,\n          'Failed to obtain user \"name\" and \"email\".'\n        )\n      )\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.AUTH,\n      new CustomError(\n        errorTypes.AUTHENTICATION,\n        'Failed to obtain user profile.'\n      )\n    )\n  }\n  return {\n    name: undefined,\n    email: undefined\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string|undefined> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user profile.'\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user information.'\n          )\n        )\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\nimport * as dcmjs from 'dcmjs'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\nimport DicomMetadataStore, { Instance } from './services/DICOMMetadataStore'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'At least one server needs to be configured.'\n          )\n        )\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Either path or full URL needs to be configured for server.'\n          )\n        )\n      }\n\n      const hasHttpsUrl = (url?: string): boolean => url?.startsWith('https') ?? false\n\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n\n      const shouldUpgradeInsecure = serverSettings.upgradeInsecureRequests === true && [\n        serviceUrl,\n        serverSettings.qidoPathPrefix,\n        serverSettings.wadoPathPrefix,\n        serverSettings.stowPathPrefix\n      ].some(hasHttpsUrl)\n\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n\n      if (shouldUpgradeInsecure) {\n        clientSettings.headers = {\n          ...clientSettings.headers,\n          'Content-Security-Policy': 'upgrade-insecure-requests'\n        }\n      }\n\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one store is supported for now.'\n        )\n      )\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const studySummaryMetadata = await this.stores[0].client.retrieveStudyMetadata(options)\n    const naturalized = naturalizeDataset(studySummaryMetadata)\n    DicomMetadataStore.addStudy(naturalized)\n    return studySummaryMetadata\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const seriesSummaryMetadata = await this.stores[0].client.retrieveSeriesMetadata(options)\n    const naturalized = seriesSummaryMetadata.map(naturalizeDataset)\n    DicomMetadataStore.addSeriesMetadata(naturalized, true)\n    return seriesSummaryMetadata\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    const instance = await this.stores[0].client.retrieveInstance(options)\n    const data = dcmjs.data.DicomMessage.readFile(instance)\n    const { dataset } = dmv.metadata.formatMetadata(data.dict)\n    DicomMetadataStore.addInstances([dataset as Instance])\n    return instance\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <CaseViewer\n      clients={clients}\n      user={user}\n      annotations={config.annotations}\n      preload={preload}\n      app={app}\n      enableAnnotationTools={enableAnnotationTools}\n      studyInstanceUID={studyInstanceUID}\n    />\n  )\n}\n\nfunction _createClientMapping ({ baseUri, gcpBaseUrl, settings, onError }: {\n  baseUri: string\n  gcpBaseUrl: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      if (window.location.pathname.includes('/projects/')) {\n        const pathname = window.location.pathname.split('/study/')[0]\n        const pathUrl = `${gcpBaseUrl}${pathname}/dicomWeb`\n        serverSettings.url = pathUrl\n      }\n\n      storageClassMapping.default += 1\n      clientMapping.default = new DicomWebManager({\n        baseUri,\n        settings: [serverSettings],\n        onError\n      })\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.COMMUNICATION,\n        'Only one default server can be configured without specification ' +\n        'of storage classes.'\n      )\n    )\n  }\n\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one configured server can specify a given storage class. ' +\n          `Storage class \"${key}\" is specified by more than one ` +\n          'of the configured servers.'\n        )\n      )\n    }\n  }\n\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n  }\n\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'User is not authorized to access DICOMweb resources.')\n      )\n    }\n\n    const logServerError = (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'An unexpected server error occured.'\n        )\n      )\n    }\n\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          logServerError()\n        }\n      })\n    } else if (error.status === 500) {\n      logServerError()\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'One server needs to be configured.')\n      )\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n    this.addGcpSecondaryAnnotationServer(props.config)\n\n    this.state = {\n      clients: _createClientMapping({\n        baseUri,\n        gcpBaseUrl: props.config.gcpBaseUrl ?? 'https://healthcare.googleapis.com/v1',\n        settings: props.config.servers,\n        onError: this.handleDICOMwebError\n      }),\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  addGcpSecondaryAnnotationServer (config: AppProps['config']): void {\n    const serverId = 'gcp_secondary_annotation_server'\n    const urlParams = new URLSearchParams(window.location.search)\n    const url = urlParams.get('gcp')\n    const gcpSecondaryAnnotationServer = config.servers.find(\n      (server) => server.id === serverId\n    )\n    if (gcpSecondaryAnnotationServer === undefined && typeof url === 'string') {\n      config.servers.push({\n        id: serverId,\n        write: true,\n        url,\n        storageClasses: [\n          StorageClasses.COMPREHENSIVE_SR,\n          StorageClasses.COMPREHENSIVE_3D_SR,\n          StorageClasses.SEGMENTATION,\n          StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION,\n          StorageClasses.PARAMETRIC_MAP,\n          StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE,\n          StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n        ]\n      })\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath != null) {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch != null) {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Could not sign-in user.')\n        )\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path == null) {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n              clients={this.state.clients}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/projects/:project/locations/:location/datasets/:dataset/dicomStores/:dicomStore/study/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","PatientID","PatientName","PatientSex","PatientBirthDate","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","_subscriptions","Symbol","_lastSubscriptionId","PubSub","eventName","callback","Error","hasOwnProperty","subscriptionId","callbacks","payload","errorTypes","CustomError","type","message","stack","NotificationMiddlewareEvents","NotificationMiddlewareContext","NotificationType","NotificationSourceDefinition","sources","category","notificationType","outerContext","args","publish","Array","from","warn","console","JSON","stringify","arguments","includes","apply","prototype","slice","call","source","error","notificationMsg","errorCategory","find","s","String","notification","description","duration","state","isLoading","overviewViewportRef","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","info","ContainerIdentifier","dmv","client","clients","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","disableInteractions","resizeFactor","errorInterceptor","NotificationMiddleware","render","container","resize","style","height","containerIdentifier","ref","seriesInstanceUIDs","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","handleMeasurementSelection","handleOpacityChange","handleColorRChange","handleColorGChange","handleColorBChange","getCurrentColor","currentStyle","opacity","defaultStyle","color","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","limitValues","isArray","option","codeComponents","measurement","schemeDesignator","meaning","colorSettings","windowSettings","explorationSettings","AnnotationGroupSequence","findIndex","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","AnnotationCoordinateType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","plain","justify","gutter","range","min","max","step","handleLowerLimitChange","handleLimitChange","handleUpperLimitChange","minWidth","defaultValue","settings","isBadgeVisible","direction","placement","content","overlayStyle","shape","SettingOutlined","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","annotationGroups","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupVisibilityChange","onAnnotationGroupStyleChange","handleClick","text","button","Icon","isSelected","tooltip","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","overflowY","handleRemoval","getCurrentColors","paletteColorLookupTable","previousProps","previousState","opticalPath","opticalPathIdentifier","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","specimenDescriptions","maxValue","Math","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","SeriesInstanceUID","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","mappingUID","mapping","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","segmentUID","segment","algorithmName","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","contourOnly","annotationGroupsUIDs","updateCurrentStyle","handleShowOutlineOnly","target","checkedAnnotationUids","defaultAnnotationStyles","types","checkAll","every","uids","indeterminate","some","handleChangeCheckedType","e","mouseEnterDelay","reduce","acc","marginLeft","shortenedCodeMeaning","displayCodeMeaning","isChecked","indeterminateType","display","flexDirection","categories","categoriesAcc","annotation","categoryKey","typeKey","oldCategory","oldType","Object","keys","typesArr","getCategories","xPosition","yPosition","position","top","left","backgroundColor","minHeight","pointerEvents","attr","roiUid","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","DEFAULT_ANNOTATION_STROKE_COLOR","DEFAULT_ANNOTATION_COLOR_PALETTE","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","_areROIsEqual","a","b","graphicType","graphicData","s1","s2","j","_formatRoiStyle","stroke","fill","image","circle","radius","_constructViewers","preload","volumeImages","labelViewer","volumeViewer","clientMapping","controls","activateSelectInteraction","labelImages","_implementsTID1500","templateSeq","ContentTemplateSequence","TemplateIdentifier","_describesSpecimenSubject","subjectClassValue","retrievedConcept","expectedConcept","_containsROIAnnotations","measurementGroups","foundRegion","regions","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","hoveredRois","lastPixel","defaultRoiStyle","roiStyles","selectionColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","rawInstance","instance","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","selectedPresentationStateUID","setPresentationState","presentationStates","catch","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","Set","activateOpticalPath","showOpticalPath","add","searchParams","URLSearchParams","search","set","pathname","replace","getRoiStyle","loadDerivedDataset","derivedDataset","debug","SOPClassUID","getAllROIs","handleAnnotationVisibilityChange","getAllAnnotationGroups","handleAnnotationGroupVisibilityChange","getAllSegments","handleSegmentVisibilityChange","getAllParameterMappings","parameterMapping","handleMappingVisibilityChange","handleOpticalPathVisibilityChange","addAnnotationGroups","Promise","resolve","reject","MICROSCOPY_BULK_SIMPLE_ANNOTATION","searchForSeries","matchedSeries","series","retrieveSeriesMetadata","retrievedMetadata","ann","finding","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","forceUpdate","addSegmentations","SEGMENTATION","segmentations","seg","refImage","FrameOfReferenceUID","addSegments","addParametricMaps","PARAMETRIC_MAP","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","addAnnotations","onRoiModified","onWindowResize","onRoiDrawn","detail","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","addROI","onRoiDoubleClicked","isSelectedRoiModalVisible","setHoveredRoiAttributes","result","r","hoveredRoiAttributes","clearHoveredRois","getUniqueHoveredRois","newRoi","allRois","filter","isSamePixelAsLast","clientX","clientY","onPointerMove","hoveredRoi","feature","originalEvent","isHoveredRoiTooltipVisible","hoveredRoiTooltipX","hoveredRoiTooltipY","onRoiSelected","selectedRoi","oldSelectedRois","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingError","onLoadingError","onFrameLoadingEnded","delete","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","onKeyUp","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","isAnnotationModalVisible","isGoToModalVisible","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","handleICCProfilesToggle","isICCProfilesEnabled","toggleICCProfiles","geometryTypes","componentSetup","componentCleanup","handleRoiSelectionCancellation","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationGroupStyleChange","handleRoiStyleChange","handleXCoordinateSelection","handleYCoordinateSelection","handleMagnificationSelection","handleSlidePositionSelection","handleSlidePositionSelectionCancellation","handleReportVerification","handleReportCancellation","handleSegmentStyleChange","handleMappingStyleChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","boundingBox","generatedReport","isSelectedMagnificationValid","isReportModalVisible","isSelectedXCoordinateValid","isSelectedYCoordinateValid","selectedXCoordinate","validXCoordinateRange","selectedYCoordinate","validYCoordinateRange","selectedMagnification","areRoisHidden","cleanup","isOpticalPathVisible","isOpticalPathActive","COMPREHENSIVE_3D_SR","otherROI","document","body","removeEventListener","window","addEventListener","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","selectedMarkup","filteredEvaluations","x","Number","start","end","y","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","point","log","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","observer","refSpecimen","user","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","app","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","evidence","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","setROIStyle","getROI","showAnnotationGroup","hideAnnotationGroup","strokeColor","fillColor","c","generateRoiStyle","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","sort","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","showROIs","hideROIs","allAnnotationGroups","filteredAnnotationGroups","referencedSeriesInstanceUID","annotationMenuItems","adaptRoiToAnnotation","openSubMenuItems","geometryTypeOptionsMapping","box","polygon","line","freehandpolygon","freehandline","annotationConfigurations","defaultActiveFirstOption","placeholder","onClear","specimenMenu","equipmentMenu","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","selectedRoiInformation","cursor","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","iccProfilesMenu","getICCProfiles","margin","hasSider","overflow","open","onOk","okButtonProps","onCancel","okText","maskClosable","footer","prefix","onPressEnter","addonAfter","CheckOutlined","StopOutlined","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","setTimeout","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","areSameAcquisition","AcquisitionUID","Slide","options","acquisitionUID","opticalPathIdentifiers","pyramidUIDs","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","THUMBNAIL","PyramidUID","samplesPerPixel","SamplesPerPixel","requirePyramidUID","PhotometricInterpretation","createSlides","slideMetadata","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","imgA","imgB","fetchImageMetadata","onSuccess","onError","StudyInstanceUID","all","loadingSeries","seriesImages","newSlides","customError","slidesCache","Map","pendingRequests","useSlides","useState","setSlides","setIsLoading","setError","useEffect","cachedData","get","fetchSlides","pendingRequest","err","naturalizeDataset","ParametrizedSlideViewer","selectedSlide","setSelectedSlide","setDerivedDataset","findReferencedSlide","allClients","storageClass","seriesMetadata","naturalizedSeriesMetadata","ReferencedSeriesSequence","referencedSlide","imageLibrary","contentItem","referencedSOPInstanceUID","presentationStateUID","viewer","volumeInstances","clinicalTrialMenu","seriesFragment","borderRight","borderRightWidth","path","element","DicomMetaDictionary","formatValue","val","getRows","depth","keywords","flatMap","keyword","tagInfo","nameMap","match","tag","sequenceItems","sequenceNode","getSortedTags","subscribe","_broadcastEvent","_unsubscribe","_isValidEvent","listenerId","subscription","listeners","unsubscribe","EVENTS","callbackProps","hasListeners","hasCallbacks","listener","defaultInstances","instances","instancesMap","SeriesNumber","SeriesDescription","SeriesDate","SeriesTime","addInstance","newInstance","addInstances","newInstances","len","getInstance","StudyDescription","NumInstances","ModalitiesInStudy","isLoaded","addInstanceToSeries","addInstancesToSeries","createSeriesMetadata","setSeriesMetadata","existingSeries","assign","STUDY_ADDED","INSTANCES_ADDED","SERIES_ADDED","SERIES_UPDATED","_model","studies","_getStudy","aStudy","_getSeries","study","aSeries","BaseImplementation","dicomJSONDatasetOrP10ArrayBuffer","dicomJSONDataset","naturalizedDataset","ArrayBuffer","createStudyMetadata","madeInClient","updateSeriesMetadata","addSeriesMetadata","seriesSummaryMetadata","NumberOfStudyRelatedSeries","addStudy","existingStudy","newStudy","getStudyInstanceUIDs","getStudy","getSeries","getInstanceByImageId","imageId","updateMetadataForSeries","pubSubServiceInterface","setStudy","displaySets","setDisplaySets","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","expandedKeys","setExpandedKeys","searchInput","setSearchInput","debouncedSearchValue","delay","debouncedValue","setDebouncedValue","timer","clearTimeout","useDebounce","handler","DicomMetadataStore","seriesAddedSubscription","instancesAddedSubscription","derivedDisplaySets","processedSeries","ds","displaySetInstanceUID","displaySetList","useMemo","displaySet","displayDate","dateStr","hour","minute","second","monthNum","parseInt","dayNum","date","Date","getMonth","getDate","weekday","toLocaleDateString","monthName","dayFormatted","yearNum","getFullYear","formatDicomDate","showInstanceList","instanceSliderMarks","totalInstances","tableData","transformTagsToTableData","tags","parentKey","keyBase","currentKey","filteredData","searchLower","toLowerCase","matchedKeys","nodeMatches","node","findMatchingPaths","parentPath","currentPath","matchingPaths","child","childPaths","filtered","reconstructTree","paths","nodesAtLevel","className","gap","marginBottom","flex","strong","optionLabelProp","optionFilterProp","fontSize","marks","formatter","SearchOutlined","columns","dataIndex","dataSource","pagination","expandable","expandedRowKeys","onExpandedRowsChange","scroll","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleDicomTagBrowserButtonClick","innerWidth","handleDebugButtonClick","errorMsgs","Authentication","Communication","EncodingDecoding","Visualization","errorNum","errorObj","warncount","Panel","Collapse","showErrorCount","errcount","uuidv4","warnings","warning","handleServerSelectionButtonClick","isServerSelectionModalVisible","isServerSelectionDisabled","prevProps","prevState","worklistButton","userMenuItems","onUserLogout","userMenu","menu","trigger","UserOutlined","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","debugButton","zIndex","dicomTagBrowserButton","FileSearchOutlined","showServerSelectionButton","ApiOutlined","handleServerSelection","url","selectedServerUrl","closeModal","startsWith","onServerSelection","src","process","alt","currentTarget","isDisabled","URL","protocol","TypeError","alignItems","justifyContent","subTitle","defaultPageSize","handleSearch","confirm","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","filterIcon","fetchData","handleChange","numStudies","pageSize","searchOptions","searchForStudies","limit","searchCriteria","fuzzymatching","filters","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","record","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","status","errorMessage","attemptFailedError","DicomWebManager","stores","handleError","updateHeaders","fields","f","headers","retrieveStudyMetadata","studySummaryMetadata","naturalized","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","shouldUpgradeInsecure","upgradeInsecureRequests","qidoPathPrefix","wadoPathPrefix","stowPathPrefix","qidoURLPrefix","wadoURLPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","read","dwc","baseURL","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","_createClientMapping","gcpBaseUrl","storageClassMapping","default","storageClasses","pathUrl","server","auth","handleDICOMwebError","logServerError","errorMessages","setting","Authorization","storedPath","localStorage","getItem","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","addGcpSecondaryAnnotationServer","wasAuthSuccessful","serverId","COMPREHENSIVE_SR","COLOR_SOFTCOPY_PRESENTATION_STATE","GRAYSCALE_SOFTCOPY_PRESENTATION_STATE","PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE","tmpClient","redirectTo","setItem","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}