{"version":3,"file":"static/js/829.c3778037.chunk.js","mappings":"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","sources":["components/Description.tsx","valueUtils.ts","components/Patient.tsx","components/Study.tsx","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","data/uids.tsx","components/SlideViewer.tsx","data/slides.tsx","components/CaseViewer.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../valueUtils'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Gender',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../valueUtils'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\n\ninterface SlideItemProps {\n  client: DicomWebManager\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = {\n    isLoading: false\n  }\n\n  private readonly overviewViewport = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewport.current !== null) {\n        this.overviewViewport.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of series ' +\n          metadata.SeriesInstanceUID\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.client,\n          metadata: metadata,\n          resizeFactor: 1\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewport.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.render({\n        container: this.overviewViewport.current\n      })\n      this.overviewViewer.resize()\n    }\n    const attributes = []\n    const description = this.props.slide.description\n    if (description != null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ height: '100px' }} ref={this.overviewViewport} />\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  client: DicomWebManager\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          client={this.props.client}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (checked: boolean, event: Event): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: string[]\n  visibleRoiUIDs: string[]\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: ({ roiUID }: { roiUID: string }) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (checked: boolean, event: Event): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection({ roiUID: object.key })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.includes(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.length > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={this.props.selectedRoiUIDs}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState({ currentStyle: { opacity: value } })\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value !== undefined) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const identifier = `Annotation Group ${this.props.annotationGroup.number}`\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Label',\n        value: this.props.annotationGroup.label\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.annotationGroup.algorithmName\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      }\n    ]\n\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const measurementsSequence = item.MeasurementsSequence ?? []\n\n    const measurementOptions = measurementsSequence.map(measurementItem => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      const key = `${name.CodingSchemeDesignator}-${name.CodeValue}`\n      return (\n        <Select.Option\n          key={key}\n          value={key}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const settings = (\n      <div>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        <Divider plain>\n          Exploration\n        </Divider>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={8}>\n            Measurement\n          </Col>\n          <Col span={16}>\n            <Select\n              style={{ minWidth: '65px', width: '90%' }}\n              onSelect={this.handleMeasurementSelection}\n              key='annotation-group-measurements'\n              defaultValue={undefined}\n            >\n              {measurementOptions}\n            </Select>\n          </Col>\n        </Row>\n      </div>\n    )\n\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: string[]\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n    }\n  }\n  onAnnotationGroupVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<AnnotationGroupListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.includes(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    throw new Error(\n      'Content item \"Imaging Measurements\" not found.' +\n      'Content of Comprehensive 3D SR document is not structured based on ' +\n      'TID 1500 \"Measurement Report\".'\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    var observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Tracking Unique Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Finding\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Image Region\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    var scoord3d: dmv.scoord3d.Scoord3D\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        throw new Error(\n          'Content item \"Image Region\" has unknown graphic type ' +\n          `\"${regionItem.GraphicType}\". ` +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen UID\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen Container Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    var groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    var title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { opacity: value }\n    })\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: value,\n        limitValues: state.currentStyle.limitValues\n      }\n    }))\n  }\n\n  handleColorRChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    specimenDescriptions.forEach(description => {\n      const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] = (\n        description.SpecimenPreparationSequence ?? []\n      )\n      specimenPreparationSteps.forEach(\n        (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n          step.SpecimenPreparationStepContentItemSequence.forEach((\n            item: (\n              dcmjs.sr.valueTypes.CodeContentItem |\n              dcmjs.sr.valueTypes.TextContentItem |\n              dcmjs.sr.valueTypes.UIDRefContentItem |\n              dcmjs.sr.valueTypes.PNameContentItem |\n              dcmjs.sr.valueTypes.DateTimeContentItem\n            ),\n            index: number\n          ) => {\n            const name = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptNameCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n            })\n            if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n              item = item as dcmjs.sr.valueTypes.CodeContentItem\n              const value = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptCodeSequence[0].CodeValue,\n                schemeDesignator:\n                  item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptCodeSequence[0].CodeMeaning\n              })\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                  attributes.push({\n                    name: 'Tissue stain',\n                    value: value.CodeMeaning\n                  })\n                }\n              }\n            } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n              item = item as dcmjs.sr.valueTypes.TextContentItem\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                  attributes.push({\n                    name: 'Tissue stain',\n                    value: item.TextValue\n                  })\n                }\n              }\n            }\n          })\n        }\n      )\n    })\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button, Menu, Select, Space } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: string[]\n  activeOpticalPathIdentifiers: string[]\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.includes(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.includes(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Button\n            icon={<AppstoreAddOutlined />}\n            type='primary'\n            onClick={this.handleItemAddition}\n          />\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      mappingUID: this.props.mapping.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState(state => ({\n      currentStyle: {\n        opacity: value\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    const identifier = `Mapping ${this.props.mapping.number}`\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Label',\n        value: this.props.mapping.label\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: string[]\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.includes(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      segmentUID: this.props.segment.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState({ currentStyle: { opacity: value } })\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: string[]\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.includes(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","export enum SOPClassUIDs {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","import React from 'react'\nimport {\n  RouteComponentProps,\n  withRouter\n} from 'react-router-dom'\nimport {\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space\n} from 'antd'\nimport { UndoOutlined } from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { findContentItemsByName } from '../utils/sr'\nimport { Slide } from '../data/slides'\nimport { SOPClassUIDs } from '../data/uids'\n\nconst _buildKey = (concept: dcmjs.sr.coding.CodedConcept): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    throw new Error(`No finding found for ROI ${roi.uid}`)\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _constructViewers = ({ client, slide, preload }: {\n  client: dwc.api.DICOMwebClient\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  const volumeViewer = new dmv.viewer.VolumeImageViewer({\n    client: client,\n    metadata: slide.volumeImages,\n    controls: ['overview'],\n    preload: preload\n  })\n  volumeViewer.activateSelectInteraction({})\n\n  let labelViewer\n  if (slide.labelImages.length > 0) {\n    labelViewer = new dmv.viewer.LabelImageViewer({\n      client: client,\n      metadata: slide.labelImages[0],\n      resizeFactor: 1,\n      orientation: 'vertical'\n    })\n  }\n\n  return { volumeViewer, labelViewer }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  client: DicomWebManager\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload?: boolean\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n}\n\ninterface SlideViewerState {\n  selectedRoiUIDs: string[]\n  visibleRoiUIDs: string[]\n  visibleSegmentUIDs: string[]\n  visibleMappingUIDs: string[]\n  visibleAnnotationGroupUIDs: string[]\n  visibleOpticalPathIdentifiers: string[]\n  activeOpticalPathIdentifiers: string[]\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: [0, 126, 163],\n      width: 2\n    },\n    fill: {\n      color: [0, 126, 163, 0.1]\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private readonly selectionColor: number[] = [140, 184, 198]\n\n  private readonly selectedRoiStyle: {\n    stroke?: { color: number[], width: number }\n    fill?: { color: number[] }\n  } = {\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\n    fill: { color: [...this.selectionColor, 0.2] }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = annotation.style\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n\n    console.info(\n      'instantiate viewers for slide of series ' +\n      this.props.seriesInstanceUID\n    )\n    const { volumeViewer, labelViewer } = _constructViewers({\n      client: this.props.client,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will later, potentially using\n     * available presentation state instances.\n     */\n    const activeOpticalPathIdentifiers: string[] = []\n    const visibleOpticalPathIdentifiers: string[] = []\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    this.state = {\n      selectedRoiUIDs: [],\n      visibleRoiUIDs: [],\n      visibleSegmentUIDs: [],\n      visibleMappingUIDs: [],\n      visibleAnnotationGroupUIDs: [],\n      visibleOpticalPathIdentifiers,\n      activeOpticalPathIdentifiers,\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      areRoisHidden: false,\n      pixelDataStatistics: {}\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.client !== previousProps.client\n    ) {\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        client: this.props.client,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: string[] = []\n      const visibleOpticalPathIdentifiers: string[] = []\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.push(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.push(identifier)\n        }\n      })\n      this.setState({\n        visibleRoiUIDs: [],\n        visibleSegmentUIDs: [],\n        visibleMappingUIDs: [],\n        visibleAnnotationGroupUIDs: [],\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    this.props.client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach(i => {\n        const { dataset } = dmv.metadata.formatMetadata(i)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        this.props.client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                presentationState.SOPInstanceUID ===\n                this.props.selectedPresentationStateUID || (\n                  this.props.selectedPresentationStateUID === undefined &&\n                  this.state.presentationStates.length === 0\n                )\n              ) {\n                this.setPresentationState(presentationState)\n                this.setState(state => ({\n                  presentationStates: [\n                    ...state.presentationStates,\n                    presentationState\n                  ],\n                  selectedPresentationStateUID: presentationState.SOPInstanceUID\n                }))\n              } else {\n                this.setState(state => ({\n                  presentationStates: [\n                    ...state.presentationStates,\n                    presentationState\n                  ]\n                }))\n              }\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error('Presentation State could not be loaded')\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Presentation State could not be loaded')\n      console.error(error)\n    })\n  }\n\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        blendingItem.ReferencedImageSequence.forEach(imageItem => {\n          const identifier = opticalPath.identifier\n          const index = opticalPath.sopInstanceUIDs.indexOf(\n            imageItem.ReferencedSOPInstanceUID\n          )\n          if (index >= 0) {\n            const paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n              uid: (\n                blendingItem.PaletteColorLookupTableUID != null\n                  ? blendingItem.PaletteColorLookupTableUID\n                  : ''\n              ),\n              redDescriptor:\n                blendingItem.RedPaletteColorLookupTableDescriptor,\n              greenDescriptor:\n                blendingItem.GreenPaletteColorLookupTableDescriptor,\n              blueDescriptor:\n                blendingItem.BluePaletteColorLookupTableDescriptor,\n              redData: (\n                (blendingItem.RedPaletteColorLookupTableData != null)\n                  ? new Uint16Array(\n                    blendingItem.RedPaletteColorLookupTableData\n                  )\n                  : undefined\n              ),\n              greenData: (\n                (blendingItem.GreenPaletteColorLookupTableData != null)\n                  ? new Uint16Array(\n                    blendingItem.GreenPaletteColorLookupTableData\n                  )\n                  : undefined\n              ),\n              blueData: (\n                (blendingItem.BluePaletteColorLookupTableData != null)\n                  ? new Uint16Array(\n                    blendingItem.BluePaletteColorLookupTableData\n                  )\n                  : undefined\n              ),\n              redSegmentedData: (\n                (blendingItem.SegmentedRedPaletteColorLookupTableData != null)\n                  ? new Uint16Array(\n                    blendingItem.SegmentedRedPaletteColorLookupTableData\n                  )\n                  : undefined\n              ),\n              greenSegmentedData: (\n                (blendingItem.SegmentedGreenPaletteColorLookupTableData != null)\n                  ? new Uint16Array(\n                    blendingItem.SegmentedGreenPaletteColorLookupTableData\n                  )\n                  : undefined\n              ),\n              blueSegmentedData: (\n                (blendingItem.SegmentedBluePaletteColorLookupTableData != null)\n                  ? new Uint16Array(\n                    blendingItem.SegmentedBluePaletteColorLookupTableData\n                  )\n                  : undefined\n              )\n            })\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: string[] = []\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.push(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    console.log('DEBUG: ', opticalPathStyles, selectedOpticalPathIdentifiers)\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers\n    }))\n  }\n\n  getRoiStyle = (key: string): dmv.viewer.ROIStyleOptions => {\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotations = (): void => {\n    console.info('search for Comprehensive 3D SR instances')\n    this.props.client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach(i => {\n        const { dataset } = dmv.metadata.formatMetadata(i)\n        const instance = dataset as dmv.metadata.Instance\n        if (instance.SOPClassUID === SOPClassUIDs.COMPREHENSIVE_3D_SR) {\n          console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n          this.props.client.retrieveInstance({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: instance.SeriesInstanceUID,\n            sopInstanceUID: instance.SOPInstanceUID\n          }).then((retrievedInstance): void => {\n            const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n            const { dataset } = dmv.metadata.formatMetadata(data.dict)\n            const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n            /*\n             * Perform a couple of checks to ensure the document content of the\n             * report fullfils the requirements of the application.\n             */\n            if (!_implementsTID1500(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it is not structured according to template ' +\n                'TID 1500 \"MeasurementReport\"'\n              )\n              return\n            }\n            if (!_describesSpecimenSubject(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not describe a specimen subject'\n              )\n              return\n            }\n            if (!_containsROIAnnotations(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not contain any suitable ROI annotations'\n              )\n              return\n            }\n\n            const content = new MeasurementReport(report)\n            content.ROIs.forEach(roi => {\n              console.info(`add ROI \"${roi.uid}\"`)\n              const scoord3d = roi.scoord3d\n              const image = this.props.slide.volumeImages[0]\n              if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                /*\n                 * ROIs may get assigned new UIDs upon re-rendering of the\n                 * page and we need to ensure that we don't add them twice.\n                 * The same ROI may be stored in multiple SR documents and\n                 * we don't want them to show up twice.\n                 * TODO: We should probably either \"merge\" measurements and\n                 * quantitative evaluations or pick the ROI from the \"best\"\n                 * available report (COMPLETE and VERIFIED).\n                 */\n                const doesROIExist = this.volumeViewer.getAllROIs().some(\n                  (otherROI: dmv.roi.ROI): boolean => {\n                    return _areROIsEqual(otherROI, roi)\n                  }\n                )\n                if (!doesROIExist) {\n                  try {\n                    // Add ROI without style such that it won't be visible.\n                    this.volumeViewer.addROI(roi, {})\n                  } catch {\n                    console.error(`could not add ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                }\n              } else {\n                console.debug(\n                  `skip ROI \"${roi.uid}\" ` +\n                  `of SR document \"${report.SOPInstanceUID}\"` +\n                  'because it is defined in another frame of reference'\n                )\n              }\n            })\n          }).catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            message.error('Annotations could not be loaded')\n            console.error(\n              'failed to load ROIs ' +\n              `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n              `of series \"${instance.SeriesInstanceUID}\" ` +\n              `of study \"${this.props.studyInstanceUID}\": `,\n              error\n            )\n          })\n          /*\n           * React is not aware of the fact that ROIs have been added via the\n           * viewer (the viewport is a ref object) and won't show the\n           * annotations in the user interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Annotations could not be loaded')\n      console.error(error)\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = (): void => {\n    console.info('search for Microscopy Bulk Simple Annotations instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'ANN'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          let annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[]\n          annotations = retrievedMetadata.map(metadata => {\n            return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n              metadata\n            })\n          })\n          annotations = annotations.filter(ann => {\n            const refImage = this.props.slide.volumeImages[0]\n            return (\n              ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              ann.ContainerIdentifier === refImage.ContainerIdentifier\n            )\n          })\n          annotations.forEach(ann => {\n            try {\n              this.volumeViewer.addAnnotationGroups(ann)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error(\n                'Microscopy Bulk Simple Annotations cannot be displayed.'\n              )\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              console.error('failed to add annotation groups: ', error)\n            }\n          })\n          /*\n           * React is not aware of the fact that annotation groups have been\n           * added via the viewer (the underlying HTML viewport element is a\n           * ref object) and won't show the annotation groups in the user\n           * interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n            'instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of ' +\n            'Microscopy Bulk Simple Annotations instances: ',\n            error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error(\n        'Search for Microscopy Bulk Simple Annotations instances failed.'\n      )\n      console.error(\n        'failed to search for Microscopy Bulk Simple Annotations instances: ',\n        error\n      )\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = (): void => {\n    console.info('search for Segmentation instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SEG'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach((s, i) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const segmentations: dmv.metadata.Segmentation[] = []\n          retrievedMetadata.forEach(metadata => {\n            const seg = new dmv.metadata.Segmentation({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              seg.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              segmentations.push(seg)\n            }\n          })\n          if (segmentations.length > 0) {\n            try {\n              this.volumeViewer.addSegments(segmentations)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error('Segmentations cannot be displayed')\n              console.error('failed to add segments: ', error)\n            }\n            /*\n           * React is not aware of the fact that segments have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the segments in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Segmentation instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of Segmentation instances: ',\n            error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Search for Segmentation instances failed.')\n      console.error('failed to search for Segmentation instances: ', error)\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = (): void => {\n    console.info('search for Parametric Map instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'OT'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const parametricMaps: dmv.metadata.ParametricMap[] = []\n          retrievedMetadata.forEach(metadata => {\n            const pm = new dmv.metadata.ParametricMap({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              pm.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              parametricMaps.push(pm)\n            }\n          })\n          if (parametricMaps.length > 0) {\n            try {\n              this.volumeViewer.addParameterMappings(parametricMaps)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error('Parametric Map cannot be displayed')\n              console.error('failed to add mappings: ', error)\n            }\n            /*\n           * React is not aware of the fact that mappings have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the mappings in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Parametric Map instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of Parametric Map instances: ', error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Search for Parametric Map instances failed.')\n      console.error('failed to search for Parametric Map instances: ', error)\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({ isLoading: true })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewportRef.current.innerHTML = ''\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewportRef.current.innerHTML = ''\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    this.addAnnotations()\n    this.addAnnotationGroups()\n    this.addSegmentations()\n    this.addParametricMaps()\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: [...state.visibleRoiUIDs]\n    }))\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => ({\n        visibleRoiUIDs: [...state.visibleRoiUIDs, roi.uid]\n      }))\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi !== null) {\n      console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n      this.volumeViewer.setROIStyle(selectedRoi.uid, this.selectedRoiStyle)\n      const key = _getRoiKey(selectedRoi)\n      this.volumeViewer.getAllROIs().forEach((roi) => {\n        if (roi.uid !== selectedRoi.uid) {\n          this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n        }\n      })\n      this.setState({ selectedRoiUIDs: [selectedRoi.uid] })\n    } else {\n      this.setState({ selectedRoiUIDs: [] })\n    }\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo = event.detail.payload\n    if (\n      frameInfo.sopClassUID === SOPClassUIDs.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (!(opticalPathIdentifier in this.state.pixelDataStatistics)) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        let min = 0\n        let max = 0\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, size)\n          min = Math.min(min, ...pixels)\n          max = Math.max(max, ...pixels)\n        }\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  componentWillUnmount (): void {\n    window.removeEventListener('beforeunload', this.componentCleanup)\n    this.componentCleanup()\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n\n    const onKeyUp = (\n      event: KeyboardEvent\n    ): void => {\n      if (event.key === 'Escape') {\n        if (this.state.isRoiDrawingActive) {\n          console.info('deactivate drawing of ROIs')\n          this.volumeViewer.deactivateDrawInteraction()\n          this.volumeViewer.activateSelectInteraction({})\n          this.setState({ isRoiDrawingActive: false })\n        } else if (this.state.isRoiModificationActive) {\n          console.info('deactivate modification of ROIs')\n          this.volumeViewer.deactivateModifyInteraction()\n          this.volumeViewer.activateSelectInteraction({})\n          this.setState({ isRoiModificationActive: false })\n        } else if (this.state.isRoiTranslationActive) {\n          console.info('deactivate modification of ROIs')\n          this.volumeViewer.deactivateTranslateInteraction()\n          this.volumeViewer.activateSelectInteraction({})\n          this.setState({ isRoiTranslationActive: false })\n        }\n      } else if (event.key === 'd') {\n        this.handleRoiDrawing()\n        console.info('activate drawing of ROIs')\n        this.setState({\n          isAnnotationModalVisible: true,\n          isRoiDrawingActive: true,\n          isRoiModificationActive: false,\n          isRoiTranslationActive: false\n        })\n        this.volumeViewer.deactivateSelectInteraction()\n        this.volumeViewer.deactivateSnapInteraction()\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.deactivateModifyInteraction()\n      } else if (event.key === 'm') {\n        this.handleRoiModification()\n      } else if (event.key === 't') {\n        this.handleRoiTranslation()\n      } else if (event.key === 'r') {\n        this.handleRoiRemoval()\n      } else if (event.key === 'v') {\n        this.handleRoiVisibilityChange()\n      } else if (event.key === 's') {\n        this.handleReportGeneration()\n      }\n    }\n    document.body.addEventListener(\n      'keyup',\n      onKeyUp\n    )\n  }\n\n  componentDidMount (): void {\n    window.addEventListener('beforeunload', this.componentCleanup)\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      console.error('could not complete annotation configuration')\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    // Metadata should be sorted such that the image with the highest\n    // resolution is the last item in the array.\n    const refImage = metadata[metadata.length - 1]\n    // We assume that there is only one specimen (tissue section) per\n    // ontainer (slide). Only the tissue section is tracked with a unique\n    // identifier, even if the section may be composed of different biological\n    // samples.\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\n      console.error('more than one specimen has been described for the slide')\n    }\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n    console.debug('create Observation Context')\n    var observer\n    if (this.props.user !== undefined) {\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: this.props.user.name,\n        loginName: this.props.user.email\n      })\n    } else {\n      console.warn('no user information available')\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: 'ANONYMOUS'\n      })\n    }\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121006',\n          schemeDesignator: 'DCM',\n          meaning: 'Person'\n        }),\n        observerIdentifyingAttributes: observer\n      }),\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121007',\n          schemeDesignator: 'DCM',\n          meaning: 'Device'\n        }),\n        observerIdentifyingAttributes:\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\n            uid: this.props.app.uid,\n            manufacturerName: 'MGH Computational Pathology',\n            modelName: this.props.app.name\n          })\n      }),\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\n          value: '121027',\n          schemeDesignator: 'DCM',\n          meaning: 'Specimen'\n        }),\n        subjectClassSpecificContext:\n          new dcmjs.sr.templates.SubjectContextSpecimen({\n            uid: refSpecimen.SpecimenUID,\n            identifier: refSpecimen.SpecimenIdentifier,\n            containerIdentifier: refImage.ContainerIdentifier\n          })\n      })\n    })\n\n    console.debug('encode Imaging Measurements')\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\n    for (let i = 0; i < rois.length; i++) {\n      const roi = rois[i]\n      if (!this.state.visibleRoiUIDs.includes(roi.uid as never)) {\n        continue\n      }\n      let findingType = roi.evaluations.find(\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n        }\n      )\n      if (findingType === undefined) {\n        throw new Error(`No finding type was specified for ROI \"${roi.uid}\"`)\n      }\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.properties.trackingUID ?? roi.uid,\n          identifier: `ROI #${i + 1}`\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: findingType.ConceptCodeSequence[0].CodeValue,\n          schemeDesignator:\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n        }),\n        qualitativeEvaluations: roi.evaluations.filter(\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n          }\n        ),\n        measurements: roi.measurements\n      })\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\n      measurements[0].ContentTemplateSequence = [{\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }]\n      imagingMeasurements.push(...measurements)\n    }\n\n    console.debug('create Measurement Report document content')\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\n      observationContext: observationContext,\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\n        value: '112703',\n        schemeDesignator: 'DCM',\n        meaning: 'Whole Slide Imaging'\n      }),\n      imagingMeasurements: imagingMeasurements\n    })\n\n    console.info('create Comprehensive 3D SR document')\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n      content: measurementReport[0],\n      evidence: [refImage],\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      seriesNumber: 1,\n      seriesDescription: 'Annotation',\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      instanceNumber: 1,\n      manufacturer: 'MGH Computational Pathology',\n      previousVersions: undefined // TODO\n    })\n\n    this.setState({\n      isReportModalVisible: true,\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      var dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      this.props.client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Annotations could not be saved')\n        console.error(error)\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when an annotation has been selected from the\n   * current list of annotations.\n   */\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\n    console.log(`selected ROI ${roiUID}`)\n    this.setState({ selectedRoiUIDs: [roiUID] })\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      var style = {}\n      if (roi.uid === roiUID) {\n        style = this.selectedRoiStyle\n        this.setState(state => ({\n          visibleRoiUIDs: [...state.visibleRoiUIDs, roiUID]\n        }))\n      } else {\n        if (this.state.visibleRoiUIDs.includes(roi.uid as never)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n      this.setState(state => {\n        if (!state.visibleRoiUIDs.includes(roiUID)) {\n          return {\n            visibleRoiUIDs: [...state.visibleRoiUIDs, roiUID]\n          }\n        } else {\n          return {\n            visibleRoiUIDs: state.visibleRoiUIDs\n          }\n        }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => ({\n        visibleRoiUIDs: state.visibleRoiUIDs.filter(uid => uid !== roiUID),\n        selectedRoiUIDs: state.selectedRoiUIDs.filter(uid => uid !== roiUID)\n      }))\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      this.setState(state => ({\n        visibleAnnotationGroupUIDs: state.visibleAnnotationGroupUIDs.concat(\n          annotationGroupUID\n        )\n      }))\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => ({\n        visibleAnnotationGroupUIDs: state.visibleAnnotationGroupUIDs.filter(\n          uid => uid !== annotationGroupUID\n        )\n      }))\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of annotation group ${annotationGroupUID}`)\n    this.volumeViewer.setAnnotationGroupStyle(annotationGroupUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => ({\n        visibleSegmentUIDs: state.visibleSegmentUIDs.concat(segmentUID)\n      }))\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => ({\n        visibleSegmentUIDs: state.visibleSegmentUIDs.filter(uid => {\n          return uid !== segmentUID\n        })\n      }))\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => ({\n        visibleMappingUIDs: state.visibleMappingUIDs.concat(mappingUID)\n      }))\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => ({\n        visibleMappingUIDs: state.visibleMappingUIDs.filter(uid => {\n          return uid !== mappingUID\n        })\n      }))\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => ({\n        visibleOpticalPathIdentifiers:\n          state.visibleOpticalPathIdentifiers.concat(opticalPathIdentifier)\n      }))\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => ({\n        visibleOpticalPathIdentifiers:\n          state.visibleOpticalPathIdentifiers.filter(\n            identifier => identifier !== opticalPathIdentifier\n          )\n      }))\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => ({\n        activeOpticalPathIdentifiers:\n          state.activeOpticalPathIdentifiers.concat(opticalPathIdentifier)\n      }))\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => ({\n        activeOpticalPathIdentifiers:\n          state.activeOpticalPathIdentifiers.filter(\n            identifier => identifier !== opticalPathIdentifier\n          )\n      }))\n    }\n  }\n\n  setDefaultPresentationState (): void {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => a.identifier - b.identifier)\n\n    const visibleOpticalPathIdentifiers: string[] = []\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      // First, hide all optical paths.\n      this.volumeViewer.hideOpticalPath(item.identifier)\n      this.volumeViewer.deactivateOpticalPath(item.identifier)\n      if (item.isMonochromatic) {\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.push(item.identifier)\n        }\n      } else {\n        visibleOpticalPathIdentifiers.push(item.identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first 3 optical paths and set a default value of interest (VOI) window\n     * and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.length === 0) {\n      const defaultColors = [\n        [0, 0, 255],\n        [0, 255, 0],\n        [255, 0, 0]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.length\n          if (numVisible < 3) {\n            const style = this.volumeViewer.getOpticalPathStyle(item.identifier)\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.push(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.length} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: visibleOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: visibleOpticalPathIdentifiers\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setDefaultPresentationState()\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.history.push(urlPath)\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      const presentationState = this.state.presentationStates.find(item => {\n        return item.SOPInstanceUID === value\n      })\n      if (presentationState != null) {\n        this.setPresentationState(presentationState)\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${presentationState.SOPInstanceUID}`\n        this.props.history.push(urlPath)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Presentation State could not be found')\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.setDefaultPresentationState()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.volumeViewer.isDrawInteractionActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.length > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: [],\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: [],\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (this.volumeViewer.areROIsVisible) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    annotationGroups.push(...this.volumeViewer.getAllAnnotationGroups())\n\n    const openSubMenuItems = ['specimens', 'opticalpaths', 'annotations']\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map(finding => {\n      return (\n        <Select.Option\n          key={finding.CodeValue}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const selections: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach(evaluation => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={code.CodeValue}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        selections.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      selections.push(\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationGeometryTypeSelection}\n          key='annotation-geometry-type'\n        >\n          {geometryTypeOptions}\n        </Select>\n      )\n      selections.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const defaultOpticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier < b.identifier) {\n        return -1\n      } else if (a.identifier > b.identifier) {\n        return 1\n      }\n      return 0\n    })\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = this.volumeViewer.getOpticalPathStyle(identifier)\n      defaultOpticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='opticalpaths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={defaultOpticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = this.state.presentationStates.map(\n        presentationState => {\n          return (\n            <Select.Option\n              key={presentationState.SOPInstanceUID}\n              value={presentationState.SOPInstanceUID}\n              dropdownMatchSelectWidth={false}\n              size='small'\n            >\n              {presentationState.ContentDescription}\n            </Select.Option>\n          )\n        }\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentationStates' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              defaultValue={this.props.selectedPresentationStateUID}\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Btn\n              icon={<UndoOutlined />}\n              type='primary'\n              onClick={this.handlePresentationStateReset}\n            />\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetricmaps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametricmaps')\n    }\n\n    let annotationGroupMenu\n    if (annotationGroups.length > 0) {\n      const defaultAnnotationGroupStyles: {\n        [annotationGroupUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const annotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotationGroups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row>\n          <Button\n            tooltip='Draw ROI [d]'\n            icon={FaDrawPolygon}\n            onClick={this.handleRoiDrawing}\n            isSelected={this.state.isRoiDrawingActive}\n          />\n          <Button\n            tooltip='Modify ROIs [m]'\n            icon={FaHandPointer}\n            onClick={this.handleRoiModification}\n            isSelected={this.state.isRoiModificationActive}\n          />\n          <Button\n            tooltip='Translate ROIs [t]'\n            icon={FaHandPaper}\n            onClick={this.handleRoiTranslation}\n            isSelected={this.state.isRoiTranslationActive}\n          />\n          <Button\n            tooltip='Remove selected ROI [r]'\n            onClick={this.handleRoiRemoval}\n            icon={FaTrash}\n          />\n          <Button\n            tooltip='Show/Hide ROIs [v]'\n            icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n            onClick={this.handleRoiVisibilityChange}\n            isSelected={this.state.areRoisHidden}\n          />\n          <Button\n            tooltip='Save ROIs [s]'\n            icon={FaSave}\n            onClick={this.handleReportGeneration}\n          />\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    /* It would be nicer to use the ant Spin component, but that causes issues\n     * with the positioning of the viewport.\n     */\n    let loadingDisplay = 'none'\n    if (this.state.isLoading) {\n      loadingDisplay = 'block'\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div className='dimmer' style={{ display: loadingDisplay }} />\n          <div className='spinner' style={{ display: loadingDisplay }} />\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden'\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            visible={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {selections}\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n          >\n            <Menu.SubMenu key='label' title='Slide label'>\n              <Menu.Item style={{ height: '100%' }}>\n                <div\n                  style={{ height: '220px' }}\n                  ref={this.labelViewportRef}\n                />\n              </Menu.Item>\n            </Menu.SubMenu>\n            {specimenMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\ninterface SlideImageCollection {\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      throw new Error('Value of option \"images\" have been non-zero length.')\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = new Set([] as string[])\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      frameOfReferenceUIDs.add(image.FrameOfReferenceUID)\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (hasImageFlavor(image, ImageFlavors.VOLUME)) {\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.THUMBNAIL)) {\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        overviewImages.push(image)\n      }\n    })\n    if (volumeImages.length === 0) {\n      throw new Error('At least one volume image must be provided for a slide.')\n    } else {\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        throw new Error(\n          'All volume images of a slide must have the same number of ' +\n          'Samples per Pixel.'\n        )\n      }\n    }\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n    if (containerIdentifiers.size !== 1) {\n      throw new Error(\n        'All images of a slide must have the same Container Identifier.'\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n    if (frameOfReferenceUIDs.size !== 1) {\n      throw new Error(\n        'All images of a slide must have the same Frame of Reference UID.'\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs][0]\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) => {\n        return (\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n        )\n      })\n      const labelImages = series.filter((image) => {\n        return hasImageFlavor(image, ImageFlavors.LABEL)\n      })\n      const overviewImages = series.filter((image) => {\n        return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n      })\n\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const filteredOverviewImages = overviewImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: labelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...labelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imageA = a.volumeImages[0]\n    const imageB = b.volumeImages[0]\n    if (imageA.SeriesNumber != null && imageB.SeriesNumber != null) {\n      return Number(imageA.SeriesNumber) - Number(imageB.SeriesNumber)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import React from 'react'\nimport {\n  Switch,\n  Route,\n  RouteComponentProps,\n  withRouter\n} from 'react-router-dom'\nimport {\n  Layout,\n  message,\n  Menu\n} from 'antd'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { Slide, createSlides } from '../data/slides'\nimport { SOPClassUIDs } from '../data/uids'\n\ninterface ViewerProps extends RouteComponentProps {\n  client: DicomWebManager\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload?: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\ninterface ViewerState {\n  slides: Slide[]\n  isLoading: boolean\n}\n\nclass Viewer extends React.Component<ViewerProps, ViewerState> {\n  state = {\n    slides: [],\n    isLoading: false\n  }\n\n  constructor (props: ViewerProps) {\n    super(props)\n    this.handleSeriesSelection = this.handleSeriesSelection.bind(this)\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    this.fetchImageMetadata().then(\n      (metadata: dmv.metadata.VLWholeSlideMicroscopyImage[][]) => {\n        this.setState({\n          slides: createSlides(metadata),\n          isLoading: false\n        })\n      }\n    ).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error(\n        'An error occured. ' +\n          'Image metadata could not be retrieved or decoded.'\n      )\n      console.error(error)\n      this.setState({ isLoading: false })\n    })\n  }\n\n  /**\n   * Fetch metadata for VL Whole Slide Microscopy Image instances of the study.\n   *\n   * @returns Metadata of image instances of the study grouped per series\n   */\n  async fetchImageMetadata (): Promise<dmv.metadata.VLWholeSlideMicroscopyImage[][]> {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    const studyInstanceUID = this.props.studyInstanceUID\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n    const matchedSeries = await this.props.client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(matchedSeries.map(async (s) => {\n      const { dataset } = dmv.metadata.formatMetadata(s)\n      const loadingSeries = dataset as dmv.metadata.Series\n      console.info(\n        `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n      )\n      const retrievedMetadata = await this.props.client.retrieveSeriesMetadata({\n        studyInstanceUID: this.props.studyInstanceUID,\n        seriesInstanceUID: loadingSeries.SeriesInstanceUID\n      })\n\n      const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n      retrievedMetadata.forEach((item, index) => {\n        if (item['00080016'] !== undefined) {\n          const sopClassUID = item['00080016'].Value[0]\n          if (sopClassUID === SOPClassUIDs.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        }\n      })\n\n      if (seriesImages.length > 0) {\n        images.push(seriesImages)\n      }\n    }))\n\n    return images\n  }\n\n  handleSeriesSelection (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ): void {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${this.props.studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n    if (\n      this.props.location.pathname.includes('/series/') &&\n      this.props.location.search != null\n    ) {\n      urlPath += this.props.location.search\n    }\n    this.props.history.push(urlPath)\n  }\n\n  render (): React.ReactNode {\n    if (this.state.slides.length === 0) {\n      return null\n    }\n    const firstSlide = this.state.slides[0] as Slide\n    const volumeInstances = firstSlide.volumeImages\n    if (volumeInstances.length === 0) {\n      return null\n    }\n    const refImage = volumeInstances[0]\n\n    /* If a series is encoded in the path, route the viewer to this series.\n     * Otherwise select the first series correspondent to\n     * the first slide contained in the study.\n     */\n    let selectedSeriesInstanceUID: string\n    if (this.props.location.pathname.includes('series/')) {\n      const fragments = this.props.location.pathname.split('/')\n      selectedSeriesInstanceUID = fragments[4]\n    } else {\n      selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Sider\n          width={300}\n          style={{\n            height: '100%',\n            borderRight: 'solid',\n            borderRightWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={['patient', 'case', 'slides']}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n          >\n            <Menu.SubMenu key='patient' title='Patient'>\n              <Patient metadata={refImage} />\n            </Menu.SubMenu>\n            <Menu.SubMenu key='case' title='Case'>\n              <Study metadata={refImage} />\n            </Menu.SubMenu>\n            <Menu.SubMenu key='slides' title='Slides'>\n              <SlideList\n                client={this.props.client}\n                metadata={this.state.slides}\n                selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n                onSeriesSelection={this.handleSeriesSelection}\n              />\n            </Menu.SubMenu>\n          </Menu>\n        </Layout.Sider>\n\n        <Switch>\n          <Route\n            exact\n            path='/studies/:StudyInstanceUID/series/:SeriesInstanceUID'\n            render={(routeProps) => {\n              const selectedSlide = this.state.slides.find((slide: Slide) => {\n                return slide.seriesInstanceUIDs.find((uid: string) => {\n                  return uid === routeProps.match.params.SeriesInstanceUID\n                })\n              })\n              const params = new URLSearchParams(routeProps.location.search)\n              let presentationStateUID: string|null|undefined = params.get(\n                'state'\n              )\n              if (presentationStateUID === null) {\n                presentationStateUID = undefined\n              }\n              let viewer = null\n              if (selectedSlide != null) {\n                viewer = (\n                  <SlideViewer\n                    client={this.props.client}\n                    studyInstanceUID={this.props.studyInstanceUID}\n                    seriesInstanceUID={routeProps.match.params.SeriesInstanceUID}\n                    selectedPresentationStateUID={presentationStateUID}\n                    slide={selectedSlide}\n                    preload={this.props.preload}\n                    annotations={this.props.annotations}\n                    enableAnnotationTools={this.props.enableAnnotationTools}\n                    app={this.props.app}\n                    user={this.props.user}\n                  />\n                )\n              }\n              return viewer\n            }}\n          />\n        </Switch>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(Viewer)\n","import React from 'react'\nimport {\n  NavLink,\n  RouteComponentProps,\n  withRouter\n} from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Menu,\n  Modal,\n  Row,\n  Space\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  UnorderedListOutlined,\n  UserOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    this.state = {\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: true\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  render (): React.ReactNode {\n    var user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = <Menu items={userMenuItems} />\n      user = (\n        <Dropdown overlay={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const handleServerSelectionInput = (event: any): void => {\n      const value = event.target.value\n      let isDisabled = true\n      if (value != null) {\n        try {\n          const url = new URL(value)\n          if (url.protocol.startsWith('http') && url.pathname.length > 0) {\n            isDisabled = false\n          }\n        } catch (TypeError) {}\n      }\n      this.setState({\n        selectedServerUrl: value,\n        isServerSelectionDisabled: isDisabled\n      })\n    }\n\n    const handleServerSelectionCancellation = (event: any): void => {\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const handleServerSelection = (event: any): void => {\n      const url = this.state.selectedServerUrl\n      let closeModal = false\n      if (url != null && url !== '') {\n        if (url.startsWith('http://') || url.startsWith('https://')) {\n          this.props.onServerSelection({ url })\n          closeModal = true\n        }\n      }\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: !closeModal,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row>\n            <Col>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' />\n            <Col>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          visible={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={handleServerSelection}\n          onCancel={handleServerSelectionCancellation}\n        >\n          <Input\n            placeholder='Enter base URL of DICOMweb Study Service'\n            onChange={handleServerSelectionInput}\n            onPressEnter={handleServerSelection}\n            addonAfter={\n              this.state.isServerSelectionDisabled\n                ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n            }\n          />\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\nimport {\n  Button,\n  Input,\n  message,\n  Space,\n  Table,\n  TablePaginationConfig\n} from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { parseDate, parseName, parseSex, parseTime } from '../valueUtils'\n\ninterface WorklistProps extends RouteComponentProps {\n  client: DicomWebManager\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    this.props.client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map((study) => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('An error occured. Search for studies failed.')\n      console.error(error)\n    })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.client !== previousProps.client) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.history.push(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    this.props.client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map((study) => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    }).catch(() => message.error('Request to search for studies failed.'))\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\n\nconst createUser = (userData: UserData): User => {\n  const profile = userData.profile\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      throw Error('Failed to obtain user \"name\" and \"email\".')\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    throw Error('Failed to obtain user profile.')\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        throw Error('Failed to obtain access token.')\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        throw Error('Failed to obtain user information.')\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        throw Error('At least one server needs to be configured.')\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        throw new Error(\n          'Either path or full URL needs to be configured for server.'\n        )\n      }\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      throw new Error('Only one store is supported for now.')\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveStudyMetadata(options)\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveSeriesMetadata(options)\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    return await this.stores[0].client.retrieveInstance(options)\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Redirect,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { joinUrl } from './utils/url'\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport DicomWebManager from './DicomWebManager'\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  client: DicomWebManager\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    }\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach(\n        ({ status, message }: ErrorMessageSettings) => {\n          if (error.status === status) {\n            this.setState({\n              error: {\n                status: error.status,\n                message\n              }\n            })\n          }\n        }\n      )\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      throw Error('One server needs to be configured.')\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n\n    this.state = {\n      client: new DicomWebManager({\n        baseUri: baseUri,\n        settings: props.config.servers,\n        onError: this.handleDICOMwebError\n      }),\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    const client = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    client.updateHeaders(this.state.client.headers)\n    this.setState({ client })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    console.info(\n      `handle sign in of user \"${user.name}\" and ` +\n      `update authorization token \"${authorization}\"`\n    )\n    const client = this.state.client\n    client.updateHeaders({ Authorization: authorization })\n    const fullPath = window.location.pathname\n    const basePath = this.props.config.path\n    let path = fullPath.substring(basePath.length)\n    if (basePath === '/' || basePath === '') {\n      path = fullPath\n    }\n    this.setState({\n      user: user,\n      client: client,\n      wasAuthSuccessful: true,\n      isLoading: false,\n      redirectTo: path\n    })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error('sign-in failed ', error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Could not sign-in user.')\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableAnnotationTools = !(\n      this.props.config.disableAnnotationTools ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist client={this.state.client} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Redirect push to={this.state.redirectTo} />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Switch>\n            <Route\n              path='/studies/:StudyInstanceUID'\n              render={(routeProps) => (\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <CaseViewer\n                      client={this.state.client}\n                      user={this.state.user}\n                      annotations={this.props.config.annotations}\n                      preload={this.props.config.preload}\n                      app={appInfo}\n                      enableAnnotationTools={enableAnnotationTools}\n                      studyInstanceUID={routeProps.match.params.StudyInstanceUID}\n                    />\n                  </Layout.Content>\n                </Layout>\n              )}\n            />\n            <Route exact path='/logout'>\n              <Layout style={layoutStyle}>\n                <Header\n                  app={appInfo}\n                  user={this.state.user}\n                  showWorklistButton={false}\n                  onServerSelection={this.handleServerSelection}\n                  onUserLogout={isLogoutPossible ? onLogout : undefined}\n                  showServerSelectionButton={enableServerSelection}\n                />\n                Logged out\n              </Layout>\n            </Route>\n            <Route exact path='/'>\n              <Layout style={layoutStyle}>\n                <Header\n                  app={appInfo}\n                  user={this.state.user}\n                  showWorklistButton={false}\n                  onServerSelection={this.handleServerSelection}\n                  onUserLogout={isLogoutPossible ? onLogout : undefined}\n                  showServerSelectionButton={enableServerSelection}\n                />\n                <Layout.Content style={layoutContentStyle}>\n                  {worklist}\n                </Layout.Content>\n              </Layout>\n            </Route>\n          </Switch>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","Patient","metadata","PatientID","PatientName","PatientSex","PatientBirthDate","Study","AccessionNumber","StudyID","StudyDate","StudyTime","SlideItem","state","isLoading","overviewViewport","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","console","info","SeriesInstanceUID","dmv","client","resizeFactor","render","container","resize","description","push","style","height","containerIdentifier","ref","seriesInstanceUIDs","SlideList","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","AnnotationItem","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","AnnotationList","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","includes","paddingTop","paddingBottom","selectedRoiUIDs","onClick","AnnotationGroupItem","handleMeasurementSelection","handleOpacityChange","currentStyle","opacity","defaultStyle","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","option","codeComponents","measurement","schemeDesignator","meaning","number","algorithmName","propertyCategory","propertyType","AnnotationGroupSequence","findIndex","AnnotationGroupUID","measurementOptions","MeasurementsSequence","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","settings","justify","gutter","range","min","max","step","plain","minWidth","defaultValue","direction","placement","content","overlayStyle","type","shape","SettingOutlined","AnnotationGroupList","annotationGroups","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupVisibilityChange","onAnnotationGroupStyleChange","Button","handleClick","text","button","Icon","isSelected","tooltip","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","Error","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","GraphicType","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","slice","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ContainerIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","Report","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","Item","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","SpecimenItem","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","SpecimenList","overflowY","OpticalPathItem","handleLimitChange","handleLowerLimitChange","handleUpperLimitChange","handleColorRChange","handleColorGChange","handleColorBChange","handleRemoval","getCurrentColors","color","paletteColorLookupTable","limitValues","previousProps","previousState","opticalPath","opticalPathIdentifier","Array","isArray","rgb2hex","values","data","onRemoval","illuminationWaveLength","illuminationColor","maxValue","Math","pow","BitsAllocated","isMonochromatic","colorSettings","windowSettings","colors","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","OpticalPathList","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","MappingItem","mappingUID","mapping","MappingList","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","SegmentItem","segmentUID","segment","SegmentList","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","SOPClassUIDs","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","_constructViewers","labelViewer","preload","volumeViewer","volumeImages","controls","activateSelectInteraction","labelImages","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","defaultRoiStyle","stroke","fill","roiStyles","selectionColor","selectedRoiStyle","loadPresentationStates","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","instance","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","selectedPresentationStateUID","presentationStates","setPresentationState","catch","error","message","getAllOpticalPaths","opticalPathStyles","ReferencedImageSequence","imageItem","sopInstanceUIDs","indexOf","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","Object","keys","setOpticalPathStyle","activateOpticalPath","showOpticalPath","hideOpticalPath","deactivateOpticalPath","log","getRoiStyle","addAnnotations","SOPClassUID","COMPREHENSIVE_3D_SR","templateSeq","ContentTemplateSequence","TemplateIdentifier","_implementsTID1500","subjectClassValue","retrievedConcept","expectedConcept","_describesSpecimenSubject","debug","measurementGroups","foundRegion","regions","_containsROIAnnotations","image","FrameOfReferenceUID","doesROIExist","getAllROIs","some","otherROI","a","b","graphicType","graphicData","s1","s2","j","_areROIsEqual","addROI","forceUpdate","addAnnotationGroups","searchForSeries","matchedSeries","s","series","retrieveSeriesMetadata","retrievedMetadata","filter","ann","refImage","addSegmentations","segmentations","seg","addSegments","addParametricMaps","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","onRoiModified","onRoiDrawn","detail","payload","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","onRoiSelected","selectedRoi","setROIStyle","onLoadingStarted","onLoadingEnded","onFrameLoadingEnded","frameInfo","sopClassUID","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","channelIdentifier","pixelDataStatistics","chunks","ceil","pixelArray","pixels","stats","numFramesSampled","onRoiRemoved","annotation","finding","geometryTypes","componentSetup","componentCleanup","handleRoiDrawing","handleRoiTranslation","handleRoiModification","handleRoiVisibilityChange","handleRoiRemoval","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationVisibilityChange","handleAnnotationGroupVisibilityChange","handleAnnotationGroupStyleChange","handleReportGeneration","handleReportVerification","handleReportCancellation","handleSegmentVisibilityChange","handleSegmentStyleChange","handleMappingVisibilityChange","handleMappingStyleChange","handleOpticalPathVisibilityChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","generatedReport","isAnnotationModalVisible","isReportModalVisible","isRoiDrawingActive","isRoiTranslationActive","isRoiModificationActive","areRoisHidden","location","pathname","cleanup","isOpticalPathVisible","isOpticalPathActive","document","body","removeEventListener","window","addEventListener","deactivateDrawInteraction","deactivateModifyInteraction","deactivateTranslateInteraction","deactivateSelectInteraction","deactivateSnapInteraction","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","target","selectedMarkup","code","filteredEvaluations","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","observer","refSpecimen","user","loginName","email","warn","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","app","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","find","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","evidence","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","getROI","showAnnotationGroup","concat","hideAnnotationGroup","setAnnotationGroupStyle","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","sort","paletteColorLookupTableUID","defaultColors","numVisible","getOpticalPathStyle","urlPath","history","isDrawInteractionActive","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areROIsVisible","hideROIs","showROIs","getAllSegments","getAllParameterMappings","getAllAnnotationGroups","annotationMenuItems","openSubMenuItems","geometryTypeOptionsMapping","point","circle","box","polygon","line","freehandpolygon","freehandline","selections","defaultActiveFirstOption","onClear","specimenMenu","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","presentationStateOptions","ContentDescription","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","enableAnnotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","loadingDisplay","hasSider","className","display","overflow","visible","onOk","onCancel","okText","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","withRouter","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","Slide","options","opticalPathIdentifiers","Set","containerIdentifiers","frameOfReferenceUIDs","add","VOLUME","THUMBNAIL","LABEL","OVERVIEW","samplesPerPixel","SamplesPerPixel","PhotometricInterpretation","createSlides","slideMetadata","filteredVolumeImages","filteredOverviewImages","slideMetadataIndex","_doesImageBelongToSlide","slideMetadataItem","slides","imageA","imageB","SeriesNumber","Number","Viewer","handleSeriesSelection","fetchImageMetadata","StudyInstanceUID","Promise","all","loadingSeries","seriesImages","search","volumeInstances","borderRight","borderRightWidth","exact","path","routeProps","selectedSlide","match","params","presentationStateUID","URLSearchParams","get","viewer","Header","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleServerSelectionButtonClick","isServerSelectionModalVisible","isServerSelectionDisabled","worklistButton","userMenuItems","onUserLogout","userMenu","overlay","trigger","UserOutlined","e","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","showServerSelectionButton","ApiOutlined","handleServerSelection","url","selectedServerUrl","closeModal","startsWith","onServerSelection","src","process","alt","margin","flex","placeholder","isDisabled","URL","protocol","TypeError","onPressEnter","addonAfter","StopOutlined","CheckOutlined","alignItems","justifyContent","subTitle","Worklist","defaultPageSize","handleSearch","confirm","dataIndex","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","marginBottom","SearchOutlined","filterIcon","filtered","fetchData","handleChange","studies","numStudies","pageSize","searchOptions","ModalitiesInStudy","searchForStudies","study","limit","searchCriteria","fuzzymatching","pagination","filters","columns","String","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","cursor","rowKey","record","dataSource","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","searchParams","hashParams","hash","replace","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","args","apply","status","errorMessage","attemptFailedError","open","DicomWebManager","onError","stores","handleError","updateHeaders","fields","f","headers","reject","retrieveStudyMetadata","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","qidoPathPrefix","qidoURLPrefix","wadoPathPrefix","wadoURLPrefix","stowPathPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","errorInterceptor","read","dwc","baseURL","App","auth","handleDICOMwebError","errorMessages","Authorization","fullPath","basePath","config","wasAuthSuccessful","redirectTo","host","appUri","oidcSettings","oidc","servers","duration","worklist","appInfo","organization","enableWorklist","disableWorklist","disableAnnotationTools","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename","CaseViewer"],"sourceRoot":""}