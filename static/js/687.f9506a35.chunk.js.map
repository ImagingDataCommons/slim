{"version":3,"file":"static/js/687.f9506a35.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","utils/PubSub.js","utils/CustomError.js","services/NotificationMiddleware.js","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","utils/router.tsx","components/ColorSettingsMenu.tsx","components/AnnotationCategoryItem.tsx","components/AnnotationCategoryList.tsx","components/HoveredRoiTooltip.tsx","services/RoiToAnnotationAdapter.ts","components/SlideViewer.tsx","data/slides.tsx","services/fetchImageMetadata.ts","hooks/useSlides.ts","components/CaseViewer.tsx","components/DicomTagBrowser/dicomTagUtils.ts","utils/formatDicomDate.ts","utils/pubSubServiceInterface.ts","utils/createSeriesMetadata.ts","utils/createStudyMetadata.ts","services/DICOMMetadataStore.ts","hooks/useDebounce.ts","components/DicomTagBrowser/DicomTagBrowser.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Sex',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","// Use symbols to prevent exposing private attributes\nconst _subscriptions = Symbol('subscriptions')\nconst _lastSubscriptionId = Symbol('lastSubscriptionId')\n\n/**\n * Class to enable implementation of publish/subscribe pattern\n * @class\n * @classdesc Enables publishing/subscribing\n */\nexport default class PubSub {\n  constructor () {\n    this[_subscriptions] = {}\n    this[_lastSubscriptionId] = 0\n  }\n\n  /**\n   * Adds a subscription callback to the provided event name\n   * @param {string} eventName Event name that will trigger the callback\n   * @param {Function} callback Function to be executed when event is published\n   * @returns {void}\n   */\n  subscribe (eventName, callback) {\n    if (eventName === undefined) {\n      throw new Error('Trying to subscribe to an inexistent event')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('The provided callback must be a function')\n    }\n\n    if (!this[_subscriptions].hasOwnProperty(eventName)) {\n      this[_subscriptions][eventName] = {}\n    }\n\n    const subscriptionId = `sub${this[_lastSubscriptionId]++}`\n    this[_subscriptions][eventName][subscriptionId] = callback\n  }\n\n  /**\n   * Removes a subscription callback for the provided event name\n   * @param {string} eventName Event name for the registerd callback\n   * @param {Function} [callback] Function to have its subscription removed\n   * @returns {void}\n   */\n  unsubscribe (eventName, callback) {\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      if (!callback) {\n        delete callbacks[subscriptionId]\n      } else if (callbacks[subscriptionId] === callback) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n\n  /**\n   * Trigger all registered subscription callbacks for a specific event name\n   * @param {String} eventName Event name to trigger subscriptions from\n   * @param {any} [payload] Payload that will be passed to the callback fuction\n   * @returns {void}\n   */\n  publish (eventName, ...payload) {\n    if (eventName === undefined) {\n      throw new Error('Trying to publish an inexistent event')\n    }\n\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      callbacks[subscriptionId](...payload)\n    }\n  }\n\n  /**\n   * Cleares all subscriptions for current instance\n   * @returns {void}\n   */\n  unsubscribeFromAll () {\n    for (const eventName in this[_subscriptions]) {\n      const callbacks = this[_subscriptions][eventName]\n      for (const subscriptionId in callbacks) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n}\n","const errorTypes = {\n  AUTHENTICATION: 'Authentication',\n  COMMUNICATION: 'Communication',\n  ENCODINGANDDECODING: 'EncodingDecoding',\n  VISUALIZATION: 'Visualization'\n}\n\nclass CustomError extends Error {\n  constructor (type, message) {\n    super()\n    this.message = message\n    this.stack = new Error().stack\n    this.type = type\n  }\n}\n\nexport { errorTypes, CustomError }\n","import PubSub from '../utils/PubSub'\nimport { notification } from 'antd'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nexport const NotificationMiddlewareEvents = {\n  OnError: 'onError',\n  OnWarning: 'onWarning'\n}\n\nexport const NotificationMiddlewareContext = {\n  DICOMWEB: 'dicomweb-client',\n  DMV: 'dicom-microscopy-viewer',\n  DCMJS: 'dcmjs',\n  SLIM: 'slim',\n  AUTH: 'authentication'\n}\n\nconst NotificationType = {\n  TOAST: 'toast',\n  CONSOLE: 'console'\n}\n\n/* Sources of Error:\n  1. 'dicomweb-client': Error while requesting/fetching data, tagged as 'Communication'\n  2. 'slim' and 'dicom-microscopy-viewer' library: Error related to dicom data encoding/decoding,\n  could directly/indirectly impact image-related visualization, tagged as 'Visualization' or\n  'Encoding/Decoding' accordingly\n  3. 'dcmjs' library: Data parsing error, tagged as 'DICOMError'\n  4. 'authentication': Error during user authentication, tagged as 'Authentication'\n  */\nconst NotificationSourceDefinition = {\n  sources: [\n    {\n      category: errorTypes.AUTHENTICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.COMMUNICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.VISUALIZATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.ENCODINGANDDECODING,\n      notificationType: NotificationType.CONSOLE\n    },\n    {\n      category: 'Warning',\n      notificationType: NotificationType.TOAST\n    }\n  ]\n}\n\nclass NotificationMiddleware extends PubSub {\n  constructor () {\n    super()\n\n    const outerContext = (args) => {\n      this.publish(NotificationMiddlewareEvents.OnWarning, Array.from(args).join(' '))\n    }\n\n    (function () {\n      const warn = console.warn\n      console.warn = function () {\n        if (!JSON.stringify(arguments).includes('request')) {\n          outerContext(arguments)\n        }\n        warn.apply(this, Array.prototype.slice.call(arguments))\n      }\n    }())\n  }\n\n  /**\n   * Error handling middleware function\n   *\n   * @param source - source of error - dicomweb-client, dmv, dcmjs or slim itself\n   * @param error - error object\n   */\n  onError (source, error) {\n    const errorCategory = error.type\n    const sourceConfig = NotificationSourceDefinition.sources.find(\n      s => s.category === errorCategory\n    )\n\n    const { notificationType } = sourceConfig\n\n    this.publish(NotificationMiddlewareEvents.OnError, {\n      source,\n      error\n    })\n\n    let notificationMsg\n    if (error instanceof CustomError) {\n      notificationMsg = error.message\n    } else {\n      notificationMsg = String(error)\n    }\n\n    switch (notificationType) {\n      case NotificationType.TOAST:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        return notification.error({\n          message: `${errorCategory} error`,\n          description: notificationMsg,\n          duration: 3\n        })\n\n      case NotificationType.CONSOLE:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        break\n\n      default:\n    }\n  }\n}\n\nexport default new NotificationMiddleware()\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          disableInteractions: true,\n          metadata,\n          resizeFactor: 1,\n          errorInterceptor: (error: CustomError) => {\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.DMV,\n              error\n            )\n          }\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n\n    const attributes = []\n    const description = this.props.slide.description\n    if (description !== null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          {this.props.slide.overviewImages.length > 0\n            ? (\n              <div style={{ height: '100px' }} ref={this.overviewViewportRef} />\n              )\n            : (\n              <div style={{\n                height: '100px',\n                textAlign: 'center',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontSize: '1.5rem',\n                fontWeight: 300,\n                color: '#8F9BA8',\n                letterSpacing: '0.1em'\n              }}\n              >\n                SM\n              </div>\n              )}\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: ({ roiUID }: { roiUID: string }) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection({ roiUID: object.key })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color,\n          limitValues: this.state.currentStyle.limitValues\n        }\n      })\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      uid: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value != null && option.children != null) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      },\n      {\n        name: 'Annotation coordinate type',\n        value: this.props.metadata.AnnotationCoordinateType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const measurementOptions = measurementsSequence.map((measurementItem, i) => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      return (\n        <Select.Option\n          key={i}\n          value={`${name.CodingSchemeDesignator}-${name.CodeValue}`}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    })\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        <></>\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>\n            Color\n          </Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Red\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Green\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Blue\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues != null) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>\n            Exploration\n          </Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>\n              Measurement\n            </Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible = (\n      this.state.isVisible && this.state.currentStyle.measurement == null\n    )\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Badge\n            offset={[-20, 20]}\n            count={' '}\n            style={{\n              borderStyle: 'solid',\n              borderWidth: '1px',\n              borderColor: 'gray',\n              visibility: isBadgeVisible ? 'visible' : 'hidden',\n              backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n            }}\n          >\n            <Description\n              header={this.props.annotationGroup.label}\n              attributes={attributes}\n              selectable\n              hasLongValues\n            />\n          </Badge>\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu, Switch } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupVisibilityChange: ({\n    annotationGroupUID,\n    isVisible\n  }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({\n    uid,\n    styleOptions\n  }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<\nAnnotationGroupListProps,\n{}\n> {\n  constructor (props: AnnotationGroupListProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (checked: boolean): void {\n    if (checked) {\n      this.props.annotationGroups.forEach((annotationGroup) => {\n        this.props.onAnnotationGroupVisibilityChange({\n          annotationGroupUID: annotationGroup.uid,\n          isVisible: checked\n        })\n      })\n      return\n    }\n\n    this.props.visibleAnnotationGroupUIDs.forEach((annotationGroupUID) => {\n      this.props.onAnnotationGroupVisibilityChange({\n        annotationGroupUID,\n        isVisible: checked\n      })\n    })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <>\n        <div\n          style={{\n            paddingLeft: '14px',\n            paddingTop: '7px',\n            paddingBottom: '7px'\n          }}\n        >\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleAnnotationGroupUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu selectable={false}>{items}</Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.ENCODINGANDDECODING,\n        'Content item \"Imaging Measurements\" not found.' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\".'\n      )\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Tracking Unique Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Finding\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Image Region\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: any\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Content item \"Image Region\" has unknown graphic type ' +\n            `\"${regionItem.GraphicType}\". ` +\n            'Content of Comprehensive 3D SR document is not structured ' +\n            'based on TID 1500 \"Measurement Report\" -> ' +\n            'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n          )\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen UID\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Container Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number | null\n  ): void {\n    if (value != null) {\n      const identifier = this.props.opticalPath.identifier\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { opacity: value }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          color: state.currentStyle.color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: value,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    try {\n      specimenDescriptions.forEach(description => {\n        const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] =\n          description.SpecimenPreparationSequence ?? []\n        specimenPreparationSteps.forEach(\n          (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n            step.SpecimenPreparationStepContentItemSequence.forEach((\n              item: (\n                dcmjs.sr.valueTypes.CodeContentItem |\n                dcmjs.sr.valueTypes.TextContentItem |\n                dcmjs.sr.valueTypes.UIDRefContentItem |\n                dcmjs.sr.valueTypes.PNameContentItem |\n                dcmjs.sr.valueTypes.DateTimeContentItem\n              ),\n              index: number\n            ) => {\n              const name = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptNameCodeSequence[0].CodeValue,\n                schemeDesignator:\n                    item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n              })\n              if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n                item = item as dcmjs.sr.valueTypes.CodeContentItem\n                const value = new dcmjs.sr.coding.CodedConcept({\n                  value: item.ConceptCodeSequence[0].CodeValue,\n                  schemeDesignator:\n                      item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                  meaning: item.ConceptCodeSequence[0].CodeMeaning\n                })\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: value.CodeMeaning\n                    })\n                  }\n                }\n              } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n                item = item as dcmjs.sr.valueTypes.TextContentItem\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: item.TextValue\n                    })\n                  }\n                }\n              }\n            })\n          }\n        )\n      })\n    } catch (error: any) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DCMJS,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          error.message\n        )\n      )\n    }\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        mappingUID: this.props.mapping.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: value\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({ currentStyle: { opacity: value } })\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","import React from 'react'\nimport { Checkbox, Col, Divider, InputNumber, Row, Slider } from 'antd'\n\ninterface ColorSettingsMenuProps {\n  annotationGroupsUIDs: string[]\n  defaultStyle: {\n    opacity: number\n    color: number[]\n    contourOnly: boolean\n  }\n  onStyleChange: Function\n}\n\ninterface ColorSettingsMenuState {\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    contourOnly: boolean\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass ColorSettingsMenu extends React.Component<\nColorSettingsMenuProps,\nColorSettingsMenuState\n> {\n  constructor (props: ColorSettingsMenuProps) {\n    super(props)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        contourOnly: this.props.defaultStyle.contourOnly\n      }\n    }\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: this.state.currentStyle.color,\n            opacity: value,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n      this.updateCurrentStyle({ opacity: value })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleShowOutlineOnly (value: boolean): void {\n    this.updateCurrentStyle({ contourOnly: value })\n\n    this.props.annotationGroupsUIDs.forEach((uid) => {\n      this.props.onStyleChange({\n        uid,\n        styleOptions: {\n          color: this.state.currentStyle.color,\n          opacity: this.state.currentStyle.opacity,\n          contourOnly: value\n        }\n      })\n    })\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  updateCurrentStyle ({\n    color,\n    opacity,\n    contourOnly\n  }: {\n    color?: number[]\n    opacity?: number\n    contourOnly?: boolean\n  }): void {\n    this.setState((state) => ({\n      currentStyle: {\n        opacity: opacity ?? state.currentStyle.opacity,\n        color: color ?? state.currentStyle.color,\n        contourOnly: contourOnly ?? state.currentStyle.contourOnly\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    return (\n      <div>\n        {colorSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Checkbox\n            value={this.state.currentStyle.contourOnly}\n            onChange={(event) =>\n              this.handleShowOutlineOnly(event.target.checked)}\n          >\n            Show outline only\n          </Checkbox>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default ColorSettingsMenu\n","import React from 'react'\nimport { Menu, Space, Checkbox, Tooltip, Popover, Button } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { Category, Type } from './AnnotationCategoryList'\nimport ColorSettingsMenu from './ColorSettingsMenu'\n\nconst AnnotationCategoryItem = ({\n  category,\n  onChange,\n  checkedAnnotationUids,\n  onStyleChange,\n  defaultAnnotationStyles,\n  ...props\n}: {\n  category: Category\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const { types } = category\n\n  const onCheckCategoryChange = (e: any): void => {\n    const isVisible = e.target.checked\n    types.forEach((type: Type) => {\n      handleChangeCheckedType({ type, isVisible })\n    })\n  }\n\n  const checkAll = types.every((type: Type) =>\n    type.uids.every((uid: string) => checkedAnnotationUids.has(uid))\n  )\n  const indeterminate =\n    !checkAll &&\n    types.some((type: Type) =>\n      type.uids.some((uid: string) => checkedAnnotationUids.has(uid))\n    )\n\n  const handleChangeCheckedType = ({\n    type,\n    isVisible\n  }: {\n    type: Type\n    isVisible: boolean\n  }): void => {\n    type.uids.forEach((uid: string) => {\n      onChange({ roiUID: uid, isVisible })\n    })\n  }\n\n  return (\n    <Menu.Item\n      style={{ height: '100%', paddingLeft: '3px' }}\n      {...props}\n    >\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px', color: 'black' }}>\n          <Space direction='vertical' align='end'>\n            <Checkbox\n              indeterminate={indeterminate}\n              checked={checkAll}\n              onChange={onCheckCategoryChange}\n            >\n              <Tooltip\n                title={`${category.CodeValue}:${category.CodingSchemeDesignator}`}\n                mouseEnterDelay={1}\n              >\n                {category.CodeMeaning}\n              </Tooltip>\n              <Popover\n                placement='topLeft'\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n                content={() => (\n                  <ColorSettingsMenu\n                    annotationGroupsUIDs={types.reduce(\n                      (acc: string[], type) => {\n                        return [...acc, ...type.uids]\n                      },\n                      []\n                    )}\n                    onStyleChange={onStyleChange}\n                    defaultStyle={\n                      defaultAnnotationStyles[types[0].uids[0]]\n                    }\n                  />\n                )}\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  style={{ marginLeft: '10px' }}\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Checkbox>\n          </Space>\n          {types.map((type: Type) => {\n            const { CodeMeaning, CodingSchemeDesignator, CodeValue, uids } =\n              type\n            const shortenedCodeMeaning = CodeMeaning.slice(0, 22)\n            const displayCodeMeaning = shortenedCodeMeaning === CodeMeaning ? CodeMeaning : `${shortenedCodeMeaning}...`\n            const isChecked = uids.every((uid: string) =>\n              checkedAnnotationUids.has(uid)\n            )\n            const indeterminateType =\n              !isChecked &&\n              uids.some((uid: string) => checkedAnnotationUids.has(uid))\n            return (\n              <div\n                key={`${type.CodingSchemeDesignator}:${type.CodeMeaning}`}\n                style={{\n                  paddingLeft: '25px',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'row'\n                }}\n              >\n                <Checkbox\n                  indeterminate={indeterminateType}\n                  checked={isChecked}\n                  onChange={(e: any) =>\n                    handleChangeCheckedType({\n                      type,\n                      isVisible: e.target.checked\n                    })}\n                />\n                <div style={{ paddingLeft: '5px' }}>\n                  <Tooltip\n                    title={`${CodeValue}:${CodingSchemeDesignator}`}\n                    mouseEnterDelay={1}\n                  >\n                    {displayCodeMeaning}\n                  </Tooltip>\n                  <Popover\n                    placement='topLeft'\n                    overlayStyle={{ width: '350px' }}\n                    title='Display Settings'\n                    content={() => (\n                      <ColorSettingsMenu\n                        annotationGroupsUIDs={type.uids}\n                        onStyleChange={onStyleChange}\n                        defaultStyle={defaultAnnotationStyles[type.uids[0]]}\n                      />\n                    )}\n                  >\n                    <Button\n                      type='primary'\n                      shape='circle'\n                      style={{ marginLeft: '10px' }}\n                      icon={<SettingOutlined />}\n                    />\n                  </Popover>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </Space>\n    </Menu.Item>\n  )\n}\n\nexport default AnnotationCategoryItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport AnnotationCategoryItem from './AnnotationCategoryItem'\n\nexport interface AnnotationCategoryAndType {\n  uid: string\n  type: Omit<Type, 'uids'>\n  category: Omit<Category, 'types'>\n}\nexport interface Type {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  uids: string[]\n}\nexport interface Category {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  types: Type[]\n}\n\nconst getCategories = (annotations: any): Record<string, Category> => {\n  const categories = annotations?.reduce(\n    (\n      categoriesAcc: Record<string, Category & { types: Record<string, Type> }>,\n      annotation: AnnotationCategoryAndType\n    ) => {\n      const { category, type, uid } = annotation\n      const categoryKey = category.CodeMeaning\n      const typeKey = type.CodeMeaning\n\n      const oldCategory = categoriesAcc[categoryKey] ?? {\n        ...category,\n        types: {}\n      }\n      const oldType = oldCategory.types[typeKey] ?? {\n        ...type,\n        uids: []\n      }\n\n      return {\n        ...categoriesAcc,\n        [categoryKey]: {\n          ...oldCategory,\n          types: {\n            ...oldCategory.types,\n            [typeKey]: { ...oldType, uids: [...oldType.uids, uid] }\n          }\n        }\n      }\n    },\n    {}\n  )\n\n  // Normalizing types so that it's an array instead of an object:\n  Object.keys(categories).forEach((categoryKey: string) => {\n    const category = categories[categoryKey]\n    const { types } = category\n    const typesArr = Object.keys(types).map(\n      (typeKey: string) => types[typeKey]\n    )\n    categories[categoryKey].types = typesArr\n  })\n\n  return categories\n}\n\nconst AnnotationCategoryList = ({\n  annotations,\n  onChange,\n  onStyleChange,\n  defaultAnnotationStyles,\n  checkedAnnotationUids\n}: {\n  annotations: AnnotationCategoryAndType[]\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const categories: Record<string, Category> = getCategories(annotations)\n\n  if (Object.keys(categories).length === 0) {\n    return <></>\n  }\n\n  const items = Object.keys(categories).map((categoryKey: string) => {\n    const category = categories[categoryKey]\n    return (\n      <AnnotationCategoryItem\n        key={category.CodeMeaning !== '' ? category.CodeMeaning : `category-${categoryKey}`}\n        category={category}\n        onChange={onChange}\n        onStyleChange={onStyleChange}\n        defaultAnnotationStyles={defaultAnnotationStyles}\n        checkedAnnotationUids={checkedAnnotationUids}\n      />\n    )\n  })\n\n  return <Menu selectable={false}>{items}</Menu>\n}\nexport default AnnotationCategoryList\n","const HoveredRoiTooltip = ({\n  xPosition,\n  yPosition,\n  rois\n}: {\n  xPosition: number\n  yPosition: number\n  rois: Array<{ index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n}): JSX.Element => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: `${yPosition}px`,\n        left: `${xPosition}px`,\n        backgroundColor: 'rgba(230, 230, 230, 0.65)',\n        minWidth: '150px',\n        minHeight: '60px',\n        padding: '20px',\n        fontWeight: 'bold',\n        pointerEvents: 'none'\n      }}\n    >\n      {rois.map((roi, i) => {\n        const attributes = roi.attributes\n        return (\n          <div key={roi.roiUid}>\n            <span>ROI {roi.index}</span>\n            {attributes.map((attr) => {\n              return (\n                <div key={attr.name + roi.roiUid}>\n                  {attr.name}: <span style={{ fontWeight: 500 }}>{attr.value}</span>\n                </div>\n              )\n            })}\n          </div>\n\n        )\n      })}\n    </div>\n  )\n}\n\nexport default HoveredRoiTooltip\n","import * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { AnnotationCategoryAndType } from '../components/AnnotationCategoryList'\n\nexport const adaptRoiToAnnotation = (roi: dmv.roi.ROI): AnnotationCategoryAndType => {\n  const { uid, evaluations } = roi\n\n  const result = {\n    category: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    },\n    type: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    }\n  }\n\n  evaluations.forEach((\n    item: (\n      dcmjs.sr.valueTypes.TextContentItem |\n      dcmjs.sr.valueTypes.CodeContentItem\n    )\n  ) => {\n    const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n    if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n      const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n      const value = codeContentItem.ConceptCodeSequence[0]\n      // For consistency with Segment and Annotation Group\n      if (nameValue === '276214006') {\n        result.category = { ...value }\n      } else if (nameValue === '121071') {\n        result.type = { ...value }\n      }\n    }\n  })\n\n  return {\n    ...result,\n    uid\n  }\n}\n","import React from 'react'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  Descriptions,\n  Divider,\n  InputNumber,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space,\n  Tooltip\n} from 'antd'\nimport { UndoOutlined, CheckOutlined, StopOutlined } from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Equipment from './Equipment'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { findContentItemsByName } from '../utils/sr'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport AnnotationCategoryList, { AnnotationCategoryAndType } from './AnnotationCategoryList'\nimport HoveredRoiTooltip from './HoveredRoiTooltip'\nimport { adaptRoiToAnnotation } from '../services/RoiToAnnotationAdapter'\n\nconst DEFAULT_ROI_STROKE_COLOR: number[] = [255, 234, 0] // [0, 126, 163]\nconst DEFAULT_ROI_FILL_COLOR: number[] = [255, 234, 0, 0.2] // [0, 126, 163, 0.2]\nconst DEFAULT_ROI_STROKE_WIDTH: number = 2\nconst DEFAULT_ROI_RADIUS: number = 5\n\nconst DEFAULT_ANNOTATION_OPACITY = 0.4\nconst DEFAULT_ANNOTATION_STROKE_COLOR = [0, 0, 0]\nconst DEFAULT_ANNOTATION_COLOR_PALETTE = [\n  [255, 0, 0],\n  [0, 255, 0],\n  [0, 0, 255],\n  [255, 255, 0],\n  [0, 255, 255],\n  [0, 0, 0]\n]\n\ninterface StyleOptions {\n  opacity: number\n  color: number[]\n  contourOnly: boolean\n}\n\nconst _buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    console.warn(`no finding found for ROI ${roi.uid}`)\n    return\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: DEFAULT_ROI_STROKE_COLOR,\n    width: DEFAULT_ROI_STROKE_WIDTH\n  }\n  if (style.stroke != null) {\n    if (style.stroke.color != null) {\n      stroke.color = style.stroke.color\n    }\n    if (style.stroke.width != null) {\n      stroke.width = style.stroke.width\n    }\n  }\n  const fill = {\n    color: DEFAULT_ROI_FILL_COLOR\n  }\n  if (style.fill != null) {\n    if (style.fill.color != null) {\n      fill.color = style.fill.color\n    }\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius != null\n          ? style.radius\n          : Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n\nconst _constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      preload: preload,\n      errorInterceptor: (error: CustomError) => {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DMV, error\n        )\n      }\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical',\n        errorInterceptor: (error: CustomError) => {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.DMV,\n            error\n          )\n        }\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'Failed to instantiate viewer'\n      )\n    )\n    throw error\n  }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface Measurement {\n  name: dcmjs.sr.coding.CodedConcept\n  value?: number\n  unit: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n  derivedDataset?: dmv.metadata.Dataset // Add this line\n}\n\ninterface SlideViewerState {\n  visibleRoiUIDs: Set<string>\n  visibleSegmentUIDs: Set<string>\n  visibleMappingUIDs: Set<string>\n  visibleAnnotationGroupUIDs: Set<string>\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  selectedRoi?: dmv.roi.ROI\n  selectedRoiUIDs: Set<string>\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isSelectedRoiModalVisible: boolean\n  isHoveredRoiTooltipVisible: boolean\n  hoveredRoiAttributes: Array<{index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n  hoveredRoiTooltipX: number\n  hoveredRoiTooltipY: number\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  isGoToModalVisible: boolean\n  isSelectedMagnificationValid: boolean\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  selectedXCoordinate?: number\n  validXCoordinateRange: number[]\n  selectedYCoordinate?: number\n  validYCoordinateRange: number[]\n  selectedMagnification?: number\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n  loadingFrames: Set<string>\n  isICCProfilesEnabled: boolean\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private hoveredRois = [] as dmv.roi.ROI[]\n\n  private lastPixel = [0, 0] as [number, number]\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private defaultAnnotationStyles: {\n    [annotationUID: string]: StyleOptions\n  } = {}\n\n  private readonly selectionColor: number[] = [140, 184, 198]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\n    fill: { color: [...this.selectionColor, 0.2] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = _formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n\n    this.onWindowResize = this.onWindowResize.bind(this)\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleRoiSelectionCancellation = this.handleRoiSelectionCancellation.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleRoiStyleChange = this.handleRoiStyleChange.bind(this)\n    this.handleGoTo = this.handleGoTo.bind(this)\n    this.handleXCoordinateSelection = this.handleXCoordinateSelection.bind(this)\n    this.handleYCoordinateSelection = this.handleYCoordinateSelection.bind(this)\n    this.handleMagnificationSelection = this.handleMagnificationSelection.bind(this)\n    this.handleSlidePositionSelection = this.handleSlidePositionSelection.bind(this)\n    this.handleSlidePositionSelectionCancellation = this.handleSlidePositionSelectionCancellation.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n    this.handleICCProfilesToggle = this.handleICCProfilesToggle.bind(this)\n\n    const { volumeViewer, labelViewer } = _constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isHoveredRoiTooltipVisible: false,\n      hoveredRoiTooltipX: 0,\n      hoveredRoiTooltipY: 0,\n      hoveredRoiAttributes: [],\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set(),\n      isICCProfilesEnabled: true\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current != null) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        if (this.labelViewportRef.current != null) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance, index) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                this.props.selectedPresentationStateUID == null\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Presentation State could not be loaded'\n            )\n          )\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Presentation State could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID != null\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key == null) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  loadDerivedDataset = (derivedDataset: dmv.metadata.Dataset): void => {\n    console.debug('Loading derived dataset')\n    const Comprehensive3DSR = '1.2.840.10008.5.1.4.1.1.88.34'\n    const MicroscopyBulkSimpleAnnotation = '1.2.840.10008.5.1.4.1.1.88.24'\n    const Segmentation = '1.2.840.10008.5.1.4.1.1.66.4'\n    const ParametricMap = '1.2.840.10008.5.1.4.1.1.88.22'\n    const OpticalPath = '1.2.840.10008.5.1.4.1.1.88.21'\n    if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Comprehensive3DSR) {\n      const allRois = this.volumeViewer.getAllROIs()\n      allRois.forEach((roi) => {\n        this.handleAnnotationVisibilityChange({ roiUID: roi.uid, isVisible: true })\n      })\n      console.debug('Loading Comprehensive 3D SR')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === MicroscopyBulkSimpleAnnotation) {\n      const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      allAnnotationGroups.forEach((annotationGroup) => {\n        this.handleAnnotationGroupVisibilityChange({ annotationGroupUID: annotationGroup.uid, isVisible: true })\n      })\n      console.debug('Loading Microscopy Bulk Simple Annotation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Segmentation) {\n      const allSegments = this.volumeViewer.getAllSegments()\n      allSegments.forEach((segment) => {\n        this.handleSegmentVisibilityChange({ segmentUID: segment.uid, isVisible: true })\n      })\n      console.debug('Loading Segmentation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === ParametricMap) {\n      const allParameterMappings = this.volumeViewer.getAllParameterMappings()\n      allParameterMappings.forEach((parameterMapping) => {\n        this.handleMappingVisibilityChange({ mappingUID: parameterMapping.uid, isVisible: true })\n      })\n      console.debug('Loading Parametric Map')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === OpticalPath) {\n      const allOpticalPaths = this.volumeViewer.getAllOpticalPaths()\n      allOpticalPaths.forEach((opticalPath) => {\n        this.handleOpticalPathVisibilityChange({ opticalPathIdentifier: opticalPath.identifier, isVisible: true })\n      })\n      console.debug('Loading Optical Path')\n    }\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  async addAnnotations (): Promise<void> {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Comprehensive 3D SR instances')\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.searchForInstances({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SR'\n        }\n      }).then((matchedInstances): void => {\n        if (matchedInstances == null) {\n          matchedInstances = []\n        }\n        matchedInstances.forEach(i => {\n          const { dataset } = dmv.metadata.formatMetadata(i)\n          const instance = dataset as dmv.metadata.Instance\n          if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n            console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n            client.retrieveInstance({\n              studyInstanceUID: this.props.studyInstanceUID,\n              seriesInstanceUID: instance.SeriesInstanceUID,\n              sopInstanceUID: instance.SOPInstanceUID\n            }).then((retrievedInstance): void => {\n              const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n              const { dataset } = dmv.metadata.formatMetadata(data.dict)\n              const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n              /*\n              * Perform a couple of checks to ensure the document content of the\n              * report fullfils the requirements of the application.\n              */\n              if (!_implementsTID1500(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it is not structured according to template ' +\n                  'TID 1500 \"MeasurementReport\"'\n                )\n                return\n              }\n              if (!_describesSpecimenSubject(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not describe a specimen subject'\n                )\n                return\n              }\n              if (!_containsROIAnnotations(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not contain any suitable ROI annotations'\n                )\n                return\n              }\n\n              const content = new MeasurementReport(report)\n              content.ROIs.forEach(roi => {\n                console.info(`add ROI \"${roi.uid}\"`)\n                const scoord3d = roi.scoord3d\n                const image = this.props.slide.volumeImages[0]\n                if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                  /*\n                  * ROIs may get assigned new UIDs upon re-rendering of the\n                  * page and we need to ensure that we don't add them twice.\n                  * The same ROI may be stored in multiple SR documents and\n                  * we don't want them to show up twice.\n                  * TODO: We should probably either \"merge\" measurements and\n                  * quantitative evaluations or pick the ROI from the \"best\"\n                  * available report (COMPLETE and VERIFIED).\n                  */\n                  const doesROIExist = this.volumeViewer.getAllROIs().some(\n                    (otherROI: dmv.roi.ROI): boolean => {\n                      return _areROIsEqual(otherROI, roi)\n                    }\n                  )\n                  if (!doesROIExist) {\n                    try {\n                      // Add ROI without style such that it won't be visible.\n                      this.volumeViewer.addROI(roi, {})\n                      const roiAsAnnotation = adaptRoiToAnnotation(roi)\n                      this.formatAnnotation(roiAsAnnotation)\n                    } catch {\n                      console.error(`could not add ROI \"${roi.uid}\"`)\n                    }\n                  } else {\n                    console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(\n                    `skip ROI \"${roi.uid}\" ` +\n                    `of SR document \"${report.SOPInstanceUID}\"` +\n                    'because it is defined in another frame of reference'\n                  )\n                }\n              })\n\n              resolve()\n            }).catch((error) => {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Annotations could not be loaded'\n                )\n              )\n              console.error(\n                'failed to load ROIs ' +\n                `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n                `of series \"${instance.SeriesInstanceUID}\" ` +\n                `of study \"${this.props.studyInstanceUID}\": `,\n                error\n              )\n            })\n            /*\n            * React is not aware of the fact that ROIs have been added via the\n            * viewer (the viewport is a ref object) and won't show the\n            * annotations in the user interface unless an update is forced.\n            */\n            this.forceUpdate()\n          }\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Annotations could not be loaded'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Microscopy Bulk Simple Annotations instances')\n      const client = this.props.clients[\n        StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n      ]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'ANN'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[] = retrievedMetadata.map(metadata => {\n              return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n                metadata\n              })\n            })\n            // annotations = annotations.filter(ann => {\n            //   const refImage = this.props.slide.volumeImages[0]\n            //   return (\n            //     ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n            //     ann.ContainerIdentifier === refImage.ContainerIdentifier\n            //   )\n            // })\n            annotations.forEach(ann => {\n              try {\n                this.volumeViewer.addAnnotationGroups(ann)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Microscopy Bulk Simple Annotations cannot be displayed.'\n                  )\n                )\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                console.error('failed to add annotation groups:', error)\n              }\n              ann.AnnotationGroupSequence.forEach(item => {\n                const annotationGroupUID = item.AnnotationGroupUID\n                const finding = item.AnnotationPropertyTypeCodeSequence[0]\n                const key = _buildKey(finding)\n                const style = this.roiStyles[key]\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                if (style != null && style.fill != null) {\n                  this.volumeViewer.setAnnotationGroupStyle(\n                    annotationGroupUID,\n                    { color: style.fill.color }\n                  )\n                }\n              })\n            })\n            /*\n            * React is not aware of the fact that annotation groups have been\n            * added via the viewer (the underlying HTML viewport element is a\n            * ref object) and won't show the annotation groups in the user\n            * interface unless an update is forced.\n            */\n            this.forceUpdate()\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n                'instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Microscopy Bulk Simple Annotations instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Segmentation instances')\n      const client = this.props.clients[StorageClasses.SEGMENTATION]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SEG'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach((s, i) => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const segmentations: dmv.metadata.Segmentation[] = []\n            retrievedMetadata.forEach(metadata => {\n              const seg = new dmv.metadata.Segmentation({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                seg.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                segmentations.push(seg)\n              }\n            })\n            if (segmentations.length > 0) {\n              try {\n                this.volumeViewer.addSegments(segmentations)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Segmentations cannot be displayed'\n                  )\n                )\n                console.error('failed to add segments: ', error)\n              }\n              /*\n              * React is not aware of the fact that segments have been added via\n              * the viewer (the underlying HTML viewport element is a ref object)\n              * and won't show the segments in the user interface unless an update\n              * is forced.\n              */\n              this.forceUpdate()\n            }\n\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Segmentation instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Segmentation instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Parametric Map instances')\n      const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'OT'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const parametricMaps: dmv.metadata.ParametricMap[] = []\n            retrievedMetadata.forEach(metadata => {\n              const pm = new dmv.metadata.ParametricMap({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                pm.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                parametricMaps.push(pm)\n              } else {\n                console.warn(\n                  `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n                )\n              }\n            })\n            if (parametricMaps.length > 0) {\n              try {\n                this.volumeViewer.addParameterMappings(parametricMaps)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Parametric Map cannot be displayed'\n                  )\n                )\n                console.error('failed to add mappings: ', error)\n              }\n              /*\n               * React is not aware of the fact that mappings have been added via\n               * the viewer (the underlying HTML viewport element is a ref object)\n               * and won't show the mappings in the user interface unless an update\n               * is forced.\n               */\n              this.forceUpdate()\n            }\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Parametric Map instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Parametric Map instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    // Handle promises properly with catch blocks\n    void this.addAnnotations()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotations:', error)\n      })\n\n    void this.addAnnotationGroups()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotation groups:', error)\n      })\n\n    void this.addSegmentations()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add segmentations:', error)\n      })\n\n    void this.addParametricMaps()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add parametric maps:', error)\n      })\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer != null) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiDoubleClicked = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi != null) {\n      this.setState({\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  setHoveredRoiAttributes = (hoveredRois: dmv.roi.ROI[]): void => {\n    const rois = this.volumeViewer.getAllROIs()\n    if (rois.length === 0) {\n      this.setState({ hoveredRoiAttributes: [] })\n      return\n    }\n\n    const result = hoveredRois.map((roi) => {\n      const attributes: Array<{ name: string, value: string }> = []\n      const evaluations = roi.evaluations\n      evaluations.forEach((\n        item: (\n          dcmjs.sr.valueTypes.TextContentItem |\n          dcmjs.sr.valueTypes.CodeContentItem\n        )\n      ) => {\n        const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n        const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n        const name = `${nameMeaning}`\n        if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n          const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n          // For consistency with Segment and Annotation Group\n          if (nameValue === '276214006') {\n            attributes.push({\n              name: 'Property category',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '121071') {\n            attributes.push({\n              name: 'Property type',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '111001') {\n            attributes.push({\n              name: 'Algorithm Name',\n              value: `${valueMeaning}`\n            })\n          } else {\n            attributes.push({\n              name: name,\n              value: `${valueMeaning}`\n            })\n          }\n        } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n          const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n          attributes.push({\n            name: name,\n            value: textContentItem.TextValue\n          })\n        }\n      })\n\n      const index = (rois.findIndex((r) => r.uid === roi.uid) ?? 0) + 1\n      return { index, roiUid: roi.uid, attributes }\n    }, [] as Array<dcmjs.sr.valueTypes.CodeContentItem | dcmjs.sr.valueTypes.TextContentItem>)\n\n    this.setState({ hoveredRoiAttributes: result })\n  }\n\n  clearHoveredRois = (): void => {\n    this.hoveredRois = [] as any\n  }\n\n  getUniqueHoveredRois = (newRoi: dmv.roi.ROI | null): dmv.roi.ROI[] => {\n    if (newRoi == null) {\n      return []\n    }\n    const allRois = [...this.hoveredRois, newRoi]\n    const uniqueIds = Array.from(new Set(allRois.map(roi => roi.uid)))\n    return uniqueIds.map(id => allRois.find(roi => roi.uid === id))\n      .filter((roi): roi is dmv.roi.ROI => roi !== undefined)\n  }\n\n  isSamePixelAsLast = (event: any): boolean => {\n    return event.clientX === this.lastPixel[0] && event.clientY === this.lastPixel[1]\n  }\n\n  onPointerMove = (event: CustomEventInit): void => {\n    const { feature: hoveredRoi, event: evt } = event.detail.payload\n    const originalEvent = evt.originalEvent\n\n    if (!this.isSamePixelAsLast(originalEvent)) {\n      this.lastPixel = [originalEvent.clientX, originalEvent.clientY]\n      this.clearHoveredRois()\n    }\n\n    this.hoveredRois = this.getUniqueHoveredRois(hoveredRoi)\n\n    if (this.hoveredRois.length > 0) {\n      this.setHoveredRoiAttributes(this.hoveredRois)\n      this.setState({\n        isHoveredRoiTooltipVisible: true,\n        hoveredRoiTooltipX: originalEvent.clientX,\n        hoveredRoiTooltipY: originalEvent.clientY\n      })\n    } else {\n      this.setState({\n        isHoveredRoiTooltipVisible: false\n      })\n    }\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI | null\n    if (selectedRoi == null) {\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        selectedRoi: undefined\n      })\n      return\n    }\n\n    console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n    const oldSelectedRois = Array.from(this.state.selectedRoiUIDs)\n    this.setState({\n      selectedRoiUIDs: new Set([...oldSelectedRois, selectedRoi.uid]),\n      selectedRoi: selectedRoi\n    })\n  }\n\n  handleRoiSelectionCancellation (): void {\n    this.setState({\n      isSelectedRoiModalVisible: false\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load frame')\n  }\n\n  onLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load data')\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    const message = (event.detail?.payload?.message === null ? 'Failed to load data' : event.detail?.payload?.message) as string\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        message\n      ) as any\n    )\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray != null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID == null) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount (): void {\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_error',\n      this.onLoadingError\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_error',\n      this.onFrameLoadingError\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.addEventListener('beforeunload', this.componentCleanup)\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount (): void {\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection (value: any): void {\n    if (value != null) {\n      const x = Number(value)\n      const start = this.state.validXCoordinateRange[0]\n      const end = this.state.validXCoordinateRange[1]\n      if (x >= start && x <= end) {\n        this.setState({\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedXCoordinate: undefined,\n      isSelectedXCoordinateValid: false\n    })\n  }\n\n  handleYCoordinateSelection (value: any): void {\n    if (value != null) {\n      const y = Number(value)\n      const start = this.state.validYCoordinateRange[0]\n      const end = this.state.validYCoordinateRange[1]\n      if (y >= start && y <= end) {\n        this.setState({\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedYCoordinate: undefined,\n      isSelectedYCoordinateValid: false\n    })\n  }\n\n  handleMagnificationSelection (value: any): void {\n    if (value != null) {\n      if (value > 0 && value <= 40) {\n        this.setState({\n          selectedMagnification: Number(value),\n          isSelectedMagnificationValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedMagnification: undefined,\n      isSelectedMagnificationValid: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection (): void {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n      this.state.selectedXCoordinate != null &&\n      this.state.selectedYCoordinate != null &&\n      this.state.selectedMagnification != null\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation (): void {\n    console.log('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      isSelectedMagnificationValid: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Could not complete annotation configuration'\n        )\n      )\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    // Metadata should be sorted such that the image with the highest\n    // resolution is the last item in the array.\n    const refImage = metadata[metadata.length - 1]\n    // We assume that there is only one specimen (tissue section) per\n    // ontainer (slide). Only the tissue section is tracked with a unique\n    // identifier, even if the section may be composed of different biological\n    // samples.\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'More than one specimen has been described for the slide'\n        )\n      )\n    }\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n    console.debug('create Observation Context')\n    let observer\n    if (this.props.user !== undefined) {\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: this.props.user.name,\n        loginName: this.props.user.email\n      })\n    } else {\n      console.warn('no user information available')\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: 'ANONYMOUS'\n      })\n    }\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121006',\n          schemeDesignator: 'DCM',\n          meaning: 'Person'\n        }),\n        observerIdentifyingAttributes: observer\n      }),\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121007',\n          schemeDesignator: 'DCM',\n          meaning: 'Device'\n        }),\n        observerIdentifyingAttributes:\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\n            uid: this.props.app.uid,\n            manufacturerName: 'MGH Computational Pathology',\n            modelName: this.props.app.name\n          })\n      }),\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\n          value: '121027',\n          schemeDesignator: 'DCM',\n          meaning: 'Specimen'\n        }),\n        subjectClassSpecificContext:\n          new dcmjs.sr.templates.SubjectContextSpecimen({\n            uid: refSpecimen.SpecimenUID,\n            identifier: refSpecimen.SpecimenIdentifier,\n            containerIdentifier: refImage.ContainerIdentifier\n          })\n      })\n    })\n\n    console.debug('encode Imaging Measurements')\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\n    for (let i = 0; i < rois.length; i++) {\n      const roi = rois[i]\n      if (!this.state.visibleRoiUIDs.has(roi.uid)) {\n        continue\n      }\n      let findingType = roi.evaluations.find(\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n        }\n      )\n      if (findingType === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            `No finding type was specified for ROI \"${roi.uid}\"`\n          )\n        )\n      }\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.properties.trackingUID ?? roi.uid,\n          identifier: `ROI #${i + 1}`\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: findingType.ConceptCodeSequence[0].CodeValue,\n          schemeDesignator:\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n        }),\n        qualitativeEvaluations: roi.evaluations.filter(\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n          }\n        ),\n        measurements: roi.measurements\n      })\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\n      measurements[0].ContentTemplateSequence = [{\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }]\n      imagingMeasurements.push(...measurements)\n    }\n\n    console.debug('create Measurement Report document content')\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\n      observationContext: observationContext,\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\n        value: '112703',\n        schemeDesignator: 'DCM',\n        meaning: 'Whole Slide Imaging'\n      }),\n      imagingMeasurements: imagingMeasurements\n    })\n\n    console.info('create Comprehensive 3D SR document')\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n      content: measurementReport[0],\n      evidence: [refImage],\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      seriesNumber: 1,\n      seriesDescription: 'Annotation',\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      instanceNumber: 1,\n      manufacturer: 'MGH Computational Pathology',\n      previousVersions: undefined // TODO\n    })\n\n    this.setState({\n      isReportModalVisible: true,\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Annotations could not be saved'\n          )\n        )\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when an annotation has been selected from the\n   * current list of annotations.\n   */\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\n    console.log(`selected ROI ${roiUID}`)\n    this.setState({ selectedRoiUIDs: new Set([roiUID]) })\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (roi.uid === roiUID) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(roi.uid, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Failed to show annotation group.'\n          )\n        )\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void {\n    console.log(`change style of annotation group ${uid}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        uid,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of annotation group.'\n        )\n      )\n      throw error\n    }\n  }\n\n  generateRoiStyle (\n    styleOptions: StyleOptions): dmv.viewer.ROIStyleOptions {\n    const opacity = styleOptions.opacity ?? DEFAULT_ANNOTATION_OPACITY\n    const strokeColor = styleOptions.color ?? DEFAULT_ANNOTATION_STROKE_COLOR\n    const fillColor = styleOptions.contourOnly ? [0, 0, 0, 0] : strokeColor.map((c) => Math.min(c + 25, 255))\n    const style = _formatRoiStyle({\n      fill: { color: [...fillColor, opacity] },\n      stroke: { color: [...strokeColor, opacity] },\n      radius: this.defaultRoiStyle.stroke?.width\n    })\n    return style\n  }\n\n  handleRoiStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: StyleOptions\n  }): void {\n    console.log(`change style of ROI ${uid}`)\n    try {\n      this.defaultAnnotationStyles[uid] = styleOptions\n      const style = this.generateRoiStyle(styleOptions)\n\n      const roi = this.volumeViewer.getROI(uid)\n      const key = _getRoiKey(roi) as string\n      this.roiStyles[key] = style\n      this.volumeViewer.setROIStyle(uid, style)\n      this.state.visibleRoiUIDs.add(uid)\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of ROI.'\n        )\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState (): void {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState != null) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Presentation State could not be found'\n          )\n        )\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (!this.state.areRoisHidden) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  /**\n   * Handler that will toggle the ICC profile color management, i.e., either\n   * enable or disable it, depending on its current state.\n   */\n  handleICCProfilesToggle = (event: CheckboxChangeEvent): void => {\n    const checked = event.target.checked\n    this.setState({ isICCProfilesEnabled: checked })\n    this.volumeViewer.toggleICCProfiles()\n  }\n\n  formatAnnotation = (annotation: AnnotationCategoryAndType | dmv.roi.ROI): void => {\n    const roi = this.volumeViewer.getROI(annotation.uid)\n    const key = _getRoiKey(roi) as string\n    const color = this.roiStyles[key] !== undefined\n      ? this.roiStyles[key].stroke?.color.slice(0, 3)\n      : DEFAULT_ANNOTATION_COLOR_PALETTE[\n        Object.keys(this.roiStyles).length % DEFAULT_ANNOTATION_COLOR_PALETTE.length\n      ]\n    this.defaultAnnotationStyles[annotation.uid] = {\n      color: color as number[],\n      opacity: DEFAULT_ANNOTATION_OPACITY,\n      contourOnly: false\n    }\n\n    this.roiStyles[key] = this.generateRoiStyle(\n      this.defaultAnnotationStyles[annotation.uid]\n    )\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const filteredAnnotationGroups = allAnnotationGroups?.filter((annotationGroup) =>\n      annotationGroup.referencedSeriesInstanceUID === this.props.seriesInstanceUID\n    )\n    annotationGroups.push(...filteredAnnotationGroups)\n\n    const annotations = rois.map(roi => adaptRoiToAnnotation(roi))\n\n    const openSubMenuItems = [\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\n    ]\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map((finding, index) => {\n      return (\n        <Select.Option\n          key={(finding.CodeValue !== undefined && finding.CodeValue !== '') ? finding.CodeValue : `finding-${index}`}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n          placeholder='Select finding'\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach((evaluation, index) => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={(code.CodeValue !== undefined && code.CodeValue !== '') ? code.CodeValue : `evaluation-${index}`}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n            placeholder='Select geometry type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const equipmentMenu = (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach((instance, index) => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={(instance.SOPInstanceUID !== undefined && instance.SOPInstanceUID !== '') ? instance.SOPInstanceUID : `presentation-state-${index}`}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription !== undefined && instance.ContentDescription !== '' ? instance.ContentDescription : 'Untitled'}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={undefined}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          <></>\n        </Select.Option>\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={<UndoOutlined />}\n                type='primary'\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametric-maps')\n    }\n\n    let annotationGroupMenu\n\n    annotations?.forEach?.(this.formatAnnotation.bind(this))\n\n    if (annotationGroups.length > 0) {\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const defaultAnnotationGroupStyles: {\n        [annotationUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            // when adding annotationGroups to annotationCategory list,\n            // make so that this is uses this.defaultAnnotationStyles later instead of defaultAnnotationGroupStyles\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    const annotationTools = [\n      <Button\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Button\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Button\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Button\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Button\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Button\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Button\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    let cursor = 'default'\n    if (this.state.isLoading) {\n      cursor = 'progress'\n    }\n\n    let selectedRoiInformation\n    if (this.state.selectedRoi != null) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence != null) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit != null) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      selectedRoiInformation = (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n\n    const iccProfilesMenu = this.volumeViewer.getICCProfiles().length > 0 && (\n      <div style={{ margin: '0.9rem' }}>\n        <Checkbox\n          checked={this.state.isICCProfilesEnabled}\n          onChange={this.handleICCProfilesToggle}\n        >\n          ICC Profiles\n        </Checkbox>\n      </div>\n    )\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden',\n              cursor: cursor\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            open={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            okButtonProps={{ disabled: !(this.state.selectedFinding !== undefined && this.state.selectedGeometryType !== undefined) }}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {annotationConfigurations}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isSelectedRoiModalVisible}\n            title='Selected ROI'\n            onCancel={this.handleRoiSelectionCancellation}\n            maskClosable\n            footer={null}\n          >\n            <Space align='start' direction='vertical'>\n              {selectedRoiInformation}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isGoToModalVisible}\n            title='Go to slide position'\n            onOk={this.handleSlidePositionSelection}\n            onCancel={this.handleSlidePositionSelectionCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validXCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validXCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='X Coordinate [mm]'\n                onChange={this.handleXCoordinateSelection}\n                onPressEnter={this.handleXCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedXCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validYCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validYCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='Y Coordinate [mm]'\n                onChange={this.handleYCoordinateSelection}\n                onPressEnter={this.handleYCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedYCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder='[0 - 40]'\n                prefix='Magnification'\n                onChange={this.handleMagnificationSelection}\n                onPressEnter={this.handleMagnificationSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedMagnificationValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n            onOpenChange={() => {\n              // Give menu item time to render before updating viewer size\n              setTimeout(() => {\n                if (this.labelViewer != null) {\n                  this.labelViewer.resize()\n                }\n              }, 100)\n            }}\n          >\n            {this.labelViewportRef.current != null && (\n              <Menu.SubMenu key='label' title='Slide label'>\n                <Menu.Item style={{ height: '100%' }} key='image'>\n                  <div\n                    style={{ height: '220px' }}\n                    ref={this.labelViewportRef}\n                  />\n                </Menu.Item>\n              </Menu.SubMenu>\n            )}\n            {specimenMenu}\n            {iccProfilesMenu}\n            {equipmentMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {annotations.length === 0\n              ? (\n                <></>\n                )\n              : (\n                <Menu.SubMenu\n                  key='annotation-categories'\n                  title='Annotation Categories'\n                >\n                  <AnnotationCategoryList\n                    annotations={annotations}\n                    onChange={this.handleAnnotationVisibilityChange}\n                    checkedAnnotationUids={this.state.visibleRoiUIDs}\n                    onStyleChange={this.handleRoiStyleChange}\n                    defaultAnnotationStyles={this.defaultAnnotationStyles}\n                  />\n                </Menu.SubMenu>\n                )}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n        {this.state.isHoveredRoiTooltipVisible &&\n        this.state.hoveredRoiAttributes.length > 0\n          ? (\n            <HoveredRoiTooltip\n              xPosition={this.state.hoveredRoiTooltipX}\n              yPosition={this.state.hoveredRoiTooltipY}\n              rois={this.state.hoveredRoiAttributes}\n            />\n            )\n          : (\n            <></>\n            )}\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID != null) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null | undefined\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Value of option \"images\" have been non-zero length.'\n        )\n      )\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID != null) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (\n        hasImageFlavor(image, ImageFlavors.VOLUME) ||\n        hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      ) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID != null) {\n          for (const identifier in opticalPathIdentifiers) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n\n    if (volumeImages.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'At least one VOLUME image must be provided for a slide.'\n        )\n      )\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n            'image that has not been resampled per optical path'\n        )\n      }\n    }\n\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All images of a slide must have the same Container Identifier.'\n        )\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must have ' +\n          'the same Frame of Reference UID.'\n        )\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `All VOLUME images for optical path \"${identifier}\"` +\n              'must be part of the same multi-resolution pyramid.'\n            )\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must be part of the same  ' +\n          'acquisition and have the same Acquisition UID.'\n        )\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) => {\n        return (\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n        )\n      })\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import * as dmv from 'dicom-microscopy-viewer'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './NotificationMiddleware'\nimport { createSlides, Slide } from '../data/slides'\n\ninterface FetchImageMetadataParams {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  onSuccess: (slides: Slide[]) => void\n  onError: (error: Error) => void\n}\n\nexport const fetchImageMetadata = async ({\n  clients,\n  studyInstanceUID,\n  onSuccess,\n  onError\n}: FetchImageMetadataParams): Promise<void> => {\n  try {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n\n    const client = clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(\n      matchedSeries.map(async (s) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const loadingSeries = dataset as dmv.metadata.Series\n        console.info(\n          `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n        )\n        const retrievedMetadata = await client.retrieveSeriesMetadata({\n          studyInstanceUID: studyInstanceUID,\n          seriesInstanceUID: loadingSeries.SeriesInstanceUID\n        })\n\n        const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n        retrievedMetadata.forEach((item) => {\n          if (\n            item['00080016']?.Value?.[0] ===\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        })\n\n        if (seriesImages.length > 0) {\n          images.push(seriesImages)\n        }\n      })\n    )\n    const newSlides = createSlides(images)\n    onSuccess(newSlides)\n  } catch (err) {\n    console.error(err)\n    const customError = new CustomError(\n      errorTypes.ENCODINGANDDECODING,\n      'Image metadata could not be retrieved or decoded.'\n    )\n    onError(customError)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      customError\n    )\n  }\n}\n","import { useState, useEffect } from 'react'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\nimport { fetchImageMetadata } from '../services/fetchImageMetadata'\n\ninterface UseSlidesProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\ninterface UseSlidesReturn {\n  slides: Slide[]\n  isLoading: boolean\n  error: Error | null\n}\n\nconst slidesCache = new Map<string, Slide[]>()\nconst pendingRequests = new Map<string, Promise<Slide[]>>()\n\n/**\n * Hook to fetch and manage whole slide microscopy images for a given study.\n * Values are cached so they can be reused if props are not provided.\n *\n * @param props - Hook configuration props\n * @param props.clients - Map of DICOM web clients keyed by storage class\n */\nexport const useSlides = ({ clients, studyInstanceUID }: UseSlidesProps): UseSlidesReturn => {\n  const [slides, setSlides] = useState<Slide[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    if (studyInstanceUID === undefined) {\n      setSlides([])\n      setIsLoading(false)\n      return\n    }\n\n    const cachedData = slidesCache.get(studyInstanceUID)\n    if (cachedData !== undefined) {\n      setSlides(cachedData)\n      setIsLoading(false)\n      return\n    }\n\n    setIsLoading(true)\n\n    const fetchSlides = async (): Promise<void> => {\n      // Check if there's already a pending request for this study\n      let pendingRequest = pendingRequests.get(studyInstanceUID)\n\n      if (pendingRequest === undefined) {\n        // Create a new promise for this request\n        pendingRequest = new Promise((resolve, reject): void => {\n          fetchImageMetadata({\n            clients,\n            studyInstanceUID,\n            onSuccess: (newSlides) => {\n              slidesCache.set(studyInstanceUID, newSlides)\n              resolve(newSlides)\n            },\n            onError: (err) => {\n              reject(err)\n            }\n          }).catch((err) => {\n            reject(err)\n          })\n        })\n        pendingRequests.set(studyInstanceUID, pendingRequest)\n      }\n\n      try {\n        const newSlides = await pendingRequest\n        setSlides(newSlides)\n        setError(null)\n      } catch (err) {\n        setError(err as Error)\n        setSlides([])\n      } finally {\n        pendingRequests.delete(studyInstanceUID)\n        setIsLoading(false)\n      }\n    }\n\n    void fetchSlides()\n  }, [clients, studyInstanceUID])\n\n  return { slides, isLoading, error }\n}\n","import { Routes, Route, useLocation, useParams } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\nimport * as dcmjs from 'dcmjs'\nimport { useEffect, useState } from 'react'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide } from '../data/slides'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { useSlides } from '../hooks/useSlides'\nimport { StorageClasses } from '../data/uids'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface NaturalizedInstance {\n  SeriesInstanceUID: string\n  SOPInstanceUID: string\n  ReferencedSeriesSequence?: Array<{\n    SeriesInstanceUID: string\n  }>\n  ContentSequence?: Array<{\n    ConceptNameCodeSequence: Array<{\n      CodeValue: string\n    }>\n    ContentSequence?: Array<{\n      ContentSequence: Array<{\n        ReferencedSOPSequence: Array<{\n          ReferencedSOPInstanceUID: string\n        }>\n      }>\n    }>\n  }>\n}\n\ninterface ReferencedSlideResult {\n  slide: Slide | undefined\n  metadata: NaturalizedInstance\n}\n\nconst findSeriesSlide = (slides: Slide[], seriesInstanceUID: string): Slide | undefined => {\n  return slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n}\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID = '', seriesInstanceUID = '' } = useParams<{ studyInstanceUID: string, seriesInstanceUID: string }>()\n  const location = useLocation()\n\n  const [selectedSlide, setSelectedSlide] = useState(findSeriesSlide(slides, seriesInstanceUID))\n  const [derivedDataset, setDerivedDataset] = useState<NaturalizedInstance | null>(null)\n\n  useEffect(() => {\n    const seriesSlide = findSeriesSlide(slides, seriesInstanceUID)\n    if (seriesSlide !== null) {\n      setSelectedSlide(seriesSlide)\n    }\n  }, [seriesInstanceUID, slides])\n\n  useEffect(() => {\n    const findReferencedSlide = async ({ clients, studyInstanceUID, seriesInstanceUID }: {\n      clients: { [key: string]: DicomWebManager }\n      studyInstanceUID: string\n      seriesInstanceUID: string\n    }): Promise<ReferencedSlideResult | null> => await new Promise<ReferencedSlideResult | null>((resolve, reject) => {\n      try {\n        const allClients = Object.values(StorageClasses).map((storageClass) => clients[storageClass])\n        Promise.all(allClients.map(async (client) => {\n          const seriesMetadata = await client.retrieveSeriesMetadata({\n            studyInstanceUID: studyInstanceUID,\n            seriesInstanceUID: seriesInstanceUID\n          })\n          const [naturalizedSeriesMetadata] = seriesMetadata.map((metadata) => naturalizeDataset(metadata)) as NaturalizedInstance[]\n\n          if (naturalizedSeriesMetadata.ReferencedSeriesSequence != null) {\n            const referencedSeriesInstanceUID = naturalizedSeriesMetadata.ReferencedSeriesSequence[0].SeriesInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.seriesInstanceUIDs.find((uid: string) => {\n                return uid === referencedSeriesInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n\n          const IMAGE_LIBRARY_CONCEPT_NAME_CODE = '111028'\n          const imageLibrary = naturalizedSeriesMetadata.ContentSequence?.find(\n            contentItem => contentItem.ConceptNameCodeSequence[0].CodeValue === IMAGE_LIBRARY_CONCEPT_NAME_CODE\n          )\n          if ((imageLibrary?.ContentSequence?.[0]?.ContentSequence?.[0]?.ReferencedSOPSequence?.[0]) != null) {\n            const referencedSOPInstanceUID = imageLibrary.ContentSequence[0].ContentSequence[0].ReferencedSOPSequence[0].ReferencedSOPInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.volumeImages.find((image: { SOPInstanceUID: string }) => {\n                return image.SOPInstanceUID === referencedSOPInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n        })).catch(reject)\n      } catch (error) {\n        reject(error)\n      }\n    })\n\n    if (selectedSlide === null || selectedSlide === undefined) {\n      void findReferencedSlide({ clients, studyInstanceUID, seriesInstanceUID }).then((result: ReferencedSlideResult | null) => {\n        if (result !== null) {\n          setSelectedSlide(result.slide)\n          setDerivedDataset(result.metadata)\n        }\n      }).catch(error => {\n        console.error('Error finding referenced slide:', error)\n      })\n    }\n  }, [slides, clients, selectedSlide, studyInstanceUID, seriesInstanceUID])\n\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string | null | undefined\n  if (!searchParams.has('access_token')) {\n    presentationStateUID = searchParams.get('state')\n    if (presentationStateUID === null) {\n      presentationStateUID = undefined\n    }\n  }\n\n  let viewer = null\n  if (selectedSlide != null) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n        derivedDataset={derivedDataset}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\nfunction Viewer (props: ViewerProps): JSX.Element | null {\n  const { clients, studyInstanceUID, location, navigate } = props\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n\n  const handleSeriesSelection = ({ seriesInstanceUID }: { seriesInstanceUID: string }): void => {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n\n    if (location.pathname.includes('/projects/')) {\n      urlPath = location.pathname\n      if (!location.pathname.includes('/series/')) {\n        urlPath += `/series/${seriesInstanceUID}`\n      } else {\n        urlPath = urlPath.replace(/\\/series\\/[^/]+/, `/series/${seriesInstanceUID}`)\n      }\n    }\n\n    if (\n      location.pathname.includes('/series/') &&\n      location.search != null\n    ) {\n      urlPath += location.search\n    }\n\n    navigate(urlPath, { replace: true })\n  }\n\n  if (isLoading) {\n    return null\n  }\n\n  if (slides.length === 0) {\n    return null\n  }\n\n  const firstSlide = slides[0]\n  const volumeInstances = firstSlide.volumeImages\n  if (volumeInstances.length === 0) {\n    return null\n  }\n  const refImage = volumeInstances[0]\n\n  /* If a series is encoded in the path, route the viewer to this series.\n   * Otherwise select the first series correspondent to\n   * the first slide contained in the study.\n   */\n  let selectedSeriesInstanceUID: string\n  if (location.pathname.includes('series/')) {\n    const seriesFragment = location.pathname.split('series/')[1]\n    selectedSeriesInstanceUID = seriesFragment.includes('/') ? seriesFragment.split('/')[0] : seriesFragment\n  } else {\n    selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n  }\n\n  let clinicalTrialMenu\n  if (refImage.ClinicalTrialSponsorName != null) {\n    clinicalTrialMenu = (\n      <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n        <ClinicalTrial metadata={refImage} />\n      </Menu.SubMenu>\n    )\n  }\n\n  return (\n    <Layout style={{ height: '100%' }} hasSider>\n      <Layout.Sider\n        width={300}\n        style={{\n          height: '100%',\n          borderRight: 'solid',\n          borderRightWidth: 0.25,\n          overflow: 'hidden',\n          background: 'none'\n        }}\n      >\n        <Menu\n          mode='inline'\n          defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n          style={{ height: '100%' }}\n          inlineIndent={14}\n        >\n          <Menu.SubMenu key='patient' title='Patient'>\n            <Patient metadata={refImage} />\n          </Menu.SubMenu>\n          <Menu.SubMenu key='study' title='Study'>\n            <Study metadata={refImage} />\n          </Menu.SubMenu>\n          {clinicalTrialMenu}\n          <Menu.SubMenu key='slides' title='Slides'>\n            <SlideList\n              clients={props.clients}\n              metadata={slides}\n              selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n              onSeriesSelection={handleSeriesSelection}\n            />\n          </Menu.SubMenu>\n        </Menu>\n      </Layout.Sider>\n\n      <Routes>\n        <Route\n          path='/series/:seriesInstanceUID'\n          element={\n            <ParametrizedSlideViewer\n              clients={props.clients}\n              slides={slides}\n              preload={props.preload}\n              annotations={props.annotations}\n              enableAnnotationTools={props.enableAnnotationTools}\n              app={props.app}\n              user={props.user}\n            />\n          }\n        />\n      </Routes>\n    </Layout>\n  )\n}\n\nexport default withRouter(Viewer)\n","import dcmjs from 'dcmjs'\n\nconst { DicomMetaDictionary } = dcmjs.data\n\ninterface TagInfo {\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TagInfo[]\n  level: number\n}\n\nexport interface DicomTag {\n  name: string\n  vr: string\n  Value?: any[]\n  [key: string]: any\n}\n\nconst formatValue = (val: any): string => {\n  if (typeof val === 'object' && val !== null) {\n    return JSON.stringify(val)\n  }\n  return String(val)\n}\n\nexport const formatTagValue = (tag: DicomTag): string => {\n  if (tag.Value == null) return ''\n\n  if (Array.isArray(tag.Value)) {\n    return tag.Value.map(formatValue).join(', ')\n  }\n\n  return formatValue(tag.Value)\n}\n\n/**\n * Processes DICOM metadata and returns a flattened array of tag information\n * @param metadata - The DICOM metadata object to process\n * @param depth - The current depth level for nested sequences (default: 0)\n * @returns Array of processed tag information\n */\nexport function getRows (metadata: Record<string, any>, depth = 0): TagInfo[] {\n  if (metadata === undefined || metadata === null) return []\n  const keywords = Object.keys(metadata).filter(key => key !== '_vrMap')\n\n  return keywords.flatMap(keyword => {\n    // @ts-expect-error\n    const tagInfo = DicomMetaDictionary.nameMap[keyword] as TagInfo | undefined\n    let value = metadata[keyword]\n\n    // Handle private or unknown tags\n    if (tagInfo === undefined) {\n      const regex = /[0-9A-Fa-f]{6}/g\n      if (keyword.match(regex) == null) return []\n\n      return [{\n        tag: `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`,\n        vr: '',\n        keyword: 'Private Tag',\n        value: value?.toString() ?? '',\n        level: depth\n      }]\n    }\n\n    // Handle sequence values (SQ VR)\n    if (tagInfo.vr === 'SQ' && value !== undefined) {\n      const sequenceItems = Array.isArray(value) ? value : [value]\n\n      // Create a parent sequence node\n      const sequenceNode: TagInfo = {\n        tag: tagInfo.tag,\n        vr: tagInfo.vr,\n        keyword,\n        value: `Sequence with ${sequenceItems.length} item(s)`,\n        level: depth,\n        children: []\n      }\n\n      // Create individual nodes for each sequence item\n      sequenceNode.children = sequenceItems.map((item, index) => {\n        const itemNode: TagInfo = {\n          tag: `${tagInfo.tag}.${index + 1}`,\n          vr: 'Item',\n          keyword: `Item ${index + 1}`,\n          value: `Sequence Item ${index + 1}`,\n          level: depth + 1,\n          children: getRows(item, depth + 2)\n        }\n        return itemNode\n      })\n\n      return [sequenceNode]\n    }\n\n    // Handle array values\n    if (Array.isArray(value)) {\n      value = value.map(formatValue).join('\\\\')\n    } else if (typeof value === 'object' && value !== null) {\n      value = formatValue(value)\n    }\n\n    return [{\n      tag: tagInfo.tag,\n      vr: tagInfo.vr,\n      keyword: keyword.replace('RETIRED_', ''),\n      value: value?.toString() ?? '',\n      level: depth\n    }]\n  })\n}\n\n/**\n * Sorts DICOM tags alphabetically by tag value\n * @param metadata - The DICOM metadata object to process\n * @returns Sorted array of tag information\n */\nexport function getSortedTags (metadata: Record<string, any>): TagInfo[] {\n  const tagList = getRows(metadata)\n  return tagList.sort((a, b) => a.tag.localeCompare(b.tag))\n}\n","/**\n * Formats a DICOM datetime string (YYYYMMDD:HHmmss) into a human-readable format\n *\n * @param dateStr - DICOM datetime string in format \"YYYYMMDD:HHmmss\"\n * @returns Formatted date string (e.g., \"Mon, Jan 1 2024\")\n * @example\n * formatDicomDate(\"20240101:120000\") // Returns \"Mon, Jan 1 2024\"\n * formatDicomDate(\"invalid\") // Returns \"invalid\"\n */\nexport const formatDicomDate = (dateStr: string): string => {\n  // Parse YYYYMMDD:HHmmss format\n  const match = dateStr.match(/^(\\d{4})(\\d{2})(\\d{2}):(\\d{2})(\\d{2})(\\d{2})/)\n  if (match == null) return dateStr\n\n  const [, year, month, day, hour, minute, second] = match\n\n  // Validate month and day\n  const monthNum = parseInt(month)\n  const dayNum = parseInt(day)\n  if (monthNum < 1 || monthNum > 12 || dayNum < 1 || dayNum > 31) {\n    return dateStr\n  }\n\n  const date = new Date(\n    parseInt(year),\n    monthNum - 1, // months are 0-based\n    dayNum,\n    parseInt(hour),\n    parseInt(minute),\n    parseInt(second)\n  )\n\n  // Check if the date is invalid or if the month/day combination is invalid\n  // This catches cases like February 31st where the date rolls over to March\n  if (\n    date.getMonth() !== monthNum - 1 || // month rolled over\n    date.getDate() !== dayNum // day rolled over\n  ) {\n    return dateStr\n  }\n\n  // Format parts separately to avoid the extra comma\n  const weekday = date.toLocaleDateString('en-US', { weekday: 'short' })\n  const monthName = date.toLocaleDateString('en-US', { month: 'short' })\n  const dayFormatted = date.getDate()\n  const yearNum = date.getFullYear()\n\n  return `${weekday}, ${monthName} ${dayFormatted} ${yearNum}`\n}\n","import { v4 as generateUUID } from 'uuid'\n\n/**\n * Consumer must implement:\n * this.listeners = {}\n * this.EVENTS = { \"EVENT_KEY\": \"EVENT_VALUE\" }\n */\nconst pubSubInterface = {\n  subscribe,\n  _broadcastEvent,\n  _unsubscribe,\n  _isValidEvent\n}\n\nexport default pubSubInterface\n\n/**\n * Subscribe to updates.\n *\n * @param {string} eventName The name of the event\n * @param {Function} callback Events callback\n * @return {Object} Observable object with actions\n */\nfunction subscribe (this: PubSubService, eventName: string, callback: Function): { unsubscribe: () => any } {\n  if (this._isValidEvent(eventName)) {\n    const listenerId = generateUUID()\n    const subscription = { id: listenerId, callback }\n\n    // console.info(`Subscribing to '${eventName}'.`);\n    if (Array.isArray(this.listeners[eventName])) {\n      this.listeners[eventName].push(subscription)\n    } else {\n      this.listeners[eventName] = [subscription]\n    }\n\n    return {\n      unsubscribe: () => this._unsubscribe(eventName, listenerId)\n    }\n  } else {\n    throw new Error(`Event ${eventName} not supported.`)\n  }\n}\n\n/**\n * Unsubscribe to measurement updates.\n *\n * @param {string} eventName The name of the event\n * @param {string} listenerId The listeners id\n * @return void\n */\nfunction _unsubscribe (this: PubSubService, eventName: string, listenerId: string): void {\n  if (this.listeners[eventName] === undefined) {\n    return\n  }\n\n  const listeners = this.listeners[eventName]\n  if (Array.isArray(listeners)) {\n    this.listeners[eventName] = listeners.filter(({ id }) => id !== listenerId)\n  } else {\n    this.listeners[eventName] = []\n  }\n}\n\n/**\n * Check if a given event is valid.\n *\n * @param {string} eventName The name of the event\n * @return {boolean} Event name validation\n */\nfunction _isValidEvent (this: PubSubService, eventName: string): boolean {\n  return Object.values(this.EVENTS).includes(eventName)\n}\n\n/**\n * Broadcasts changes.\n *\n * @param {string} eventName - The event name\n * @param {func} callbackProps - Properties to pass callback\n * @return void\n */\nfunction _broadcastEvent (this: PubSubService, eventName: string, callbackProps: any): void {\n  const hasListeners = Object.keys(this.listeners).length > 0\n  const hasCallbacks = Array.isArray(this.listeners[eventName])\n\n  if (hasListeners && hasCallbacks) {\n    this.listeners[eventName].forEach((listener: { id: string, callback: Function }) => {\n      listener.callback(callbackProps)\n    })\n  }\n}\n\n/** Export a PubSubService class to be used instead of the individual items */\nexport class PubSubService {\n  EVENTS: any\n  subscribe: (\n    eventName: string,\n    callback: Function\n  ) => { unsubscribe: () => any }\n\n  _broadcastEvent: (eventName: string, callbackProps: any) => void\n  _unsubscribe: (eventName: string, listenerId: string) => void\n  _isValidEvent: (eventName: string) => boolean\n  listeners: { [key: string]: Array<{ id: string, callback: Function }> }\n  unsubscriptions: any[]\n  constructor (EVENTS: Record<string, string>) {\n    this.EVENTS = EVENTS\n    this.subscribe = subscribe\n    this._broadcastEvent = _broadcastEvent\n    this._unsubscribe = _unsubscribe\n    this._isValidEvent = _isValidEvent\n    this.listeners = {}\n    this.unsubscriptions = []\n  }\n\n  reset (): void {\n    this.unsubscriptions.forEach((unsub) => unsub())\n    this.unsubscriptions = []\n  }\n\n  /**\n   * Creates an event that records whether or not someone\n   * has consumed it.  Call eventData.consume() to consume the event.\n   * Check eventData.isConsumed to see if it is consumed or not.\n   * @param props - to include in the event\n   */\n  protected createConsumableEvent (props: Record<string, any>): Record<string, any> {\n    return {\n      ...props,\n      isConsumed: false,\n      consume: function Consume () {\n        this.isConsumed = true\n      }\n    }\n  }\n}\n","import { Instance, Series } from '../services/DICOMMetadataStore'\n\nfunction createSeriesMetadata (SeriesInstanceUID: string, defaultInstances?: Instance[]): Series {\n  const instances: Instance[] = []\n  const instancesMap = new Map<string, Instance>()\n\n  return {\n    SeriesInstanceUID,\n    Modality: '',\n    SeriesNumber: 0,\n    SeriesDescription: '',\n    SeriesDate: '',\n    SeriesTime: '',\n    ...defaultInstances?.[0],\n    instances,\n    addInstance: function (newInstance: Instance) {\n      this.addInstances([newInstance])\n    },\n    addInstances: function (newInstances: Instance[]) {\n      for (let i = 0, len = newInstances.length; i < len; i++) {\n        const instance = newInstances[i]\n\n        if (!instancesMap.has(instance.SOPInstanceUID)) {\n          instancesMap.set(instance.SOPInstanceUID, instance)\n          instances.push(instance)\n        }\n      }\n    },\n    getInstance: function (SOPInstanceUID: string) {\n      return instancesMap.get(SOPInstanceUID)\n    }\n  }\n}\n\nexport default createSeriesMetadata\n","import createSeriesMetadata from './createSeriesMetadata'\n\nimport { Study, Series, Instance } from '../services/DICOMMetadataStore'\n\nfunction createStudyMetadata (StudyInstanceUID: string): Study {\n  return {\n    StudyInstanceUID,\n    StudyDescription: '',\n    PatientID: '',\n    PatientName: '',\n    StudyDate: '',\n    AccessionNumber: '',\n    NumInstances: 0,\n    ModalitiesInStudy: [],\n    isLoaded: false,\n    series: [] as Series[],\n    /**\n     * @param {object} instance\n     */\n    addInstanceToSeries: function (instance: Instance) {\n      this.addInstancesToSeries([instance])\n    },\n    /**\n     * @param {object[]} instances\n     * @param {string} instances[].SeriesInstanceUID\n     * @param {string} instances[].StudyDescription\n     */\n    addInstancesToSeries: function (instances: Instance[]) {\n      const { SeriesInstanceUID } = instances[0]\n\n      if (this.StudyDescription !== '' && this.StudyDescription !== undefined) {\n        this.StudyDescription = instances[0].StudyDescription\n      }\n\n      let series = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (series == null) {\n        series = createSeriesMetadata(SeriesInstanceUID, instances)\n        this.series.push(series)\n      }\n\n      series.addInstances(instances)\n    },\n\n    setSeriesMetadata: function (\n      SeriesInstanceUID: string,\n      seriesMetadata: any\n    ) {\n      let existingSeries = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (existingSeries != null) {\n        existingSeries = Object.assign(existingSeries, seriesMetadata)\n      } else {\n        const series = createSeriesMetadata(SeriesInstanceUID)\n        this.series.push(Object.assign(series, seriesMetadata))\n      }\n    }\n  }\n}\n\nexport default createStudyMetadata\n","import dcmjs from 'dcmjs'\n\nimport pubSubServiceInterface from '../utils/pubSubServiceInterface'\nimport createStudyMetadata from '../utils/createStudyMetadata'\n\nexport const EVENTS = {\n  STUDY_ADDED: 'event::dicomMetadataStore:studyAdded',\n  INSTANCES_ADDED: 'event::dicomMetadataStore:instancesAdded',\n  SERIES_ADDED: 'event::dicomMetadataStore:seriesAdded',\n  SERIES_UPDATED: 'event::dicomMetadataStore:seriesUpdated'\n}\n\nexport interface Instance {\n  SOPInstanceUID: string\n  SOPClassUID: string\n  Rows: number\n  Columns: number\n  PatientSex: string\n  Modality: string\n  InstanceNumber: string\n  imageId?: string\n  [key: string]: any // For dynamic metadata properties\n}\n\nexport interface Series {\n  Modality: string\n  SeriesInstanceUID: string\n  SeriesNumber: number\n  SeriesDate: string\n  SeriesTime: string\n  SeriesDescription: string\n  instances: Instance[]\n  addInstance: (newInstance: Instance) => void\n  addInstances: (newInstances: Instance[]) => void\n  getInstance: (SOPInstanceUID: string) => Instance | undefined\n}\n\nexport interface Study {\n  StudyInstanceUID: string\n  StudyDescription: string\n  PatientID: string\n  PatientName: string\n  StudyDate: string\n  AccessionNumber: string\n  NumInstances: number\n  ModalitiesInStudy: any[]\n  NumberOfStudyRelatedSeries?: number\n  isLoaded: boolean\n  series: Series[]\n  addInstanceToSeries: (instance: Instance) => void\n  addInstancesToSeries: (instances: Instance[]) => void\n  setSeriesMetadata: (SeriesInstanceUID: string, metadata: any) => void\n}\n\ninterface Model {\n  studies: Study[]\n}\n\nconst _model: Model = {\n  studies: []\n}\n\nfunction _getStudyInstanceUIDs (): string[] {\n  return _model.studies.map((aStudy) => aStudy.StudyInstanceUID)\n}\n\nfunction _getStudy (StudyInstanceUID: string): Study | undefined {\n  return _model.studies.find(\n    (aStudy) => aStudy.StudyInstanceUID === StudyInstanceUID\n  )\n}\n\nfunction _getSeries (StudyInstanceUID: string, SeriesInstanceUID: string): Series | undefined {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  return study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n}\n\nfunction _getInstance (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  SOPInstanceUID: string\n): Instance | undefined {\n  const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n\n  if (series == null) {\n    return\n  }\n\n  return series.getInstance(SOPInstanceUID)\n}\n\nfunction _getInstanceByImageId (imageId: string): Instance | undefined {\n  for (const study of _model.studies) {\n    for (const series of study.series) {\n      for (const instance of series.instances) {\n        if (instance.imageId === imageId) {\n          return instance\n        }\n      }\n    }\n  }\n}\n\n/**\n * Update the metadata of a specific series\n * @param {*} StudyInstanceUID\n * @param {*} SeriesInstanceUID\n * @param {*} metadata metadata inform of key value pairs\n * @returns\n */\nfunction _updateMetadataForSeries (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  metadata: Record<string, any>\n): void {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  const series = study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n\n  if (series == null) {\n    return\n  }\n\n  const { instances } = series\n  instances.forEach((instance) => {\n    Object.keys(metadata).forEach((key) => {\n      if (typeof metadata[key] === 'object') {\n        instance[key] = { ...instance[key], ...metadata[key] }\n      } else {\n        instance[key] = metadata[key]\n      }\n    })\n  })\n}\n\ninterface BaseImplementationType {\n  EVENTS: typeof EVENTS\n  listeners: Record<string, any>\n  addInstance: (dicomJSONDatasetOrP10ArrayBuffer: ArrayBuffer | Record<string, any>) => void\n  addInstances: (instances: Instance[], madeInClient?: boolean) => void\n  updateSeriesMetadata: (seriesMetadata: Record<string, any>) => void\n  addSeriesMetadata: (seriesSummaryMetadata: Array<Record<string, any>>, madeInClient?: boolean) => void\n  addStudy: (study: Record<string, any>) => void\n  getStudyInstanceUIDs: typeof _getStudyInstanceUIDs\n  getStudy: typeof _getStudy\n  getSeries: typeof _getSeries\n  getInstance: typeof _getInstance\n  getInstanceByImageId: typeof _getInstanceByImageId\n  updateMetadataForSeries: typeof _updateMetadataForSeries\n  _broadcastEvent: (eventName: string, data: any) => void\n}\n\nconst BaseImplementation: BaseImplementationType = {\n  EVENTS,\n  listeners: {},\n  addInstance (dicomJSONDatasetOrP10ArrayBuffer) {\n    let dicomJSONDataset\n\n    // If Arraybuffer, parse to DICOMJSON before naturalizing.\n    if (dicomJSONDatasetOrP10ArrayBuffer instanceof ArrayBuffer) {\n      const dicomData = dcmjs.data.DicomMessage.readFile(\n        dicomJSONDatasetOrP10ArrayBuffer\n      )\n\n      dicomJSONDataset = dicomData.dict\n    } else {\n      dicomJSONDataset = dicomJSONDatasetOrP10ArrayBuffer\n    }\n\n    let naturalizedDataset: Instance\n\n    if (!('SeriesInstanceUID' in dicomJSONDataset)) {\n      naturalizedDataset =\n        dcmjs.data.DicomMetaDictionary.naturalizeDataset(dicomJSONDataset) as Instance\n    } else {\n      naturalizedDataset = dicomJSONDataset as unknown as Instance\n    }\n\n    const { StudyInstanceUID } = naturalizedDataset\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstanceToSeries(naturalizedDataset)\n  },\n  addInstances (instances, madeInClient = false) {\n    const { StudyInstanceUID, SeriesInstanceUID } = instances[0]\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstancesToSeries(instances)\n\n    // Broadcast an event even if we used cached data.\n    // This is because the mode needs to listen to instances that are added to build up its active displaySets.\n    // It will see there are cached displaySets and end early if this Series has already been fired in this\n    // Mode session for some reason.\n    this._broadcastEvent(EVENTS.INSTANCES_ADDED, {\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      madeInClient\n    })\n  },\n  updateSeriesMetadata (seriesMetadata) {\n    const { StudyInstanceUID, SeriesInstanceUID } = seriesMetadata\n    const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n    if (series == null) {\n      return\n    }\n\n    const study = _getStudy(StudyInstanceUID)\n    if (study != null) {\n      study.setSeriesMetadata(SeriesInstanceUID, seriesMetadata)\n    }\n  },\n  addSeriesMetadata (seriesSummaryMetadata, madeInClient = false) {\n    if (\n      seriesSummaryMetadata === undefined ||\n      seriesSummaryMetadata.length === 0 ||\n      seriesSummaryMetadata[0] === undefined\n    ) {\n      return\n    }\n\n    const { StudyInstanceUID } = seriesSummaryMetadata[0]\n    let study = _getStudy(StudyInstanceUID)\n    if (study == null) {\n      study = createStudyMetadata(StudyInstanceUID)\n      // Will typically be undefined with a compliant DICOMweb server, reset later\n      study.StudyDescription = seriesSummaryMetadata[0].StudyDescription\n      seriesSummaryMetadata?.forEach((item) => {\n        if (study !== undefined && !study.ModalitiesInStudy?.includes(item.Modality)) {\n          study.ModalitiesInStudy?.push(item.Modality)\n        }\n      })\n      study.NumberOfStudyRelatedSeries = seriesSummaryMetadata.length\n      _model.studies.push(study)\n    }\n\n    seriesSummaryMetadata.forEach((series) => {\n      const { SeriesInstanceUID } = series\n      study?.setSeriesMetadata(SeriesInstanceUID, series)\n    })\n\n    this._broadcastEvent(EVENTS.SERIES_ADDED, {\n      StudyInstanceUID,\n      seriesSummaryMetadata,\n      madeInClient\n    })\n  },\n  addStudy (study) {\n    const { StudyInstanceUID } = study\n\n    const existingStudy = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (existingStudy == null) {\n      const newStudy = createStudyMetadata(StudyInstanceUID)\n\n      newStudy.PatientID = study.PatientID\n      newStudy.PatientName = study.PatientName\n      newStudy.StudyDate = study.StudyDate\n      newStudy.ModalitiesInStudy = study.ModalitiesInStudy\n      newStudy.StudyDescription = study.StudyDescription\n      newStudy.AccessionNumber = study.AccessionNumber\n      newStudy.NumInstances = study.NumInstances // todo: Correct naming?\n\n      _model.studies.push(newStudy)\n    }\n  },\n  getStudyInstanceUIDs: _getStudyInstanceUIDs,\n  getStudy: _getStudy,\n  getSeries: _getSeries,\n  getInstance: _getInstance,\n  getInstanceByImageId: _getInstanceByImageId,\n  updateMetadataForSeries: _updateMetadataForSeries,\n  _broadcastEvent (eventName: string, data: any): void {\n  }\n}\n\ninterface DicomMetadataStoreType extends BaseImplementationType {\n  subscribe: (event: string, callback: (data: any) => void) => { unsubscribe: () => any }\n  unsubscribe: (event: string, callback: (data: any) => void) => void\n}\n\nconst DicomMetadataStore = Object.assign(\n  {},\n  BaseImplementation,\n  pubSubServiceInterface\n) as unknown as DicomMetadataStoreType\n\nexport { DicomMetadataStore }\nexport default DicomMetadataStore\n","import { useState, useEffect } from 'react'\n\n/**\n * A hook that delays updating a value for the specified time\n * @param value The value to debounce\n * @param delay The delay time in milliseconds\n * @returns The debounced value\n * @example\n * const debouncedSearchTerm = useDebounce(searchTerm, 300)\n */\nexport const useDebounce = <T,>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import { useState, useMemo, useEffect } from 'react'\nimport { Select, Input, Slider, Typography, Table } from 'antd'\nimport { SearchOutlined } from '@ant-design/icons'\n\nimport DicomWebManager from '../../DicomWebManager'\nimport './DicomTagBrowser.css'\nimport { useSlides } from '../../hooks/useSlides'\nimport { getSortedTags } from './dicomTagUtils'\nimport { formatDicomDate } from '../../utils/formatDicomDate'\nimport DicomMetadataStore, { Series, Study } from '../../services/DICOMMetadataStore'\nimport { useDebounce } from '../../hooks/useDebounce'\n\nconst { Option } = Select\n\ninterface DisplaySet {\n  displaySetInstanceUID: number\n  SeriesDate?: string\n  SeriesTime?: string\n  SeriesNumber: string\n  SeriesDescription?: string\n  Modality: string\n  images: any[]\n}\n\ninterface TableDataItem {\n  key: string\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TableDataItem[]\n}\n\ninterface DicomTagBrowserProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\nconst DicomTagBrowser = ({ clients, studyInstanceUID }: DicomTagBrowserProps): JSX.Element => {\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n  const [study, setStudy] = useState<Study | undefined>(undefined)\n\n  const [displaySets, setDisplaySets] = useState<DisplaySet[]>([])\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] = useState(0)\n  const [instanceNumber, setInstanceNumber] = useState(1)\n  const [filterValue, setFilterValue] = useState('')\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([])\n  const [searchInput, setSearchInput] = useState('')\n\n  const debouncedSearchValue = useDebounce(searchInput, 300)\n\n  useEffect(() => {\n    if (debouncedSearchValue === '') {\n      setFilterValue('')\n      setExpandedKeys([])\n    } else {\n      setFilterValue(debouncedSearchValue)\n    }\n  }, [debouncedSearchValue])\n\n  useEffect(() => {\n    const handler = (event: any): void => {\n      const study: Study | undefined = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n      setStudy(study)\n    }\n    const seriesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.SERIES_ADDED, handler)\n    const instancesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.INSTANCES_ADDED, handler)\n\n    const study = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n    setStudy(study)\n\n    return () => {\n      seriesAddedSubscription.unsubscribe()\n      instancesAddedSubscription.unsubscribe()\n    }\n  }, [studyInstanceUID])\n\n  useEffect(() => {\n    let displaySets: DisplaySet[] = []\n    let derivedDisplaySets: DisplaySet[] = []\n    const processedSeries: string[] = []\n    let index = 0\n\n    if (slides.length > 0) {\n      displaySets = slides\n        .map((slide): DisplaySet | null => {\n          const { volumeImages } = slide\n          if (volumeImages?.[0] === undefined) return null\n\n          const {\n            SeriesDate,\n            SeriesTime,\n            SeriesNumber,\n            SeriesInstanceUID,\n            SeriesDescription,\n            Modality\n          } = volumeImages[0]\n\n          processedSeries.push(SeriesInstanceUID)\n\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate,\n            SeriesTime,\n            SeriesInstanceUID,\n            // @ts-expect-error\n            SeriesNumber,\n            SeriesDescription,\n            Modality,\n            images: volumeImages\n          }\n          index++\n          return ds\n        })\n        .filter((set): set is DisplaySet => set !== null)\n    }\n\n    if (study !== undefined && study.series?.length > 0) {\n      derivedDisplaySets = study.series.filter(s => !processedSeries.includes(s.SeriesInstanceUID))\n        .map((series: Series): DisplaySet => {\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate: series.SeriesDate,\n            SeriesTime: series.SeriesTime,\n            // @ts-expect-error\n            SeriesNumber: series.SeriesNumber,\n            SeriesDescription: series.SeriesDescription,\n            SeriesInstanceUID: series.SeriesInstanceUID,\n            Modality: series.Modality,\n            images: series?.instances?.length > 0 ? series.instances : [series]\n          }\n          index++\n          return ds\n        })\n    }\n\n    setDisplaySets([...displaySets, ...derivedDisplaySets])\n  }, [slides, study])\n\n  const displaySetList = useMemo(() => {\n    displaySets.sort((a, b) => Number(a.SeriesNumber) - Number(b.SeriesNumber))\n    return displaySets.map((displaySet, index) => {\n      const {\n        SeriesDate = '',\n        SeriesTime = '',\n        SeriesNumber = '',\n        SeriesDescription = '',\n        Modality = ''\n      } = displaySet\n\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0]\n      const displayDate = formatDicomDate(dateStr)\n\n      return {\n        value: index,\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\n        description: displayDate\n      }\n    })\n  }, [displaySets])\n\n  const showInstanceList =\n    displaySets[selectedDisplaySetInstanceUID]?.images.length > 1\n\n  console.debug('displaySets:', displaySets)\n\n  const instanceSliderMarks = useMemo(() => {\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return {}\n    const totalInstances = displaySets[selectedDisplaySetInstanceUID].images.length\n\n    // Create marks for first, middle, and last instances\n    const marks: Record<number, string> = {\n      1: '1', // First\n      [Math.ceil(totalInstances / 2)]: String(Math.ceil(totalInstances / 2)), // Middle\n      [totalInstances]: String(totalInstances) // Last\n    }\n\n    return marks\n  }, [selectedDisplaySetInstanceUID, displaySets])\n\n  const columns = [\n    {\n      title: 'Tag',\n      dataIndex: 'tag',\n      key: 'tag',\n      width: '30%'\n    },\n    {\n      title: 'VR',\n      dataIndex: 'vr',\n      key: 'vr',\n      width: '5%'\n    },\n    {\n      title: 'Keyword',\n      dataIndex: 'keyword',\n      key: 'keyword',\n      width: '30%'\n    },\n    {\n      title: 'Value',\n      dataIndex: 'value',\n      key: 'value',\n      width: '40%'\n    }\n  ]\n\n  const tableData = useMemo(() => {\n    const transformTagsToTableData = (tags: any[], parentKey = ''): TableDataItem[] => {\n      return tags.map((tag, index) => {\n        // Create a unique key using tag value if available, otherwise use index\n        const keyBase: string = tag.tag !== '' ? tag.tag.replace(/[(),]/g, '') : index.toString()\n        const currentKey: string = parentKey !== '' ? `${parentKey}-${keyBase}` : keyBase\n\n        const item: TableDataItem = {\n          key: currentKey,\n          tag: tag.tag,\n          vr: tag.vr,\n          keyword: tag.keyword,\n          value: tag.value\n        }\n\n        if (tag.children !== undefined && tag.children.length > 0) {\n          item.children = transformTagsToTableData(tag.children, currentKey)\n        }\n\n        return item\n      })\n    }\n\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return []\n    const metadata = displaySets[selectedDisplaySetInstanceUID]?.images[instanceNumber - 1]\n    const tags = getSortedTags(metadata)\n    return transformTagsToTableData(tags)\n  }, [instanceNumber, selectedDisplaySetInstanceUID, displaySets])\n\n  const filteredData = useMemo(() => {\n    if (filterValue === undefined || filterValue === '') return tableData\n\n    const searchLower = filterValue.toLowerCase()\n    const matchedKeys = new Set<string>()\n\n    const nodeMatches = (node: TableDataItem): boolean => {\n      return (\n        (node.tag?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.vr?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.keyword?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.value?.toString().toLowerCase() ?? '').includes(searchLower)\n      )\n    }\n\n    // First pass: find all matching nodes and their parent paths\n    const findMatchingPaths = (\n      node: TableDataItem,\n      parentPath: TableDataItem[] = []\n    ): TableDataItem[][] => {\n      const currentPath = [...parentPath, node]\n      let matchingPaths: TableDataItem[][] = []\n\n      if (nodeMatches(node)) {\n        matchingPaths.push(currentPath)\n      }\n\n      if (node.children != null) {\n        node.children.forEach(child => {\n          const childPaths = findMatchingPaths(child, currentPath)\n          matchingPaths = [...matchingPaths, ...childPaths]\n        })\n      }\n\n      return matchingPaths\n    }\n\n    // Find all paths that contain matches\n    const matchingPaths = tableData.flatMap(node => findMatchingPaths(node))\n\n    // Second pass: reconstruct the tree with matching paths\n    const reconstructTree = (\n      paths: TableDataItem[][],\n      level = 0\n    ): TableDataItem[] => {\n      if (paths.length === 0 || level >= paths[0].length) return []\n\n      const nodesAtLevel = new Map<string, {\n        node: TableDataItem\n        childPaths: TableDataItem[][]\n      }>()\n\n      paths.forEach(path => {\n        if (level < path.length) {\n          const node = path[level]\n          if (!nodesAtLevel.has(node.key)) {\n            nodesAtLevel.set(node.key, {\n              node: { ...node },\n              childPaths: []\n            })\n          }\n          if (level + 1 < path.length) {\n            nodesAtLevel.get(node.key)?.childPaths.push(path)\n          }\n        }\n      })\n\n      return Array.from(nodesAtLevel.values()).map(({ node, childPaths }) => {\n        matchedKeys.add(node.key)\n        const children = reconstructTree(childPaths, level + 1)\n        return children.length > 0 ? { ...node, children } : node\n      })\n    }\n\n    const filtered = reconstructTree(matchingPaths)\n    setExpandedKeys(Array.from(matchedKeys))\n\n    return filtered\n  }, [tableData, filterValue])\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div className='dicom-tag-browser'>\n      <div\n        style={{\n          width: '100%',\n          padding: '16px 20px 20px'\n        }}\n      >\n        <div style={{ display: 'flex', gap: '24px', marginBottom: '32px' }}>\n          <div style={{ flex: 1 }}>\n            <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>Slides</Typography.Text>\n            <Select\n              style={{ width: '100%' }}\n              value={selectedDisplaySetInstanceUID}\n              onChange={(value) => {\n                setSelectedDisplaySetInstanceUID(value)\n                setInstanceNumber(1)\n              }}\n              optionLabelProp='label'\n              optionFilterProp='label'\n            >\n              {displaySetList.map((item) => (\n                <Option key={item.value} value={item.value} label={item.label}>\n                  <div>\n                    <div>{item.label}</div>\n                    <div\n                      style={{ fontSize: '12px', color: 'rgba(0, 0, 0, 0.45)' }}\n                    >\n                      {item.description}\n                    </div>\n                  </div>\n                </Option>\n              ))}\n            </Select>\n          </div>\n\n          {showInstanceList && (\n            <div style={{ flex: 1 }}>\n              <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>\n                Instance Number: {instanceNumber}\n              </Typography.Text>\n              <Slider\n                min={1}\n                max={displaySets[selectedDisplaySetInstanceUID]?.images.length}\n                value={instanceNumber}\n                onChange={(value) => setInstanceNumber(value)}\n                marks={instanceSliderMarks}\n                tooltip={{\n                  formatter: (value: number | undefined) => value !== undefined ? `Instance ${value}` : ''\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        <Input\n          style={{ marginBottom: '20px' }}\n          placeholder='Search DICOM tags...'\n          prefix={<SearchOutlined />}\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n        />\n\n        <Table\n          columns={columns}\n          dataSource={filteredData}\n          pagination={false}\n          expandable={{\n            expandedRowKeys: expandedKeys,\n            onExpandedRowsChange: (keys) => setExpandedKeys(keys as string[])\n          }}\n          size='small'\n          scroll={{ y: 500 }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default DicomTagBrowser\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Modal,\n  Row,\n  Space,\n  Badge,\n  Collapse,\n  Radio,\n  Tooltip\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  FileSearchOutlined,\n  UnorderedListOutlined,\n  UserOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport NotificationMiddleware, { NotificationMiddlewareEvents } from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\nimport { v4 as uuidv4 } from 'uuid'\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser'\nimport DicomWebManager from '../DicomWebManager'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  clients?: { [key: string]: DicomWebManager }\n  defaultClients?: { [key: string]: DicomWebManager }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface ExtendedCustomError extends CustomError {\n  source: string\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n  errorObj: ExtendedCustomError[]\n  errorCategory: string[]\n  warnings: string[]\n  serverSelectionMode: 'default' | 'custom'\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    const cachedMode = window.localStorage.getItem('slim_server_selection_mode') as 'default' | 'custom' | null\n\n    this.state = {\n      errorObj: [],\n      errorCategory: [],\n      warnings: [],\n      selectedServerUrl: cachedServerUrl ?? '',\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl),\n      serverSelectionMode: cachedMode === 'custom' && cachedServerUrl !== null && cachedServerUrl !== '' ? 'custom' : 'default'\n    }\n\n    const onErrorHandler = ({ source, error }: {\n      source: string\n      error: CustomError\n    }): void => {\n      this.setState(state => ({\n        ...state,\n        errorObj: [...state.errorObj, { ...error, source }],\n        errorCategory: [...state.errorCategory, error.type]\n      }))\n    }\n\n    const onWarningHandler = (warning: string): void => {\n      this.setState(state => ({\n        ...state,\n        warnings: [...state.warnings, warning]\n      }))\n    }\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnError,\n      onErrorHandler\n    )\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnWarning,\n      onWarningHandler\n    )\n  }\n\n  componentDidUpdate (prevProps: Readonly<HeaderProps>, prevState: Readonly<HeaderState>): void {\n    if (((prevState.warnings.length > 0) || (prevState.errorObj.length > 0)) && this.props.location.pathname !== prevProps.location.pathname) {\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true,\n        errorObj: [],\n        errorCategory: [],\n        warnings: []\n      })\n    }\n  }\n\n  isValidServerUrl = (url: string | null | undefined): boolean => {\n    if (url == null || url === '') {\n      return false\n    }\n    try {\n      const urlObj = new URL(url)\n      return urlObj.protocol.startsWith('http') && urlObj.pathname.length > 0\n    } catch (TypeError) {\n      return false\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleDicomTagBrowserButtonClick = (): void => {\n    const width = window.innerWidth - 200\n    Modal.info({\n      title: 'DICOM Tag Browser',\n      width,\n      content: <DicomTagBrowser\n        clients={this.props.clients ?? {}}\n        studyInstanceUID={this.props.params.studyInstanceUID ?? ''}\n               />,\n      onOk (): void {}\n    })\n  }\n\n  handleDebugButtonClick = (): void => {\n    const errorMsgs: {\n      Authentication: string[]\n      Communication: string[]\n      EncodingDecoding: string[]\n      Visualization: string[]\n    } = {\n      Authentication: [],\n      Communication: [],\n      EncodingDecoding: [],\n      Visualization: []\n    }\n\n    type ObjectKey = keyof typeof errorMsgs\n    const errorNum = this.state.errorObj.length\n\n    if (errorNum > 0) {\n      for (let i = 0; i < errorNum; i++) {\n        const category = this.state.errorCategory[i] as ObjectKey\n        errorMsgs[category].push(`${this.state.errorObj[i].message as string} (Source: ${this.state.errorObj[i].source})`)\n      }\n    }\n\n    const { Panel } = Collapse\n\n    const showErrorCount = (errcount: number): JSX.Element => (\n      <Badge count={errcount} />\n    )\n\n    const showWarningCount = (warncount: number): JSX.Element => (\n      <Badge color='green' count={warncount} />\n    )\n\n    Modal.info({\n      title: 'Debug Information\\n (Check console for more information)',\n      width: 800,\n      content: (\n        <Collapse>\n          <Panel\n            header='Communication Error'\n            key='communicationerror'\n            extra={showErrorCount(errorMsgs.Communication.length)}\n          >\n            <ol>\n              {errorMsgs.Communication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Data Encoding/Decoding error'\n            key='encodedecodeerror'\n            extra={showErrorCount(errorMsgs.EncodingDecoding.length)}\n          >\n            <ol>\n              {errorMsgs.EncodingDecoding.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Visualization error'\n            key='visualizationerror'\n            extra={showErrorCount(errorMsgs.Visualization.length)}\n          >\n            <ol>\n              {errorMsgs.Visualization.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Authentication error'\n            key='autherror'\n            extra={showErrorCount(errorMsgs.Authentication.length)}\n          >\n            <ol>\n              {errorMsgs.Authentication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Warning'\n            key='warning'\n            extra={showWarningCount(this.state.warnings.length)}\n          >\n            <ol>\n              {this.state.warnings.map(warning => (\n                <li key={uuidv4()}>{warning}</li>\n              ))}\n            </ol>\n          </Panel>\n        </Collapse>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  handleServerSelectionInput = (\n    event: React.FormEvent<HTMLInputElement>\n  ): void => {\n    const value = event.currentTarget.value\n    this.setState({\n      selectedServerUrl: value,\n      isServerSelectionDisabled: !this.isValidServerUrl(value)\n    })\n  }\n\n  handleServerSelectionCancellation = (): void => {\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    this.setState({\n      serverSelectionMode: cachedServerUrl !== null && cachedServerUrl !== '' ? 'custom' : 'default',\n      selectedServerUrl: cachedServerUrl ?? undefined,\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl)\n    })\n  }\n\n  handleServerSelectionModeChange = (e: any): void => {\n    const mode = e.target.value\n    this.setState({ serverSelectionMode: mode })\n  }\n\n  handleServerSelection = (): void => {\n    window.localStorage.setItem('slim_server_selection_mode', this.state.serverSelectionMode)\n\n    if (this.state.serverSelectionMode === 'default') {\n      this.props.onServerSelection({ url: '' })\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: false\n      })\n      return\n    }\n\n    const url = this.state.selectedServerUrl\n    let closeModal = false\n    if (url != null && url !== '') {\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        this.props.onServerSelection({ url })\n        closeModal = true\n      }\n    }\n    this.setState({\n      isServerSelectionModalVisible: !closeModal,\n      isServerSelectionDisabled: !closeModal\n    })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = { items: userMenuItems }\n      user = (\n        <Dropdown menu={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    const debugButton = (\n      <Badge count={this.state.errorObj.length} style={{ zIndex: 1000 }}>\n        <Badge color='green' count={this.state.warnings.length} style={{ zIndex: 1001 }}>\n          <Button\n            icon={SettingOutlined}\n            tooltip='Debug info'\n            onClick={this.handleDebugButtonClick}\n          />\n        </Badge>\n      </Badge>\n    )\n\n    const showDicomTagBrowser = this.props.location.pathname.includes('/studies/')\n\n    const dicomTagBrowserButton = showDicomTagBrowser\n      ? (\n        <Button\n          icon={FileSearchOutlined}\n          tooltip='Dicom Tag Browser'\n          onClick={this.handleDicomTagBrowserButtonClick}\n        />\n        )\n      : null\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    const selectedServerUrl = this.state.serverSelectionMode === 'custom'\n      ? this.state.selectedServerUrl\n      : this.props.clients?.default?.baseURL ?? this.props.defaultClients?.default?.baseURL\n\n    const urlInfo = selectedServerUrl != null && selectedServerUrl !== ''\n      ? (\n        <Tooltip title={selectedServerUrl}>\n          <div\n            style={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap',\n              paddingRight: '20px',\n              paddingLeft: '20px'\n            }}\n            title={selectedServerUrl}\n          >\n            {selectedServerUrl}\n          </div>\n        </Tooltip>\n        )\n      : null\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row style={{ flexWrap: 'nowrap' }}>\n            <Col style={{ flexShrink: 0 }}>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' style={{ minWidth: 0, overflow: 'hidden' }}>\n              <div style={{ width: '100%', overflow: 'hidden' }}>\n                {this.props.showServerSelectionButton ? urlInfo : ''}\n              </div>\n            </Col>\n            <Col style={{ flexShrink: 0 }}>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {debugButton}\n                {dicomTagBrowserButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          open={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={this.handleServerSelection}\n          onCancel={this.handleServerSelectionCancellation}\n        >\n          <Radio.Group\n            value={this.state.serverSelectionMode}\n            onChange={this.handleServerSelectionModeChange}\n            style={{ marginBottom: '16px' }}\n          >\n            <Radio value='default'>Use default server</Radio>\n            <Radio value='custom'>Use custom server</Radio>\n          </Radio.Group>\n\n          {this.state.serverSelectionMode === 'custom' && (\n            <Tooltip title={this.state.selectedServerUrl}>\n              <Input\n                placeholder='Enter base URL of DICOMweb Study Service'\n                value={this.state.selectedServerUrl}\n                onChange={this.handleServerSelectionInput}\n                onPressEnter={this.handleServerSelection}\n                addonAfter={\n                this.state.isServerSelectionDisabled\n                  ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                  : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n            </Tooltip>\n          )}\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { Button, Input, Space, Table, TablePaginationConfig } from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'An error occured. Search for studies failed.'\n          )\n        )\n      })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Request to search for studies failed.'\n          )\n        )\n      })\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\nimport NotificationMiddleware,\n{ NotificationMiddlewareContext } from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nconst createUser = (userData: UserData | null): User => {\n  let profile\n  if (userData !== null) {\n    profile = userData.profile\n  }\n\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.AUTH,\n        new CustomError(\n          errorTypes.AUTHENTICATION,\n          'Failed to obtain user \"name\" and \"email\".'\n        )\n      )\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.AUTH,\n      new CustomError(\n        errorTypes.AUTHENTICATION,\n        'Failed to obtain user profile.'\n      )\n    )\n  }\n  return {\n    name: undefined,\n    email: undefined\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string|undefined> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user profile.'\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user information.'\n          )\n        )\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\nimport * as dcmjs from 'dcmjs'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\nimport DicomMetadataStore, { Instance } from './services/DICOMMetadataStore'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'At least one server needs to be configured.'\n          )\n        )\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Either path or full URL needs to be configured for server.'\n          )\n        )\n      }\n\n      const hasHttpsUrl = (url?: string): boolean => url?.startsWith('https') ?? false\n\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n\n      const shouldUpgradeInsecure = serverSettings.upgradeInsecureRequests === true && [\n        serviceUrl,\n        serverSettings.qidoPathPrefix,\n        serverSettings.wadoPathPrefix,\n        serverSettings.stowPathPrefix\n      ].some(hasHttpsUrl)\n\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n\n      if (shouldUpgradeInsecure) {\n        clientSettings.headers = {\n          ...clientSettings.headers,\n          'Content-Security-Policy': 'upgrade-insecure-requests'\n        }\n      }\n\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one store is supported for now.'\n        )\n      )\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const studySummaryMetadata = await this.stores[0].client.retrieveStudyMetadata(options)\n    const naturalized = naturalizeDataset(studySummaryMetadata)\n    DicomMetadataStore.addStudy(naturalized)\n    return studySummaryMetadata\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const seriesSummaryMetadata = await this.stores[0].client.retrieveSeriesMetadata(options)\n    const naturalized = seriesSummaryMetadata.map(naturalizeDataset)\n    DicomMetadataStore.addSeriesMetadata(naturalized, true)\n    return seriesSummaryMetadata\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    const instance = await this.stores[0].client.retrieveInstance(options)\n    const data = dcmjs.data.DicomMessage.readFile(instance)\n    const { dataset } = dmv.metadata.formatMetadata(data.dict)\n    DicomMetadataStore.addInstances([dataset as Instance])\n    return instance\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <CaseViewer\n      clients={clients}\n      user={user}\n      annotations={config.annotations}\n      preload={preload}\n      app={app}\n      enableAnnotationTools={enableAnnotationTools}\n      studyInstanceUID={studyInstanceUID}\n    />\n  )\n}\n\nfunction _createClientMapping ({ baseUri, gcpBaseUrl, settings, onError }: {\n  baseUri: string\n  gcpBaseUrl: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      if (window.location.pathname.includes('/projects/')) {\n        const pathname = window.location.pathname.split('/study/')[0]\n        const pathUrl = `${gcpBaseUrl}${pathname}/dicomWeb`\n        serverSettings.url = pathUrl\n      }\n\n      storageClassMapping.default += 1\n      clientMapping.default = new DicomWebManager({\n        baseUri,\n        settings: [serverSettings],\n        onError\n      })\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.COMMUNICATION,\n        'Only one default server can be configured without specification ' +\n        'of storage classes.'\n      )\n    )\n  }\n\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one configured server can specify a given storage class. ' +\n          `Storage class \"${key}\" is specified by more than one ` +\n          'of the configured servers.'\n        )\n      )\n    }\n  }\n\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n  }\n\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  defaultClients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'User is not authorized to access DICOMweb resources.')\n      )\n    }\n\n    const logServerError = (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'An unexpected server error occured.'\n        )\n      )\n    }\n\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          logServerError()\n        }\n      })\n    } else if (error.status === 500) {\n      logServerError()\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'One server needs to be configured.')\n      )\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n    this.addGcpSecondaryAnnotationServer(props.config)\n\n    const defaultClients = _createClientMapping({\n      baseUri,\n      gcpBaseUrl: props.config.gcpBaseUrl ?? 'https://healthcare.googleapis.com/v1',\n      settings: props.config.servers,\n      onError: this.handleDICOMwebError\n    })\n\n    this.state = {\n      clients: defaultClients,\n      defaultClients,\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  addGcpSecondaryAnnotationServer (config: AppProps['config']): void {\n    const serverId = 'gcp_secondary_annotation_server'\n    const urlParams = new URLSearchParams(window.location.search)\n    const url = urlParams.get('gcp')\n    const gcpSecondaryAnnotationServer = config.servers.find(\n      (server) => server.id === serverId\n    )\n    if (gcpSecondaryAnnotationServer === undefined && typeof url === 'string') {\n      config.servers.push({\n        id: serverId,\n        write: true,\n        url,\n        storageClasses: [\n          StorageClasses.COMPREHENSIVE_SR,\n          StorageClasses.COMPREHENSIVE_3D_SR,\n          StorageClasses.SEGMENTATION,\n          StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION,\n          StorageClasses.PARAMETRIC_MAP,\n          StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE,\n          StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n        ]\n      })\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    if (url === '' || window.localStorage.getItem('slim_server_selection_mode') === 'default') {\n      this.setState({ clients: this.state.defaultClients })\n      return\n    }\n    window.localStorage.setItem('slim_selected_server', url)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath !== null && storedPath !== '') {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch !== null && storedSearch !== '') {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Could not sign-in user.')\n        )\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path === null || path === '') {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n\n    // Restore cached server selection if it exists\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    if (cachedServerUrl !== null && cachedServerUrl !== '') {\n      this.handleServerSelection({ url: cachedServerUrl })\n    }\n\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n              clients={this.state.clients}\n              defaultClients={this.state.defaultClients}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/projects/:project/locations/:location/datasets/:dataset/dicomStores/:dicomStore/study/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","PatientID","PatientName","PatientSex","PatientBirthDate","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","_subscriptions","Symbol","_lastSubscriptionId","PubSub","eventName","callback","Error","hasOwnProperty","subscriptionId","callbacks","payload","errorTypes","CustomError","type","message","stack","NotificationMiddlewareEvents","NotificationMiddlewareContext","NotificationType","NotificationSourceDefinition","sources","category","notificationType","outerContext","args","publish","Array","from","warn","console","JSON","stringify","arguments","includes","apply","prototype","slice","call","source","error","notificationMsg","errorCategory","find","s","String","notification","description","duration","state","isLoading","overviewViewportRef","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","info","ContainerIdentifier","dmv","client","clients","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","disableInteractions","resizeFactor","errorInterceptor","NotificationMiddleware","render","container","resize","style","height","containerIdentifier","ref","textAlign","display","alignItems","justifyContent","fontSize","color","letterSpacing","seriesInstanceUIDs","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","handleMeasurementSelection","handleOpacityChange","handleColorRChange","handleColorGChange","handleColorBChange","getCurrentColor","currentStyle","opacity","defaultStyle","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","limitValues","isArray","option","codeComponents","measurement","schemeDesignator","meaning","colorSettings","windowSettings","explorationSettings","AnnotationGroupSequence","findIndex","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","AnnotationCoordinateType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","plain","justify","gutter","range","min","max","step","handleLowerLimitChange","handleLimitChange","handleUpperLimitChange","minWidth","defaultValue","settings","isBadgeVisible","direction","placement","content","overlayStyle","shape","SettingOutlined","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","annotationGroups","onAnnotationGroupVisibilityChange","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupStyleChange","handleClick","text","button","Icon","isSelected","tooltip","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","overflowY","handleRemoval","getCurrentColors","paletteColorLookupTable","previousProps","previousState","opticalPath","opticalPathIdentifier","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","specimenDescriptions","maxValue","Math","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","SeriesInstanceUID","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","mappingUID","mapping","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","segmentUID","segment","algorithmName","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","contourOnly","annotationGroupsUIDs","updateCurrentStyle","handleShowOutlineOnly","target","checkedAnnotationUids","defaultAnnotationStyles","types","checkAll","every","uids","indeterminate","some","handleChangeCheckedType","e","mouseEnterDelay","reduce","acc","marginLeft","shortenedCodeMeaning","displayCodeMeaning","isChecked","indeterminateType","flexDirection","categories","categoriesAcc","annotation","categoryKey","typeKey","oldCategory","oldType","Object","keys","typesArr","getCategories","xPosition","yPosition","position","top","left","backgroundColor","minHeight","pointerEvents","attr","roiUid","adaptRoiToAnnotation","result","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","DEFAULT_ANNOTATION_STROKE_COLOR","DEFAULT_ANNOTATION_COLOR_PALETTE","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","_areROIsEqual","a","b","graphicType","graphicData","s1","s2","j","_formatRoiStyle","stroke","fill","image","circle","radius","_constructViewers","preload","volumeImages","labelViewer","volumeViewer","clientMapping","controls","activateSelectInteraction","labelImages","_implementsTID1500","templateSeq","ContentTemplateSequence","TemplateIdentifier","_describesSpecimenSubject","subjectClassValue","retrievedConcept","expectedConcept","_containsROIAnnotations","measurementGroups","foundRegion","regions","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","hoveredRois","lastPixel","defaultRoiStyle","roiStyles","selectionColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","rawInstance","instance","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","selectedPresentationStateUID","setPresentationState","presentationStates","catch","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","Set","activateOpticalPath","showOpticalPath","add","searchParams","URLSearchParams","search","set","pathname","replace","getRoiStyle","loadDerivedDataset","derivedDataset","debug","SOPClassUID","getAllROIs","handleAnnotationVisibilityChange","getAllAnnotationGroups","handleAnnotationGroupVisibilityChange","getAllSegments","handleSegmentVisibilityChange","getAllParameterMappings","parameterMapping","handleMappingVisibilityChange","handleOpticalPathVisibilityChange","addAnnotationGroups","Promise","resolve","reject","MICROSCOPY_BULK_SIMPLE_ANNOTATION","searchForSeries","matchedSeries","series","retrieveSeriesMetadata","retrievedMetadata","ann","finding","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","forceUpdate","addSegmentations","SEGMENTATION","segmentations","seg","refImage","FrameOfReferenceUID","addSegments","addParametricMaps","PARAMETRIC_MAP","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","addAnnotations","onRoiModified","onWindowResize","onRoiDrawn","detail","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","addROI","onRoiDoubleClicked","isSelectedRoiModalVisible","setHoveredRoiAttributes","r","hoveredRoiAttributes","clearHoveredRois","getUniqueHoveredRois","newRoi","allRois","filter","isSamePixelAsLast","clientX","clientY","onPointerMove","hoveredRoi","feature","originalEvent","isHoveredRoiTooltipVisible","hoveredRoiTooltipX","hoveredRoiTooltipY","onRoiSelected","selectedRoi","oldSelectedRois","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingError","onLoadingError","onFrameLoadingEnded","delete","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","onKeyUp","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","isAnnotationModalVisible","isGoToModalVisible","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","handleICCProfilesToggle","isICCProfilesEnabled","toggleICCProfiles","formatAnnotation","getROI","generateRoiStyle","geometryTypes","componentSetup","componentCleanup","handleRoiSelectionCancellation","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationGroupStyleChange","handleRoiStyleChange","handleXCoordinateSelection","handleYCoordinateSelection","handleMagnificationSelection","handleSlidePositionSelection","handleSlidePositionSelectionCancellation","handleReportVerification","handleReportCancellation","handleSegmentStyleChange","handleMappingStyleChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","boundingBox","generatedReport","isSelectedMagnificationValid","isReportModalVisible","isSelectedXCoordinateValid","isSelectedYCoordinateValid","selectedXCoordinate","validXCoordinateRange","selectedYCoordinate","validYCoordinateRange","selectedMagnification","areRoisHidden","cleanup","isOpticalPathVisible","isOpticalPathActive","COMPREHENSIVE_3D_SR","otherROI","roiAsAnnotation","document","body","removeEventListener","window","addEventListener","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","selectedMarkup","filteredEvaluations","x","Number","start","end","y","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","point","log","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","observer","refSpecimen","user","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","app","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","evidence","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","setROIStyle","showAnnotationGroup","hideAnnotationGroup","strokeColor","fillColor","c","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","sort","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","showROIs","hideROIs","allAnnotationGroups","filteredAnnotationGroups","referencedSeriesInstanceUID","annotationMenuItems","openSubMenuItems","geometryTypeOptionsMapping","box","polygon","line","freehandpolygon","freehandline","annotationConfigurations","defaultActiveFirstOption","placeholder","onClear","specimenMenu","equipmentMenu","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","selectedRoiInformation","cursor","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","iccProfilesMenu","getICCProfiles","margin","hasSider","overflow","open","onOk","okButtonProps","onCancel","okText","maskClosable","footer","prefix","onPressEnter","addonAfter","CheckOutlined","StopOutlined","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","setTimeout","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","areSameAcquisition","AcquisitionUID","Slide","options","acquisitionUID","opticalPathIdentifiers","pyramidUIDs","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","THUMBNAIL","PyramidUID","samplesPerPixel","SamplesPerPixel","requirePyramidUID","PhotometricInterpretation","createSlides","slideMetadata","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","imgA","imgB","fetchImageMetadata","onSuccess","onError","StudyInstanceUID","all","loadingSeries","seriesImages","newSlides","customError","slidesCache","Map","pendingRequests","useSlides","useState","setSlides","setIsLoading","setError","useEffect","cachedData","get","fetchSlides","pendingRequest","err","naturalizeDataset","findSeriesSlide","ParametrizedSlideViewer","selectedSlide","setSelectedSlide","setDerivedDataset","seriesSlide","findReferencedSlide","allClients","storageClass","seriesMetadata","naturalizedSeriesMetadata","ReferencedSeriesSequence","referencedSlide","imageLibrary","contentItem","referencedSOPInstanceUID","presentationStateUID","viewer","volumeInstances","clinicalTrialMenu","seriesFragment","borderRight","borderRightWidth","path","element","DicomMetaDictionary","formatValue","val","getRows","depth","keywords","flatMap","keyword","tagInfo","nameMap","match","tag","sequenceItems","sequenceNode","getSortedTags","subscribe","_broadcastEvent","_unsubscribe","_isValidEvent","listenerId","subscription","listeners","unsubscribe","EVENTS","callbackProps","hasListeners","hasCallbacks","listener","defaultInstances","instances","instancesMap","SeriesNumber","SeriesDescription","SeriesDate","SeriesTime","addInstance","newInstance","addInstances","newInstances","len","getInstance","StudyDescription","NumInstances","ModalitiesInStudy","isLoaded","addInstanceToSeries","addInstancesToSeries","createSeriesMetadata","setSeriesMetadata","existingSeries","assign","STUDY_ADDED","INSTANCES_ADDED","SERIES_ADDED","SERIES_UPDATED","_model","studies","_getStudy","aStudy","_getSeries","study","aSeries","BaseImplementation","dicomJSONDatasetOrP10ArrayBuffer","dicomJSONDataset","naturalizedDataset","ArrayBuffer","createStudyMetadata","madeInClient","updateSeriesMetadata","addSeriesMetadata","seriesSummaryMetadata","NumberOfStudyRelatedSeries","addStudy","existingStudy","newStudy","getStudyInstanceUIDs","getStudy","getSeries","getInstanceByImageId","imageId","updateMetadataForSeries","pubSubServiceInterface","setStudy","displaySets","setDisplaySets","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","expandedKeys","setExpandedKeys","searchInput","setSearchInput","debouncedSearchValue","delay","debouncedValue","setDebouncedValue","timer","clearTimeout","useDebounce","handler","DicomMetadataStore","seriesAddedSubscription","instancesAddedSubscription","derivedDisplaySets","processedSeries","ds","displaySetInstanceUID","displaySetList","useMemo","displaySet","displayDate","dateStr","hour","minute","second","monthNum","parseInt","dayNum","date","Date","getMonth","getDate","weekday","toLocaleDateString","monthName","dayFormatted","yearNum","getFullYear","formatDicomDate","showInstanceList","instanceSliderMarks","totalInstances","tableData","transformTagsToTableData","tags","parentKey","keyBase","currentKey","filteredData","searchLower","toLowerCase","matchedKeys","nodeMatches","node","findMatchingPaths","parentPath","currentPath","matchingPaths","child","childPaths","filtered","reconstructTree","paths","nodesAtLevel","className","gap","marginBottom","flex","strong","optionLabelProp","optionFilterProp","marks","formatter","SearchOutlined","columns","dataIndex","dataSource","pagination","expandable","expandedRowKeys","onExpandedRowsChange","scroll","isValidServerUrl","url","urlObj","URL","protocol","startsWith","TypeError","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleDicomTagBrowserButtonClick","innerWidth","handleDebugButtonClick","errorMsgs","Authentication","Communication","EncodingDecoding","Visualization","errorNum","errorObj","warncount","Panel","Collapse","showErrorCount","errcount","uuidv4","warnings","warning","handleServerSelectionButtonClick","isServerSelectionModalVisible","handleServerSelectionInput","currentTarget","selectedServerUrl","isServerSelectionDisabled","handleServerSelectionCancellation","cachedServerUrl","localStorage","getItem","serverSelectionMode","handleServerSelectionModeChange","handleServerSelection","setItem","onServerSelection","closeModal","cachedMode","prevProps","prevState","worklistButton","userMenuItems","onUserLogout","userMenu","menu","trigger","UserOutlined","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","debugButton","zIndex","dicomTagBrowserButton","FileSearchOutlined","showServerSelectionButton","ApiOutlined","default","baseURL","defaultClients","urlInfo","textOverflow","paddingRight","flexWrap","flexShrink","src","process","alt","subTitle","defaultPageSize","handleSearch","confirm","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","filterIcon","fetchData","handleChange","numStudies","pageSize","searchOptions","searchForStudies","limit","searchCriteria","fuzzymatching","filters","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","record","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","status","errorMessage","attemptFailedError","DicomWebManager","stores","handleError","updateHeaders","fields","f","headers","retrieveStudyMetadata","studySummaryMetadata","naturalized","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","shouldUpgradeInsecure","upgradeInsecureRequests","qidoPathPrefix","wadoPathPrefix","stowPathPrefix","qidoURLPrefix","wadoURLPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","read","dwc","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","auth","handleDICOMwebError","logServerError","errorMessages","setting","Authorization","storedPath","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","addGcpSecondaryAnnotationServer","gcpBaseUrl","storageClassMapping","storageClasses","pathUrl","server","_createClientMapping","wasAuthSuccessful","serverId","COMPREHENSIVE_SR","COLOR_SOFTCOPY_PRESENTATION_STATE","GRAYSCALE_SOFTCOPY_PRESENTATION_STATE","PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE","tmpClient","redirectTo","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}