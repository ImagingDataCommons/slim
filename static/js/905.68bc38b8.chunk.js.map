{"version":3,"file":"static/js/905.68bc38b8.chunk.js","mappings":"qTA4BMA,EAAW,qGAqDd,OArDc,8BACf,WACE,IAAIC,EAAoC,aACpCC,EAAkB,YAEWC,IAA7BC,KAAKC,MAAMC,eAA+BF,KAAKC,MAAMC,gBACvDL,EAAS,WACTC,EAAkB,QAEpB,IAAMK,EAAQH,KAAKC,MAAMG,WAAWC,KAAI,SAACC,EAAiBC,GACxD,IAAMC,GAAMC,EAAAA,EAAAA,KACZ,OACE,SAAC,SAAiB,CAEhBC,MAAOJ,EAAKK,KACZC,WAAY,CACVC,WAAYf,GAEdgB,aAAc,CACZC,WAAY,IACZC,WAAY,WACZH,WAjBkB,QAmBpBI,KAAM,EAAE,SAEPX,EAAKY,OAZDV,EAeX,IACIW,EAAO,KAIX,YAHwBpB,IAApBC,KAAKC,MAAMkB,OACbA,GAAO,cAAMlB,MAAMkB,KAAI,MAGvB,UAAC,IAAI,CACHC,MAAOpB,KAAKC,MAAMoB,OAClBC,MAAOH,EACPI,KAAK,QACLC,UAAWxB,KAAKC,MAAMwB,WACtBC,cAAgC3B,IAAtBC,KAAKC,MAAMoB,OACrBM,QAAS3B,KAAKC,MAAM2B,QAAQ,WAE5B,SAAC,IAAY,CACXC,OAAQ,EACRN,KAAK,QACL1B,OAAQA,EACR6B,UAAU,EAAM,SAEfvB,IAEFH,KAAKC,MAAM6B,WAGlB,KAAC,EArDc,CAASC,EAAAA,WAwD1B,UC9BA,QAxCmB,qGAqChB,OArCgB,8BACjB,WACE,IAAM3B,EAAa,GAkCnB,OAjCoD,MAAhDJ,KAAKC,MAAM+B,SAASC,0BAEtB7B,EAAW8B,KAAI,MAAf9B,EACK,CACD,CACEO,KAAM,eACNO,MAAOlB,KAAKC,MAAM+B,SAASC,0BAE7B,CACEtB,KAAM,cACNO,MAAOlB,KAAKC,MAAM+B,SAASG,yBAE7B,CACExB,KAAM,gBACNO,MAAOlB,KAAKC,MAAM+B,SAASI,2BAE7B,CACEzB,KAAM,YACNO,MAAOlB,KAAKC,MAAM+B,SAASK,yBAKiB,MAAhDrC,KAAKC,MAAM+B,SAASM,0BAEtBlC,EAAW8B,KACT,CACEvB,KAAM,gBACNO,MAAOlB,KAAKC,MAAM+B,SAASM,4BAK1B,SAAC,EAAW,CAAClC,WAAYA,GAClC,KAAC,EArCgB,CAAS2B,EAAAA,WCX5B,SAASQ,EAAWrB,GAClB,MAAqB,kBAAVA,GAAgC,OAAVA,QAA4BnB,IAAVmB,QACxBnB,IAArBmB,EAAMsB,WACDtB,EAAMsB,WAAWC,MAAM,KAAKC,KAAK,KAIrC,EACT,CAEA,SAASC,EAAWzB,GAClB,GAAc,OAAVA,QAA4BnB,IAAVmB,EAAqB,CACzC,IAAM0B,EAAO1B,EAAM2B,UAAU,EAAG,GAC1BC,EAAQ5B,EAAM2B,UAAU,EAAG,GAC3BE,EAAM7B,EAAM2B,UAAU,EAAG,GAC/B,MAAM,GAAN,OAAUD,EAAI,YAAIE,EAAK,YAAIC,EAC7B,CACA,MAAO,EACT,CAEA,SAASC,EAAW9B,GAClB,GAAc,OAAVA,QAA4BnB,IAAVmB,EAAqB,CACzC,IAAM+B,EAAQ/B,EAAM2B,UAAU,EAAG,GAC3BK,EAAUhC,EAAM2B,UAAU,EAAG,GAC7BM,EAAUjC,EAAM2B,UAAU,EAAG,GACnC,MAAM,GAAN,OAAUI,EAAK,YAAIC,EAAO,YAAIC,EAChC,CACA,MAAO,EACT,CAeA,SAASC,EAAUlC,GAMjB,OAAc,OAAVA,QAA4BnB,IAAVmB,EALiB,CACrCmC,EAAG,SACHC,EAAG,OACHC,EAAG,SAGQrC,GAEN,EACT,CCdA,QA1Ba,qGAuBV,OAvBU,8BACX,WACE,IAAMd,EAAa,CACjB,CACEO,KAAM,KACNO,MAAOlB,KAAKC,MAAM+B,SAASwB,WAE7B,CACE7C,KAAM,OACNO,MAAOqB,EAAUvC,KAAKC,MAAM+B,SAASyB,cAEvC,CACE9C,KAAM,MACNO,MAAOkC,EAASpD,KAAKC,MAAM+B,SAAS0B,aAEtC,CACE/C,KAAM,YACNO,MAAOyB,EAAU3C,KAAKC,MAAM+B,SAAS2B,oBAGzC,OACE,SAAC,EAAW,CAACvD,WAAYA,GAE7B,KAAC,EAvBU,CAAS2B,EAAAA,WCuBtB,QAxBW,qGAqBR,OArBQ,8BACT,WACE,IAAM3B,EAAa,CACjB,CACEO,KAAM,cACNO,MAAOlB,KAAKC,MAAM+B,SAAS4B,iBAE7B,CACEjD,KAAM,KACNO,MAAOlB,KAAKC,MAAM+B,SAAS6B,SAE7B,CACElD,KAAM,OACNO,MAAOyB,EAAU3C,KAAKC,MAAM+B,SAAS8B,YAEvC,CACEnD,KAAM,OACNO,MAAO8B,EAAUhD,KAAKC,MAAM+B,SAAS+B,aAGzC,OAAO,SAAC,EAAW,CAAC3D,WAAYA,GAClC,KAAC,EArBQ,CAAS2B,EAAAA,W,ICfRiC,E,mDAWX,SAXWA,GAAAA,EAAc,iEAAdA,EAAc,iDAAdA,EAAc,oDAAdA,EAAc,4CAAdA,EAAc,iEAAdA,EAAc,4CAAdA,EAAc,oEAAdA,EAAc,iEAAdA,EAAc,qEAAdA,EAAc,uEAWzB,CAXWA,IAAAA,EAAc,K,cCApBC,EACY,iBADZA,EAEW,gBAFXA,EAGiB,mBAHjBA,EAIW,gBAGXC,EAAW,0CACf,WAAaC,EAAMC,GAAU,IAAD,EAIV,OAJU,gBAC1B,gBACKA,QAAUA,EACf,EAAKC,OAAQ,IAAIC,OAAQD,MACzB,EAAKF,KAAOA,EAAI,CAClB,CAAC,iBANc,EAMd,OANuBG,QCNpBC,EAAiBC,OAAO,iBACxBC,EAAsBD,OAAO,sBAOdE,EAAM,WACzB,cAAgB,eACd1E,KAAKuE,GAAkB,CAAC,EACxBvE,KAAKyE,GAAuB,CAC9B,CAsEC,OApED,iCAMA,SAAWE,EAAWC,GACpB,QAAkB7E,IAAd4E,EACF,MAAM,IAAIL,MAAM,8CAGlB,GAAwB,oBAAbM,EACT,MAAM,IAAIN,MAAM,4CAGbtE,KAAKuE,GAAgBM,eAAeF,KACvC3E,KAAKuE,GAAgBI,GAAa,CAAC,GAGrC,IAAMG,EAAc,aAAS9E,KAAKyE,MAClCzE,KAAKuE,GAAgBI,GAAWG,GAAkBF,CACpD,GAEA,yBAMA,SAAaD,EAAWC,GACtB,IAAMG,EAAY/E,KAAKuE,GAAgBI,IAAc,CAAC,EACtD,IAAK,IAAMG,KAAkBC,EACtBH,EAEMG,EAAUD,KAAoBF,UAChCG,EAAUD,UAFVC,EAAUD,EAKvB,GAEA,qBAMA,SAASH,GACP,QAAkB5E,IAAd4E,EACF,MAAM,IAAIL,MAAM,yCAGqC,IAAvD,IAAMS,EAAY/E,KAAKuE,GAAgBI,IAAc,CAAC,EAAC,mBALlCK,EAAO,iCAAPA,EAAO,kBAM5B,IAAK,IAAMF,KAAkBC,EAC3BA,EAAUD,GAAe,MAAzBC,EAA6BC,EAEjC,GAEA,gCAIA,WACE,IAAK,IAAML,KAAa3E,KAAKuE,GAAiB,CAC5C,IAAMQ,EAAY/E,KAAKuE,GAAgBI,GACvC,IAAK,IAAMG,KAAkBC,SACpBA,EAAUD,EAErB,CACF,KAAC,EA1EwB,G,UCLdG,EACF,UADEA,EAEA,YAGAC,EACD,kBADCA,EAEN,0BAFMA,EAGJ,QAHIA,EAIL,OAJKA,GAKL,iBAGFC,GACG,QADHA,GAEK,UAWLC,GAA+B,CACnCC,QAAS,CACP,CACEC,SAAUrB,EACVsB,iBAAkBJ,IAEpB,CACEG,SAAUrB,EACVsB,iBAAkBJ,IAEpB,CACEG,SAAUrB,EACVsB,iBAAkBJ,IAEpB,CACEG,SAAUrB,EACVsB,iBAAkBJ,IAEpB,CACEG,SAAU,UACVC,iBAAkBJ,MAoExB,aA/D4B,0CAC1B,aAAgB,IAAD,kBACb,eAEA,IAAMK,EAAe,SAACC,GACpB,EAAKC,QAAQT,EAAwCU,MAAMC,KAAKH,GAAM/C,KAAK,KAC7E,EAUI,OARH,WACC,IAAMmD,EAAOC,QAAQD,KACrBC,QAAQD,KAAO,WACRE,KAAKC,UAAUC,WAAWC,SAAS,YACtCV,EAAaS,WAEfJ,EAAKM,MAAMnG,KAAM2F,MAAMS,UAAUC,MAAMC,KAAKL,WAC9C,CACD,CARA,GAQG,CACN,CA2CC,OAzCD,+BAMA,SAASM,EAAQC,GACf,IAYIC,EAZEC,EAAgBF,EAAMrC,KAKpBoB,EAJaH,GAA6BC,QAAQsB,MACxD,SAAAC,GAAC,OAAIA,EAAEtB,WAAaoB,CAAa,IAG3BnB,iBAcR,OAZAvF,KAAK0F,QAAQT,EAAsC,CACjDsB,OAAAA,EACAC,MAAAA,IAKAC,EADED,aAAiBtC,EACDsC,EAAMpC,QAENyC,OAAOL,GAGnBjB,GACN,KAAKJ,GAEH,OADAW,QAAQU,MAAM,KAAD,OAAME,EAAa,qBAAqBF,GAC9CM,EAAAA,EAAAA,MAAmB,CACxB1C,QAAQ,GAAD,OAAKsC,EAAa,UACzBK,YAAaN,EACbO,SAAU,IAGd,KAAK7B,GACHW,QAAQU,MAAM,KAAD,OAAME,EAAa,qBAAqBF,GAK3D,KAAC,EA5DyB,CAAS9B,I,IChDhCuC,G,YAAY,SAAZA,GAAAA,EAAY,gBAAZA,EAAY,cAAZA,EAAY,oBAAZA,EAAY,uBAAZA,KAAAA,GAAY,KAOjB,IAAMC,GAAiB,SACrBC,EACAC,GAEA,OAAOD,EAAME,UAAU,KAAOD,CAChC,EAEME,GAAqB,SACzBH,EACAI,GAEA,OAA6B,OAAzBJ,EAAMK,qBAAoDzH,IAAzBoH,EAAMK,gBAClCL,EAAMK,iBAAmBD,EAASC,cAG7C,EAoBMC,IAAK,QAkBT,WACEC,GACC,IAAD,4BAnBOX,iBAAW,OACXY,oBAAc,OACdC,yBAAmB,OACnBC,yBAAmB,OACnBC,wBAAkB,OAClBC,4BAAsB,OACtBC,YAAwB,GAAE,KAC1BC,+BAAyB,OACzBC,kBAAY,OACZC,iBAAW,OACXC,oBAAc,EAUS,IAA1BV,EAAQW,OAAOC,QACjBC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,wDAKN,IAAM6D,EAAqB,IAAIU,IAAI,IAC7BC,EAAkB,IAAID,IAAI,IAC1BT,EAAyB,IAAIS,IAAI,IACjCE,EAAuB,IAAIF,IAAI,IAC/BG,EAAuB,CAC3BC,OAAQ,IAAIJ,IAAI,IAChBK,MAAO,IAAIL,IAAI,IACfM,SAAU,IAAIN,IAAI,KAEdR,EAEF,CACFY,OAAQ,CAAC,GAELV,EAA2D,GAC3DC,EAA0D,GAC1DC,EAA6D,GA2BnE,GA1BAV,EAAQW,OAAOU,SAAQ,SAAC5B,GAStB,GARAuB,EAAqBM,IAAI7B,EAAM8B,qBAC/BnB,EAAmBkB,IAAI7B,EAAM+B,mBAC7B/B,EAAMgC,oBAAoBJ,SAAQ,SAAAzI,GAChCyH,EAAuBiB,IAAI1I,EAAK8I,sBAClC,IAC6B,OAAzBjC,EAAMK,qBAAoDzH,IAAzBoH,EAAMK,gBACzCiB,EAAgBO,IAAI7B,EAAMK,gBAExBN,GAAeC,EAAOF,GAAa2B,SAAW1B,GAAeC,EAAOF,GAAaoC,WAAY,CAE/F,GADAV,EAAqBC,OAAOI,IAAI7B,EAAMmC,qBACb,OAArBnC,EAAMoC,iBAA4CxJ,IAArBoH,EAAMoC,WACrC,cAAyBC,OAAOC,KAAK1B,GAAuB,eAAE,CAAzD,IAAM2B,EAAU,KACnB1B,EAAYY,OAAOc,GAAYV,IAAI7B,EAAMoC,WAC3C,CAEFrB,EAAahG,KAAKiF,EACpB,MAAWD,GAAeC,EAAOF,GAAa4B,QAC5CF,EAAqBE,MAAMG,IAAI7B,EAAMmC,qBACrCnB,EAAYjG,KAAKiF,IACRD,GAAeC,EAAOF,GAAa6B,YAC5CH,EAAqBG,SAASE,IAAI7B,EAAMmC,qBACxClB,EAAelG,KAAKiF,GAExB,IAE4B,IAAxBe,EAAaI,OACfC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,gEAGC,CACDwE,EAAgBlH,KAAO,GACzBgH,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,iFAMN,IAAM0F,EAAkB,IAAInB,IAAI,IAChCN,EAAaa,SAAQ,SAAC5B,GACpBwC,EAAgBX,IAAI7B,EAAMyC,gBAC5B,IACID,EAAgBpI,KAAO,GACzBgH,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,iFAMiBiE,EAAa2B,QAAO,SAAA1C,GACzC,MAA8B,cAAvBA,EAAME,UAAU,EACzB,IACmBiB,OAASP,EAAuBxG,MACjDuE,QAAQD,KACN,oHAIN,CAEA7F,KAAKkI,aAAeA,EACpBlI,KAAKmI,YAAcA,EACnBnI,KAAKoI,eAAiBA,EAEtBpI,KAAK8H,oBAAkB,QAAOA,GAC9B9H,KAAK+H,wBAAsB,QAAOA,GAEA,IAA9BW,EAAqBnH,MACvBgH,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,mEAINjE,KAAK6H,qBAAsB,QAAIa,GAAsB,GAEZ,IAArCC,EAAqBC,OAAOrH,MAC9BgH,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,4EAKNjE,KAAK4H,qBAAsB,QAAIe,EAAqBC,QAAQ,GAE5D,IAAIkB,GAAoB,EACpBN,OAAOC,KAAKzB,EAAYY,QAAQN,OAAS,IAC3CwB,GAAoB,GAEtB9J,KAAK+H,uBAAuBgB,SAAQ,SAAAW,GACI,MAAlC1B,EAAYY,OAAOc,GACjB1B,EAAYY,OAAOc,GAAYnI,KAAO,EACxCgH,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,8CAAuCyF,EAAU,KACjD,uDAG6C,IAAxC1B,EAAYY,OAAOc,GAAYnI,KACxC,EAAKyG,YAAY9F,MAAK,QAAI8F,EAAYY,OAAOc,IAAa,IAE1DnB,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,8CAAuCyF,EAAU,MAAjD,+EAOFI,GACFvB,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,8CAAuCyF,EAAU,MAAjD,8EAOV,IAEIjB,EAAgBlH,KAAO,EACzBgH,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,0GAI8B,IAAzBwE,EAAgBlH,KACzBvB,KAAK2H,gBAAiB,QAAIc,GAAiB,GAE3CzI,KAAK2H,eAAiB,KAGxB3H,KAAKiI,0BACsC,IAAzCjI,KAAKkI,aAAa,GAAG0B,iBAC8B,gBAAnD5J,KAAKkI,aAAa,GAAG6B,0BAGvB/J,KAAK+G,iBACqBhH,IAAxB2H,EAAQX,YAA4BW,EAAQX,YAAc,EAE9D,IAUIiD,GAAe,SACnB3B,GAEA,IAAM4B,EAAwC,GAC9C5B,EAAOU,SAAQ,SAACmB,GACd,GAAIA,EAAO5B,OAAS,EAAG,CACrB,IAAMJ,EAAegC,EAAOL,QAC1B,SAAC1C,GAAK,OACJD,GAAeC,EAAOF,GAAa2B,SACnC1B,GAAeC,EAAOF,GAAaoC,UAAU,IAEjD,GAAInB,EAAaI,OAAS,EAAG,CAC3B,IAWI6B,EAXE5C,EAAWW,EAAa,GACxBkC,EAAuBlC,EAAa2B,QAAO,SAAC1C,GAChD,OAAOI,EAASqC,kBAAoBzC,EAAMyC,eAC5C,IACMS,EAAqBJ,EAAcK,WAAU,SAACC,GAClD,OA4EV,SACEA,EACApD,GAEA,GACEoD,EAAM3C,sBAAwBT,EAAMmC,qBACpCiB,EAAM1C,sBAAwBV,EAAM8B,qBACpCsB,EAAM5C,iBAAmBR,EAAMK,eAE/B,OAAO,EAET,OAAO,CACT,CAxFiBgD,CAAwBD,EAAOhD,EACxC,IAEMY,EAAc+B,EAAOL,QAAO,SAAC1C,GACjC,OAAOD,GAAeC,EAAOF,GAAa4B,MAC5C,IAGEsB,EADEhC,EAAYG,OAAS,EACDH,EAAY0B,QAAO,SAAC1C,GACxC,OAAOG,GAAmBH,EAAOI,EACnC,IAEsBY,EAExB,IAGIsC,EAHErC,EAAiB8B,EAAOL,QAAO,SAAC1C,GACpC,OAAOD,GAAeC,EAAOF,GAAa6B,SAC5C,IAUA,GAPE2B,EADErC,EAAeE,OAAS,EACDF,EAAeyB,QAAO,SAAC1C,GAC9C,OAAOG,GAAmBH,EAAOI,EACnC,IAEyBa,GAGC,IAAxBiC,EAA2B,CAC7B,IAAMK,EAA0C,CAC9C/C,eAAgBJ,EAASC,eACzBI,oBAAqBL,EAAS+B,oBAC9BzB,oBAAqBN,EAAS0B,oBAC9Bf,aAAckC,EACdjC,YAAagC,EACb/B,eAAgBqC,GAElBR,EAAc/H,KAAKwI,EACrB,KAAO,CAAC,IAAD,MACCA,EAAoBT,EAAcI,IACxC,EAAAK,EAAkBxC,cAAahG,KAAI,iBAAIkI,KACvC,EAAAM,EAAkBvC,aAAYjG,KAAI,iBAAIiI,KACtC,EAAAO,EAAkBtC,gBAAelG,KAAI,iBAAIuI,GAC3C,CACF,CACF,CACF,IAEA,IAAIE,EAAkBV,EAAc5J,KAAI,SAACC,GACvC,OAAO,IAAImH,GAAM,CACfY,OAAO,GAAD,gBACD/H,EAAK4H,eAAY,QACjB5H,EAAK6H,cAAW,QAChB7H,EAAK8H,kBAGd,IAWA,OAVAuC,EAASA,EAAOC,MAAK,SAACC,EAAGC,GACvB,IAAMC,EAAOF,EAAE3C,aAAa,GACtB8C,EAAOF,EAAE5C,aAAa,GAC5B,OAAgC,MAA5B6C,EAAK9B,qBAA2D,MAA5B+B,EAAK/B,oBACpCgC,OAAOF,EAAK9B,qBAAuBgC,OAAOD,EAAK/B,qBAE/C,CAEX,GAGF,ECpVO,IAAMiC,GAAkB,yCAAG,0GAUwC,OATxEC,EAAO,EAAPA,QACAC,EAAgB,EAAhBA,iBACAC,EAAS,EAATA,UACAC,EAAO,EAAPA,QAAO,SAGCjD,EAAuD,GAC7DvC,QAAQyF,KAAK,+BAAD,OAAgCH,EAAgB,SAEtDI,EAASL,EAAQnH,EAAeyH,iCAAgC,SAC1CD,EAAOE,gBAAgB,CACjDC,YAAa,CACXC,SAAU,KACVC,iBAAkBT,KAEpB,OALiB,OAAbU,EAAa,iBAObC,QAAQC,IACZF,EAAczL,IAAG,yCAAC,WAAOuG,GAAC,oFAKvB,OALuB,EACJqF,EAAAA,SAAAA,eAA4BrF,GAAxCsF,EAAO,EAAPA,QACFC,EAAgBD,EACtBpG,QAAQyF,KAAK,gCAAD,OACsBY,EAAcjD,kBAAiB,MAChE,SAC+BsC,EAAOY,uBAAuB,CAC5DhB,iBAAkBA,EAClBiB,kBAAmBF,EAAcjD,oBACjC,OAHIoD,EAAiB,OAKjBC,EAA2D,GACjED,EAAkBvD,SAAQ,SAACzI,GAAU,IAAD,IAClC,IACkB,QAAhB,EAAAA,EAAK,mBAAW,OAAO,QAAP,EAAhB,EAAkBkM,aAAK,WAAP,EAAhB,EAA0B,MAC1BxI,EAAeyH,gCACf,CACA,IAAMtE,EAAQ,IAAI8E,EAAAA,SAAAA,4BAAyC,CACzDjK,SAAU1B,IAEZiM,EAAarK,KAAKiF,EACpB,CACF,IAEIoF,EAAajE,OAAS,GACxBD,EAAOnG,KAAKqK,GACb,2CACF,mDA3BgB,KA4BlB,QACKE,EAAYzC,GAAa3B,GAC/BgD,EAAUoB,GAAU,kDAEpB3G,QAAQU,MAAM,EAAD,IACPkG,EAAc,IAAIxI,EACtBD,EACA,qDAEFqH,EAAQoB,GACRnE,GAAAA,QACErD,EACAwH,GACD,0DAEJ,gBA9D8B,sCCDzBC,GAAc,IAAIC,IAClBC,GAAkB,IAAID,IACtBE,GAAkB,IAAIF,IAMtBG,GAAsB,WAC1B,IACwD,EADlDC,EAAMC,KAAKD,MAAK,UACSF,GAAgBI,WAAS,IAAxD,2BAA0D,CAAC,IAAD,qBAA9CC,EAAG,KACTH,EADoB,KALE,OAOxBL,GAAYS,OAAOD,GACnBL,GAAgBM,OAAOD,GAE3B,CAAC,+BACH,EAgCaE,GAAY,WAA0E,IAAD,yDAAxB,CAAC,EAA/ClC,EAAO,EAAPA,QAASC,EAAgB,EAAhBA,iBACnC,GAA4BkC,EAAAA,EAAAA,UAAkB,IAAG,eAA1C3C,EAAM,KAAE4C,EAAS,KACxB,GAAkCD,EAAAA,EAAAA,WAAkB,GAAM,eAAnDE,EAAS,KAAEC,EAAY,KAC9B,GAA0BH,EAAAA,EAAAA,UAAuB,MAAK,eAA/C9G,EAAK,KAAEkH,EAAQ,MAEtBC,EAAAA,EAAAA,YAAU,WAKR,GAHAZ,KAGiB,OAAZ5B,QAAgCpL,IAAZoL,GAAgD,OAArBC,QAAkDrL,IAArBqL,GAAwD,KAArBA,GAAuD,IAA5BA,EAAiB9C,OAAhK,CAgBA,IAAMsF,EAAajB,GAAYkB,IAAIzC,GACnC,QAAmBrL,IAAf6N,EAIF,OAHAL,EAAUK,GACVH,GAAa,QACbC,EAAS,MAIXD,GAAa,GACbC,EAAS,MAET,IAAMI,EAAW,yCAAG,2FAuBjB,YAnBsB/N,KAFnBgO,EAAiBlB,GAAgBgB,IAAIzC,MAIvC2C,EAAiB,IAAIhC,SAAiB,SAACiC,EAASC,GAC9C/C,GAAmB,CACjBC,QAAAA,EACAC,iBAAAA,EACAC,UAAW,SAACoB,GACVE,GAAYuB,IAAI9C,EAAkBqB,GAClCK,GAAgBoB,IAAI9C,EAAkB6B,KAAKD,OAC3CgB,EAAQvB,EACV,EACAnB,QAAS,SAAC6C,GACRF,EAAOE,EACT,IACCC,OAAM,SAACD,GACRF,EAAOE,EACT,GACF,IACAtB,GAAgBqB,IAAI9C,EAAkB2C,IACvC,kBAGyBA,EAAc,OAAhCtB,EAAS,OACfc,EAAUd,GACViB,EAAS,MAAK,kDAEdA,EAAS,EAAD,IACRH,EAAU,IAAG,QAGM,OAHN,UAEbV,GAAgBO,OAAOhC,GACvBqC,GAAa,GAAM,6EAEtB,kBApCgB,mCAsCZK,GAnDL,KAdA,CAEE,IAAMO,EAAgB1I,MAAMC,KAAK+G,GAAYO,WAC7C,GAAImB,EAAc/F,OAAS,EAAG,CAC5B,IAAMgG,EAAmBD,EAAcA,EAAc/F,OAAS,GAAG,GACjEiF,EAAUe,GACVb,GAAa,GACbC,EAAS,KACX,MACEH,EAAU,IACVE,GAAa,GACbC,EAAS,KAGb,CAoDF,GAAG,CAACvC,EAASC,IAGb,IAAMmD,GAASC,EAAAA,EAAAA,UAAQ,iBAAO,CAC5B7D,OAAAA,EACA6C,UAAAA,EACAhH,MAAAA,EACD,GAAG,CAACmE,EAAQ6C,EAAWhH,IAExB,OAAO+H,CACT,ECrIME,IAAoBC,EAAAA,EAAAA,oBAAiD3O,GAKvE4O,GAAwD,KAmCrD,IAAMC,GAAwD,SAAH,GAI3D,IAHL9M,EAAQ,EAARA,SACAqJ,EAAO,EAAPA,QACAC,EAAgB,EAAhBA,iBAEA,GAA8CkC,EAAAA,EAAAA,WAAS,GAAM,eAAtDuB,EAAe,KAAEC,EAAkB,KAC1C,GAA8DxB,EAAAA,EAAAA,UAAkC,MAAK,eAA9FyB,EAAuB,KAAEC,EAA0B,KAClDrE,EAAW0C,GAAU,CAAElC,QAAAA,EAASC,iBAAAA,IAAhCT,OAGFsE,GAAiBT,EAAAA,EAAAA,UAAQ,WAG7B,OAAO7D,CACT,GAAG,CAACA,IAGEuE,GAAaV,EAAAA,EAAAA,UAAQ,WACzB,IAAMW,EAAqB,OAANxE,QAAM,IAANA,OAAM,EAANA,EAAQrC,OACzB8G,GAAY,EAIhB,OAHe,OAAXzE,QAA8B5K,IAAX4K,GAAgD,kBAAjBwE,GAA8BlE,OAAOoE,MAAMF,KAC/FC,EAA6B,IAAjBD,GAEP,CACLC,UAAAA,EACAD,aAA0B,OAAZA,QAAY,IAAZA,EAAAA,EAAgB,EAElC,GAAG,CAACxE,IAEE2E,GAAuBC,EAAAA,EAAAA,cAAY,SAAChB,GACxCS,EAA2BT,GAC3BO,GAAmB,EACrB,GAAG,IAEGU,GAAiCD,EAAAA,EAAAA,cAAY,SAAChF,GAAoC,IAAD,IACrF,OAAgC,QAA5B,EAAM,OAALA,QAAK,IAALA,GAAmB,QAAd,EAALA,EAAOrC,oBAAY,WAAd,EAAL,EAAqBI,cAAM,QAAI,IAAM,EACjC,CACLmH,SAAS,EACTrL,QAAS,6FACTD,KAAM,WAGH,CAAEsL,SAAS,EAAMtL,KAAM,OAChC,GAAG,IAEGuL,GAAqCH,EAAAA,EAAAA,cAAY,SAACI,GACtD,GAAwB,OAApBA,QAAgD5P,IAApB4P,GAAiCT,EAAWE,UAAW,CAYrF,IAFyBH,EAAeW,MAThB,SAACrF,GAA2B,IAAD,EAMjD,OAD2C,QAArB,EAAGA,EAAMrC,oBAAY,aAAlB,EAAoB0H,MAJrB,SAACC,GAAqD,OAC7C,OAA/BA,EAAYC,qBAA0D/P,IAA/B8P,EAAYC,gBACnDD,EAAYC,iBAAoBH,EAA0FI,wBAAwB,GAItJ,IAKE,MAAO,CACLN,SAAS,EACTrL,QAAS,yDACTD,KAAM,UAGZ,CACA,MAAO,CAAEsL,SAAS,EAAMtL,KAAM,OAChC,GAAG,CAAC8K,EAAgBC,EAAWE,YAEzBY,GAAiBT,EAAAA,EAAAA,cAAY,SAAC7H,GAClC,MAAoCA,EAA5BuI,OAAAA,OAAM,OAAQ,EAAEC,EAAYxI,EAAZwI,QAChBP,EAA2BO,EAA3BP,gBAAiBpF,EAAU2F,EAAV3F,MAEzB,GAAc,OAAVA,QAA4BxK,IAAVwK,EAAqB,CACzC,IAAM4F,EAAoBX,EAA+BjF,GACzD,IAAK4F,EAAkBV,QAIrB,OAHIQ,GACFX,EAAqBa,GAEhBA,CAEX,CAEA,IAAMC,EAAwBV,EAAmCC,GACjE,OAAKS,EAAsBX,QAOpB,CAAEA,SAAS,EAAMtL,KAAM,SANxB8L,GACFX,EAAqBc,GAEhBA,EAIX,GAAG,CAACZ,EAAgCE,EAAoCJ,KAKxE3B,EAAAA,EAAAA,YAAU,YAlIZ,SAAqCuC,GACnCvB,GAA0BuB,CAC5B,CAoIIG,CAHuC,CACrCL,eAAAA,GAGJ,GAAG,CAACA,IAEJ,IAAMM,GAAoBf,EAAAA,EAAAA,cAAY,WACpCT,GAAmB,GACnBE,EAA2B,KAC7B,GAAG,IAeH,IAAM9N,EAA+B,CACnC8O,eAAAA,GAGF,OACE,UAACvB,GAAkB8B,SAAQ,CAACrP,MAAOA,EAAM,UACtCY,EAC6B,OAA5BiN,QAAgEhP,IAA5BgP,IACpC,SAAC,KAAK,gBACJyB,KAAM3B,EACN4B,SAAUH,EACVI,KAAMJ,EACNlP,MAAK,qBAAgB2N,EAAwB5K,KAAKwM,OAAO,GAAGC,cAAgB7B,EAAwB5K,KAAKkC,MAAM,IAC/GwK,OAAO,KACPC,kBAAmB,CAAEC,MAAO,CAAEC,QAAS,UA3B/C,SAAuB7M,GACrB,OAAQA,GACN,IAAK,QACH,MAAO,CAAEqC,OAAO,GAClB,IAAK,UACH,MAAO,CAAEyK,SAAS,GAGpB,QACE,MAAO,CAAE1F,MAAM,GAErB,CAiBY2F,CAAanC,EAAwB5K,OAAK,cAE9C,uBAAI4K,EAAwB3K,eAKtC,EC/HA,SAtD4D,SAAH,GAOlD,IANLmG,EAAK,EAALA,MACAoF,EAAe,EAAfA,gBAAgB,EAAD,EACfwB,UAAAA,OAAS,MAAG,UAAS,MACrBC,SAAAA,OAAQ,MAAG,QAAO,MAClBC,SAAAA,OAAQ,MAAG,CAAEC,IAAK,MAAOC,MAAO,OAAO,EACvCR,EAAK,EAALA,MAEA,GAAwBzD,EAAAA,EAAAA,WAAS,GAAM,eAAhCkE,EAAI,KAAEC,EAAO,KACpB,GAAsCnE,EAAAA,EAAAA,eAA6BvN,GAAU,eAAtE2R,EAAW,KAAEC,EAAc,KAE1B3B,ED4KmB,WAC3B,IAAME,GAAU0B,EAAAA,EAAAA,YAAWnD,IAC3B,QAAgB1O,IAAZmQ,EACF,MAAM,IAAI5L,MAAM,0DAElB,OAAO4L,CACT,CClL6B2B,GAAnB7B,eAiBR,OAfArC,EAAAA,EAAAA,YAAU,WACR,IAAMmE,EAAmB9B,EAAe,CACtCC,QAAQ,EACRC,QAAS,CAAEP,gBAAAA,EAAiBpF,MAAAA,KAEzBuH,EAAiBrC,SAKpBgC,GAAQ,GACRE,OAAe5R,KALf0R,GAAQ,GACRE,EAAeG,EAAiB1N,SAChC0B,QAAQD,KAAKiM,EAAiB1N,SAKlC,GAAG,CAACmG,EAAOoF,EAAiBK,IAEvBwB,GAKH,SAAC,IAAO,CAACpQ,MAAOsQ,EAAY,UAC1B,gBAAKX,OAAK,kBACLA,GAAK,IACRM,SAAU,WACVC,IAAKD,EAASC,IACdC,MAAOF,EAASE,MAChBQ,OAAQ,EACRC,cAAe,SACf,UAEA,SAAC,MAAqB,CAACjB,MAAO,CAC5BkB,MAAOd,EACPe,SAAUd,EACVe,WAAY,oDAjBX,IAuBX,ECiEA,SA1Ge,0CAOb,WAAalS,GAAwB,IAAD,EAEH,OAFG,gBAClC,cAAMA,IAPRmS,MAAQ,CAAE5E,WAAW,GAAO,EAEX6E,oBAAsBtQ,EAAAA,YAAiC,EAEhEuQ,oBAAc,EAIpB,EAAKA,oBAAiBvS,EAAS,CACjC,CA6FC,OA7FA,yCAED,WAEE,GADAC,KAAKuS,SAAS,CAAE/E,WAAW,IACvBxN,KAAKC,MAAMsK,MAAMnC,eAAeE,OAAS,EAAG,CAC9C,IAAMtG,EAAWhC,KAAKC,MAAMsK,MAAMnC,eAAe,GACR,OAArCpI,KAAKqS,oBAAoBG,cAAyDzS,IAArCC,KAAKqS,oBAAoBG,UACxExS,KAAKqS,oBAAoBG,QAAQC,UAAY,GAC7C3M,QAAQyF,KACN,kDAAiD,WAC7CvJ,EAASiH,oBAAmB,MAElCjJ,KAAKsS,eAAiB,IAAIrG,EAAAA,OAAAA,oBAA+B,CACvDT,OAAQxL,KAAKC,MAAMkL,QACjBnH,EAAeyH,iCAEjBiH,qBAAqB,EACrB1Q,SAAAA,EACA2Q,aAAc,EACdC,iBAAkB,SAACpM,GACjB+B,GAAAA,QACErD,EACAsB,EAEJ,IAEFxG,KAAKsS,eAAeO,OAAO,CACzBC,UAAW9S,KAAKqS,oBAAoBG,UAG1C,CAEAxS,KAAKuS,SAAS,CAAE/E,WAAW,GAC7B,GAAC,oBAED,gBAC8BzN,IAAxBC,KAAKsS,gBACPtS,KAAKsS,eAAeS,SAGtB,IAAM3S,EAAa,GACb2G,EAAc/G,KAAKC,MAAMsK,MAAMxD,YAQrC,OAPoB,OAAhBA,QAAwChH,IAAhBgH,GAA6C,KAAhBA,GACvD3G,EAAW8B,KAAK,CACdvB,KAAM,cACNO,MAAO6F,IAIP/G,KAAKoS,MAAM5E,WACL,SAAC,MAAS,KAOlB,SAAC,UAAS,gBACRuD,MAAO,CAAEiC,OAAQ,SAEbhT,KAAKC,OAAK,cAEd,SAAC,EAAW,CACVoB,OAAQrB,KAAKC,MAAMsK,MAAM1C,oBACzBzH,WAAYA,EACZqB,YAAU,YAEV,iBAAKsP,MAAO,CAAEM,SAAU,WAAY2B,OAAQ,SAAU,UACnDhT,KAAKC,MAAMsK,MAAMnC,eAAeE,OAAS,GAEtC,gBAAK2K,IAAKjT,KAAKqS,oBAAqBtB,MAAO,CAAEiC,OAAQ,WAGrD,gBAAKjC,MAAO,CACViC,OAAQ,OACRE,UAAW,SACXlC,QAAS,OACTmC,WAAY,SACZC,eAAgB,SAChBlB,SAAU,SACVnR,WAAY,IACZkR,MAAO,UACPoB,cAAe,SACf,iBAKN,SAAC,GAAiB,CAAC9I,MAAOvK,KAAKC,MAAMsK,eA7BpCvK,KAAKC,MAAMsK,MAAMzC,mBAAmB,GAkC/C,KAAC,EAvGY,CAAS/F,EAAAA,WCgDxB,SAzDe,qJAGZ,OAHY,oCACbqQ,MAAQ,CACNkB,0BAA2B,EAAKrT,MAAMqT,2BACvC,EAmDA,OAnDA,yCAED,WACEtT,KAAKC,MAAMsT,kBAAkB,CAC3BlH,kBAAmBrM,KAAKoS,MAAMkB,2BAElC,GAAC,oBAED,WAGE,IAH0B,IAAD,OACnBE,EAAYxT,KAAKC,MAAM+B,SACvByR,EAAgB,GACbC,EAAI,EAAGA,EAAIF,EAAUlL,SAAUoL,EAAG,CACzC,IAAMnJ,EAAQiJ,EAAUE,GAClBC,GACJ,SAAC,GAAS,CAERpJ,MAAOA,EACPY,QAASnL,KAAKC,MAAMkL,SAFfZ,EAAMzC,mBAAmB,IAMlC2L,EAAcvR,KAAKyR,EACrB,CAEA,IAWIC,EAKJ,OAJ6C,OAAzC5T,KAAKoS,MAAMkB,gCAA+EvT,IAAzCC,KAAKoS,MAAMkB,4BAC9DM,EAAe,CAAC5T,KAAKoS,MAAMkB,6BAI3B,SAAC,IAAI,CACHvC,MAAO,CAAE8C,MAAO,QAChBD,aAAcA,EACdE,SApB4B,SAAH,GAKhB,IALsB3G,EAAG,EAAHA,IAAY,EAAP4G,QAAiB,EAARC,SAAsB,EAAZJ,aAMzD9N,QAAQyF,KAAK,iBAAD,OAAkB4B,EAAG,MACjC,EAAKoF,SAAS,CAAEe,0BAA2BnG,EAAI8G,aAC/C,EAAKhU,MAAMsT,kBAAkB,CAAElH,kBAAmBc,EAAI8G,YACxD,EAYIC,KAAK,SACLC,aAAc,EAAE,SAEfV,GAGP,KAAC,EAtDY,CAAS1R,EAAAA,W,sECPjB,SAASqS,GAAeC,GAc7B,OAbA,SAAkCpU,GAChC,IAAMqU,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACf,OACE,SAACN,GAAS,kBACJpU,GAAK,IACTqU,SAAUA,EACVE,SAAUA,EACVE,OAAQA,IAGd,CAEF,CCrBA,IAmCaE,GAAyB,SAAH,GAKM,IAJrCC,EAAO,EAAPA,QAASlU,EAAI,EAAJA,KAKLR,EAA2C,GAMjD,OALA0U,EAAQ9L,SAAQ,SAAA2K,IA1CF,SACdpT,EACAK,GAEA,IAAMmU,EAAUxU,EAAKyU,wBAAwB,GAC7C,OACED,EAAQE,YAAcrU,EAAKqU,WAC3BF,EAAQG,yBAA2BtU,EAAKsU,sBAE5C,EAkCQC,CAAQxB,EAAG/S,IACbR,EAAM+B,KAAKwR,EAEf,IACOvT,CACT,ECpDagV,GAAuB,SAACC,GACnC,IAAQ5U,EAAqB4U,EAArB5U,IAAK6U,EAAgBD,EAAhBC,YAEP9G,EAAS,CACbjJ,SAAU,CACR0P,UAAW,YACXM,YAAa,YACbL,uBAAwB,aAE1B9Q,KAAM,CACJ6Q,UAAW,YACXM,YAAa,YACbL,uBAAwB,cAuB5B,OAnBAI,EAAYtM,SAAQ,SAClBzI,GAKA,IAAMiV,EAAYjV,EAAKyU,wBAAwB,GAAGC,UAClD,GAAI1U,EAAKkV,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAC1D,IACMvU,EADkBZ,EACMoV,oBAAoB,GAEhC,cAAdH,EACFhH,EAAOjJ,UAAQ,UAAQpE,GACA,WAAdqU,IACThH,EAAOpK,MAAI,UAAQjD,GAEvB,CACF,KAEO,kBACFqN,GAAM,IACT/N,IAAAA,GAEJ,ECRA,SAvBwD,SAAH,GAM9C,IALLmV,EAAS,EAATA,UACAjF,EAAI,EAAJA,KACAD,EAAQ,EAARA,SACAmF,EAAY,EAAZA,aACA9T,EAAQ,EAARA,SAEA,OACE,SAAC,IAAK,CACJ0O,KAAMmF,EACNvU,MAAM,wBACNsP,KAAMA,EACNmF,cAAe,CAAEC,SAAUF,GAC3BnF,SAAUA,EACVI,OAAO,SAAQ,UAEf,SAAC,KAAK,CAACkF,MAAM,QAAQC,UAAU,WAAU,SACtClU,KAIT,ECHA,SApB0D,SAAH,GAIhD,IAHL6T,EAAS,EAATA,UACAlF,EAAQ,EAARA,SACA3O,EAAQ,EAARA,SAEA,OACE,SAAC,IAAK,CACJ0O,KAAMmF,EACNvU,MAAM,eACNqP,SAAUA,EACVwF,cAAY,EACZC,OAAQ,KAAK,UAEb,SAAC,KAAK,CAACH,MAAM,QAAQC,UAAU,WAAU,SACtClU,KAIT,E,qCC6FA,SAtG4C,SAAH,GAYlC,IAXL6T,EAAS,EAATA,UACAjF,EAAI,EAAJA,KACAD,EAAQ,EAARA,SACA0F,EAAqB,EAArBA,sBACAC,EAAqB,EAArBA,sBACAC,EAA0B,EAA1BA,2BACAC,EAA0B,EAA1BA,2BACAC,EAA4B,EAA5BA,6BACAC,EAAsB,EAAtBA,uBACAC,EAAsB,EAAtBA,uBACAC,EAAwB,EAAxBA,yBAiBA,OACE,SAAC,IAAK,CACJlG,KAAMmF,EACNvU,MAAM,uBACNsP,KAAMA,EACND,SAAUA,EACVI,OAAO,SAAQ,UAEf,UAAC,KAAK,CAACkF,MAAM,QAAQC,UAAU,WAAU,WACvC,SAAC,KAAW,CACVW,YACE,IAAG,UACAR,EAAsB,IACzB,KAAI,UACDA,EAAsB,IACzB,IAEFS,OAAO,oBACPC,SAAUL,EACVM,aAlCR,SAAiCC,GAC/B,IAAMC,EAASD,EAAMC,OACrBR,EAAwC,KAAjBQ,EAAO9V,MAAe+J,OAAO+L,EAAO9V,OAAS,KACtE,EAgCQ+V,UAAU,EACVC,WACEb,GAEI,SAACc,GAAA,EAAa,CAACpG,MAAO,CAAEkB,MAAO,sBAG/B,SAACmF,GAAA,EAAY,CAACrG,MAAO,CAAEkB,MAAO,wBAItC,SAAC,KAAW,CACV0E,YACE,IAAG,UACAP,EAAsB,IACzB,KAAI,UACDA,EAAsB,IACzB,IAEFQ,OAAO,oBACPC,SAAUJ,EACVK,aAnDR,SAAiCC,GAC/B,IAAMC,EAASD,EAAMC,OACrBP,EAAwC,KAAjBO,EAAO9V,MAAe+J,OAAO+L,EAAO9V,OAAS,KACtE,EAiDQ+V,UAAU,EACVC,WACEZ,GAEI,SAACa,GAAA,EAAa,CAACpG,MAAO,CAAEkB,MAAO,sBAG/B,SAACmF,GAAA,EAAY,CAACrG,MAAO,CAAEkB,MAAO,wBAItC,SAAC,KAAW,CACV0E,YAAY,WACZC,OAAO,gBACPC,SAAUH,EACVI,aA9DR,SAAmCC,GACjC,IAAMC,EAASD,EAAMC,OACrBN,EAA0C,KAAjBM,EAAO9V,MAAe+J,OAAO+L,EAAO9V,OAAS,KACxE,EA4DQ+V,UAAU,EACVC,WACEX,GAEI,SAACY,GAAA,EAAa,CAACpG,MAAO,CAAEkB,MAAO,sBAG/B,SAACmF,GAAA,EAAY,CAACrG,MAAO,CAAEkB,MAAO,2BAO9C,ECzFA,SAnBgD,SAAH,GAKtC,IAJL0D,EAAS,EAATA,UACAjF,EAAI,EAAJA,KACAD,EAAQ,EAARA,SACA3O,EAAQ,EAARA,SAEA,OACE,SAAC,IAAK,CACJ0O,KAAMmF,EACNvU,MAAM,yBACNsP,KAAMA,EACND,SAAUA,EACVI,OAAO,OAAM,SAEZ/O,GAGP,ECuFA,SA3E4D,SAAH,GA+BlD,IA7BLuV,EAAwB,EAAxBA,yBACAC,EAAmC,EAAnCA,oCACAC,EAAqC,EAArCA,sCACAC,EAAsB,EAAtBA,uBACAC,EAAwB,EAAxBA,yBAGAC,EAAyB,EAAzBA,0BACAC,EAA0B,EAA1BA,2BACAC,EAAsB,EAAtBA,uBAGAC,EAAkB,EAAlBA,mBACAC,EAAwB,EAAxBA,yBACAC,EAAoC,EAApCA,qCACA5B,EAAqB,EAArBA,sBACAC,EAAqB,EAArBA,sBACAC,EAA0B,EAA1BA,2BACAC,EAA0B,EAA1BA,2BACAC,EAA4B,EAA5BA,6BACAC,EAAsB,EAAtBA,uBACAC,EAAsB,EAAtBA,uBACAC,EAAwB,EAAxBA,yBAGAsB,EAAoB,EAApBA,qBACAC,EAAoB,EAApBA,qBACAC,EAAoB,EAApBA,qBACAC,EAAM,EAANA,OAEA,OACE,iCACE,SAAC,GAAe,CACdxC,UAAW0B,EACX3G,KAAM4G,EACN7G,SAAU8G,EACV3B,aAAc4B,EAAuB,SAEpCC,KAGH,SAAC,GAAgB,CACf9B,UAAW+B,EACXjH,SAAUkH,EAA2B,SAEpCC,KAGH,SAAC,GAAS,CACRjC,UAAWkC,EACXnH,KAAMoH,EACNrH,SAAUsH,EACV5B,sBAAuBA,EACvBC,sBAAuBA,EACvBC,2BAA4BA,EAC5BC,2BAA4BA,EAC5BC,6BAA8BA,EAC9BC,uBAAwBA,EACxBC,uBAAwBA,EACxBC,yBAA0BA,KAG5B,SAAC,GAAW,CACVf,UAAWqC,EACXtH,KAAMuH,EACNxH,SAAUyH,EAAqB,SAE9BC,MAIT,E,gFCmLA,SA9QuB,0CAIrB,WAAalY,GAAgC,IAAD,EAazC,OAbyC,gBAC1C,cAAMA,IACDmY,oBAAsB,EAAKA,oBAAoBC,MAAK,WACzD,EAAKC,mBAAqB,EAAKA,mBAAmBD,MAAK,WACvD,EAAKE,mBAAqB,EAAKA,mBAAmBF,MAAK,WACvD,EAAKG,mBAAqB,EAAKA,mBAAmBH,MAAK,WACvD,EAAKI,gBAAkB,EAAKA,gBAAgBJ,MAAK,WACjD,EAAKjG,MAAQ,CACXsG,aAAc,CACZC,QAAS,EAAK1Y,MAAM2Y,aAAaD,QACjC1G,MAAO,EAAKhS,MAAM2Y,aAAa3G,MAC/B4G,YAAa,EAAK5Y,MAAM2Y,aAAaC,cAExC,CACH,CAyPC,OAzPA,2CAED,SAAqB3X,GAA6B,IAAD,OAClC,MAATA,IACFlB,KAAKC,MAAM6Y,qBAAqB/P,SAAQ,SAACvI,GACvC,EAAKP,MAAM8Y,cAAc,CACvBvY,IAAAA,EACAwY,aAAc,CACZ/G,MAAO,EAAKG,MAAMsG,aAAazG,MAC/B0G,QAASzX,EACT2X,YAAa,EAAKzG,MAAMsG,aAAaG,cAG3C,IACA7Y,KAAKiZ,mBAAmB,CAAEN,QAASzX,IAEvC,GAAC,gCAED,SAAoBA,GAAwC,IAAD,OACzD,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKoS,MAAMsG,aAAazG,MAAqB,CAChE,IAAMA,EAAQ,CACZtM,MAAMuT,QAAQhY,GAASA,EAAM,GAAKA,EAClClB,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BjS,KAAKoS,MAAMsG,aAAazG,MAAM,IAEhCjS,KAAKiZ,mBAAmB,CAAEhH,MAAAA,IAC1BjS,KAAKC,MAAM6Y,qBAAqB/P,SAAQ,SAACvI,GACvC,EAAKP,MAAM8Y,cAAc,CACvBvY,IAAAA,EACAwY,aAAc,CACZ/G,MAAOA,EACP0G,QAAS,EAAKvG,MAAMsG,aAAaC,QACjCE,YAAa,EAAKzG,MAAMsG,aAAaG,cAG3C,GACF,CACF,GAAC,gCAED,SAAoB3X,GAAwC,IAAD,OACzD,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKoS,MAAMsG,aAAazG,MAAqB,CAChE,IAAMA,EAAQ,CACZjS,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BtM,MAAMuT,QAAQhY,GAASA,EAAM,GAAKA,EAClClB,KAAKoS,MAAMsG,aAAazG,MAAM,IAEhCjS,KAAKiZ,mBAAmB,CAAEhH,MAAAA,IAC1BjS,KAAKC,MAAM6Y,qBAAqB/P,SAAQ,SAACvI,GACvC,EAAKP,MAAM8Y,cAAc,CACvBvY,IAAAA,EACAwY,aAAc,CACZ/G,MAAOA,EACP0G,QAAS,EAAKvG,MAAMsG,aAAaC,QACjCE,YAAa,EAAKzG,MAAMsG,aAAaG,cAG3C,GACF,CACF,GAAC,gCAED,SAAoB3X,GAAwC,IAAD,OACzD,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKoS,MAAMsG,aAAazG,MAAqB,CAChE,IAAMA,EAAQ,CACZjS,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BjS,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BtM,MAAMuT,QAAQhY,GAASA,EAAM,GAAKA,GAEpClB,KAAKiZ,mBAAmB,CAAEhH,MAAAA,IAC1BjS,KAAKC,MAAM6Y,qBAAqB/P,SAAQ,SAACvI,GACvC,EAAKP,MAAM8Y,cAAc,CACvBvY,IAAAA,EACAwY,aAAc,CACZ/G,MAAOA,EACP0G,QAAS,EAAKvG,MAAMsG,aAAaC,QACjCE,YAAa,EAAKzG,MAAMsG,aAAaG,cAG3C,GACF,CACF,GAAC,mCAED,SAAuB3X,GAAuB,IAAD,OAC3ClB,KAAKiZ,mBAAmB,CAAEJ,YAAa3X,IAEvClB,KAAKC,MAAM6Y,qBAAqB/P,SAAQ,SAACvI,GACvC,EAAKP,MAAM8Y,cAAc,CACvBvY,IAAAA,EACAwY,aAAc,CACZ/G,MAAO,EAAKG,MAAMsG,aAAazG,MAC/B0G,QAAS,EAAKvG,MAAMsG,aAAaC,QACjCE,YAAa3X,IAGnB,GACF,GAAC,6BAED,WACE,IAAiBiY,EAOjB,OAAqC,MAAjCnZ,KAAKoS,MAAMsG,aAAazG,MAHnB,KAAO,WAJCkH,EAQAnZ,KAAKoS,MAAMsG,aAAazG,OAPtB,IAGe,KAFtBkH,EAAO,IAE2B,GADlCA,EAAO,IACmClF,SAAS,IAAI5N,MAAM,GAMhE,OAEX,GAAC,gCAED,YAQU,IAPR4L,EAAK,EAALA,MACA0G,EAAO,EAAPA,QACAE,EAAW,EAAXA,YAMA7Y,KAAKuS,UAAS,SAACH,GAAK,MAAM,CACxBsG,aAAc,CACZC,QAAgB,OAAPA,QAAO,IAAPA,EAAAA,EAAWvG,EAAMsG,aAAaC,QACvC1G,MAAY,OAALA,QAAK,IAALA,EAAAA,EAASG,EAAMsG,aAAazG,MACnC4G,YAAwB,OAAXA,QAAW,IAAXA,EAAAA,EAAezG,EAAMsG,aAAaG,aAElD,GACH,GAAC,oBAED,WAA4B,IACtBO,EADqB,OAkFzB,OAhFqC,MAAjCpZ,KAAKoS,MAAMsG,aAAazG,QAC1BmH,GACE,iCACE,SAAC,KAAO,CAACC,OAAK,sBACd,UAAC,KAAG,CAACC,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,kBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNzY,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKsY,wBAGnB,SAAC,KAAG,CAACrX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,IACLnY,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKsY,2BAKrB,UAAC,KAAG,CAACgB,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,oBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNzY,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKuY,wBAGnB,SAAC,KAAG,CAACtX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,IACLnY,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKuY,2BAKrB,UAAC,KAAG,CAACe,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,mBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNzY,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKwY,wBAGnB,SAAC,KAAG,CAACvX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,IACLnY,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKwY,2BAIrB,SAAC,KAAO,CAACa,OAAK,SAMlB,2BACGD,GACD,UAAC,KAAG,CAACE,QAAQ,QAAQvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WACjD,SAAC,KAAG,CAACtY,KAAM,EAAE,sBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNzY,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,yBAGnB,SAAC,KAAG,CAACnX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,EACLnY,KAAK,QACLoY,KAAM,GACN5I,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,4BAIrB,SAAC,KAAG,CAACkB,QAAQ,QAAQvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,UACjD,SAAC,KAAQ,CACPrY,MAAOlB,KAAKoS,MAAMsG,aAAaG,YAC/BhC,SAAU,SAACE,GAAK,OACd,EAAK6C,sBAAsB7C,EAAMC,OAAO6C,QAAQ,EAAC,mCAO7D,KAAC,EA3QoB,CAAS9X,EAAAA,W,iGCiJhC,SAnK+B,SAAH,GAmBR,IAlBlBuD,EAAQ,EAARA,SACAuR,EAAQ,EAARA,SACAiD,EAAqB,EAArBA,sBACAf,EAAa,EAAbA,cACAgB,EAAuB,EAAvBA,wBACG9Z,GAAK,cAcA+Z,EAAU1U,EAAV0U,MASFC,EAAWD,EAAME,OAAM,SAAC/V,GAAU,OACtCA,EAAKgW,KAAKD,OAAM,SAAC1Z,GAAW,OAAKsZ,EAAsBM,IAAI5Z,EAAI,GAAC,IAE5D6Z,GACHJ,GACDD,EAAMpK,MAAK,SAACzL,GAAU,OACpBA,EAAKgW,KAAKvK,MAAK,SAACpP,GAAW,OAAKsZ,EAAsBM,IAAI5Z,EAAI,GAAC,IAG7D8Z,EAA0B,SAAH,GAMhB,IALXnW,EAAI,EAAJA,KACAwR,EAAS,EAATA,UAKAxR,EAAKgW,KAAKpR,SAAQ,SAACvI,GACjBqW,EAAS,CAAE0D,OAAQ/Z,EAAKmV,UAAAA,GAC1B,GACF,EAEA,OACE,SAAC,UAAS,gBACR5E,MAAO,CAAEiC,OAAQ,OAAQwH,YAAa,QAClCva,GAAK,cAET,SAAC,KAAK,CAAC8V,MAAM,QAAO,UAClB,iBAAKhF,MAAO,CAAEyJ,YAAa,OAAQvI,MAAO,SAAU,WAClD,SAAC,KAAK,CAAC+D,UAAU,WAAWD,MAAM,MAAK,UACrC,UAAC,KAAQ,CACPsE,cAAeA,EACfR,QAASI,EACTpD,SAvCkB,SAAC4D,GAC7B,IAAM9E,EAAY8E,EAAEzD,OAAO6C,QAC3BG,EAAMjR,SAAQ,SAAC5E,GACbmW,EAAwB,CAAEnW,KAAAA,EAAMwR,UAAAA,GAClC,GACF,EAkC4C,WAEhC,SAAC,IAAO,CACNvU,MAAK,UAAKkE,EAAS0P,UAAS,YAAI1P,EAAS2P,wBACzCyF,gBAAiB,EAAE,SAElBpV,EAASgQ,eAEZ,SAAC,KAAO,CACNqF,UAAU,UACVC,aAAc,CAAE/G,MAAO,SACvBzS,MAAM,mBACNyT,QAAS,kBACP,SAAC,GAAiB,CAChBiE,qBAAsBkB,EAAMa,QAC1B,SAACC,EAAe3W,GACd,MAAM,GAAN,gBAAW2W,IAAG,QAAK3W,EAAKgW,MAC1B,GACA,IAEFpB,cAAeA,EACfH,aACEmB,EAAwBC,EAAM,GAAGG,KAAK,KAExC,EACF,UAEF,SAAC,KAAM,CACLhW,KAAK,UACL4W,MAAM,SACNhK,MAAO,CAAEiK,WAAY,QACrB7Z,MAAM,SAAC8Z,GAAA,EAAe,aAK7BjB,EAAM3Z,KAAI,SAAC8D,GACV,IAAQmR,EACNnR,EADMmR,YAAaL,EACnB9Q,EADmB8Q,uBAAwBD,EAC3C7Q,EAD2C6Q,UAAWmF,EACtDhW,EADsDgW,KAElDe,EAAuB5F,EAAYjP,MAAM,EAAG,IAC5C8U,EAAqBD,IAAyB5F,EAAcA,EAAW,UAAM4F,EAAoB,OACjGE,EAAYjB,EAAKD,OAAM,SAAC1Z,GAAW,OACvCsZ,EAAsBM,IAAI5Z,EAAI,IAE1B6a,GACHD,GACDjB,EAAKvK,MAAK,SAACpP,GAAW,OAAKsZ,EAAsBM,IAAI5Z,EAAI,IAC3D,OACE,iBAEEuQ,MAAO,CACLyJ,YAAa,OACb3G,MAAO,OACP7C,QAAS,OACTsK,cAAe,OACf,WAEF,SAAC,KAAQ,CACPjB,cAAegB,EACfxB,QAASuB,EACTvE,SAAU,SAAC4D,GAAM,OACfH,EAAwB,CACtBnW,KAAAA,EACAwR,UAAW8E,EAAEzD,OAAO6C,SACpB,KAEN,iBAAK9I,MAAO,CAAEyJ,YAAa,OAAQ,WACjC,SAAC,IAAO,CACNpZ,MAAK,UAAK4T,EAAS,YAAIC,GACvByF,gBAAiB,EAAE,SAElBS,KAEH,SAAC,KAAO,CACNR,UAAU,UACVC,aAAc,CAAE/G,MAAO,SACvBzS,MAAM,mBACNyT,QAAS,kBACP,SAAC,GAAiB,CAChBiE,qBAAsB3U,EAAKgW,KAC3BpB,cAAeA,EACfH,aAAcmB,EAAwB5V,EAAKgW,KAAK,KAChD,EACF,UAEF,SAAC,KAAM,CACLhW,KAAK,UACL4W,MAAM,SACNhK,MAAO,CAAEiK,WAAY,QACrB7Z,MAAM,SAAC8Z,GAAA,EAAe,aAGtB,UA3CE9W,EAAK8Q,uBAAsB,YAAI9Q,EAAKmR,aA8ClD,WAKV,EC1DA,SAzC+B,SAAH,GAkBR,IAjBlBiG,EAAW,EAAXA,YACA1E,EAAQ,EAARA,SACAkC,EAAa,EAAbA,cACAgB,EAAuB,EAAvBA,wBACAD,EAAqB,EAArBA,sBAcM0B,EAjEc,SAACD,GACrB,IAAMC,EAAwB,OAAXD,QAAW,IAAXA,OAAW,EAAXA,EAAaV,QAC9B,SACEY,EACAC,GACI,IAAD,IACKpW,EAAwBoW,EAAxBpW,SAAUnB,EAAcuX,EAAdvX,KAAM3D,EAAQkb,EAARlb,IAClBmb,EAAcrW,EAASgQ,YACvBsG,EAAUzX,EAAKmR,YAEfuG,EAAwC,QAA7B,EAAGJ,EAAcE,UAAY,2BACzCrW,GAAQ,IACX0U,MAAO,CAAC,IAEJ8B,EAAoC,QAA7B,EAAGD,EAAY7B,MAAM4B,UAAQ,2BACrCzX,GAAI,IACPgW,KAAM,KAGR,OAAO,kBACFsB,GAAa,eACfE,GAAW,kBACPE,GAAW,IACd7B,OAAM,kBACD6B,EAAY7B,OAAK,eACnB4B,GAAO,kBAAQE,GAAO,IAAE3B,KAAK,GAAD,gBAAM2B,EAAQ3B,MAAI,CAAE3Z,WAIzD,GACA,CAAC,GAaH,OATAgJ,OAAOC,KAAK+R,GAAYzS,SAAQ,SAAC4S,GAC/B,IACQ3B,EADSwB,EAAWG,GACpB3B,MACF+B,EAAWvS,OAAOC,KAAKuQ,GAAO3Z,KAClC,SAACub,GAAe,OAAK5B,EAAM4B,EAAQ,IAErCJ,EAAWG,GAAa3B,MAAQ+B,CAClC,IAEOP,CACT,CAqB+CQ,CAAcT,GAE3D,GAAuC,IAAnC/R,OAAOC,KAAK+R,GAAYlT,OAC1B,OAAO,wBAGT,IAAMnI,EAAQqJ,OAAOC,KAAK+R,GAAYnb,KAAI,SAACsb,GACzC,IAAMrW,EAAWkW,EAAWG,GAC5B,OACE,SAAC,GAAsB,CAErBrW,SAAUA,EACVuR,SAAUA,EACVkC,cAAeA,EACfgB,wBAAyBA,EACzBD,sBAAuBA,GALO,KAAzBxU,EAASgQ,YAAqBhQ,EAASgQ,YAAW,mBAAeqG,GAQ5E,IAEA,OAAO,SAAC,IAAI,CAACla,YAAY,EAAM,SAAEtB,GACnC,ECaA,SA1F8D,SAAH,GAkBpD,IAjBL8b,EAAgB,EAAhBA,iBACAC,EAAW,EAAXA,YACAC,EAAgB,EAAhBA,iBACAC,EAAY,EAAZA,aACAC,EAAe,EAAfA,gBACAC,EAAa,EAAbA,cACAC,EAAe,EAAfA,gBACAC,EAAqB,EAArBA,sBACAC,EAAmB,EAAnBA,oBACAC,EAAmB,EAAnBA,oBACAC,EAAgB,EAAhBA,iBACAC,EAAiB,EAAjBA,kBACArB,EAAW,EAAXA,YACAsB,EAAc,EAAdA,eACAC,EAA4B,EAA5BA,6BACAC,EAAgB,EAAhBA,iBACAhD,EAAuB,EAAvBA,wBAEMiD,GAAuBzN,EAAAA,EAAAA,cAAY,WAOvC0N,YALqB,WACC,OAAhBf,QAAwCnc,IAAhBmc,GAC1BA,EAAYnJ,QAEhB,GACyB,IAC3B,GAAG,CAACmJ,IAEJ,OACE,SAAC,UAAY,CACXrI,MAAO,IACPqJ,cAAY,EACZnM,MAAO,CACLoM,WAAY,QACZC,gBAAiB,IACjBC,SAAU,SACVC,WAAY,QACZ,UAEF,UAAC,IAAI,CACHpJ,KAAK,SACLqJ,gBAAiBpB,EACjBpL,MAAO,CAAEiC,OAAQ,QACjBmB,aAAc,GACdqJ,oBAAkB,EAClBC,aAAcT,EAAqB,UAEL,OAA7Bf,EAAiBzJ,UAChB,SAAC,YAAY,CAAapR,MAAM,cAAa,UAC3C,SAAC,SAAS,CAAC2P,MAAO,CAAEiC,OAAQ,QAAS,UACnC,gBACEjC,MAAO,CAAEiC,OAAQ,SACjBC,IAAKgJ,KAHiC,UAD1B,SASnBG,EACAC,EACAC,EACAC,EACAC,GACD,SAAC,YAAY,CAAmBpb,MAAM,cAAa,SAChDqb,GADe,eAGjBC,EACuB,IAAvBnB,EAAYjT,OACT,MAEA,SAAC,YAAY,CAEXlH,MAAM,wBAAuB,UAE7B,SAAC,GAAsB,CACrBma,YAAaA,EACb1E,SAAUiG,EACVhD,sBAAuB+C,EACvB9D,cAAegE,EACfhD,wBAAyBA,KARvB,yBAYT4C,EACAC,MAIT,EChFA,SAzB8D,SAAH,GAMpD,IALLc,EAAO,EAAPA,QACAC,EAAa,EAAbA,cACAC,EAAM,EAANA,OACAC,EAAiB,EAAjBA,kBACA/b,EAAQ,EAARA,SAEA,OACE,UAAC,YAAc,CAACiP,MAAO,CAAEiC,OAAQ,QAAS,UACvC0K,GAED,gBACE3M,MAAO,CACLiC,OAAO,eAAD,OAAiB2K,EAAa,KACpCN,SAAU,SACVO,OAAAA,GAEF3K,IAAK4K,IAGN/b,IAGP,EC5BO,IAAMgc,GAAW,SAAChJ,GAMvB,IAAMiJ,EAAejJ,EAAQG,uBACvB+I,EAAYlJ,EAAQE,UAC1B,MAAM,GAAN,OAAU+I,EAAY,YAAIC,EAC5B,EAKaC,GAAY,SAAC7I,GACxB,IAAM8I,EAAUtJ,GAAuB,CACrCC,QAASO,EAAIC,YACb1U,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPid,QAAS,UACTC,iBAAkB,UAGtB,GAAIF,EAAQ5V,OAAS,EAAG,CACtB,IAAM+V,EAAUH,EAAQ,GAAGnJ,wBAAwB,GACnD,OAAO+I,GAASO,EAClB,CAEF,EAKaC,GAAe,SAACzT,EAAgBC,GAC3C,GAAID,EAAE0T,SAASC,cAAgB1T,EAAEyT,SAASC,YACxC,OAAO,EAET,GAAI3T,EAAE0T,SAAS3W,sBAAwBkD,EAAEyT,SAAS3W,oBAChD,OAAO,EAET,GAAIiD,EAAE0T,SAASE,YAAYnW,SAAWwC,EAAEyT,SAASE,YAAYnW,OAC3D,OAAO,EAIT,IADA,IACSoL,EAAI,EAAGA,EAAI7I,EAAE0T,SAASE,YAAYnW,SAAUoL,EACnD,GAA+B,UAA3B7I,EAAE0T,SAASC,YAAyB,CACtC,IAAME,EAAK7T,EAAE0T,SACPI,EAAK7T,EAAEyT,SAGb,GAFWG,EAAGD,YAAY/K,GAAGkL,YALhB,KAMFD,EAAGF,YAAY/K,GAAGkL,YANhB,GAQX,OAAO,CAEX,MAGE,IAFA,IAAMF,EAAK7T,EAAE0T,SACPI,EAAK7T,EAAEyT,SACJM,EAAI,EAAGA,EAAIH,EAAGD,YAAY/K,GAAGpL,SAAUuW,EAAG,CAGjD,GAFWH,EAAGD,YAAY/K,GAAGmL,GAAGD,YAdrB,KAeAD,EAAGF,YAAY/K,GAAGmL,GAAGD,YAfrB,GAiBT,OAAO,CAEX,CAGJ,OAAO,CACT,EAKaE,GAAiB,SAAC/N,GASI,IAAD,cAC1BgO,EAAS,CACb9M,MAA0B,QAArB,EAAc,QAAd,EAAElB,EAAMgO,cAAM,aAAZ,EAAc9M,aAAK,QAAI,CAAC,IAAK,IAAK,GACzC4B,MAA0B,QAArB,EAAc,QAAd,EAAE9C,EAAMgO,cAAM,aAAZ,EAAclL,aAAK,QAAI,GAE1BmL,EAAO,CACX/M,MAAwB,QAAnB,EAAY,QAAZ,EAAElB,EAAMiO,YAAI,aAAV,EAAY/M,aAAK,QAAI,CAAC,IAAK,IAAK,EAAG,KAE5C,MAAO,CACL8M,OAAAA,EACAC,KAAAA,EACA7X,MAAO,CACL8X,OAAQ,CACNC,OAAoB,QAAd,EAAEnO,EAAMmO,cAAM,QAAIC,KAAKzF,IAAI,EAAIqF,EAAOlL,MAAO,GACnDkL,OAAAA,EACAC,KAAAA,IAIR,EC5FaI,GAAmB,SAAH,GAOvB,IAP6BjU,EAAO,EAAPA,QAASZ,EAAK,EAALA,MAAO8U,EAAO,EAAPA,QAQjDvZ,QAAQyF,KACN,iDAAgD,WAC5ChB,EAAMrC,aAAa,GAAGe,oBAAmB,MAE/C,IACE,IAaIiT,EAbEoD,EAAe,IAAIrT,EAAAA,OAAAA,kBAA6B,CACpDsT,cAAepU,EACfnJ,SAAUuI,EAAMrC,aAChB+O,SAAU,CAAC,WAAY,YACvBoI,QAAAA,EACAzM,iBAAkB,SAACpM,GACjB+B,GAAAA,QACErD,EAAmCsB,EAEvC,IAwBF,OAtBA8Y,EAAaE,0BAA0B,CAAC,GAGpCjV,EAAMpC,YAAYG,OAAS,IAC7BxC,QAAQyF,KACN,+CAA8C,WAC1ChB,EAAMpC,YAAY,GAAGc,oBAAmB,MAE9CiT,EAAc,IAAIjQ,EAAAA,OAAAA,iBAA4B,CAC5CT,OAAQL,EAAQnH,EAAeyH,iCAC/BzJ,SAAUuI,EAAMpC,YAAY,GAC5BwK,aAAc,EACd8M,YAAa,WACb7M,iBAAkB,SAACpM,GACjB+B,GAAAA,QACErD,EACAsB,EAEJ,KAIG,CAAE8Y,aAAAA,EAAcpD,YAAAA,EAWzB,CAVE,MAAO1V,GASP,MAPA+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,iCAGEuC,CACR,CACF,EAKakZ,GAAoB,SAC/BvH,GAEA,IAAMwH,EAAcxH,EAAOyH,wBAC3B,GAAID,EAAYrX,OAAS,GAEX,SADAqX,EAAY,GAAGE,mBAEzB,OAAO,EAGX,OAAO,CACT,EAKaC,GAA2B,SACtC3H,GAEA,IAAMhY,EAAQyU,GAAuB,CACnCC,QAASsD,EAAO4H,gBAChBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,oBAGb,GAAqB,IAAjBhe,EAAMmI,OACR,OAAO,EAET,IACM0X,EADmB7f,EAAM,GACYuV,oBAAoB,GACzDuK,EAAmB,IAAIxK,EAAAA,GAAAA,OAAAA,aAA6B,CACxDvU,MAAO8e,EAAkBhL,UACzBmJ,QAAS6B,EAAkB1K,YAC3B8I,iBAAkB4B,EAAkB/K,yBAEhCiL,EAAkB,IAAIzK,EAAAA,GAAAA,OAAAA,aAA6B,CACvDvU,MAAO,SACPid,QAAS,WACTC,iBAAkB,QAEpB,OAAO6B,EAAiBE,OAAOD,EACjC,EAKaE,GAAyB,SACpCjI,GAEA,IAAMkI,EAAezL,GAAuB,CAC1CC,QAASsD,EAAO4H,gBAChBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,2BAGb,GAA4B,IAAxBkC,EAAa/X,OACf,OAAO,EAET,IAAMwK,EAAYuN,EAAa,GACzBC,EAAoB1L,GAAuB,CAC/CC,QAAS/B,EAAUiN,gBACnBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,wBAIToC,GAAc,EAkBlB,OAjBAD,EAAkBvX,SAAQ,SAACyX,GACzB,IACMC,EAAU7L,GAAuB,CACrCC,QAFgB2L,EAEGT,gBACnBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,mBAGTsC,EAAQnY,OAAS,GACfmY,EAAQ,GAAGjL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,WAC3B8K,GAAc,EAGpB,IAEOA,CACT,ECxKaG,GAA2B,CAAC,IAAK,IAAK,GAKtCC,GAAyB,CAAC,IAAK,IAAK,EAAG,IAoBvCC,GAAkC,CAAC,EAAG,EAAG,GAKzCC,GAAmC,CAC9C,CAAC,IAAK,EAAG,GACT,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,EAAG,KACP,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,EAAG,I,iDCyFT,SAzGoB,0CAClB,WAAa5gB,GAA6B,IAAD,EAE6B,OAF7B,gBACvC,cAAMA,IACD6gB,uBAAyB,EAAKA,uBAAuBzI,MAAK,WAAK,CACtE,CAkGC,OAlGA,8CAED,SACEwB,EACA9C,GAEA/W,KAAKC,MAAM8gB,mBAAmB,CAC5BxG,OAAQva,KAAKC,MAAMmV,IAAI5U,IACvBmV,UAAWkE,GAEf,GAAC,oBAED,WACE,IAAMnQ,EAAU,cAAU1J,KAAKC,MAAMM,MAAQ,GACvCH,EAAqD,GAK3D,EAAyDJ,KAAKC,MAApB+gB,GAAzB,EAATrL,UAA6B,EAAlBoL,oBAAiC,eAsDpD,OArDA/gB,KAAKC,MAAMmV,IAAIC,YAAYtM,SAAQ,SACjCzI,GAKA,IAAMiV,EAAYjV,EAAKyU,wBAAwB,GAAGC,UAC5CiM,EAAc3gB,EAAKyU,wBAAwB,GAAGO,YAC9C3U,EAAI,UAAMsgB,GAChB,GAAI3gB,EAAKkV,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAC1D,IACMyL,EADkB5gB,EACaoV,oBAAoB,GAAGJ,YAE1C,cAAdC,EACFnV,EAAW8B,KAAK,CACdvB,KAAM,oBACNO,MAAM,GAAD,OAAKggB,KAEW,WAAd3L,EACTnV,EAAW8B,KAAK,CACdvB,KAAM,gBACNO,MAAM,GAAD,OAAKggB,KAEW,WAAd3L,EACTnV,EAAW8B,KAAK,CACdvB,KAAM,iBACNO,MAAM,GAAD,OAAKggB,KAGZ9gB,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAM,GAAD,OAAKggB,IAGhB,MAAO,GAAI5gB,EAAKkV,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CACjE,IAAM0L,EAAkB7gB,EACxBF,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAOigB,EAAgBC,WAE3B,CACF,IACAphB,KAAKC,MAAMmV,IAAIiL,aAAatX,SAAQ,SAAAzI,GAClC,IAAM2gB,EAAc3gB,EAAKyU,wBAAwB,GAAGO,YAC9C3U,EAAI,UAAMsgB,GACVI,EAAM/gB,EAAKghB,sBAAsB,GACjCpgB,EAAQmgB,EAAIE,aAAa3C,YAAY,GACrC4C,EAAOH,EAAII,6BAA6B,GAAGzM,UACjD5U,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAM,GAAD,OAAKA,EAAK,YAAIsgB,IAEvB,KAEE,UAAC,KAAK,CAACzL,MAAM,QAAO,WAClB,gBAAKhF,MAAO,CAAEyJ,YAAa,QAAS,UAClC,SAAC,KAAM,CACLjZ,KAAK,QACLsV,SAAU7W,KAAK8gB,uBACfjH,QAAS7Z,KAAKC,MAAM0V,UACpB+L,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,SAGlC,SAAC,UAAS,gBACR5Q,MAAO,CAAEiC,OAAQ,OAAQwH,YAAa,QAElCwG,GAAU,cAEd,SAAC,EAAW,CACV3f,OAAQqI,EACRtJ,WAAYA,EACZqB,YAAU,EACVvB,eAAa,MAPVF,KAAKC,MAAMmV,IAAI5U,OAY5B,KAAC,EAtGiB,CAASuB,EAAAA,WC4D7B,SA5DoB,0CAClB,WAAa9B,GAA6B,IAAD,EAG6B,OAH7B,gBACvC,cAAMA,IACD2hB,wBAA0B,EAAKA,wBAAwBvJ,MAAK,WACjE,EAAKyI,uBAAyB,EAAKA,uBAAuBzI,MAAK,WAAK,CACtE,CAoDC,OApDA,8CAED,SACEwB,EACA9C,GACO,IAAD,OACF8C,EACF7Z,KAAKC,MAAM4hB,KAAK9Y,SAAQ,SAAAqM,GACtB,EAAKnV,MAAM8gB,mBAAmB,CAAExG,OAAQnF,EAAI5U,IAAKmV,UAAWkE,GAC9D,IAEA7Z,KAAKC,MAAM4c,eAAe9T,SAAQ,SAAAwR,GAChC,EAAKta,MAAM8gB,mBAAmB,CAAExG,OAAAA,EAAQ5E,UAAWkE,GACrD,GAEJ,GAAC,qCAED,SAAyBiI,GACvB9hB,KAAKC,MAAM8hB,YAAYD,EAAO3U,IAChC,GAAC,oBAED,WAA4B,IAAD,OACnBhN,EAAQH,KAAKC,MAAM4hB,KAAKxhB,KAAI,SAAC+U,EAAK7U,GAAK,OAC3C,SAAC,GAAc,CAEb6U,IAAKA,EACL7U,MAAOA,EACPoV,UAAW,EAAK1V,MAAM4c,eAAezC,IAAIhF,EAAI5U,KAC7CugB,mBAAoB,EAAK9gB,MAAM8gB,oBAJ1B3L,EAAI5U,IAKT,IAGJ,OACE,iCACE,gBAAKuQ,MAAO,CAAEyJ,YAAa,OAAQwH,WAAY,MAAOC,cAAe,OAAQ,UAC3E,SAAC,KAAM,CACL1gB,KAAK,QACLsV,SAAU7W,KAAK8gB,uBACfjH,QAAS7Z,KAAKC,MAAM4c,eAAetb,KAAO,EAC1CmgB,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,SAGlC,SAAC,IAAI,CACH/N,cAAY,QAAM5T,KAAKC,MAAMiiB,gBAAgB/I,UAC7CrF,SAAU9T,KAAK4hB,wBACfO,QAASniB,KAAK4hB,wBAAwB,SAErCzhB,MAIT,KAAC,EAzDiB,CAAS4B,EAAAA,W,iHCG7B,SAASqgB,GAAuB,GAWR,IAVtBzM,EAAS,EAATA,UACAoL,EAAkB,EAAlBA,mBACAsB,EAAQ,EAARA,SASA,OACE,UAAC,KAAK,CAACrM,UAAU,WAAWD,MAAM,MAAK,WACrC,SAAC,KAAM,CACLxU,KAAK,QACLsV,SAAUkK,EACVlH,QAASlE,EACT+L,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,OAEhC,SAAC,KAAO,CACNhH,UAAU,OACV9F,QAASwN,EACTzH,aAAc,CAAE/G,MAAO,SACvBzS,MAAM,mBAAkB,UAExB,SAAC,KAAM,CAAC+C,KAAK,UAAU4W,MAAM,SAAS5Z,MAAM,SAAC8Z,GAAA,EAAe,UAIpE,CAEA,SAASqH,GAA+B,GAchB,IAbtB3S,EAAe,EAAfA,gBACAwS,EAAO,EAAPA,QACAI,EAAc,EAAdA,eACAtQ,EAAK,EAALA,MACAvR,EAAK,EAALA,MACAN,EAAU,EAAVA,WASMoiB,GAAgBjT,EAAAA,EAAAA,cAAY,SAACwH,GACf,UAAdA,EAAM5J,KAAiC,MAAd4J,EAAM5J,MACjC4J,EAAM0L,iBACNN,IAEJ,GAAG,CAACA,IAEJ,OACE,gBACEA,QAASA,EACTO,UAAWF,EACXG,SAAU,EACVC,KAAK,SACL,wCAAgCliB,GAAQ,UAExC,UAAC,KAAK,CACJmiB,OAAQ,EAAE,GAAI,IACdC,MAAO,IACP/R,MAAO,CACLgS,YAAa,QACbC,YAAa,MACbC,YAAa,OACbC,WAAYX,EAAiB,UAAY,SACzCY,gBAAgB,8BAAD,OAAgClR,EAAK,aAAKA,IACzD,WAEF,SAAC,GAAiB,CAChBtC,gBAAiBA,EACjBoB,MAAO,CAAEqS,QAAS,aAEpB,SAAC,EAAW,CACV/hB,OAAQX,EACRN,WAAYA,EACZqB,YAAU,EACVvB,eAAa,QAKvB,CAujBA,SAxgByB,0CAIvB,WAAaD,GAAkC,IAAD,EAe3C,OAf2C,gBAC5C,cAAMA,IAiBR6gB,uBAAyB,SACvBjH,EACA9C,GAEA,EAAK9W,MAAM8gB,mBAAmB,CAC5BsC,mBAAoB,EAAKpjB,MAAM0P,gBAAgBnP,IAC/CmV,UAAWkE,IAEb,EAAKtH,SAAS,CAAEoD,UAAWkE,GAC7B,EAAC,EA4KDyJ,2BAA6B,WAC3B,EAAKrjB,MAAMsjB,uBAAuB,EAAKtjB,MAAM0P,gBAAgBnP,IAC/D,EAvME,EAAKgjB,2BACH,EAAKA,2BAA2BnL,MAAK,WACvC,EAAKD,oBAAsB,EAAKA,oBAAoBC,MAAK,WACzD,EAAKC,mBAAqB,EAAKA,mBAAmBD,MAAK,WACvD,EAAKE,mBAAqB,EAAKA,mBAAmBF,MAAK,WACvD,EAAKG,mBAAqB,EAAKA,mBAAmBH,MAAK,WACvD,EAAKI,gBAAkB,EAAKA,gBAAgBJ,MAAK,WACjD,EAAKjG,MAAQ,CACXuD,UAAW,EAAK1V,MAAM0V,UACtB+C,aAAc,CACZC,QAAS,EAAK1Y,MAAM2Y,aAAaD,QACjC1G,MAAO,EAAKhS,MAAM2Y,aAAa3G,QAElC,CACH,CAifC,OAjfA,2CAaD,SAAqB/Q,GACL,OAAVA,QAA4BnB,IAAVmB,IACpBlB,KAAKC,MAAM8Y,cAAc,CACvBvY,IAAKR,KAAKC,MAAM0P,gBAAgBnP,IAChCwY,aAAc,CACZL,QAASzX,KAGblB,KAAKuS,SAAS,CACZmG,aAAc,CACZC,QAASzX,EACT+Q,MAAOjS,KAAKoS,MAAMsG,aAAazG,MAC/BwR,YAAazjB,KAAKoS,MAAMsG,aAAa+K,eAI7C,GAAC,gCAED,SAAoBviB,GAClB,GAAc,OAAVA,QAA4BnB,IAAVmB,QAAyDnB,IAAlCC,KAAKoS,MAAMsG,aAAazG,MAAqB,CACxF,IAAMA,EAAQ,CACZtM,MAAMuT,QAAQhY,GAASA,EAAM,GAAKA,EAClClB,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BjS,KAAKoS,MAAMsG,aAAazG,MAAM,IAEhCjS,KAAKuS,UAAS,SAACH,GAAK,MAAM,CACxBsG,aAAc,CACZzG,MAAOA,EACP0G,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAarR,EAAMsG,aAAa+K,aAEnC,IACDzjB,KAAKC,MAAM8Y,cAAc,CACvBvY,IAAKR,KAAKC,MAAM0P,gBAAgBnP,IAChCwY,aAAc,CAAE/G,MAAOA,IAE3B,CACF,GAAC,gCAED,SAAoB/Q,GAClB,GAAc,OAAVA,QAA4BnB,IAAVmB,QAAyDnB,IAAlCC,KAAKoS,MAAMsG,aAAazG,MAAqB,CACxF,IAAMA,EAAQ,CACZjS,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BtM,MAAMuT,QAAQhY,GAASA,EAAM,GAAKA,EAClClB,KAAKoS,MAAMsG,aAAazG,MAAM,IAEhCjS,KAAKuS,UAAS,SAACH,GAAK,MAAM,CACxBsG,aAAc,CACZzG,MAAOA,EACP0G,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAarR,EAAMsG,aAAa+K,aAEnC,IACDzjB,KAAKC,MAAM8Y,cAAc,CACvBvY,IAAKR,KAAKC,MAAM0P,gBAAgBnP,IAChCwY,aAAc,CAAE/G,MAAOA,IAE3B,CACF,GAAC,gCAED,SAAoB/Q,GAClB,GAAc,OAAVA,QAA4BnB,IAAVmB,QAAyDnB,IAAlCC,KAAKoS,MAAMsG,aAAazG,MAAqB,CACxF,IAAMA,EAAQ,CACZjS,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BjS,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BtM,MAAMuT,QAAQhY,GAASA,EAAM,GAAKA,GAEpClB,KAAKuS,UAAS,SAACH,GAAK,MAAM,CACxBsG,aAAc,CACZzG,MAAOA,EACP0G,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAarR,EAAMsG,aAAa+K,aAEnC,IACDzjB,KAAKC,MAAM8Y,cAAc,CACvBvY,IAAKR,KAAKC,MAAM0P,gBAAgBnP,IAChCwY,aAAc,CAAE/G,MAAOA,IAE3B,CACF,GAAC,6BAED,WACE,IAAiBkH,EAOjB,OAAsC,OAAlCnZ,KAAKoS,MAAMsG,aAAazG,YAAoDlS,IAAlCC,KAAKoS,MAAMsG,aAAazG,MAH7D,KAAO,WAJCkH,EAQAnZ,KAAKoS,MAAMsG,aAAazG,OAPtB,IAGe,KAFtBkH,EAAO,IAE2B,GADlCA,EAAO,IACmClF,SAAS,IAAI5N,MAAM,GAMhE,OAEX,GAAC,oCAED,SAAwBnF,GACR,OAAVA,QAA4BnB,IAAVmB,QAA+DnB,IAAxCC,KAAKoS,MAAMsG,aAAa+K,cACnEzjB,KAAKuS,UAAS,SAACH,GACb,YAAuCrS,IAAnCqS,EAAMsG,aAAa+K,YACd,CACL/K,aAAc,CACZzG,MAAOG,EAAMsG,aAAazG,MAC1B0G,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAa,CAACviB,EAAOkR,EAAMsG,aAAa+K,YAAY,MAIjD,CACL/K,aAAc,CACZzG,MAAOG,EAAMsG,aAAazG,MAC1B0G,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAarR,EAAMsG,aAAa+K,aAIxC,IACAzjB,KAAKC,MAAM8Y,cAAc,CACvBvY,IAAKR,KAAKC,MAAM0P,gBAAgBnP,IAChCwY,aAAc,CACZyK,YAAa,CAACviB,EAAOlB,KAAKoS,MAAMsG,aAAa+K,YAAY,OAIjE,GAAC,oCAED,SAAwBviB,GACR,OAAVA,QAA4BnB,IAAVmB,QAA+DnB,IAAxCC,KAAKoS,MAAMsG,aAAa+K,cACnEzjB,KAAKuS,UAAS,SAACH,GACb,YAAuCrS,IAAnCqS,EAAMsG,aAAa+K,YACd,CACL/K,aAAc,CACZzG,MAAOG,EAAMsG,aAAazG,MAC1B0G,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAa,CAACrR,EAAMsG,aAAa+K,YAAY,GAAIviB,KAI9C,CACLwX,aAAc,CACZzG,MAAOG,EAAMsG,aAAazG,MAC1B0G,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAarR,EAAMsG,aAAa+K,aAIxC,IACAzjB,KAAKC,MAAM8Y,cAAc,CACvBvY,IAAKR,KAAKC,MAAM0P,gBAAgBnP,IAChCwY,aAAc,CACZyK,YAAa,CAACzjB,KAAKoS,MAAMsG,aAAa+K,YAAY,GAAIviB,MAI9D,GAAC,+BAED,SAAmBiY,GACjBnZ,KAAKuS,UAAS,SAACH,GAAK,MAAM,CACxBsG,aAAc,CACZzG,MAAOG,EAAMsG,aAAazG,MAC1B0G,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAatK,GAEhB,IACDnZ,KAAKC,MAAM8Y,cAAc,CACvBvY,IAAKR,KAAKC,MAAM0P,gBAAgBnP,IAChCwY,aAAc,CAAEyK,YAAatK,IAEjC,GAAC,wCAMD,SAA4BjY,EAAgBwiB,GAAqB,IAAD,OAC9D,GAAc,OAAVxiB,QAA4BnB,IAAVmB,GAA4C,QAAf,OAANwiB,QAAM,IAANA,OAAM,EAANA,EAAQ5hB,gBAA0C/B,KAAf,OAAN2jB,QAAM,IAANA,OAAM,EAANA,EAAQ5hB,UAAwB,CACxG,IAAM6hB,EAAiBziB,EAAMuB,MAAM,KAC7BmhB,EAAc,IAAInO,EAAAA,GAAAA,OAAAA,aAA6B,CACnDvU,MAAOyiB,EAAe,GACtBvF,iBAAkBuF,EAAe,GACjCxF,QAASuF,EAAO5hB,WAElB9B,KAAKC,MAAM8Y,cAAc,CACvBvY,IAAKR,KAAKC,MAAM0P,gBAAgBnP,IAChCwY,aAAc,CAAE4K,YAAAA,KAElB5jB,KAAKuS,UAAS,SAACH,GAAK,MAAM,CACxBsG,aAAc,CACZC,QAASvG,EAAMsG,aAAaC,QAC5BiL,YAAAA,GAEH,GACH,MACE5jB,KAAKC,MAAM8Y,cAAc,CACvBvY,IAAKR,KAAKC,MAAM0P,gBAAgBnP,IAChCwY,aAAc,CACZ/G,MAAOjS,KAAKC,MAAM2Y,aAAa3G,SAGnCjS,KAAKuS,UAAS,SAACH,GAAK,MAAM,CACxBsG,aAAc,CACZC,QAASvG,EAAMsG,aAAaC,QAC5B1G,MAAO,EAAKhS,MAAM2Y,aAAa3G,MAC/BwR,iBAAa1jB,GAEhB,GAEL,GAAC,oBAED,WAA4B,IAAD,EAyDrBqZ,EAiFAyK,EACAC,EA3IqB,OACnBvjB,EAAQP,KAAKC,MAAM+B,SAAS+hB,wBAAwBzZ,WACxD,SAAChK,GAAI,OAAKA,EAAK0jB,qBAAuB,EAAK/jB,MAAM0P,gBAAgBnP,GAAG,IAEhEF,EAAON,KAAKC,MAAM+B,SAAS+hB,wBAAwBxjB,GACnDH,EAAqD,CACzD,CACEO,KAAM,gBACNO,MAAOlB,KAAKC,MAAM0P,gBAAgBsU,aAAa3O,aAEjD,CACE3U,KAAM,oBACNO,MAAOlB,KAAKC,MAAM0P,gBAAgBuU,iBAAiB5O,aAMrD,CACE3U,KAAM,eACNO,MAAOZ,EAAK6jB,aAEd,CACExjB,KAAM,6BACNO,MAAOlB,KAAKC,MAAM+B,SAASoiB,2BAIzBC,EAAgD,QAA5B,EAAG/jB,EAAKgkB,4BAAoB,QAAI,GAgBpDC,EAAqBF,EAAqBhkB,KAfhB,SAACmkB,GAC/B,IAAM7jB,EAAO6jB,EAAgBzP,wBAAwB,GAC/C5H,EAAG,UAAMxM,EAAKsU,uBAAsB,YAAItU,EAAKqU,WACnD,OACE,SAAC,YAAa,CAEZ9T,MAAOiM,EACPsX,0BAA0B,EAC1BljB,KAAK,QACLuU,UAAW,EAAK7V,MAAM0V,UAAU,SAE/BhV,EAAK2U,aANDnI,EASX,IAiGA,GA/FAoX,EAAmBriB,MACjB,SAAC,YAAa,CAEZhB,WAAOnB,EACP0kB,0BAA0B,EAC1BljB,KAAK,QACLuU,UAAW9V,KAAKC,MAAM0V,UAAU,SAE/B,MANG,MAW8B,OAAlC3V,KAAKoS,MAAMsG,aAAazG,YAAoDlS,IAAlCC,KAAKoS,MAAMsG,aAAazG,QACpEmH,GACE,iCACE,SAAC,KAAO,CAACC,OAAK,sBACd,UAAC,KAAG,CAACC,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,kBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNzY,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKsY,wBAGnB,SAAC,KAAG,CAACrX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,IACLnY,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKsY,2BAKrB,UAAC,KAAG,CAACgB,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,oBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNzY,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKuY,wBAGnB,SAAC,KAAG,CAACtX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,IACLnY,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKuY,2BAKrB,UAAC,KAAG,CAACe,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,mBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNzY,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKwY,wBAGnB,SAAC,KAAG,CAACvX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,IACLnY,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKwY,2BAIrB,SAAC,KAAO,CAACa,OAAK,QAOhBgL,EAAqB/b,OAAS,EAAG,CACnC,GAA4C,OAAxCtI,KAAKoS,MAAMsG,aAAa+K,kBAAgE1jB,IAAxCC,KAAKoS,MAAMsG,aAAa+K,YAA2B,CAIrGI,GACE,iCACE,SAAC,KAAO,CAACxK,OAAK,mCACd,UAAC,KAAG,CAACC,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK1Z,KAAKoS,MAAMsG,aAAa+K,YAAY,GACzCliB,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAa+K,YAAY,GAC3C5M,SAAU7W,KAAK0kB,4BAGnB,SAAC,KAAG,CAACzjB,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAK,EACLC,IAnBO,EAoBPC,IAnBO,IAoBPC,KAAM,EACNzY,MAAO,CACLlB,KAAKoS,MAAMsG,aAAa+K,YAAY,GACpCzjB,KAAKoS,MAAMsG,aAAa+K,YAAY,IAEtC5M,SAAU7W,KAAK2kB,uBAGnB,SAAC,KAAG,CAAC1jB,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAKzZ,KAAKoS,MAAMsG,aAAa+K,YAAY,GACzC/J,IA/BO,IAgCPnY,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAa+K,YAAY,GAC3C5M,SAAU7W,KAAK4kB,gCAM3B,CACAd,GACE,iCACE,SAAC,KAAO,CAACzK,OAAK,4BACd,UAAC,KAAG,CAACC,QAAQ,QAAQvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WACjD,SAAC,KAAG,CAACtY,KAAM,EAAE,0BACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL8P,MAAO,CAAE8T,SAAU,OAAQhR,MAAO,OAClCC,SAAU9T,KAAKwjB,2BAEfsB,kBAAc/kB,EAAU,SAEvBwkB,GAHG,wCAShB,CAEA,IAAMlC,GACJ,2BACGjJ,EACAyK,GACD,UAAC,KAAG,CAACvK,QAAQ,QAAQvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WACjD,SAAC,KAAG,CAACtY,KAAM,EAAE,sBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNzY,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,yBAGnB,SAAC,KAAG,CAACnX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,EACLnY,KAAK,QACLoY,KAAM,GACN5I,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,2BAIpB0L,KAIC7R,EAAQjS,KAAKyY,kBACb8J,EACJviB,KAAKoS,MAAMuD,WAAqD,OAAxC3V,KAAKoS,MAAMsG,aAAakL,YAClD,EAQI5jB,KAAKC,MADJ+gB,GANY,EAAfrR,gBACY,EAAZiJ,aACS,EAATjD,UACQ,EAAR3T,SACkB,EAAlB+e,mBACa,EAAbhI,eACa,eAEf,OACE,SAAC,UAAS,gBACRhI,MAAO,CAAEiC,OAAQ,OAAQwH,YAAa,QAElCwG,GAAU,cAEd,UAAC,KAAK,CAACjL,MAAM,QAAO,WAClB,gBAAKhF,MAAO,CAAEyJ,YAAa,QAAS,UAClC,SAAC4H,GAAuB,CACtBzM,UAAW3V,KAAKC,MAAM0V,UACtBoL,mBAAoB/gB,KAAK8gB,uBACzBuB,SAAUA,OAGd,SAACC,GAA+B,CAC9BH,QAASniB,KAAKsjB,2BACd3T,gBAAiB3P,KAAKC,MAAM0P,gBAC5B4S,eAAgBA,EAChBtQ,MAAOA,EACPvR,MAAOV,KAAKC,MAAM0P,gBAAgBjP,MAClCN,WAAYA,SAjBXJ,KAAKC,MAAM0P,gBAAgBnP,IAsBtC,KAAC,EArgBsB,CAASuB,EAAAA,WCnDlC,SA/DyB,qJAqBtB,OArBsB,oCAIvB+e,uBAAyB,SAACjH,GACpBA,EACF,EAAK5Z,MAAM8kB,iBAAiBhc,SAAQ,SAAC4G,GACnC,EAAK1P,MAAM+kB,kCAAkC,CAC3C3B,mBAAoB1T,EAAgBnP,IACpCmV,UAAWkE,GAEf,IAIF,EAAK5Z,MAAMglB,2BAA2Blc,SAAQ,SAACsa,GAC7C,EAAKpjB,MAAM+kB,kCAAkC,CAC3C3B,mBAAAA,EACA1N,UAAWkE,GAEf,GACF,EAAC,EAuCA,OAvCA,8BAED,WAA4B,IAAD,OACnB1Z,EAAQH,KAAKC,MAAM8kB,iBAAiB1kB,KAAI,SAACsP,EAAiBpP,GAC9D,IAAMC,EAAMmP,EAAgBnP,IAC5B,OACE,SAAC,GAAmB,CAElBmP,gBAAiBA,EACjB4T,uBAAwB,EAAKtjB,MAAMsjB,uBACnCvhB,SAAU,EAAK/B,MAAM+B,SAASxB,GAC9BmV,UAAW,EAAK1V,MAAMglB,2BAA2B7K,IAAI5Z,GACrDoY,aAAc,EAAK3Y,MAAMilB,6BAA6B1kB,GACtDugB,mBAAoB,EAAK9gB,MAAM+kB,kCAC/BjM,cAAe,EAAK9Y,MAAMklB,8BAPrBxV,EAAgBnP,IAU3B,IAEA,OACE,iCACE,gBACEuQ,MAAO,CACLyJ,YAAa,OACbwH,WAAY,MACZC,cAAe,OACf,UAEF,SAAC,KAAM,CACL1gB,KAAK,QACLsV,SAAU7W,KAAK8gB,uBACfjH,QAAS7Z,KAAKC,MAAMglB,2BAA2B1jB,KAAO,EACtDmgB,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,SAGlC,SAAC,IAAI,CAAClgB,YAAY,EAAM,SAAEtB,MAGhC,KAAC,EA5DsB,CAAS4B,EAAAA,WC7B3B,IAAMqjB,GAAe,SAC1B9kB,EACA+kB,GAEA,OAAO/kB,EAAKkV,YAAc6P,CAC5B,EA4BMC,GAAU,SAACnN,GAEf,IAAM+F,EAAUtJ,GAAuB,CACrCC,QAASsD,EAAO4H,gBAChBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,2BAGU,IAAnBD,EAAQ5V,QACVC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,oJAMN,IAAMshB,EAAmBrH,EAAQ,GAE3BsH,EAAwB5Q,GAAuB,CACnDC,QAAS0Q,EAAiBxF,gBAC1Bpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,wBAIP0D,EAAsB,GAwK5B,OAvKA2D,EAAsBzc,SAAQ,SAACzI,GAC7B,IACImlB,EADEpQ,EAAc,GAEdmL,EAAQlgB,EACVH,EAAQyU,GAAuB,CACjCC,QAAS2L,EAAMT,gBACfpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,iCAGQ,IAAjBhe,EAAMmI,QACRC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,6NAON,IAAMyhB,EAAkBvlB,EAAM,GA+B9B,GArBqB,KARrBA,EAAQyU,GAAuB,CAC7BC,QAAS2L,EAAMT,gBACfpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,eAGH7V,QACRC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,0MAgBe,KARrB9D,EAAQyU,GAAuB,CAC7BC,QAAS2L,EAAMT,gBACfpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,sBAGH7V,OAAc,CACtB,IAAMqd,EAAoBxlB,EAAM,GAChCkV,EAAYnT,KAAKyjB,GACjBF,EAAe,QACjB,MACEA,EAAe,SAWjB,GAAqB,KARrBtlB,EAAQyU,GAAuB,CAC7BC,QAAS2L,EAAMT,gBACfpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,yBAGH7V,OAAc,CACtB,IAAMsd,EAAuBzlB,EAAM,GACnCkV,EAAYnT,KAAK0jB,EACnB,CAUqB,KARrBzlB,EAAQyU,GAAuB,CAC7BC,QAAS2L,EAAMT,gBACfpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,oBAGH7V,QACRC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,+MAON,IACIsa,EADEsH,EAAa1lB,EAAM,GAEzB,GAA+B,UAA3B0lB,EAAW1B,YACb5F,EAAW,IAAItS,EAAAA,SAAAA,MAAmB,CAChCrE,oBAAqBie,EAAWC,8BAChCC,YAAaF,EAAWG,kBAErB,CAEL,IADA,IAAMD,EAA0B,GACvBrS,EAAI,EAAGA,EAAImS,EAAWG,YAAY1d,OAAQoL,GAAK,EACtDqS,EAAY7jB,KAAK2jB,EAAWG,YAAY3f,MAAMqN,EAAGA,EAAI,IAExB,YAA3BmS,EAAW1B,YACb5F,EAAW,IAAItS,EAAAA,SAAAA,QAAqB,CAClCrE,oBAAqBie,EAAWC,8BAChCC,YAAaA,IAEqB,eAA3BF,EAAW1B,YACpB5F,EAAW,IAAItS,EAAAA,SAAAA,WAAwB,CACrCrE,oBAAqBie,EAAWC,8BAChCC,YAAaA,IAEqB,aAA3BF,EAAW1B,YACpB5F,EAAW,IAAItS,EAAAA,SAAAA,SAAsB,CACnCrE,oBAAqBie,EAAWC,8BAChCC,YAAaA,IAEqB,YAA3BF,EAAW1B,YACpB5F,EAAW,IAAItS,EAAAA,SAAAA,QAAqB,CAClCrE,oBAAqBie,EAAWC,8BAChCC,YAAaA,IAEqB,cAA3BF,EAAW1B,YACpB5F,EAAW,IAAItS,EAAAA,SAAAA,UAAuB,CACpCrE,oBAAqBie,EAAWC,8BAChCC,YAAaA,IAGfxd,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,wDAAuD,WACnD4hB,EAAW1B,YAAW,OAD1B,uKAQR,CAEA9O,EAAYnT,KAAI,MAAhBmT,GAAW,QAlMa,SAAH,GAEoB,IADzCR,EAAO,EAAPA,QAEI1U,EAA+C,GAOrD,OANA0U,EAAQ9L,SAAQ,SAAA2K,GACd,GAAI0R,GAAa1R,EAAG+B,EAAAA,GAAAA,WAAAA,WAAAA,MAAsC,CACxD,IAAMwQ,EAAavS,EACnBvT,EAAM+B,KAAK+jB,EACb,CACF,IACO9lB,CACT,CAwLS+lB,CAAoB,CAAErR,QAAS2L,EAAMT,oBAE1C,IAAMM,EAlNmB,SAAH,GAEkB,IADxCxL,EAAO,EAAPA,QAEI1U,EAA8C,GAOpD,OANA0U,EAAQ9L,SAAQ,SAAA2K,GACd,GAAI0R,GAAa1R,EAAG+B,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CACvD,IAAMmO,EAAclQ,EACpBvT,EAAM+B,KAAK0hB,EACb,CACF,IACOzjB,CACT,CAuMyBgmB,CAAqB,CACxCtR,QAAS2L,EAAMT,kBAGX3K,EAAM,IAAInJ,EAAAA,IAAAA,IAAY,CAC1BsS,SAAUA,EACV/d,KAAKC,EAAAA,EAAAA,KACL2lB,WAAY,CACVC,YAAaX,EAAgBY,IAC7Bb,aAAcA,EACdpQ,YAAaA,EACbgL,aAAcA,KAGlBwB,EAAK3f,KAAKkT,EACZ,IACOyM,CACT,EAEM0E,IAAiB,QAiBrB,WAAapO,IAAyC,oBAhB/CqO,wBAAkB,OAElBC,6BAAuB,OAEvBC,uBAAiB,OAEjBC,wBAAkB,OAElBC,iBAAW,OAEXC,wBAAkB,OAElB5d,yBAAmB,OAEnB6d,KAAsB,GAG3B,IAAI3mB,EAAQyU,GAAuB,CACjCC,QAASsD,EAAO4H,gBAChBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,mBAGQ,IAAjBhe,EAAMmI,QACRC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,qPAON,IAAM8iB,EACJ5mB,EAAM,GAERH,KAAK4mB,YAAcG,EAAgBT,IAUd,KARrBnmB,EAAQyU,GAAuB,CAC7BC,QAASsD,EAAO4H,gBAChBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,2BAGH7V,QACRC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,4PAON,IAAM+iB,EACJ7mB,EAAM,GAERH,KAAK6mB,mBAAqBG,EAAe5F,UAUpB,KARrBjhB,EAAQyU,GAAuB,CAC7BC,QAASsD,EAAO4H,gBAChBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,qCAGH7V,QACRC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,sQAON,IAAMgjB,EACJ9mB,EAAM,GAYR,GAVAH,KAAKiJ,oBAAsBge,EAAgB7F,UAUtB,KARrBjhB,EAAQyU,GAAuB,CAC7BC,QAASsD,EAAO4H,gBAChBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,4BAGH7V,OAAc,CACtB,IAAM4e,EACJ/mB,EAAM,GAERH,KAAKwmB,mBAAqBU,EAAeC,UAC3C,CAUA,GAAqB,KARrBhnB,EAAQyU,GAAuB,CAC7BC,QAASsD,EAAO4H,gBAChBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,oCAGH7V,OAAc,CACtB,IAAM8e,EACJjnB,EAAM,GAERH,KAAKymB,wBAA0BW,EAAoBhG,SACrD,CAUA,IARAjhB,EAAQyU,GAAuB,CAC7BC,QAASsD,EAAO4H,gBAChBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,2BAGH7V,OAAS,EAAG,CACpB,IAAM+e,EACJlnB,EAAM,GAERH,KAAK0mB,kBAAoBW,EAAcf,GACzC,CAUA,GAAqB,KARrBnmB,EAAQyU,GAAuB,CAC7BC,QAASsD,EAAO4H,gBAChBpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,4BAGH7V,OAAc,CACtB,IAAMgf,EACJnnB,EAAM,GAERH,KAAK2mB,mBAAqBW,EAAelG,SAC3C,CAEAphB,KAAK8mB,KAAOxB,GAAQnN,EACtB,IA+EF,SApEY,qGAiET,OAjES,8BACV,WACE,IAAMA,EAAS,IAAIoO,GAAkBvmB,KAAKC,MAAMiM,SAC1Cqb,EAAiB,CACrB,CACE5mB,KAAM,KACNO,MAAOiX,EAAOlP,sBAGZue,EAAgB,CACpB,CACE7mB,KAAM,KACNO,MAAOiX,EAAO0O,qBAGZY,EAAgB,CACpB,CACE9mB,KAAM,OACNO,MAAOiX,EAAOqO,qBAGZjL,EAAcpD,EAAO2O,KAAKzmB,KAC9B,SAAC+U,EAAK7U,GACJ,IAAMmnB,EAAE,iBAAannB,EAAQ,GACvBonB,EAAgD,GAqBtD,OApBAvS,EAAIC,YAAYtM,SAAQ,SACtBzI,GAKIA,EAAKkV,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAErBkS,EAAMzlB,KAAK,CACTvB,KAAML,EAAKyU,wBAAwB,GAAGO,YACtCpU,MAAOZ,EAAKoV,oBAAoB,GAAGJ,cAE5BhV,EAAKkV,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,MAE5BkS,EAAMzlB,KAAK,CACTvB,KAAML,EAAKyU,wBAAwB,GAAGO,YACtCpU,MAAOZ,EAAK8gB,WAGlB,KACO,SAAC,EAAW,CAAe/f,OAAQqmB,EAAItnB,WAAYunB,GAAjCvS,EAAI5U,IAC/B,IAGF,OACE,4BACE,SAAC,KAAO,CAACif,YAAY,OAAM,sBAC3B,SAAC,EAAO,CAACzd,SAAUhC,KAAKC,MAAMiM,WAC9B,SAAC,KAAO,CAACuT,YAAY,OAAM,mBAC3B,SAAC,EAAK,CAACzd,SAAUhC,KAAKC,MAAMiM,WAC5B,SAAC,KAAO,CAACuT,YAAY,OAAM,oBAC3B,SAAC,EAAW,CAACrf,WAAYmnB,KACzB,SAAC,KAAO,CAAC9H,YAAY,OAAM,uBAC3B,SAAC,EAAW,CAACrf,WAAYonB,KACzB,SAAC,KAAO,CAAC/H,YAAY,OAAM,uBAC3B,SAAC,EAAW,CAACrf,WAAYqnB,KACzB,SAAC,KAAO,CAAChI,YAAY,OAAM,yBAC1BlE,IAGP,KAAC,EAjES,CAASxZ,EAAAA,WCvXrB,SA3C0B,SAAH,GAQH,IAPlB6lB,EAAS,EAATA,UACAC,EAAS,EAATA,UACAhG,EAAI,EAAJA,KAMA,OACE,gBACE9Q,MAAO,CACLM,SAAU,QACVC,IAAI,GAAD,OAAKuW,EAAS,MACjBC,KAAK,GAAD,OAAKF,EAAS,MAClBG,gBAAiB,4BACjBlD,SAAU,QACVmD,UAAW,OACX5E,QAAS,OACTriB,WAAY,OACZiR,cAAe,QACf,SAED6P,EAAKxhB,KAAI,SAAC+U,EAAK1B,GACd,IAAMtT,EAAagV,EAAIhV,WACvB,OACE,4BACE,mCAAWgV,EAAI7U,SACdH,EAAWC,KAAI,SAAC4nB,GACf,OACE,2BACGA,EAAKtnB,KAAI,MAAG,iBAAMoQ,MAAO,CAAEhQ,WAAY,KAAM,SAAEknB,EAAK/mB,UAD7C+mB,EAAKtnB,KAAOyU,EAAI8S,OAI9B,MARQ9S,EAAI8S,OAYlB,KAGN,ECkJA,SA3KuB,SAAH,GAYmE,IAAD,IAXpFrG,EAAI,EAAJA,KACA7f,EAAQ,EAARA,SACAmmB,EAAI,EAAJA,KACAC,EAAG,EAAHA,IACAvL,EAAc,EAAdA,eAUMtV,EAAWvF,EAASA,EAASsG,OAAS,IAKK,QAA7C,EAAqC,QAArC,EAACf,EAAS8gB,mCAA2B,aAApC,EAAsC/f,cAAM,QAAI,GAAK,GACxDC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,4DAIN,IAGIqkB,EAEoB,IALlBC,EAAchhB,EAAS8gB,4BAA4B,IAEzDviB,QAAQ0iB,MAAM,mCAGDzoB,IAATooB,GACFG,EAAW,IAAIG,EAAAA,GAAAA,UAAAA,oCAAiD,CAC9D9nB,KAAe,QAAX,EAAEwnB,EAAKxnB,YAAI,QAAI,YACnB+nB,UAAqB,QAAZ,EAAEP,EAAKQ,aAAK,QAAI,MAG3B7iB,QAAQD,KAAK,iCACbyiB,EAAW,IAAIG,EAAAA,GAAAA,UAAAA,oCAAiD,CAC9D9nB,KAAM,eAIV,IAAMioB,EAAqB,IAAIH,EAAAA,GAAAA,UAAAA,mBAAgC,CAC7DI,sBAAuB,IAAIJ,EAAAA,GAAAA,UAAAA,gBAA6B,CACtDhD,aAAc,IAAIgD,EAAAA,GAAAA,OAAAA,aAAuB,CACvCvnB,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,WAEX2K,8BAA+BR,IAEjCS,sBAAuB,IAAIN,EAAAA,GAAAA,UAAAA,gBAA6B,CACtDhD,aAAc,IAAIgD,EAAAA,GAAAA,OAAAA,aAAuB,CACvCvnB,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,WAEX2K,8BAA+B,IAAIL,EAAAA,GAAAA,UAAAA,oCAAiD,CAClFjoB,IAAK4nB,EAAI5nB,IACTwoB,iBAAkB,8BAClBC,UAAWb,EAAIznB,SAGnBuoB,eAAgB,IAAIT,EAAAA,GAAAA,UAAAA,eAA4B,CAC9CU,aAAc,IAAIV,EAAAA,GAAAA,OAAAA,aAAuB,CACvCvnB,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,aAEXiL,4BAA6B,IAAIX,EAAAA,GAAAA,UAAAA,uBAAoC,CACnEjoB,IAAK+nB,EAAY3B,YACjBld,WAAY6e,EAAY1B,mBACxBhf,oBAAqBN,EAAS0B,0BAKpCnD,QAAQ0iB,MAAM,+BAEd,IADA,IAAMa,EAA4D,GACzD3V,EAAI,EAAGA,EAAImO,EAAKvZ,OAAQoL,IAAK,CAAC,IAAD,EAC9B0B,EAAMyM,EAAKnO,GACjB,GAAKmJ,EAAezC,IAAIhF,EAAI5U,KAA5B,CAIA,IAAI8oB,EAAclU,EAAIC,YAAY1O,MAAK,SAACrG,GACtC,MAAqD,WAA9CA,EAAKyU,wBAAwB,GAAGC,SACzC,SAEoBjV,IAAhBupB,GACF/gB,GAAAA,QACErD,EACA,IAAIhB,EACFD,EAA+B,0CAAD,OACY4C,OAAOuO,EAAI5U,KAAI,OAO/D,IAAM+oB,EAAqB,IAAId,EAAAA,GAAAA,UAAAA,mBAAgC,CAC7DjoB,IAA+B,QAA5B,EAAE4U,EAAIgR,WAAWC,mBAAW,QAAIjR,EAAI5U,IACvCkJ,WAAW,QAAD,OAAUgK,EAAI,KAqBpB2M,EAlBQ,IAAIoI,EAAAA,GAAAA,UAAAA,+CAA4D,CAC5Ec,mBAAAA,EACAC,iBAAkB,IAAIf,EAAAA,GAAAA,aAAAA,cAA8B,CAClDjK,YAAapJ,EAAImJ,SAASC,YAC1BC,YAAarJ,EAAImJ,SAASE,YAC1B7W,oBAAqBwN,EAAImJ,SAAS3W,sBAEpC0hB,YAAa,IAAIb,EAAAA,GAAAA,OAAAA,aAAuB,CACtCvnB,MAAOooB,EAAY5T,oBAAoB,GAAGV,UAC1CoJ,iBAAkBkL,EAAY5T,oBAAoB,GAAGT,uBACrDkJ,QAASmL,EAAY5T,oBAAoB,GAAGJ,cAE9CmU,uBAAwBrU,EAAIC,YAAYxL,QAAO,SAACvJ,GAC9C,MAAqD,WAA9CA,EAAKyU,wBAAwB,GAAGC,SACzC,IACAqL,aAAcjL,EAAIiL,eAIpBA,EAAa,GAAGT,wBAA0B,CACxC,CACE8J,gBAAiB,OACjB7J,mBAAoB,SAGxBwJ,EAAoBnnB,KAAI,MAAxBmnB,GAAmB,QAAShJ,GAhD5B,CAiDF,CAEAva,QAAQ0iB,MAAM,8CACd,IAAMmB,EAAoB,IAAIlB,EAAAA,GAAAA,UAAAA,kBAA+B,CAC3DmB,oCAAqC,IAAInB,EAAAA,GAAAA,UAAAA,oCACvC,CAAC,GAEHG,mBAAAA,EACAiB,kBAAmB,IAAIpB,EAAAA,GAAAA,OAAAA,aAAuB,CAC5CvnB,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,wBAEXkL,oBAAAA,IAgBF,OAbAvjB,QAAQyF,KAAK,uCAaN,CACLyM,sBAAsB,EACtB8R,gBAdc,IAAIrB,EAAAA,GAAAA,UAAAA,kBAA+B,CACjD5T,QAAS8U,EAAkB,GAC3BI,SAAU,CAACxiB,GACX8E,kBAAmB2d,EAAAA,GAAAA,oBAAAA,MACnBC,aAAc,EACdC,kBAAmB,aACnBC,eAAgBH,EAAAA,GAAAA,oBAAAA,MAChBI,eAAgB,EAChBC,aAAc,8BACdC,sBAAkBvqB,IAOtB,EC3KA,SAPwB,CACtBwqB,UAAAA,GACAC,gBAAAA,GACAC,aAAAA,GACAC,cAAAA,IAYF,SAASH,GAAgC5lB,EAAmBC,GAAiD,IAAD,OAC1G,GAAI5E,KAAK0qB,cAAc/lB,GAAY,CACjC,IAAMgmB,GAAalqB,EAAAA,EAAAA,KACbmqB,EAAe,CAAElD,GAAIiD,EAAY/lB,SAAAA,GASvC,OANIe,MAAMuT,QAAQlZ,KAAK6qB,UAAUlmB,IAC/B3E,KAAK6qB,UAAUlmB,GAAWzC,KAAK0oB,GAE/B5qB,KAAK6qB,UAAUlmB,GAAa,CAACimB,GAGxB,CACLE,YAAa,kBAAM,EAAKL,aAAa9lB,EAAWgmB,EAAW,EAE/D,CACE,MAAM,IAAIrmB,MAAM,SAAD,OAAUK,EAAS,mBAEtC,CASA,SAAS8lB,GAAmC9lB,EAAmBgmB,GAC7D,QAAkC5qB,IAA9BC,KAAK6qB,UAAUlmB,GAAnB,CAIA,IAAMkmB,EAAY7qB,KAAK6qB,UAAUlmB,GAC7BgB,MAAMuT,QAAQ2R,GAChB7qB,KAAK6qB,UAAUlmB,GAAakmB,EAAUhhB,QAAO,YAAK,SAAF6d,KAAgBiD,CAAU,IAE1E3qB,KAAK6qB,UAAUlmB,GAAa,EAN9B,CAQF,CAQA,SAAS+lB,GAAoC/lB,GAC3C,OAAO6E,OAAO2P,OAAOnZ,KAAK+qB,QAAQ7kB,SAASvB,EAC7C,CASA,SAAS6lB,GAAsC7lB,EAAmBqmB,GAChE,IAAMC,EAAezhB,OAAOC,KAAKzJ,KAAK6qB,WAAWviB,OAAS,EACpD4iB,EAAevlB,MAAMuT,QAAQlZ,KAAK6qB,UAAUlmB,IAE9CsmB,GAAgBC,GAClBlrB,KAAK6qB,UAAUlmB,GAAWoE,SAAQ,SAACoiB,GACjCA,EAASvmB,SAASomB,EACpB,GAEJ,CCvDA,SAhCA,SAA+B9hB,EAA2BkiB,GACxD,IAAMC,EAAwB,GACxBC,EAAe,IAAI1e,IAEzB,OAAO,gBACL1D,kBAAAA,EACA0C,SAAU,GACV2f,aAAc,EACdC,kBAAmB,GACnBC,WAAY,GACZC,WAAY,IACO,OAAhBN,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAmB,IAAE,IACxBC,UAAAA,EACAM,YAAa,SAAUC,GACrB5rB,KAAK6rB,aAAa,CAACD,GACrB,EACAC,aAAc,SAAUC,GACtB,IAAK,IAAIpY,EAAI,EAAGqY,EAAMD,EAAaxjB,OAAQoL,EAAIqY,EAAKrY,IAAK,CACvD,IAAMsY,EAAWF,EAAapY,GAEzB4X,EAAalR,IAAI4R,EAASlc,kBAC7Bwb,EAAapd,IAAI8d,EAASlc,eAAgBkc,GAC1CX,EAAUnpB,KAAK8pB,GAEnB,CACF,EACAC,YAAa,SAAUnc,GACrB,OAAOwb,EAAazd,IAAIiC,EAC1B,GAEJ,ECgCA,SA5DA,SAA8BjE,GAC5B,MAAO,CACLA,iBAAAA,EACAqgB,iBAAkB,GAClB1oB,UAAW,GACXC,YAAa,GACbK,UAAW,GACXF,gBAAiB,GACjBuoB,aAAc,EACdC,kBAAmB,GACnBC,UAAU,EACVniB,OAAQ,GAIRoiB,oBAAqB,SAAUN,GAC7BhsB,KAAKusB,qBAAqB,CAACP,GAC7B,EAMAO,qBAAsB,SAAUlB,GAC9B,IAAQniB,EAAsBmiB,EAAU,GAAhCniB,kBAEsB,KAA1BlJ,KAAKksB,uBAAqDnsB,IAA1BC,KAAKksB,mBACvClsB,KAAKksB,iBAAmBb,EAAU,GAAGa,kBAGvC,IAAIhiB,EAASlK,KAAKkK,OAAOvD,MACvB,SAACC,GAAC,OAAKA,EAAEsC,oBAAsBA,CAAiB,IAGpC,MAAVgB,IACFA,EAASsiB,GAAqBtjB,EAAmBmiB,GACjDrrB,KAAKkK,OAAOhI,KAAKgI,IAGnBA,EAAO2hB,aAAaR,EACtB,EAEAoB,kBAAmB,SACjBvjB,EACAwjB,GAEA,IAAIC,EAAiB3sB,KAAKkK,OAAOvD,MAC/B,SAACC,GAAC,OAAKA,EAAEsC,oBAAsBA,CAAiB,IAGlD,GAAsB,MAAlByjB,EACFA,EAAiBnjB,OAAOojB,OAAOD,EAAgBD,OAC1C,CACL,IAAMxiB,EAASsiB,GAAqBtjB,GACpClJ,KAAKkK,OAAOhI,KAAKsH,OAAOojB,OAAO1iB,EAAQwiB,GACzC,CACF,EAEJ,ECzDO,IAAM3B,GAAS,CACpB8B,YAAa,uCACbC,gBAAiB,2CACjBC,aAAc,wCACdC,eAAgB,2CAiDZC,GAAgB,CACpBC,QAAS,IAOX,SAASC,GAAWthB,GAClB,OAAOohB,GAAOC,QAAQvmB,MACpB,SAACymB,GAAM,OAAKA,EAAOvhB,mBAAqBA,CAAgB,GAE5D,CAEA,SAASwhB,GAAYxhB,EAA0B3C,GAC7C,IAAMokB,EAAQH,GAAUthB,GAExB,GAAa,MAATyhB,EAIJ,OAAOA,EAAMpjB,OAAOvD,MAClB,SAAC4mB,GAAO,OAAKA,EAAQrkB,oBAAsBA,CAAiB,GAEhE,CAmFA,IAAMskB,GAA6C,CACjDzC,OAAAA,GACAF,UAAW,CAAC,EACZc,YAAW,SAAE8B,GACX,IAAIC,EAaAC,EAVAF,aAA4CG,YAK9CF,EAJkBjY,EAAAA,GAAAA,KAAAA,aAAAA,SAChBgY,GAG2BI,KAE7BH,EAAmBD,EAYrB,IAAQ5hB,GAHN8hB,EAJI,sBAAuBD,EAINA,EAFnBjY,EAAAA,GAAAA,KAAAA,oBAAAA,kBAAiDiY,IAK7C7hB,iBAEJyhB,EAAQL,GAAOC,QAAQvmB,MACzB,SAAC2mB,GAAK,OAAKA,EAAMzhB,mBAAqBA,CAAgB,IAG3C,MAATyhB,IACFL,GAAOC,QAAQhrB,KAAK4rB,GAAoBjiB,IACxCyhB,EAAQL,GAAOC,QAAQD,GAAOC,QAAQ5kB,OAAS,IAGjDglB,EAAMhB,oBAAoBqB,EAC5B,EACA9B,aAAY,SAAER,GAAkC,IAAvB0C,EAAY,wDACnC,EAAgD1C,EAAU,GAAlDxf,EAAgB,EAAhBA,iBAAkB3C,EAAiB,EAAjBA,kBAEtBokB,EAAQL,GAAOC,QAAQvmB,MACzB,SAAC2mB,GAAK,OAAKA,EAAMzhB,mBAAqBA,CAAgB,IAG3C,MAATyhB,IACFL,GAAOC,QAAQhrB,KAAK4rB,GAAoBjiB,IACxCyhB,EAAQL,GAAOC,QAAQD,GAAOC,QAAQ5kB,OAAS,IAGjDglB,EAAMf,qBAAqBlB,GAM3BrrB,KAAKwqB,gBAAgBO,GAAO+B,gBAAiB,CAC3CjhB,iBAAAA,EACA3C,kBAAAA,EACA6kB,aAAAA,GAEJ,EACAC,qBAAoB,SAAEtB,GACpB,IAAQ7gB,EAAwC6gB,EAAxC7gB,iBAAkB3C,EAAsBwjB,EAAtBxjB,kBAE1B,GAAc,MADCmkB,GAAWxhB,EAAkB3C,GAC5C,CAIA,IAAMokB,EAAQH,GAAUthB,GACX,MAATyhB,GACFA,EAAMb,kBAAkBvjB,EAAmBwjB,EAJ7C,CAMF,EACAuB,kBAAiB,SAAEC,GAA8C,IAAvBH,EAAY,wDACpD,QAC4BhuB,IAA1BmuB,GACiC,IAAjCA,EAAsB5lB,aACOvI,IAA7BmuB,EAAsB,GAHxB,CAQA,IAAQriB,EAAqBqiB,EAAsB,GAA3CriB,iBACJyhB,EAAQH,GAAUthB,GACT,MAATyhB,KACFA,EAAQQ,GAAoBjiB,IAEtBqgB,iBAAmBgC,EAAsB,GAAGhC,iBAC7B,OAArBgC,QAAqB,IAArBA,GAAAA,EAAuBnlB,SAAQ,SAACzI,GAAU,IAAD,EACuC,OAAhEP,IAAVutB,GAA+C,QAAxB,EAACA,EAAMlB,yBAAiB,OAAvB,EAAyBlmB,SAAS5F,EAAKsL,YAC1C,QAAvB,EAAA0hB,EAAMlB,yBAAiB,OAAvB,EAAyBlqB,KAAK5B,EAAKsL,UAEvC,IACA0hB,EAAMa,2BAA6BD,EAAsB5lB,OACzD2kB,GAAOC,QAAQhrB,KAAKorB,IAGtBY,EAAsBnlB,SAAQ,SAACmB,GAAY,IAAD,EAChChB,EAAsBgB,EAAtBhB,kBACH,QAAL,EAAAokB,SAAK,OAAL,EAAOb,kBAAkBvjB,EAAmBgB,EAC9C,IAEAlK,KAAKwqB,gBAAgBO,GAAOgC,aAAc,CACxClhB,iBAAAA,EACAqiB,sBAAAA,EACAH,aAAAA,GAzBF,CA2BF,EACAK,SAAQ,SAAEd,GACR,IAAQzhB,EAAqByhB,EAArBzhB,iBAEFwiB,EAAgBpB,GAAOC,QAAQvmB,MACnC,SAAC2mB,GAAK,OAAKA,EAAMzhB,mBAAqBA,CAAgB,IAGxD,GAAqB,MAAjBwiB,EAAuB,CACzB,IAAMC,EAAWR,GAAoBjiB,GAErCyiB,EAAS9qB,UAAY8pB,EAAM9pB,UAC3B8qB,EAAS7qB,YAAc6pB,EAAM7pB,YAC7B6qB,EAASxqB,UAAYwpB,EAAMxpB,UAC3BwqB,EAASlC,kBAAoBkB,EAAMlB,kBACnCkC,EAASpC,iBAAmBoB,EAAMpB,iBAClCoC,EAAS1qB,gBAAkB0pB,EAAM1pB,gBACjC0qB,EAASnC,aAAemB,EAAMnB,aAE9Bc,GAAOC,QAAQhrB,KAAKosB,EACtB,CACF,EACAC,qBA1OF,WACE,OAAOtB,GAAOC,QAAQ7sB,KAAI,SAAC+sB,GAAM,OAAKA,EAAOvhB,gBAAgB,GAC/D,EAyOE2iB,SAAUrB,GACVsB,UAAWpB,GACXpB,YAvNF,SACEpgB,EACA3C,EACA4G,GAEA,IAAM5F,EAASmjB,GAAWxhB,EAAkB3C,GAE5C,GAAc,MAAVgB,EAIJ,OAAOA,EAAO+hB,YAAYnc,EAC5B,EA4ME4e,qBA1MF,SAAgCC,GAAwC,IACpC,EADmC,UACjD1B,GAAOC,SAAO,IAAlC,2BAAoC,CAAC,IACF,EADxBI,EAAK,kBACOA,EAAMpjB,QAAM,IAAjC,2BAAmC,CAAC,IACK,EAD9BA,EAAM,kBACQA,EAAOmhB,WAAS,IAAvC,2BAAyC,CAAC,IAA/BW,EAAQ,QACjB,GAAIA,EAAS2C,UAAYA,EACvB,OAAO3C,CAEX,CAAC,+BACH,CAAC,+BACH,CAAC,+BACH,EAiME4C,wBAxLF,SACE/iB,EACA3C,EACAlH,GAEA,IAAMsrB,EAAQH,GAAUthB,GAExB,GAAa,MAATyhB,EAAJ,CAIA,IAAMpjB,EAASojB,EAAMpjB,OAAOvD,MAC1B,SAAC4mB,GAAO,OAAKA,EAAQrkB,oBAAsBA,CAAiB,IAG9D,GAAc,MAAVgB,EAIkBA,EAAdmhB,UACEtiB,SAAQ,SAACijB,GACjBxiB,OAAOC,KAAKzH,GAAU+G,SAAQ,SAACoE,GACA,kBAAlBnL,EAASmL,GAClB6e,EAAS7e,IAAI,kBAAQ6e,EAAS7e,IAASnL,EAASmL,IAEhD6e,EAAS7e,GAAOnL,EAASmL,EAE7B,GACF,GAnBA,CAoBF,EA4JEqd,gBAAe,SAAE7lB,EAAmBqlB,GACpC,GAeF,SAP2BxgB,OAAOojB,OAChC,CAAC,EACDY,GACAqB,I,eCrQF,SAjCU,qGA8BP,OA9BO,8BACR,WACE,IAUIztB,EAVA0tB,EAAS,KAgBb,YAf0B/uB,IAAtBC,KAAKC,MAAM6uB,SACbA,EAAS9uB,KAAKC,MAAM6uB,OAAOzuB,KAAI,SAACC,EAAMC,GAAa,OACjD,SAAC,EAAW,CAEVc,OAAQf,EAAKK,KACbP,WAAYE,EAAKF,YAFZG,EAGL,KAKJa,OADsBrB,IAApBC,KAAKC,MAAMkE,KACR,UAAMnE,KAAKC,MAAMkE,KAAI,aAAKnE,KAAKC,MAAMyJ,YAElC1J,KAAKC,MAAMyJ,YAGnB,UAAC,WAAS,YACR,SAAC,EAAW,CACVrI,OAAQD,EACRhB,WAAYJ,KAAKC,MAAMG,WACvBF,cAAeF,KAAKC,MAAMC,cAAc,SAEvC4uB,IAEF9uB,KAAKC,MAAM6B,WARE9B,KAAKC,MAAMO,IAW/B,KAAC,EA9BO,CAASuB,EAAAA,WCdL,IAAI0T,EAAAA,GAAAA,OAAAA,aAA6B,CAC3CvU,MAAO,WACPkd,iBAAkB,MAClBD,QAAS,wBAED,IAAI1I,EAAAA,GAAAA,OAAAA,aAA6B,CACzCvU,MAAO,YACPkd,iBAAkB,MAClBD,QAAS,gCAED,IAAI1I,EAAAA,GAAAA,OAAAA,aAA6B,CACzCvU,MAAO,YACPkd,iBAAkB,MAClBD,QAAS,sBAEC,IAAI1I,EAAAA,GAAAA,OAAAA,aAA6B,CAC3CvU,MAAO,UACPkd,iBAAkB,MAClBD,QAAS,wBArBN,IAyBM4Q,GAET,CACFC,SAAU,IAAIvZ,EAAAA,GAAAA,OAAAA,aAA6B,CACzCvU,MAAO,YACPkd,iBAAkB,MAClBD,QAAS,oBAEX8Q,iBAAkB,IAAIxZ,EAAAA,GAAAA,OAAAA,aAA6B,CACjDvU,MAAO,YACPkd,iBAAkB,MAClBD,QAAS,sBAIA+Q,IAEZ,QACCC,oBAAqB,IAAI1Z,EAAAA,GAAAA,OAAAA,aAA6B,CACpDvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,wBAEXiR,2BAA4B,IAAI3Z,EAAAA,GAAAA,OAAAA,aAA6B,CAC3DvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,+BAEXkR,gBAAiB,IAAI5Z,EAAAA,GAAAA,OAAAA,aAA6B,CAChDvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,oBAEXmR,uBAAwB,IAAI7Z,EAAAA,GAAAA,OAAAA,aAA6B,CACvDvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,2BAEXoR,4BAA6B,IAAI9Z,EAAAA,GAAAA,OAAAA,aAA6B,CAC5DvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,gCAEXqR,kBAAmB,IAAI/Z,EAAAA,GAAAA,OAAAA,aAA6B,CAClDvU,MAAO,WACPkd,iBAAkB,MAClBD,QAAS,wBAEXsR,gBAAiB,IAAIha,EAAAA,GAAAA,OAAAA,aAA6B,CAChDvU,MAAO,SACPkd,iBAAkB,MAClBD,QAAS,oBAEXuR,MAAO,IAAIja,EAAAA,GAAAA,OAAAA,aAA6B,CACtCvU,MAAO,YACPkd,iBAAkB,MAClBD,QAAS,qBAER4Q,ICyDL,SA3HkB,qGAwHf,OAxHe,8BAChB,WAA4B,IAAD,SACzB,QAA4BhvB,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAET,IAAM2tB,EAAsB3vB,KAAKC,MAAM+B,SAASqmB,4BAC9CroB,KAAKC,MAAMM,OAEPH,EAA0B,GAOhC,QANqDL,IAAjD4vB,EAAoBC,0BACtBxvB,EAAW8B,KAAK,CACdvB,KAAM,cACNO,MAAOyuB,EAAoBC,gCAG8B7vB,IAAzD4vB,EAAoBE,kCAClBF,EAAoBE,iCAAiCvnB,OAAS,EAAG,CACnE,IAAMwnB,EAAaH,EAAoBE,iCACvCzvB,EAAW8B,KAAK,CACdvB,KAAM,uBACNO,MAAO4uB,EAAWzvB,KAAI,SAAAC,GAAI,OAAIA,EAAKgV,WAAW,IAAE5S,KAAK,OAEzD,EAK+C,QADS,EACxDitB,EAAoBI,mCAA2B,QAAI,IAEpChnB,SACf,SAAC4Q,EAAwCpZ,GACvCoZ,EAAKqW,2CAA2CjnB,SAAQ,SACtDzI,EAOAC,GAEA,IAAMI,EAAO,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CAC5CvU,MAAOZ,EAAKyU,wBAAwB,GAAGC,UACvCoJ,iBACE9d,EAAKyU,wBAAwB,GAAGE,uBAClCkJ,QAAS7d,EAAKyU,wBAAwB,GAAGO,cAE3C,GAAIhV,EAAKkV,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAE1D,IAAMvU,EAAQ,IAAIuU,EAAAA,GAAAA,OAAAA,aAA6B,CAC7CvU,MAAOZ,EAAKoV,oBAAoB,GAAGV,UACnCoJ,iBACE9d,EAAKoV,oBAAoB,GAAGT,uBAC9BkJ,QAAS7d,EAAKoV,oBAAoB,GAAGJ,cAElC3U,EAAKwf,OAAO+O,GAA6BG,mBAE1C1uB,EAAKwf,OAAO+O,GAA6BM,mBAEzCpvB,EAAW8B,KAAK,CACdvB,KAAM,oBACNO,MAAOA,EAAMoU,cAGf3U,EAAKwf,OAAO+O,GAA6BF,UAEzC5uB,EAAW8B,KAAK,CACdvB,KAAM,kBACNO,MAAOA,EAAMoU,cAGf3U,EAAKwf,OAAO+O,GAA6BD,kBAEzC7uB,EAAW8B,KAAK,CACdvB,KAAM,0BACNO,MAAOA,EAAMoU,cAGf3U,EAAKwf,OAAO+O,GAA6BQ,QACzC,EAAKzvB,MAAMgwB,WAEX7vB,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOA,EAAMoU,cAIrB,MAAWhV,EAAKkV,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,OAG1B9U,EAAKwf,OAAO+O,GAA6BQ,QACzC,EAAKzvB,MAAMgwB,UAEX7vB,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOZ,EAAK8gB,YAGdzgB,EAAKwf,OAAO+O,GAA6BE,6BAEzChvB,EAAW8B,KAAK,CACdvB,KAAM,kBACNO,MAAOZ,EAAK8gB,YAIpB,GACF,IAEF,IAAM5gB,EAAMmvB,EAAoB/I,YAC1Bld,EAAaimB,EAAoB9I,mBACvC,OACE,SAAC,GAAI,CACHrmB,IAAKA,EAELkJ,WAAYA,EACZtJ,WAAYA,EACZF,eAAa,GAHRM,EAMX,KAAC,EAxHe,CAASuB,EAAAA,WC0B3B,SA/BkB,qGA4Bf,OA5Be,8BAChB,WAA4B,IAAD,SACzB,QAA4BhC,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAOT,IACM7B,GAD8D,QAAlD,EAAGH,KAAKC,MAAM+B,SAASqmB,mCAA2B,QAAI,IAC7ChoB,KACzB,SAACC,EAAwCC,GACvC,OACE,SAAC,GAAY,CACXA,MAAOA,EAEPyB,SAAU,EAAK/B,MAAM+B,SACrBiuB,UAAW,EAAKhwB,MAAMgwB,WAFjB3vB,EAAKsmB,YAKhB,IAEF,OACE,SAAC,MAAI,CAAC7V,MAAO,CAAEmf,UAAW,QAAS,SAChC/vB,GAGP,KAAC,EA5Be,CAAS4B,EAAAA,WC+B3B,SAjCe,qGA8BZ,OA9BY,8BACb,WACE,QAA4BhC,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAET,IAAM5B,EAAa,CACjB,CACEO,KAAM,eACNO,MAAOlB,KAAKC,MAAM+B,SAASmuB,cAE7B,CACExvB,KAAM,aACNO,MAAOlB,KAAKC,MAAM+B,SAASouB,uBAE7B,CACEzvB,KAAM,uBACNO,MAAOlB,KAAKC,MAAM+B,SAASquB,oBAE7B,CACE1vB,KAAM,oBACNO,MAAOlB,KAAKC,MAAM+B,SAASsuB,mBAS/B,OAN2C,MAAvCtwB,KAAKC,MAAM+B,SAASuuB,iBACtBnwB,EAAW8B,KAAK,CACdvB,KAAM,mBACNO,MAAOlB,KAAKC,MAAM+B,SAASuuB,mBAGxB,SAAC,EAAW,CAACnwB,WAAYA,EAAYF,eAAa,GAC3D,KAAC,EA9BY,CAAS6B,EAAAA,W,uKCotBxB,SAvpBqB,0CACnB,WAAa9B,GAA8B,IAAD,EAoBvC,OApBuC,gBACxC,cAAMA,IACD6gB,uBAAyB,EAAKA,uBAAuBzI,MAAK,WAC/D,EAAKD,oBAAsB,EAAKA,oBAAoBC,MAAK,WACzD,EAAKsM,kBAAoB,EAAKA,kBAAkBtM,MAAK,WACrD,EAAKqM,uBAAyB,EAAKA,uBAAuBrM,MAAK,WAC/D,EAAKuM,uBAAyB,EAAKA,uBAAuBvM,MAAK,WAC/D,EAAKC,mBAAqB,EAAKA,mBAAmBD,MAAK,WACvD,EAAKE,mBAAqB,EAAKA,mBAAmBF,MAAK,WACvD,EAAKG,mBAAqB,EAAKA,mBAAmBH,MAAK,WACvD,EAAKmY,cAAgB,EAAKA,cAAcnY,MAAK,WAC7C,EAAKoY,iBAAmB,EAAKA,iBAAiBpY,MAAK,WACnD,EAAKjG,MAAQ,CACXuD,UAAW,EAAK1V,MAAM0V,UACtB+C,aAAc,CACZC,QAAS,EAAK1Y,MAAM2Y,aAAaD,QACjC1G,MAAO,EAAKhS,MAAM2Y,aAAa3G,MAC/Bye,wBAAyB,EAAKzwB,MAAM2Y,aAAa8X,wBACjDjN,YAAa,EAAKxjB,MAAM2Y,aAAa6K,cAExC,CACH,CA8nBC,OA9nBA,0CAED,SACEkN,EACAC,GAEI5wB,KAAKC,MAAM2Y,eAAiB+X,EAAc/X,cAC5C5Y,KAAKuS,SAAS,CACZmG,aAAc1Y,KAAKC,MAAM2Y,cAG/B,GAAC,oCAED,SACEiB,EACA9C,GAEA,IAAMrN,EAAa1J,KAAKC,MAAM4wB,YAAYnnB,WAC1C1J,KAAKuS,SAAS,CACZoD,UAAWkE,IAEb7Z,KAAKC,MAAM8gB,mBAAmB,CAC5B+P,sBAAuBpnB,EACvBiM,UAAWkE,GAEf,GAAC,iCAED,SACE3Y,GAEA,GAAa,MAATA,EAAe,CACjB,IAAMwI,EAAa1J,KAAKC,MAAM4wB,YAAYnnB,WAC1C1J,KAAKC,MAAM8Y,cAAc,CACvB+X,sBAAuBpnB,EACvBsP,aAAc,CAAEL,QAASzX,KAE3BlB,KAAKuS,UAAS,SAAAH,GAAK,MAAK,CACtBsG,aAAc,CACZzG,MAAOG,EAAMsG,aAAazG,MAC1Bye,wBAAyBte,EAAMsG,aAAagY,wBAC5C/X,QAASzX,EACTuiB,YAAarR,EAAMsG,aAAa+K,aAEnC,GACH,CACF,GAAC,gCAED,SACEviB,GAEA,IAAMwI,EAAa1J,KAAKC,MAAM4wB,YAAYnnB,WAC1C,GAAa,MAATxI,QAAmDnB,IAAlCC,KAAKoS,MAAMsG,aAAazG,MAAqB,CAChE,IAAMA,EAAQ,CACZtM,MAAMuT,QAAQhY,GAASA,EAAM,GAAKA,EAClClB,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BjS,KAAKoS,MAAMsG,aAAazG,MAAM,IAEhCjS,KAAKuS,UAAS,SAAAH,GAAK,MAAK,CACtBsG,aAAc,CACZzG,MAAOA,EACPye,wBAAyBte,EAAMsG,aAAagY,wBAC5C/X,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAarR,EAAMsG,aAAa+K,aAEnC,IACDzjB,KAAKC,MAAM8Y,cAAc,CACvB+X,sBAAuBpnB,EACvBsP,aAAc,CAAE/G,MAAOA,IAE3B,CACF,GAAC,gCAED,SACE/Q,GAEA,IAAMwI,EAAa1J,KAAKC,MAAM4wB,YAAYnnB,WAC1C,GAAa,MAATxI,QAAmDnB,IAAlCC,KAAKoS,MAAMsG,aAAazG,MAAqB,CAChE,IAAMA,EAAQ,CACZjS,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BtM,MAAMuT,QAAQhY,GAASA,EAAM,GAAKA,EAClClB,KAAKoS,MAAMsG,aAAazG,MAAM,IAEhCjS,KAAKuS,UAAS,SAAAH,GAAK,MAAK,CACtBsG,aAAc,CACZzG,MAAOA,EACPye,wBAAyBte,EAAMsG,aAAagY,wBAC5C/X,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAarR,EAAMsG,aAAa+K,aAEnC,IACDzjB,KAAKC,MAAM8Y,cAAc,CACvB+X,sBAAuBpnB,EACvBsP,aAAc,CAAE/G,MAAOA,IAE3B,CACF,GAAC,gCAED,SACE/Q,GAEA,IAAMwI,EAAa1J,KAAKC,MAAM4wB,YAAYnnB,WAC1C,GAAa,MAATxI,QAAmDnB,IAAlCC,KAAKoS,MAAMsG,aAAazG,MAAqB,CAChE,IAAMA,EAAQ,CACZjS,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BjS,KAAKoS,MAAMsG,aAAazG,MAAM,GAC9BtM,MAAMuT,QAAQhY,GAASA,EAAM,GAAKA,GAEpClB,KAAKuS,UAAS,SAAAH,GAAK,MAAK,CACtBsG,aAAc,CACZzG,MAAOA,EACPye,wBAAyBte,EAAMsG,aAAagY,wBAC5C/X,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAarR,EAAMsG,aAAa+K,aAEnC,IACDzjB,KAAKC,MAAM8Y,cAAc,CACvB+X,sBAAuBpnB,EACvBsP,aAAc,CAAE/G,MAAOA,IAE3B,CACF,GAAC,8BAED,WACE,IAAM8e,EAAU,SAAC5X,GAIf,MAAO,KAAO,UAHJA,EAAO,IAGe,KAFtBA,EAAO,IAE2B,GADlCA,EAAO,IACmClF,SAAS,IAAI5N,MAAM,EACzE,EAEA,OAAuD,MAAnDrG,KAAKC,MAAM2Y,aAAa8X,wBACT1wB,KAAKC,MAAM2Y,aAAa8X,wBAAwB1G,KACjD3pB,KAAI,SAAA8Y,GAAM,OAAI4X,EAAQ5X,EAAO,IACH,MAAjCnZ,KAAKoS,MAAMsG,aAAazG,MAC1B,CACL,UACA8e,EAAQ/wB,KAAKoS,MAAMsG,aAAazG,QAG3B,CAAC,QAAS,QAErB,GAAC,oCAED,SACE/Q,GAEA,IAAMwI,EAAa1J,KAAKC,MAAM4wB,YAAYnnB,WAC7B,MAATxI,QAAyDnB,IAAxCC,KAAKoS,MAAMsG,aAAa+K,cAC3CzjB,KAAKuS,UAAS,SAAAH,GACZ,YAAuCrS,IAAnCqS,EAAMsG,aAAa+K,YACd,CACL/K,aAAc,CACZzG,MAAOG,EAAMsG,aAAazG,MAC1Bye,wBAAyBte,EAAMsG,aAAagY,wBAC5C/X,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAa,CAACviB,EAAOkR,EAAMsG,aAAa+K,YAAY,MAIjD,CACL/K,aAAc,CACZzG,MAAOG,EAAMsG,aAAazG,MAC1Bye,wBAAyBte,EAAMsG,aAAagY,wBAC5C/X,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAarR,EAAMsG,aAAa+K,aAIxC,IACAzjB,KAAKC,MAAM8Y,cAAc,CACvB+X,sBAAuBpnB,EACvBsP,aAAc,CACZyK,YAAa,CACXviB,EACAlB,KAAKoS,MAAMsG,aAAa+K,YAAY,OAK9C,GAAC,oCAED,SACEviB,GAEA,IAAMwI,EAAa1J,KAAKC,MAAM4wB,YAAYnnB,WAC7B,MAATxI,QAAyDnB,IAAxCC,KAAKoS,MAAMsG,aAAa+K,cAC3CzjB,KAAKuS,UAAS,SAAAH,GACZ,YAAuCrS,IAAnCqS,EAAMsG,aAAa+K,YACd,CACL/K,aAAc,CACZzG,MAAOG,EAAMsG,aAAazG,MAC1Bye,wBAAyBte,EAAMsG,aAAagY,wBAC5C/X,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAa,CAACrR,EAAMsG,aAAa+K,YAAY,GAAIviB,KAI9C,CACLwX,aAAc,CACZzG,MAAOG,EAAMsG,aAAazG,MAC1Bye,wBAAyBte,EAAMsG,aAAagY,wBAC5C/X,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAarR,EAAMsG,aAAa+K,aAIxC,IACAzjB,KAAKC,MAAM8Y,cAAc,CACvB+X,sBAAuBpnB,EACvBsP,aAAc,CACZyK,YAAa,CACXzjB,KAAKoS,MAAMsG,aAAa+K,YAAY,GACpCviB,MAKV,GAAC,+BAED,SACEiY,GAEA,IAAMzP,EAAa1J,KAAKC,MAAM4wB,YAAYnnB,WAC1C1J,KAAKuS,UAAS,SAAAH,GAAK,MAAK,CACtBsG,aAAc,CACZzG,MAAOG,EAAMsG,aAAazG,MAC1Bye,wBAAyBte,EAAMsG,aAAagY,wBAC5C/X,QAASvG,EAAMsG,aAAaC,QAC5B8K,YAAatK,GAEhB,IACDnZ,KAAKC,MAAM8Y,cAAc,CACvB+X,sBAAuBpnB,EACvBsP,aAAc,CAAEyK,YAAatK,IAEjC,GAAC,2BAED,WACE,IAAMzP,EAAa1J,KAAKC,MAAM4wB,YAAYnnB,WAC1C1J,KAAKC,MAAM+wB,UAAUtnB,EACvB,GAAC,oBAED,WAA4B,IAAD,EACnBA,EAAa1J,KAAKC,MAAM4wB,YAAYnnB,WACpC3C,EAAc/G,KAAKC,MAAM4wB,YAAY9pB,YACrC3G,EAAqD,QACLL,IAAlDC,KAAKC,MAAM4wB,YAAYI,wBACzB7wB,EAAW8B,KACT,CACEvB,KAAM,0BACNO,MAAM,GAAD,OAAKlB,KAAKC,MAAM4wB,YAAYI,uBAAsB,cAIZlxB,IAA7CC,KAAKC,MAAM4wB,YAAYK,mBACzB9wB,EAAW8B,KACT,CACEvB,KAAM,qBACNO,MAAOlB,KAAKC,MAAM4wB,YAAYK,kBAAkB5b,cAMtD,IAAM6b,EAC8C,QADU,EAC5DnxB,KAAKC,MAAM+B,SAAS,GAAGqmB,mCAA2B,QAAI,GAExD,IACE8I,EAAqBpoB,SAAQ,SAAAhC,GAAgB,IAAD,GAED,QADyB,EAChEA,EAAYgpB,mCAA2B,QAAI,IACpBhnB,SACvB,SAAC4Q,EAAwCpZ,GACvCoZ,EAAKqW,2CAA2CjnB,SAAQ,SACtDzI,EAOAC,GAEA,IAAMI,EAAO,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CAC5CvU,MAAOZ,EAAKyU,wBAAwB,GAAGC,UACvCoJ,iBACI9d,EAAKyU,wBAAwB,GAAGE,uBACpCkJ,QAAS7d,EAAKyU,wBAAwB,GAAGO,cAE3C,GAAIhV,EAAKkV,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAE1D,IAAMvU,EAAQ,IAAIuU,EAAAA,GAAAA,OAAAA,aAA6B,CAC7CvU,MAAOZ,EAAKoV,oBAAoB,GAAGV,UACnCoJ,iBACI9d,EAAKoV,oBAAoB,GAAGT,uBAChCkJ,QAAS7d,EAAKoV,oBAAoB,GAAGJ,cAElC3U,EAAKwf,OAAO+O,GAA6BG,kBACxC1uB,EAAKwf,OAAO+O,GAA6BQ,QAC3CtvB,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOA,EAAMoU,aAIrB,MAAWhV,EAAKkV,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,OAEvB9U,EAAKwf,OAAO+O,GAA6BG,kBACxC1uB,EAAKwf,OAAO+O,GAA6BQ,QAC3CtvB,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOZ,EAAK8gB,YAKtB,GACF,GAEJ,GASF,CARE,MAAO5a,GACP+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACAuC,EAAMpC,SAGZ,CAEA,IAKIie,EACA/hB,EANE8wB,EAAWjS,KAAKkS,IAAI,EAAGrxB,KAAKC,MAAM+B,SAAS,GAAGsvB,eAAiB,EAE/DlwB,EACW,MAAf2F,EAAmB,UAAM2C,EAAU,aAAK3C,GAAgB2C,EAI1D,GAAI1J,KAAKC,MAAM4wB,YAAYU,gBAAiB,CAE1C,IAAInY,EAkGAyK,EAhGFzK,EADmC,MAAjCpZ,KAAKoS,MAAMsG,aAAazG,OAExB,iCACE,SAAC,KAAO,CAACoH,OAAK,sBAGd,UAAC,KAAG,CAACC,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,kBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNzY,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKsY,wBAGnB,SAAC,KAAG,CAACrX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,IACLnY,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKsY,2BAKrB,UAAC,KAAG,CAACgB,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,oBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNzY,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKuY,wBAGnB,SAAC,KAAG,CAACtX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,IACLnY,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKuY,2BAKrB,UAAC,KAAG,CAACe,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,mBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNzY,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKwY,wBAGnB,SAAC,KAAG,CAACvX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,IACLnY,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAazG,MAAM,GACrC4E,SAAU7W,KAAKwY,8BAQvB,iCACE,SAAC,KAAO,CAACa,OAAK,qBAEJ,gHAQ2B,MAAvCrZ,KAAKoS,MAAMsG,aAAa+K,cAC1BI,GACE,iCACE,SAAC,KAAO,CAACxK,OAAK,mCAGd,UAAC,KAAG,CAACC,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK1Z,KAAKoS,MAAMsG,aAAa+K,YAAY,GACzCliB,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAa+K,YAAY,GAC3C5M,SAAU7W,KAAK0kB,4BAGnB,SAAC,KAAG,CAACzjB,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAK,EACLC,IAAK,EACLC,IAAK0X,EACLzX,KAAM,EACNzY,MAAO,CACLlB,KAAKoS,MAAMsG,aAAa+K,YAAY,GACpCzjB,KAAKoS,MAAMsG,aAAa+K,YAAY,IAEtC5M,SAAU7W,KAAK2kB,uBAGnB,SAAC,KAAG,CAAC1jB,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAKzZ,KAAKoS,MAAMsG,aAAa+K,YAAY,GACzC/J,IAAK0X,EACL7vB,KAAK,QACLwP,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAa+K,YAAY,GAC3C5M,SAAU7W,KAAK4kB,kCAO3BvC,GACE,2BACGwB,EACAzK,GACD,SAAC,KAAO,CAACC,OAAK,KACd,UAAC,KAAG,CAACC,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNzY,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,yBAGnB,SAAC,KAAG,CAACnX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,EACLnY,KAAK,QACLoY,KAAM,GACN5I,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,8BAMzB,IAAMoZ,EAASxxB,KAAKywB,mBACpBnwB,GACE,SAAC,KAAK,CACJuiB,OAAQ,EAAE,GAAI,IACdC,MAAO,IACP/R,MAAO,CACLgS,YAAa,QACbC,YAAa,MACbC,YAAa,OACbC,WAAYljB,KAAKoS,MAAMuD,UAAY,UAAY,SAC/CwN,gBAAgB,6BAAD,OAA+BqO,EAAOvd,WAAU,MAC/D,UAEF,SAAC,EAAW,CACV5S,OAAQD,EACRhB,WAAYA,EACZqB,YAAU,EACVvB,eAAa,KAIrB,MAEEmiB,GACE,0BACE,UAAC,KAAG,CAAC/I,QAAQ,SAASvD,MAAM,SAASwD,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACtY,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNzY,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,yBAGnB,SAAC,KAAG,CAACnX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,EACLnY,KAAK,QACLoY,KAAM,GACN5I,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,6BAMzB9X,GACE,SAAC,EAAW,CACVe,OAAQD,EACRhB,WAAYA,EACZqB,YAAU,EACVvB,eAAa,IAKnB,IAAMuxB,EAAU,GACZzxB,KAAKC,MAAMyxB,aACbD,EAAQvvB,MACN,SAAC,IAAO,CAACd,MAAM,sBAAqB,UAClC,SAAC,KAAM,CACL+C,KAAK,UACL4W,MAAM,SACN5Z,MAAM,SAACwwB,GAAA,EAAc,IACrBxP,QAASniB,KAAKwwB,mBAMtB,MAUIxwB,KAAKC,MADJ+gB,GARS,EAAZpI,aACW,EAAX8Y,YACS,EAAT/b,UACQ,EAAR3T,SACkB,EAAlB+e,mBACa,EAAbhI,cACS,EAATiY,UACW,EAAXH,aACa,eAEf,OACE,SAAC,UAAS,gBACR9f,MAAO,CAAEiC,OAAQ,OAAQwH,YAAa,QAElCwG,GAAU,cAEd,UAAC,KAAK,CAACjL,MAAM,QAAO,WAClB,gBAAKhF,MAAO,CAAEyJ,YAAa,QAAS,UAClC,UAAC,KAAK,CAACxE,UAAU,WAAWD,MAAM,MAAK,WACrC,SAAC,KAAM,CACLxU,KAAK,QACLsY,QAAS7Z,KAAKoS,MAAMuD,UACpBkB,SAAU7W,KAAK8gB,uBACfY,iBAAiB,SAACkQ,GAAA,EAAW,IAC7BjQ,mBAAmB,SAACkQ,GAAA,EAAoB,OAE1C,SAAC,KAAO,CACNlX,UAAU,OACV9F,QAASwN,EACTzH,aAAc,CAAE/G,MAAO,SACvBzS,MAAM,mBAAkB,UAExB,SAAC,KAAM,CACL+C,KAAK,UACL4W,MAAM,SACN5Z,MAAM,SAAC8Z,GAAA,EAAe,QAGzBwW,OAGJnxB,OA5BEN,KAAKC,MAAM4wB,YAAYnnB,WAgClC,KAAC,EAppBkB,CAAS3H,EAAAA,WClE9B,IAAQ+vB,GAAWC,GAAAA,EAAAA,OAsKnB,SA3HqB,0CAKnB,WAAa9xB,GAA8B,IAAD,EAIkC,OAJlC,gBACxC,cAAMA,IALRmS,MAAQ,CACN4f,mCAA+BjyB,GAK/B,EAAKkyB,mBAAqB,EAAKA,mBAAmB5Z,MAAK,WACvD,EAAK6Z,kBAAoB,EAAKA,kBAAkB7Z,MAAK,WACrD,EAAK8Z,0BAA4B,EAAKA,0BAA0B9Z,MAAK,WAAK,CAC5E,CA8GC,OA5GD,yCAGA,SAAmByY,GACjB9wB,KAAKC,MAAMmyB,4BAA4B,CACrCtB,sBAAAA,EACAuB,UAAU,GAEd,GAEA,uCAGA,SACEnxB,GAEAlB,KAAKuS,SAAS,CAAEyf,8BAA+B9wB,GACjD,GAEA,gCAGA,WACE,IAAMwI,EAAa1J,KAAKoS,MAAM4f,mCACXjyB,IAAf2J,IACF1J,KAAKC,MAAMmyB,4BAA4B,CACrCtB,sBAAuBpnB,EACvB2oB,UAAU,IAEZryB,KAAKuS,SAAS,CAAEyf,mCAA+BjyB,IAEnD,GAAC,oBAED,WAA4B,IAAD,OACzB,QAA4BA,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAGT,IAwCIswB,EAxCEC,EAAevyB,KAAKC,MAAMuyB,aAAalqB,OAAS,EAChDmqB,EAAsC,GACtCC,EAAiC,GA8DvC,OA7DA1yB,KAAKC,MAAMuyB,aAAazpB,SAAQ,SAAA8nB,GAC9B,IAAMC,EAAwBD,EAAYnnB,WACpCrB,EAAS,EAAKpI,MAAM+B,SAAS8uB,GAC7BzkB,EAAoBhE,EAAO,GAAGa,kBACpCb,EAAO,GAAGc,oBAAoBJ,SAAQ,SAAA4pB,GACpC,IAkBQvxB,EAlBFsmB,EAAKiL,EAAgBvpB,sBACrBrC,EAAc4rB,EAAgBC,uBAChC/B,EAAYnnB,aAAege,IACzB,EAAKznB,MAAM4yB,6BAA6BzY,IAAIsN,GAC9C+K,EAAiBvwB,MACf,SAAC,GAAe,CAEd2uB,YAAaA,EACb7uB,SAAUqG,EACVsN,UAAW,EAAK1V,MAAM6yB,8BAA8B1Y,IAAIsN,GACxD9O,aAAc,EAAK3Y,MAAM8yB,yBAAyBrL,GAClD3G,mBAAoB,EAAK9gB,MAAM+yB,8BAC/Bja,cAAe,EAAK9Y,MAAMgzB,yBAC1BjC,UAAW,EAAKkB,kBAChBR,YAAaa,GAAa,UARlBlmB,EAAiB,YAAIqb,MAc/BtmB,EADkB,KAAhB2F,EACG,UAAM2gB,EAAE,cAAM3gB,GAEd,UAAM2gB,GAEbgL,EAAYxwB,MACV,SAAC4vB,GAAM,CAAU5wB,MAAOwmB,EAAG,SAAEtmB,GAAhBsmB,KAIrB,GACF,IAGI6K,IACFD,GACE,UAAC,KAAK,CAACvc,MAAM,SAASxU,KAAM,GAAIwP,MAAO,CAAEqS,QAAS,QAAS,WACzD,SAAC,KAAM,CACL0B,aAAa,GACb/T,MAAO,CAAE8C,MAAO,KAChBgD,SAAU7W,KAAKmyB,0BACfjxB,MAAOlB,KAAKoS,MAAM4f,8BAClBkB,YAAU,WAETR,KAEH,SAAC,IAAO,CAACtxB,MAAM,MAAK,UAClB,SAAC,KAAG,CACFD,MAAM,SAACgyB,GAAA,EAAmB,IAC1BhvB,KAAK,UACLge,QAASniB,KAAKiyB,4BAQtB,UAAC,IAAI,CAACxwB,YAAY,EAAM,UACrBgxB,EACAH,IAGP,KAAC,EAxHkB,CAASvwB,EAAAA,W,8FCqI9B,SAxIiB,0CACf,WAAa9B,GAA0B,IAAD,EAOnC,OAPmC,gBACpC,cAAMA,IACD6gB,uBAAyB,EAAKA,uBAAuBzI,MAAK,WAC/D,EAAKD,oBAAsB,EAAKA,oBAAoBC,MAAK,WACzD,EAAKjG,MAAQ,CACXuD,UAAW,EAAK1V,MAAM0V,UACtB+C,aAAc,CAAEC,QAAS,EAAK1Y,MAAM2Y,aAAaD,UAClD,CACH,CA4HC,OA5HA,8CAED,SACEkB,EACA9C,GAEA/W,KAAKC,MAAM8gB,mBAAmB,CAC5BqS,WAAYpzB,KAAKC,MAAMozB,QAAQ7yB,IAC/BmV,UAAWkE,IAEb7Z,KAAKuS,SAAS,CAAEoD,UAAWkE,GAC7B,GAAC,iCAED,SAAqB3Y,GACN,MAATA,IACFlB,KAAKC,MAAM8Y,cAAc,CACvBqa,WAAYpzB,KAAKC,MAAMozB,QAAQ7yB,IAC/BwY,aAAc,CACZL,QAASzX,KAGblB,KAAKuS,SAAS,CAAEmG,aAAc,CAAEC,QAASzX,KAE7C,GAAC,oBAED,WACE,IAAMd,EAAqD,CACzD,CACEO,KAAM,gBACNO,MAAOlB,KAAKC,MAAMozB,QAAQpP,aAAa3O,aAEzC,CACE3U,KAAM,oBACNO,MAAOlB,KAAKC,MAAMozB,QAAQnP,iBAAiB5O,aAE7C,CACE3U,KAAM,iBACNO,MAAOlB,KAAKC,MAAMozB,QAAQC,gBAIxBjR,GACJ,0BACE,UAAC,KAAG,CAAC/I,QAAQ,SAASvD,MAAM,SAAQ,WAClC,SAAC,KAAG,CAAC9U,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNzY,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,yBAGnB,SAAC,KAAG,CAACnX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,EACLnY,KAAK,QACLoY,KAAM,GACN5I,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,6BAWzB,EAQIpY,KAAKC,MADJ+gB,GANS,EAAZpI,aACS,EAATjD,UACO,EAAP0d,QACQ,EAARrxB,SACkB,EAAlB+e,mBACa,EAAbhI,eACa,eAEf,OACE,SAAC,UAAS,gBACRhI,MAAO,CAAEiC,OAAQ,OAAQwH,YAAa,QAElCwG,GAAU,cAEd,UAAC,KAAK,CAACjL,MAAM,QAAO,WAClB,gBAAKhF,MAAO,CAAEyJ,YAAa,QAAS,UAClC,UAAC,KAAK,CAACxE,UAAU,WAAWD,MAAM,MAAK,WACrC,SAAC,KAAM,CACLxU,KAAK,QACLsV,SAAU7W,KAAK8gB,uBACfjH,QAAS7Z,KAAKC,MAAM0V,UACpB+L,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,OAEhC,SAAC,KAAO,CACNhH,UAAU,OACV9F,QAASwN,EACTzH,aAAc,CAAE/G,MAAO,SACvBzS,MAAM,mBAAkB,UAExB,SAAC,KAAM,CACL+C,KAAK,UACL4W,MAAM,SACN5Z,MAAM,SAAC8Z,GAAA,EAAe,cAK9B,SAAC,EAAW,CACV5Z,OAAQrB,KAAKC,MAAMozB,QAAQ3yB,MAC3BN,WAAYA,EACZqB,YAAU,EACVvB,eAAa,SA/BZF,KAAKC,MAAMozB,QAAQ7yB,IAoC9B,KAAC,EArIc,CAASuB,EAAAA,WCU1B,SAzBiB,qGAsBd,OAtBc,8BACf,WAA4B,IAAD,OACnB5B,EAAQH,KAAKC,MAAMszB,SAASlzB,KAAI,SAACgzB,EAAS9yB,GAC9C,IAAMC,EAAM6yB,EAAQ7yB,IACpB,OACE,SAAC,GAAW,CAEV6yB,QAASA,EACTrxB,SAAU,EAAK/B,MAAM+B,SAASxB,GAC9BmV,UAAW,EAAK1V,MAAMuzB,mBAAmBpZ,IAAI5Z,GAC7CoY,aAAc,EAAK3Y,MAAMwzB,qBAAqBjzB,GAC9CugB,mBAAoB,EAAK9gB,MAAMyzB,0BAC/B3a,cAAe,EAAK9Y,MAAM0zB,sBANrBN,EAAQ7yB,IASnB,IAEA,OACE,SAAC,IAAI,CAACiB,YAAY,EAAM,SACrBtB,GAGP,KAAC,EAtBc,CAAS4B,EAAAA,W,8FCuJ1B,SAxIiB,0CACf,WAAa9B,GAA0B,IAAD,EASnC,OATmC,gBACpC,cAAMA,IACD6gB,uBAAyB,EAAKA,uBAAuBzI,MAAK,WAC/D,EAAKD,oBAAsB,EAAKA,oBAAoBC,MAAK,WACzD,EAAKjG,MAAQ,CACXuD,UAAW,EAAK1V,MAAM0V,UACtB+C,aAAc,CACZC,QAAS,EAAK1Y,MAAM2Y,aAAaD,UAEpC,CACH,CA0HC,OA1HA,8CAED,SACEkB,EACA9C,GAEA/W,KAAKC,MAAM8gB,mBAAmB,CAC5B6S,WAAY5zB,KAAKC,MAAM4zB,QAAQrzB,IAC/BmV,UAAWkE,IAEb7Z,KAAKuS,SAAS,CAAEoD,UAAWkE,GAC7B,GAAC,iCAED,SAAqB3Y,GACN,MAATA,IACFlB,KAAKC,MAAM8Y,cAAc,CACvB6a,WAAY5zB,KAAKC,MAAM4zB,QAAQrzB,IAC/BwY,aAAc,CACZL,QAASzX,KAGblB,KAAKuS,UAAS,SAAAH,GAAK,MAAK,CACtBsG,aAAc,CACZC,QAASzX,GAEZ,IAEL,GAAC,oBAED,WACE,IAAMd,EAAqD,CACzD,CACEO,KAAM,cACNO,MAAOlB,KAAKC,MAAM4zB,QAAQ9sB,cAIxBsb,GACJ,0BACE,UAAC,KAAG,CAAC/I,QAAQ,SAASvD,MAAM,SAAQ,WAClC,SAAC,KAAG,CAAC9U,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuY,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNzY,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,yBAGnB,SAAC,KAAG,CAACnX,KAAM,EAAE,UACX,SAAC,KAAW,CACVwY,IAAK,EACLC,IAAK,EACLnY,KAAK,QACLoY,KAAM,GACN5I,MAAO,CAAE8C,MAAO,QAChB3S,MAAOlB,KAAKoS,MAAMsG,aAAaC,QAC/B9B,SAAU7W,KAAKoY,6BAWzB,EAQIpY,KAAKC,MADJ+gB,GANS,EAAZpI,aACS,EAATjD,UACO,EAAPke,QACQ,EAAR7xB,SACkB,EAAlB+e,mBACa,EAAbhI,eACa,eAEf,OACE,SAAC,UAAS,gBACRhI,MAAO,CAAEiC,OAAQ,OAAQwH,YAAa,QAElCwG,GAAU,cAEd,UAAC,KAAK,CAACjL,MAAM,QAAO,WAClB,gBAAKhF,MAAO,CAAEyJ,YAAa,QAAS,UAClC,SAAC,KAAK,CAACxE,UAAU,WAAWD,MAAM,MAAMxU,KAAM,IAAI,UAChD,UAAC,KAAK,CAACyU,UAAU,WAAWD,MAAM,MAAK,WACrC,SAAC,KAAM,CACLxU,KAAK,QACLsV,SAAU7W,KAAK8gB,uBACfjH,QAAS7Z,KAAKC,MAAM0V,UACpB+L,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,OAEhC,SAAC,KAAO,CACNhH,UAAU,OACV9F,QAASwN,EACTzH,aAAc,CAAE/G,MAAO,SACvBzS,MAAM,mBAAkB,UAExB,SAAC,KAAM,CACL+C,KAAK,UACL4W,MAAM,SACN5Z,MAAM,SAAC8Z,GAAA,EAAe,gBAMhC,SAAC,EAAW,CACV5Z,OAAQrB,KAAKC,MAAM4zB,QAAQnzB,MAC3BN,WAAYA,EACZqB,YAAU,EACVvB,eAAa,SAjCZF,KAAKC,MAAM4zB,QAAQrzB,IAsC9B,KAAC,EArIc,CAASuB,EAAAA,WCQ1B,SAzBiB,qGAsBd,OAtBc,8BACf,WAA4B,IAAD,OACnB5B,EAAQH,KAAKC,MAAM6zB,SAASzzB,KAAI,SAACwzB,EAAStzB,GAC9C,IAAMC,EAAMqzB,EAAQrzB,IACpB,OACE,SAAC,GAAW,CAEVqzB,QAASA,EACT7xB,SAAU,EAAK/B,MAAM+B,SAASxB,GAC9BmV,UAAW,EAAK1V,MAAM8zB,mBAAmB3Z,IAAI5Z,GAC7CoY,aAAc,EAAK3Y,MAAM+zB,qBAAqBxzB,GAC9CugB,mBAAoB,EAAK9gB,MAAMg0B,0BAC/Blb,cAAe,EAAK9Y,MAAMi0B,sBANrBL,EAAQrzB,IASnB,IAEA,OACE,SAAC,IAAI,CAACiB,YAAY,EAAM,SACrBtB,GAGP,KAAC,EAtBc,CAAS4B,EAAAA,WCiD1B,SAjEY,0CACV,WAAa9B,GAAqB,IAAD,EAEe,OAFf,gBAC/B,cAAMA,IACDk0B,YAAc,EAAKA,YAAY9b,MAAK,WAAK,CAChD,CA0DC,OA1DA,mCAED,SAAatB,QACgBhX,IAAvBC,KAAKC,MAAMkiB,SACbniB,KAAKC,MAAMkiB,QAAQpL,EAEvB,GAAC,oBAED,WAA4B,IAAD,EAMrBqd,EAUAC,EAfEC,EAAOt0B,KAAKC,MAAMkB,KACxB,YAAapB,IAATu0B,EACK,MAIe,MAApBt0B,KAAKC,MAAMS,QACb0zB,GACE,iCACE,SAAC,KAAO,CAACjwB,KAAK,aACbnE,KAAKC,MAAMS,UAOhB2zB,EADuB,QAAzB,EAAIr0B,KAAKC,MAAMs0B,kBAAU,UAErB,SAAC,KAAG,CACFpS,QAASniB,KAAKm0B,YACdhzB,MAAM,SAACmzB,EAAI,IACXnwB,KAAK,UACL4M,MAAO,CAAElQ,WAAY,OAAQ,SAE5BuzB,KAKH,SAAC,KAAG,CACFjS,QAASniB,KAAKm0B,YACdhzB,MAAM,SAACmzB,EAAI,IACXnwB,KAAK,UACL4M,MAAO,CAAElQ,WAAY,OAAQ,SAE5BuzB,SAKoBr0B,IAAvBC,KAAKC,MAAMu0B,SAEX,SAAC,IAAO,CAACpzB,MAAOpB,KAAKC,MAAMu0B,QAAQ,SAChCH,IAIEA,EAEX,KAAC,EA9DS,CAAStyB,EAAAA,WC4DrB,IAKM0yB,GAAW,0CA6Df,WAAax0B,GAA0B,IAAD,mBACpC,cAAMA,IA7DSy0B,eAAiD,GAAE,EAEnDC,kBAA4D,CAAC,EAAC,EAE9DtU,aAA8B,GAAE,EAEhCuU,oBAAmD,CAAC,EAAC,EAErD/W,uBAAiB,IAEjB5B,sBAAgB,IAEzBqD,kBAAY,IAEZpD,iBAAW,IAEX2Y,YAAc,GAAE,EAEhBC,UAAY,CAAC,EAAG,GAAE,EAETC,SAAW,IAAIvsB,IAAa,EAE5BwsB,gBAA8C,CAC7DjW,OAAQ,CACN9M,MAAOyO,GACP7M,MxB7FkC,GwB+FpCmL,KAAM,CACJ/M,MAAO0O,IAETxZ,MAAO,CACL8X,OAAQ,CACND,KAAM,CACJ/M,MAAOyO,IAETxB,OxBlG0B,KwBqG/B,EAEO+V,UAAyD,CAAC,EAAC,EAE3Dlb,wBAEJ,CAAC,EAAC,EAEWmb,qBAAiC,CAAC,EAAG,IAAK,KAAI,EAC9CC,mBAA+B,CAAC,IAAK,IAAK,KAAI,EAE9CC,iBAA+C,CAC9DrW,OAAQ,CAAE9M,MAAM,GAAD,gBAAM,EAAKijB,sBAAoB,CAAE,IAAIrhB,MAAO,GAC3DmL,KAAM,CAAE/M,MAAM,GAAD,gBAAM,EAAKkjB,oBAAkB,CAAE,MAC5ChuB,MAAO,CACL8X,OAAQ,CACNC,OAAQ,EACRF,KAAM,CAAE/M,MAAM,GAAD,gBAAM,EAAKijB,sBAAoB,CAAE,QAGnD,EAoLDG,uBAAyB,WACvBvvB,QAAQyF,KAAK,2CACb,IAAMC,EAAS,EAAKvL,MAAMkL,QACxBnH,EAAesxB,sCAEjB9pB,EAAO+pB,mBAAmB,CACxBnqB,iBAAkB,EAAKnL,MAAMmL,iBAC7BO,YAAa,CACXC,SAAU,QAEX4pB,MAAK,SAACC,GACkB,OAArBA,QAAkD11B,IAArB01B,IAC/BA,EAAmB,IAErBA,EAAiB1sB,SAAQ,SAAC2sB,EAA+Bn1B,GACvD,IACMyrB,EADc/f,EAAAA,SAAAA,eAA4BypB,GAAxCxpB,QAERpG,QAAQyF,KAAK,yBAAD,OAA0BygB,EAASlc,eAAc,MAC7DtE,EAAOmqB,iBAAiB,CACtBvqB,iBAAkB,EAAKnL,MAAMmL,iBAC7BiB,kBAAmB2f,EAAS9iB,kBAC5BihB,eAAgB6B,EAASlc,iBACxB0lB,MAAK,SAACI,GACP,IAAM5L,EAAOvU,EAAAA,GAAAA,aAAAA,SAAiCmgB,GACtC1pB,EAAYD,EAAAA,SAAAA,eAA4B+d,EAAK6D,MAA7C3hB,QACR,GAAI,EAAKjM,MAAMsK,MAAMtC,0BAA2B,CAC9C,IAAM4tB,EACJ3pB,EAIE4pB,GAAY,EAChBD,EAAkBE,yBAAyBhtB,SAAQ,SAAAitB,GACjDF,EAAY,EAAK71B,MAAMsK,MAAMzC,mBAAmB5B,SAC9C8vB,EAAa9sB,kBAEjB,IAEI4sB,IACFhwB,QAAQyF,KACN,yDAAwD,WACpDsqB,EAAkB/lB,eAAc,MAG1B,IAAVvP,GAC6C,OAA5C,EAAKN,MAAMg2B,mCACiCl2B,IAA5C,EAAKE,MAAMg2B,6BAKVJ,EAAkB/lB,iBAClB,EAAK7P,MAAMg2B,8BAEX,EAAKC,qBAAqBL,GAN5B,EAAKK,qBAAqBL,GAS5B,EAAKtjB,UAAS,SAAAH,GACZ,IAAMyhB,EAGF,CAAC,EAKL,OAJAzhB,EAAM+jB,mBAAmBptB,SAAQ,SAAAijB,GAC/B6H,EAAQ7H,EAASlc,gBAAkBkc,CACrC,IACA6H,EAAQgC,EAAkB/lB,gBAAkB+lB,EACrC,CAAEM,mBAAoB3sB,OAAO2P,OAAO0a,GAC7C,IAEJ,MACE/tB,QAAQyF,KACN,qCAA8BygB,EAASlc,eAAc,OAArD,qFAKN,IAAG1B,OAAM,SAAC5H,GAER+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,2CAGJ6B,QAAQU,MACN,qCAAoC,2BAChBwlB,EAASlc,eAAc,MAAI,qBACjCkc,EAAS9iB,kBAAiB,MAAI,oBAC/B,EAAKjJ,MAAMmL,iBAAgB,OACxC5E,EAEJ,GACF,GACF,IAAG4H,OAAM,SAAC5H,GACRV,QAAQU,MAAMA,GAEd+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,0CAGN,GACF,EAAC,EAKDiyB,qBAAuB,SACrBL,GAEA,IAAMrD,EAAe,EAAKlT,aAAa8W,qBACvCtwB,QAAQyF,KAAK,sCAAD,OAC4BsqB,EAAkB/lB,eAAc,MAExE,IAAMumB,EAMF,CAAC,EACL7D,EAAazpB,SAAQ,SAAA8nB,GAEnB,IAAMnnB,EAAamnB,EAAYnnB,WAC/B,EAAK4V,aAAagX,gBAAgB5sB,GAClC,EAAK4V,aAAaiX,sBAAsB7sB,GACxC,IAAMqH,EAAQ,EAAKuO,aAAakX,2BAA2B9sB,GAC3D,EAAK4V,aAAamX,oBAAoB/sB,EAAYqH,GAElD8kB,EAAkBE,yBAAyBhtB,SAAQ,SAAAitB,GAMjD,IAAIU,EAAmBV,EAAaW,gCACX52B,IAArB22B,IACFA,EAAmBV,EAAaY,8BAET72B,IAArB22B,GAGJA,EAAiB3tB,SAAQ,SAAA8tB,GAIvB,GAHqBhG,EAAYiG,gBAAgB5wB,SAC/C2wB,EAAUE,0BAEM,CAChB,IAAIC,EA4DAvT,EA3DJ,GAAqD,OAAjDuS,EAAaiB,sCAA6Fl3B,IAAjDi2B,EAAaiB,gCAA+C,CACvH,IAAMC,EAAYlB,EAAaiB,gCAAgC,GAC/DD,EAAkB,IAAI/qB,EAAAA,MAAAA,wBAAkC,CACtDzL,IAC2C,OAAzC02B,EAAUC,iCAAgFp3B,IAAzCm3B,EAAUC,2BACvDD,EAAUC,2BACV,GAENC,cACEF,EAAUG,qCACZC,gBACEJ,EAAUK,uCACZC,eACEN,EAAUO,sCACZC,QACgD,OAA7CR,EAAUS,qCAAwF53B,IAA7Cm3B,EAAUS,+BAC5D,IAAIC,YACJV,EAAUS,qCAEV53B,EAEN83B,UACkD,OAA/CX,EAAUY,uCAA4F/3B,IAA/Cm3B,EAAUY,iCAC9D,IAAIF,YACJV,EAAUY,uCAEV/3B,EAENg4B,SACiD,OAA9Cb,EAAUc,sCAA0Fj4B,IAA9Cm3B,EAAUc,gCAC7D,IAAIJ,YACJV,EAAUc,sCAEVj4B,EAENk4B,iBACyD,OAAtDf,EAAUgB,8CAA0Gn4B,IAAtDm3B,EAAUgB,wCACrE,IAAIN,YACJV,EAAUgB,8CAEVn4B,EAENo4B,mBAC2D,OAAxDjB,EAAUkB,gDAA8Gr4B,IAAxDm3B,EAAUkB,0CACvE,IAAIR,YACJV,EAAUkB,gDAEVr4B,EAENs4B,kBAC0D,OAAvDnB,EAAUoB,+CAA4Gv4B,IAAvDm3B,EAAUoB,yCACtE,IAAIV,YACJV,EAAUoB,+CAEVv4B,GAGV,CAGA,GAA4C,OAAxCi2B,EAAauC,6BAA2Ex4B,IAAxCi2B,EAAauC,uBAAsC,CACrG,IAAMC,EAAaxC,EAAauC,uBAAuB,GACjDE,EAAeD,EAAWE,aAC1BC,EAAcH,EAAWI,YAC/BnV,EAAc,CACZgV,EAA6B,GAAdE,EACfF,EAA6B,GAAdE,EAEnB,CAEAtC,EAAkB3sB,GAAc,CAC9BiP,QAAS,EACT+X,wBAAyBsG,EACzBvT,YAAaA,EAEjB,CACF,GACF,GACF,IAEA,IAAMoV,EAA8C,IAAIrwB,IACxDgB,OAAOC,KAAK4sB,GAAmBttB,SAAQ,SAAAW,GACrC,IAAMsP,EAAeqd,EAAkB3sB,GAClB,OAAjBsP,GACF,EAAKsG,aAAamX,oBAAoB/sB,EAAYsP,GAClD,EAAKsG,aAAawZ,oBAAoBpvB,GACtC,EAAK4V,aAAayZ,gBAAgBrvB,GAClCmvB,EAA+B7vB,IAAIU,KAEnC,EAAK4V,aAAagX,gBAAgB5sB,GAClC,EAAK4V,aAAaiX,sBAAsB7sB,GAE5C,IACA,IAAMsvB,EAAe,IAAIC,gBAAgB,EAAKh5B,MAAMqU,SAAS4kB,QAC7DF,EAAa9qB,IAAI,QAAS2nB,EAAkB/lB,gBAC5C,EAAK7P,MAAMuU,SACT,CACE2kB,SAAU,EAAKl5B,MAAMqU,SAAS6kB,SAC9BD,OAAQF,EAAa/kB,YAEvB,CAAEmlB,SAAS,IAEb,EAAK7mB,UAAS,SAAAH,GAAK,MAAK,CACtBygB,6BAA8BgG,EAC9B/F,8BAA+B+F,EAC/B5C,6BAA8BJ,EAAkB/lB,eACjD,GACH,EAAC,EAEDupB,YAAc,SAAClsB,GACb,OAAY,OAARA,QAAwBpN,IAARoN,EACX,EAAK6nB,qBAEcj1B,IAAxB,EAAKk1B,UAAU9nB,GACV,EAAK8nB,UAAU9nB,GAEjB,EAAK6nB,eACd,EAAC,EAEDsE,mBAAqB,SAACC,GACpBzzB,QAAQ0iB,MAAM,2BAMd,GAL0B,kCAKrB+Q,EAA2CC,YAC9B,EAAKla,aAAama,aAC1B1wB,SAAQ,SAACqM,GACf,EAAKskB,iCAAiC,CAAEnf,OAAQnF,EAAI5U,IAAKmV,WAAW,GACtE,IACA7P,QAAQ0iB,MAAM,oCACT,GAVgC,kCAU3B+Q,EAA2CC,YAAgD,CACzE,EAAKla,aAAaqa,yBAC1B5wB,SAAQ,SAAC4G,GAC3B,EAAKiqB,sCAAsC,CAAEvW,mBAAoB1T,EAAgBnP,IAAKmV,WAAW,GACnG,IACA7P,QAAQ0iB,MAAM,4CAChB,MAAO,GAfc,iCAeT+Q,EAA2CC,YAA8B,CAC/D,EAAKla,aAAaua,iBAC1B9wB,SAAQ,SAACsqB,GACnB,EAAKyG,8BAA8B,CAAE1G,WAAYC,EAAQ7yB,IAAKmV,WAAW,GAC3E,IACA7P,QAAQ0iB,MAAM,uBAChB,MAAO,GApBe,kCAoBV+Q,EAA2CC,YAA+B,CACvD,EAAKla,aAAaya,0BAC1BhxB,SAAQ,SAACixB,GAC5B,EAAKC,8BAA8B,CAAErG,WAAYoG,EAAiBx5B,IAAKmV,WAAW,GACpF,IACA7P,QAAQ0iB,MAAM,yBAChB,MAAO,GAzBa,kCAyBR+Q,EAA2CC,YAA6B,CAC1D,EAAKla,aAAa8W,qBAC1BrtB,SAAQ,SAAC8nB,GACvB,EAAKqJ,kCAAkC,CAAEpJ,sBAAuBD,EAAYnnB,WAAYiM,WAAW,GACrG,IACA7P,QAAQ0iB,MAAM,uBAChB,CACF,EAAC,EAmJD2R,qBAAmB,uBAAG,mGACP,IAAIpuB,SAAc,SAACiC,EAASC,GACvCnI,QAAQyF,KAAK,2DACb,IAAMC,EAAS,EAAKvL,MAAMkL,QACxBnH,EAAeo2B,mCAEjB5uB,EAAOE,gBAAgB,CACrBN,iBAAkB,EAAKnL,MAAMmL,iBAC7BO,YAAa,CACXC,SAAU,SAEX4pB,MAAK,SAAC1pB,GACe,OAAlBA,QAA4C/L,IAAlB+L,IAC5BA,EAAgB,IAElBA,EAAc/C,SAAQ,SAAAnC,GACpB,IACMsD,EADc+B,EAAAA,SAAAA,eAA4BrF,GAAxCsF,QAERV,EAAOY,uBAAuB,CAC5BhB,iBAAkB,EAAKnL,MAAMmL,iBAC7BiB,kBAAmBnC,EAAOhB,oBACzBssB,MAAK,SAAClpB,GAC6DA,EAAkBjM,KAAI,SAAA2B,GACxF,OAAO,IAAIiK,EAAAA,SAAAA,gCAA6C,CACtDjK,SAAAA,GAEJ,IAQY+G,SAAQ,SAAAsxB,GAClB,IACE,EAAK/a,aAAa6a,oBAAoBE,EAYxC,CAXE,MAAO7zB,GAEP+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,4DAIJ6B,QAAQU,MAAM,mCAAoCA,EACpD,CACA6zB,EAAItW,wBAAwBhb,SAAQ,SAAAzI,GAClC,IAAM+iB,EAAqB/iB,EAAK0jB,mBAC1B3F,EAAU/d,EAAKg6B,mCAAmC,GAClDntB,EAAM2Q,GAASO,GACftN,EAAQ,EAAKkkB,UAAU9nB,GAEf,OAAV4D,QAA4BhR,IAAVgR,GAAsC,OAAfA,EAAMiO,WAAgCjf,IAAfgR,EAAMiO,MACxE,EAAKM,aAAaib,wBAChBlX,EACA,CAAEpR,MAAOlB,EAAMiO,KAAK/M,OAG1B,GACF,IAOA,EAAKuoB,cACLxsB,GACF,IAAGI,OAAM,SAAC5H,GACRV,QAAQU,MAAMA,GAEd+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,iFAIN,GACF,GACF,IAAGmK,OAAM,SAAC5H,GACRV,QAAQU,MAAMA,GAEd+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,oEAGJgK,EAAOzH,aAAiBlC,MAAQkC,EAAQ,IAAIlC,MAAMuC,OAAOL,IAC3D,GACF,IAAE,mFACH,EAODi0B,kBAAgB,uBAAG,mGACJ,IAAI1uB,SAAc,SAACiC,EAASC,GACvCnI,QAAQyF,KAAK,qCACb,IAAMC,EAAS,EAAKvL,MAAMkL,QAAQnH,EAAe02B,cACjDlvB,EAAOE,gBAAgB,CACrBN,iBAAkB,EAAKnL,MAAMmL,iBAC7BO,YAAa,CACXC,SAAU,SAEX4pB,MAAK,SAAC1pB,GACe,OAAlBA,QAA4C/L,IAAlB+L,IAC5BA,EAAgB,IAElBA,EAAc/C,SAAQ,SAACnC,EAAG8M,GACxB,IACMxJ,EADc+B,EAAAA,SAAAA,eAA4BrF,GAAxCsF,QAERV,EAAOY,uBAAuB,CAC5BhB,iBAAkB,EAAKnL,MAAMmL,iBAC7BiB,kBAAmBnC,EAAOhB,oBACzBssB,MAAK,SAAClpB,GACP,IAAMquB,EAA6C,GAWnD,GAVAruB,EAAkBvD,SAAQ,SAAA/G,GACxB,IAAM44B,EAAM,IAAI3uB,EAAAA,SAAAA,aAA0B,CAAEjK,SAAAA,IACtCuF,EAAW,EAAKtH,MAAMsK,MAAMrC,aAAa,GAE7C0yB,EAAItxB,sBAAwB/B,EAAS+B,qBACrCsxB,EAAI3xB,sBAAwB1B,EAAS0B,qBAErC0xB,EAAcz4B,KAAK04B,EAEvB,IACID,EAAcryB,OAAS,EAAG,CAC5B,IACE,EAAKgX,aAAaub,YAAYF,EAWhC,CAVE,MAAOn0B,GAEP+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,sCAGJ6B,QAAQU,MAAM,2BAA4BA,EAC5C,CAOA,EAAKg0B,aACP,CAEAxsB,GACF,IAAGI,OAAM,SAAC5H,GACRV,QAAQU,MAAMA,GAEd+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,2DAGN,GACF,GACF,IAAGmK,OAAM,SAAC5H,GACRV,QAAQU,MAAMA,GAEd+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,8CAGJgK,EAAOzH,aAAiBlC,MAAQkC,EAAQ,IAAIlC,MAAMuC,OAAOL,IAC3D,GACF,IAAE,mFACH,EAODs0B,mBAAiB,uBAAG,mGACL,IAAI/uB,SAAc,SAACiC,EAASC,GACvCnI,QAAQyF,KAAK,uCACb,IAAMC,EAAS,EAAKvL,MAAMkL,QAAQnH,EAAe+2B,gBACjDvvB,EAAOE,gBAAgB,CACrBN,iBAAkB,EAAKnL,MAAMmL,iBAC7BO,YAAa,CACXC,SAAU,QAEX4pB,MAAK,SAAC1pB,GACe,OAAlBA,QAA4C/L,IAAlB+L,IAC5BA,EAAgB,IAElBA,EAAc/C,SAAQ,SAAAnC,GACpB,IACMsD,EADc+B,EAAAA,SAAAA,eAA4BrF,GAAxCsF,QAERV,EAAOY,uBAAuB,CAC5BhB,iBAAkB,EAAKnL,MAAMmL,iBAC7BiB,kBAAmBnC,EAAOhB,oBACzBssB,MAAK,SAAClpB,GACP,IAAM0uB,EAA+C,GAerD,GAdA1uB,EAAkBvD,SAAQ,SAAA/G,GACxB,IAAMi5B,EAAK,IAAIhvB,EAAAA,SAAAA,cAA2B,CAAEjK,SAAAA,IACtCuF,EAAW,EAAKtH,MAAMsK,MAAMrC,aAAa,GAE7C+yB,EAAG3xB,sBAAwB/B,EAAS+B,qBACpC2xB,EAAGhyB,sBAAwB1B,EAAS0B,oBAEpC+xB,EAAe94B,KAAK+4B,GAEpBn1B,QAAQD,KAAK,iCAAD,OACuBo1B,EAAGnrB,eAAc,KAGxD,IACIkrB,EAAe1yB,OAAS,EAAG,CAC7B,IACE,EAAKgX,aAAa4b,qBAAqBF,EAWzC,CAVE,MAAOx0B,GAEP+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,uCAGJ6B,QAAQU,MAAM,2BAA4BA,EAC5C,CAOA,EAAKg0B,aACP,CACAxsB,GACF,IAAGI,OAAM,SAAC5H,GACRV,QAAQU,MAAMA,GAEd+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,6DAGN,GACF,GACF,IAAGmK,OAAM,SAAC5H,GACRV,QAAQU,MAAMA,GAEd+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,gDAGJgK,EAAOzH,aAAiBlC,MAAQkC,EAAQ,IAAIlC,MAAMuC,OAAOL,IAC3D,GACF,IAAE,mFACH,EAKD20B,kBAAoB,WAClBr1B,QAAQyF,KAAK,yBACb,EAAKgH,SAAS,CACZ/E,WAAW,EACX2oB,mBAAoB,KAGiB,OAAnC,EAAKtY,kBAAkBrL,SACzB,EAAK8M,aAAazM,OAAO,CAAEC,UAAW,EAAK+K,kBAAkBrL,UAG3B,OAAlC,EAAKyJ,iBAAiBzJ,SACD,OAArB,EAAK0J,kBAA6Cnc,IAArB,EAAKmc,aAElC,EAAKA,YAAYrJ,OAAO,CAAEC,UAAW,EAAKmJ,iBAAiBzJ,UAI7D,EAAKD,SAAS,CAAE/E,WAAW,IAE3B,EAAK4tB,8BACL,EAAK/F,yBAGA,EAAKgG,iBACP7F,MAAK,WAC8B,OAA9B,EAAKv1B,MAAMs5B,qBAAyDx5B,IAA9B,EAAKE,MAAMs5B,gBACnD,EAAKD,mBAAmB,EAAKr5B,MAAMs5B,eAEvC,IACCnrB,OAAM,SAAA5H,GACLV,QAAQU,MAAM,6BAA8BA,EAC9C,IAEG,EAAK2zB,sBACP3E,MAAK,WAC8B,OAA9B,EAAKv1B,MAAMs5B,qBAAyDx5B,IAA9B,EAAKE,MAAMs5B,gBACnD,EAAKD,mBAAmB,EAAKr5B,MAAMs5B,eAEvC,IACCnrB,OAAM,SAAA5H,GACLV,QAAQU,MAAM,mCAAoCA,EACpD,IAEG,EAAKi0B,mBACPjF,MAAK,WAC8B,OAA9B,EAAKv1B,MAAMs5B,qBAAyDx5B,IAA9B,EAAKE,MAAMs5B,gBACnD,EAAKD,mBAAmB,EAAKr5B,MAAMs5B,eAEvC,IACCnrB,OAAM,SAAA5H,GACLV,QAAQU,MAAM,+BAAgCA,EAChD,IAEG,EAAKs0B,oBACPtF,MAAK,WAC8B,OAA9B,EAAKv1B,MAAMs5B,qBAAyDx5B,IAA9B,EAAKE,MAAMs5B,gBACnD,EAAKD,mBAAmB,EAAKr5B,MAAMs5B,eAEvC,IACCnrB,OAAM,SAAA5H,GACLV,QAAQU,MAAM,iCAAkCA,EAClD,GACJ,EAAC,EAED80B,cAAgB,SAACvkB,GAEf,EAAKxE,UAAS,SAAAH,GAAK,MAAK,CACtByK,eAAgB,IAAIrU,IAAI4J,EAAMyK,gBAC/B,GACH,EAAC,EAED0e,eAAiB,SAACxkB,GAChBjR,QAAQyF,KAAK,oBACb,EAAK+T,aAAavM,SACO,OAArB,EAAKmJ,kBAA6Cnc,IAArB,EAAKmc,aACpC,EAAKA,YAAYnJ,QAErB,EAAC,EAEDyoB,WAAa,SAACzkB,GACZ,IAAM3B,EAAM2B,EAAM0kB,OAAOz2B,QACnB02B,EAAkB,EAAKtpB,MAAMspB,gBAC7BC,EAAsB,EAAKvpB,MAAMupB,oBACvC,QAAY57B,IAARqV,QAAyCrV,IAApB27B,EAA+B,CACtD51B,QAAQ0iB,MAAM,YAAD,OAAapT,EAAI5U,IAAG,MACjC,IAAMo7B,EAAc,IAAInmB,EAAAA,GAAAA,WAAAA,gBAAoC,CAC1D9U,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPid,QAAS,UACTC,iBAAkB,QAEpBld,MAAOw6B,EACPG,iBAAkB,aAEpBzmB,EAAI0mB,cAAcF,GAClBD,EAAoB5yB,SAAQ,SAACkd,GAC3B,IAAM3lB,EAAO,IAAImV,EAAAA,GAAAA,WAAAA,gBAAoC,CACnD9U,KAAMslB,EAAWtlB,KACjBO,MAAO+kB,EAAW/kB,MAClB26B,iBAAkB,aAEpBzmB,EAAI0mB,cAAcx7B,EACpB,IACA,IAAM6M,EAAM2Q,GAAS4d,GACf3qB,EAAQ,EAAKsoB,YAAYlsB,GAC/B,EAAKmS,aAAayc,OAAO3mB,EAAKrE,GAC9B,EAAKwB,UAAS,SAAAH,GACZ,IAAMyK,EAAiBzK,EAAMyK,eAE7B,OADAA,EAAe7T,IAAIoM,EAAI5U,KAChB,CAAEqc,eAAAA,EACX,GACF,MACE/W,QAAQ0iB,MAAM,sBAAD,OAAuBpT,EAAI5U,IAAG,KAE/C,EAAC,EAEDw7B,mBAAqB,SAACjlB,GAEA,OADAA,EAAM0kB,OAAOz2B,QAE/B,EAAKuN,SAAS,CACZmF,2BAA2B,IAG7B,EAAKnF,SAAS,CACZmF,2BAA2B,GAGjC,EAAC,EAEDukB,wBAA0B,SAACpH,GACzB,IAAMhT,EAAO,EAAKvC,aAAama,aAC/B,GAAoB,IAAhB5X,EAAKvZ,OAAT,CAKA,IAAMiG,EAASsmB,EAAYx0B,KAAI,SAAC+U,GAAS,IAAD,EAChChV,EAAqD,GA8C3D,OA7CoBgV,EAAIC,YACZtM,SAAQ,SAClBzI,GAKA,IAAMiV,EAAYjV,EAAKyU,wBAAwB,GAAGC,UAC5CiM,EAAc3gB,EAAKyU,wBAAwB,GAAGO,YAC9C3U,EAAI,UAAMsgB,GAChB,GAAI3gB,EAAKkV,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAC1D,IACMyL,EADkB5gB,EACaoV,oBAAoB,GAAGJ,YAE1C,cAAdC,EACFnV,EAAW8B,KAAK,CACdvB,KAAM,oBACNO,MAAM,GAAD,OAAKggB,KAEW,WAAd3L,EACTnV,EAAW8B,KAAK,CACdvB,KAAM,gBACNO,MAAM,GAAD,OAAKggB,KAEW,WAAd3L,EACTnV,EAAW8B,KAAK,CACdvB,KAAM,iBACNO,MAAM,GAAD,OAAKggB,KAGZ9gB,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAM,GAAD,OAAKggB,IAGhB,MAAO,GAAI5gB,EAAKkV,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CACjE,IAAM0L,EAAkB7gB,EACxBF,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAOigB,EAAgBC,WAE3B,CACF,IAGO,CAAE7gB,OAD8C,QAAzC,EAACshB,EAAKvX,WAAU,SAAC4xB,GAAC,OAAKA,EAAE17B,MAAQ4U,EAAI5U,GAAG,WAAC,QAAI,GAAK,EAChD0nB,OAAQ9S,EAAI5U,IAAKJ,WAAAA,EACnC,GAAG,IAEH,EAAKmS,SAAS,CAAE4pB,qBAAsB5tB,GApDtC,MAFE,EAAKgE,SAAS,CAAE4pB,qBAAsB,IAuD1C,EAAC,EAEDC,iBAAmB,WACjB,EAAKvH,YAAc,EACrB,EAAC,EAEDwH,qBAAuB,SAACC,GACtB,GAAe,OAAXA,QAA8Bv8B,IAAXu8B,EACrB,OAAO,EAAKzH,YAEd,IAAM0H,EAAO,mBAAO,EAAK1H,aAAW,CAAEyH,IAEtC,OADkB32B,MAAMC,KAAK,IAAI4C,IAAI+zB,EAAQl8B,KAAI,SAAA+U,GAAG,OAAIA,EAAI5U,GAAG,MAC9CH,KAAI,SAAAqnB,GAAE,OAAI6U,EAAQ51B,MAAK,SAAAyO,GAAG,OAAIA,EAAI5U,MAAQknB,CAAE,GAAC,IAC3D7d,QAAO,SAACuL,GAAG,YAAiCrV,IAARqV,CAAiB,GAC1D,EAAC,EAEDonB,kBAAoB,SAACzlB,GACnB,OAAOA,EAAM0lB,UAAY,EAAK3H,UAAU,IAAM/d,EAAM2lB,UAAY,EAAK5H,UAAU,EACjF,EAAC,EAED6H,cAAgB,SAAC5lB,GACf,MAA4CA,EAAM0kB,OAAOz2B,QAAxC43B,EAAU,EAAnBC,QACFC,EADiC,EAAV/lB,MACH+lB,cAErB,EAAKN,kBAAkBM,KAC1B,EAAKhI,UAAY,CAACgI,EAAcL,QAASK,EAAcJ,SACvD,EAAKN,oBAGP,EAAKvH,YAAc,EAAKwH,qBAAqBO,GAEzC,EAAK/H,YAAYvsB,OAAS,GAC5B,EAAK2zB,wBAAwB,EAAKpH,aAClC,EAAKtiB,SAAS,CACZwqB,4BAA4B,EAC5BC,mBAAoBF,EAAcL,QAClCQ,mBAAoBH,EAAcJ,WAGpC,EAAKnqB,SAAS,CACZwqB,4BAA4B,GAGlC,EAAC,EAEDG,uBAAyB,SAACC,GACxB,IAAMC,EAAiBD,EACjBE,EAAiB,CACrBnb,gBAAiB,IAAI1Z,IACrB80B,iBAAav9B,GAGf,QAAuBA,IAAnBq9B,EACF,OAAOC,EAGT,IAAMC,EAAc,EAAKhe,aAAaie,OAAOH,GAC7C,QAAoBr9B,IAAhBu9B,EACF,OAAOD,EAKT,GAFAv3B,QAAQ0iB,MAAM,iBAAD,OAAkB8U,EAAY98B,IAAG,OAEzC,EAAKu0B,SAAS3a,IAAI,SACrB,MAAO,CACL8H,gBAAiB,IAAI1Z,IAAI,CAAC80B,EAAY98B,MACtC88B,YAAAA,GAIJ,IAAME,EAAkB73B,MAAMC,KAAK,EAAKwM,MAAM8P,iBAC9C,MAAO,CACLA,gBAAiB,IAAI1Z,IAAI,GAAD,OAAKg1B,EAAgB,CAACF,EAAY98B,OAC1D88B,YAAAA,EAEJ,EAAC,EAEDG,yBAA2B,SAACC,GAC1B,EAAKpe,aAAama,aAAa1wB,SAAQ,SAAAqM,GACrC,IAAM5U,EAAM4U,EAAI5U,IAEhB,IAAIk9B,EAAexb,gBAAgB9H,IAAI5Z,IAAS,EAAK4R,MAAMyK,eAAezC,IAAI5Z,GAA9E,CAIA,IAAM2M,EAAM8Q,GAAU7I,GAChBrE,EAAQ,EAAKsoB,YAAYlsB,GAC/B,EAAKmS,aAAaqe,YAAYn9B,EAAKuQ,EAJnC,CAKF,GACF,EAAC,EAED6sB,aAAe,SAAC7mB,GAAkC,IAAD,MAG/C,GAA2B,KAFqB,QAA/B,EAAgB,QAAhB,EAAIA,EAAM0kB,cAAM,OAAS,QAAT,EAAZ,EAAcz2B,eAAO,WAAT,EAAZ,EAAuB6c,YAAI,QAAI,IAEpCvZ,OAAhB,CAIA,IAAMu1B,EAAsB,EAAKX,yBACjC,EAAK3qB,SAASsrB,GAGd,EAAKve,aAAawe,kBAElB,EAAKL,yBAAyBI,EAR9B,CASF,EAAC,EAEDE,cAAgB,SAAChnB,GAAkC,IAAD,IAC1CqmB,EAA6B,QAAf,EAAGrmB,EAAM0kB,cAAM,OAAS,QAAT,EAAZ,EAAcz2B,eAAO,WAAT,EAAZ,EAAuBxE,IACxCq9B,EAAsB,EAAKX,uBAAuBE,GACxD,EAAK7qB,SAASsrB,GAEd,EAAKJ,yBAAyBI,EAChC,EAAC,EAEDG,0BAA4B,SAACx9B,GAE3B,EAAK8e,aAAawe,kBAElB,IAAMD,EAAsB,EAAKX,uBAAuB18B,GACxD,EAAK+R,SAASsrB,GACd,EAAKve,aAAama,aAAa1wB,SAAQ,SAACqM,GACtC,IAAIrE,EAAQ,CAAC,EACb,GAAI8sB,EAAoB3b,gBAAgB9H,IAAIhF,EAAI5U,KAC9CuQ,EAAQ,EAAKqkB,iBACb,EAAK7iB,UAAS,SAAAH,GACZ,IAAMyK,EAAiBzK,EAAMyK,eAE7B,OADAA,EAAe7T,IAAIoM,EAAI5U,KAChB,CAAEqc,eAAAA,EACX,SAEA,GAAI,EAAKzK,MAAMyK,eAAezC,IAAIhF,EAAI5U,KAAM,CAC1C,IAAM2M,EAAM8Q,GAAU7I,GACtBrE,EAAQ,EAAKsoB,YAAYlsB,EAC3B,CAEF,EAAKmS,aAAaqe,YAAYvoB,EAAI5U,IAAKuQ,EACzC,GACF,EAAC,EAEDktB,+BAAiC,WAC/Bn4B,QAAQyF,KAAK,wBACb,EAAKgH,SAAS,CACZmF,2BAA2B,GAE/B,EAAC,EAEDwmB,iBAAmB,SAACnnB,GAClB,EAAKxE,SAAS,CAAE/E,WAAW,GAC7B,EAAC,EAED2wB,eAAiB,SAACpnB,GAChB,EAAKxE,SAAS,CAAE/E,WAAW,GAC7B,EAAC,EAED4wB,sBAAwB,SAACrnB,GACvB,IAAMsnB,EAOFtnB,EAAM0kB,OAAOz2B,QACXmI,EAAW,UAAMkxB,EAAUlU,eAAc,YAAIkU,EAAUC,aAC7D,EAAK/rB,UAAS,SAAAH,GAEZ,OADAA,EAAMmsB,cAAcv1B,IAAImE,GACjBiF,CACT,GACF,EAAC,EAEDosB,oBAAsB,SAACznB,GACrBjR,QAAQU,MAAM,uBAChB,EAAC,EAEDi4B,eAAiB,SAAC1nB,GAAkC,IAAD,MAC3C3S,EAAyC,QAAlC,EAAgB,QAAhB,EAAI2S,EAAM0kB,cAAM,OAAS,QAAT,EAAZ,EAAcz2B,eAAO,WAAT,EAAZ,EAAuBZ,eAAO,QAAI,sBACnD0B,QAAQU,MAAMpC,GACdmE,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACAG,GAGN,EAAC,EAEDs6B,oBAAsB,SAAC3nB,GACrB,IAAMsnB,EAQFtnB,EAAM0kB,OAAOz2B,QACXmI,EAAG,UAAMkxB,EAAUlU,eAAc,YAAIkU,EAAUC,aAYrD,GAXA,EAAK/rB,UAAS,SAAAH,GACZA,EAAMmsB,cAAcnxB,OAAOD,GAC3B,IAAIK,GAAqB,EAIzB,OAHI4E,EAAMmsB,cAAch9B,KAAO,IAC7BiM,GAAY,GAEP,CACLA,UAAAA,EACA+wB,cAAensB,EAAMmsB,cAEzB,IAEEF,EAAUM,cAAgB36B,EAAeyH,iCACzC,EAAKxL,MAAMsK,MAAMtC,0BACjB,CACA,IAAM6oB,EAAwBuN,EAAUO,kBACxC,KACI9N,KAAyB,EAAK1e,MAAMysB,sBACb,OAAzBR,EAAUS,WACV,CAUA,IALA,IAAMv9B,EAAI,SAAG,EAAK,IACZw9B,EAAS5f,KAAK6f,KAAKX,EAAUS,WAAWx2B,OAAS/G,GACnDshB,EAAS,EACPoc,EAAsB,GACtBC,EAAsB,GACnBxrB,EAAI,EAAGA,EAAIqrB,EAAQrrB,IAAK,CAC/BmP,EAASnP,EAAInS,EACb,IAAM49B,EAASd,EAAUS,WAAWz4B,MAAMwc,EAAQA,EAASthB,GAC3D09B,EAAU/8B,KAAKid,KAAK1F,IAAG,MAAR0F,MAAI,QAAQggB,KAC3BD,EAAUh9B,KAAKid,KAAKzF,IAAG,MAARyF,MAAI,QAAQggB,IAC7B,CACA,IAAM1lB,EAAM0F,KAAK1F,IAAG,MAAR0F,KAAY8f,GAClBvlB,EAAMyF,KAAKzF,IAAG,MAARyF,KAAY+f,GACxB,EAAK3sB,UAAS,SAAAH,GACZ,IAAMgtB,EAAQhtB,EAAMysB,oBAcpB,GAbqC,OAAjCO,EAAMtO,SAAoE/wB,IAAjCq/B,EAAMtO,GACjDsO,EAAMtO,GAAyB,CAC7BrX,IAAK0F,KAAK1F,IAAI2lB,EAAMtO,GAAuBrX,IAAKA,GAChDC,IAAKyF,KAAKzF,IAAI0lB,EAAMtO,GAAuBpX,IAAKA,GAChD2lB,iBAAkBD,EAAMtO,GAAuBuO,iBAAmB,GAGpED,EAAMtO,GAAyB,CAC7BrX,IAAKA,EACLC,IAAKA,EACL2lB,iBAAkB,GAGqB,OAAvCjtB,EAAM6jB,mCAAgFl2B,IAAvCqS,EAAM6jB,6BAA4C,CACnG,IAAMllB,GAAK,UACN,EAAKuO,aAAaggB,oBAAoBxO,IAE3C/f,EAAM0S,YAAc,CAClB2b,EAAMtO,GAAuBrX,IAC7B2lB,EAAMtO,GAAuBpX,KAE/B,EAAK4F,aAAamX,oBAAoB3F,EAAuB/f,EAC/D,CACA,OAAOqB,CACT,GACF,CACF,CACF,EAAC,EAEDmtB,aAAe,SAACxoB,GACd,IAAM3B,EAAM2B,EAAM0kB,OAAOz2B,QACzBc,QAAQ0iB,MAAM,gBAAD,OAAiBpT,EAAI5U,IAAG,KACvC,EAAC,EAEDg/B,iBAAmB,WACjBC,SAASC,KAAKC,oBACZ,kCACA,EAAKnE,YAEPiE,SAASC,KAAKC,oBACZ,yCACA,EAAK/B,cAEP6B,SAASC,KAAKC,oBACZ,qCACA,EAAK5B,eAEP0B,SAASC,KAAKC,oBACZ,2CACA,EAAK3D,oBAEPyD,SAASC,KAAKC,oBACZ,qCACA,EAAKhD,eAEP8C,SAASC,KAAKC,oBACZ,oCACA,EAAKJ,cAEPE,SAASC,KAAKC,oBACZ,qCACA,EAAKrE,eAEPmE,SAASC,KAAKC,oBACZ,wCACA,EAAKzB,kBAEPuB,SAASC,KAAKC,oBACZ,sCACA,EAAKxB,gBAEPsB,SAASC,KAAKC,oBACZ,8CACA,EAAKvB,uBAEPqB,SAASC,KAAKC,oBACZ,4CACA,EAAKjB,qBAEPe,SAASC,KAAKC,oBACZ,QACA,EAAKC,SAEPH,SAASC,KAAKC,oBACZ,QACA,EAAKjd,WAEPmd,OAAOF,oBAAoB,SAAU,EAAKpE,gBAE1C,EAAKjc,aAAawgB,UACO,OAArB,EAAK5jB,kBAA6Cnc,IAArB,EAAKmc,aACpC,EAAKA,YAAY4jB,SAUrB,EAAC,EAEDpd,UAAY,SAAC3L,GACX,EAAKge,SAAS/rB,IAAI+N,EAAM5J,IAC1B,EAAC,EAEDyyB,QAAU,SAAC7oB,GACT,EAAKge,SAAS3nB,OAAO2J,EAAM5J,KACT,WAAd4J,EAAM5J,KACJ,EAAKiF,MAAM2tB,oBACbj6B,QAAQyF,KAAK,8BACb,EAAK+T,aAAa0gB,4BAClB,EAAK1gB,aAAaE,0BAA0B,CAAC,IACpC,EAAKpN,MAAM6tB,yBACpBn6B,QAAQyF,KAAK,mCACb,EAAK+T,aAAa4gB,8BAClB,EAAK5gB,aAAaE,0BAA0B,CAAC,IACpC,EAAKpN,MAAM+tB,yBACpBr6B,QAAQyF,KAAK,mCACb,EAAK+T,aAAa8gB,iCAClB,EAAK9gB,aAAaE,0BAA0B,CAAC,IAE/C,EAAKjN,SAAS,CACZ8E,0BAA0B,EAC1BK,2BAA2B,EAC3ByoB,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,EACzBpoB,oBAAoB,KAEbd,EAAMspB,SACI,SAAftpB,EAAMupB,KACR,EAAKC,mBACmB,SAAfxpB,EAAMupB,KACf,EAAKE,wBACmB,SAAfzpB,EAAMupB,KACf,EAAKG,uBACmB,SAAf1pB,EAAMupB,KACf,EAAKI,mBACmB,SAAf3pB,EAAMupB,KACf,EAAKK,4BACmB,SAAf5pB,EAAMupB,KACf,EAAKM,yBACmB,SAAf7pB,EAAMupB,MACf,EAAKO,aAGX,EAAC,EAEDC,qBAAuB,WACrB,EAAKxhB,aAAawgB,UACO,OAArB,EAAK5jB,kBAA6Cnc,IAArB,EAAKmc,aACpC,EAAKA,YAAY4jB,UAEnBD,OAAOF,oBAAoB,eAAgB,EAAKH,iBAClD,EAAC,EAEDuB,eAAiB,WACftB,SAASC,KAAKsB,iBACZ,kCACA,EAAKxF,YAEPiE,SAASC,KAAKsB,iBACZ,qCACA,EAAKjD,eAEP0B,SAASC,KAAKsB,iBACZ,yCACA,EAAKpD,cAEP6B,SAASC,KAAKsB,iBACZ,2CACA,EAAKhF,oBAEPyD,SAASC,KAAKsB,iBACZ,qCACA,EAAKrE,eAEP8C,SAASC,KAAKsB,iBACZ,oCACA,EAAKzB,cAEPE,SAASC,KAAKsB,iBACZ,qCACA,EAAK1F,eAEPmE,SAASC,KAAKsB,iBACZ,wCACA,EAAK9C,kBAEPuB,SAASC,KAAKsB,iBACZ,sCACA,EAAK7C,gBAEPsB,SAASC,KAAKsB,iBACZ,sCACA,EAAKvC,gBAEPgB,SAASC,KAAKsB,iBACZ,8CACA,EAAK5C,uBAEPqB,SAASC,KAAKsB,iBACZ,4CACA,EAAKtC,qBAEPe,SAASC,KAAKsB,iBACZ,4CACA,EAAKxC,qBAEPiB,SAASC,KAAKsB,iBACZ,QACA,EAAKpB,SAEPH,SAASC,KAAKsB,iBACZ,UACA,EAAKte,WAEPmd,OAAOmB,iBAAiB,eAAgB,EAAKxB,kBAC7CK,OAAOmB,iBAAiB,SAAU,EAAKzF,eACzC,EAAC,EAED0F,kBAAoB,WAIlB,GAHA,EAAKF,iBACL,EAAK5F,qBAEA,EAAKl7B,MAAMsK,MAAMtC,0BAA2B,CAC/C,IAAIi5B,GAAgB,EACd/5B,EAAQ,EAAKlH,MAAMsK,MAAMrC,aAAa,GACtCi5B,EAAeh6B,EAAMgC,oBAAoB,GAC/C,GAAgC,OAA5Bg4B,EAAaC,iBAAmDrhC,IAA5BohC,EAAaC,YACnD,GAAI,wBAAyBj6B,EAAMk6B,mBAG7B,eADiBl6B,EAAMk6B,mBAAmBl4B,oBAAoB,KAEhE+3B,GAAgB,QAIpBA,GAAgB,EAEbA,GAEH98B,EAAAA,GAAAA,QAAgB,4CAEpB,CACF,EAAC,EA8BDk9B,sCAAwC,SAACpgC,EAAeqgC,GACtD,EAAKhvB,SAAS,CAAEivB,qBAAsBtgC,GACxC,EAAC,EAMDugC,sCAAwC,SAAC1qB,GACfA,EAAMC,OAAO6C,QAEnC,EAAKtH,SAAS,CAAEmvB,eAAgB,gBAEhC,EAAKnvB,SAAS,CAAEmvB,oBAAgB3hC,GAEpC,EAAC,EASD4hC,oCAAsC,SACpCzgC,EACAwiB,GAEA,IAAMgY,EAAkB,EAAKtpB,MAAMspB,gBACnC,QAAwB37B,IAApB27B,EAA+B,CACjC,IAAMvuB,EAAM2Q,GAAS4d,GACf/6B,EAAO+iB,EAAOhjB,MACpB,EAAKi0B,kBAAkBxnB,GAAKpE,SAAQ,SAAAkd,GAEhCA,EAAWtlB,KAAKqU,YAAcrU,EAAKqU,WACnCiR,EAAWtlB,KAAKsU,yBAA2BtU,EAAKsU,wBAEhDgR,EAAW9M,OAAOpQ,SAAQ,SAAAu3B,GACxB,GAAIA,EAAKtrB,YAAc9T,EAAO,CAC5B,IAAM0gC,EAAsB,EAAKxvB,MAAMupB,oBAAoB9xB,QACzD,SAACvJ,GAAgB,OAAKA,EAAKK,OAASslB,EAAWtlB,IAAI,IAErD,EAAK4R,SAAS,CACZopB,oBAAoB,GAAD,gBACdiG,GAAmB,CACtB,CAAEjhC,KAAMA,EAAMO,MAAOo/B,MAG3B,CACF,GAEJ,GACF,CACF,EAAC,EAMDuB,oCAAsC,WACpC,EAAKtvB,SAAS,CACZopB,oBAAqB,IAEzB,EAAC,EAEDmG,2BAA6B,SAAC5gC,GAC5B,GAAc,OAAVA,QAA4BnB,IAAVmB,EAAqB,CACzC,IAAM6gC,EAAI92B,OAAO/J,GACjB,EAAKqR,UAAS,SAAAH,GACZ,IAAM3C,EAAUsyB,GAAK3vB,EAAM+D,sBAAsB,IAAM4rB,GAAK3vB,EAAM+D,sBAAsB,GACxF,MAAO,CACL6rB,oBAAqBD,EACrB1rB,2BAA4B5G,EAEhC,GACF,MACE,EAAK8C,SAAS,CACZyvB,yBAAqBjiC,EACrBsW,4BAA4B,GAGlC,EAAC,EAED4rB,2BAA6B,SAAC/gC,GAC5B,GAAc,OAAVA,QAA4BnB,IAAVmB,EAAqB,CACzC,IAAMghC,EAAIj3B,OAAO/J,GACjB,EAAKqR,UAAS,SAAAH,GACZ,IAAM3C,EAAUyyB,GAAK9vB,EAAMgE,sBAAsB,IAAM8rB,GAAK9vB,EAAMgE,sBAAsB,GACxF,MAAO,CACL+rB,oBAAqBD,EACrB5rB,2BAA4B7G,EAEhC,GACF,MACE,EAAK8C,SAAS,CACZ4vB,yBAAqBpiC,EACrBuW,4BAA4B,GAGlC,EAAC,EAED8rB,6BAA+B,SAAClhC,GAC9B,GAAc,OAAVA,QAA4BnB,IAAVmB,EAAqB,CACzC,IAAMmhC,EAAgBp3B,OAAO/J,GAC7B,EAAKqR,UAAS,WAEZ,MAAO,CACL+vB,sBAAuBD,EACvB9rB,6BAHc8rB,GAAiB,GAAKA,GAAiB,GAKzD,GACF,MACE,EAAK9vB,SAAS,CACZ+vB,2BAAuBviC,EACvBwW,8BAA8B,GAGpC,EAAC,EAMDgsB,6BAA+B,WAC7B,GACE,EAAKnwB,MAAMiE,4BACX,EAAKjE,MAAMkE,4BACX,EAAKlE,MAAMmE,8BACgC,OAAnC,EAAKnE,MAAM4vB,0BAAmEjiC,IAAnC,EAAKqS,MAAM4vB,qBACzB,OAAnC,EAAK5vB,MAAM+vB,0BAAmEpiC,IAAnC,EAAKqS,MAAM+vB,qBACjB,OAArC,EAAK/vB,MAAMkwB,4BAAuEviC,IAArC,EAAKqS,MAAMkwB,sBAC1D,CACAx8B,QAAQyF,KACN,yBAAwB,WACpB,EAAK6G,MAAM4vB,oBAAmB,MAAI,UACnC,EAAK5vB,MAAM+vB,oBAAmB,MAAI,aAC/B,EAAK/vB,MAAMkwB,sBAAqB,oBAWxC,IARA,IAMME,EAAqB,IANZ,EAAKpwB,MAAMkwB,sBAOpBG,EAAQ,GACL/uB,EAAI,EAAGA,EAAI,EAAK4L,aAAaojB,UAAWhvB,IAAK,CACpD,IAAMivB,EAAqB,EAAKrjB,aAAasjB,gBAAgBlvB,GAAG,GAChE+uB,EAAMvgC,KAAKid,KAAK0jB,IAAIL,EAAqBG,GAC3C,CACA,IAAMG,EAAQL,EAAMM,QAAQ5jB,KAAK1F,IAAG,MAAR0F,KAAYsjB,IACxC,EAAKnjB,aAAa9K,SAAS,CACzBnD,SAAU,CACR,EAAKe,MAAM4vB,oBACX,EAAK5vB,MAAM+vB,qBAEbW,MAAOA,IAET,IAAME,EAAQ,IAAI/2B,EAAAA,SAAAA,MAAmB,CACnC8Z,YAAa,CACX,EAAK3T,MAAM4vB,oBACX,EAAK5vB,MAAM+vB,oBACX,GAEFv6B,oBAAqB,EAAK0X,aAAa1X,sBAEnCwN,EAAM,IAAInJ,EAAAA,IAAAA,IAAY,CAAEsS,SAAUykB,IACxC,EAAK1jB,aAAayc,OAAO3mB,EAAK,EAAK4f,iBACnC,EAAKziB,UAAS,SAAAH,GACZ,IAAMyK,EAAiBzK,EAAMyK,eAE7B,OADAA,EAAe7T,IAAIoM,EAAI5U,KAChB,CACLqc,eAAAA,EACAhF,oBAAoB,EAExB,GACF,CACF,EAAC,EAMDorB,yCAA2C,WACzCn9B,QAAQyF,KAAK,mCACb,EAAKgH,SAAS,CACZsF,oBAAoB,EACpBmqB,yBAAqBjiC,EACrBoiC,yBAAqBpiC,EACrBuiC,2BAAuBviC,GAE3B,EAAC,EAKDmjC,wCAA0C,WACxCp9B,QAAQ0iB,MAAM,qCACd,IAAMnK,EAAU,EAAKjM,MAAMspB,gBACrByH,EAAe,EAAK/wB,MAAMovB,qBAC1B4B,EAAS,EAAKhxB,MAAMsvB,oBACL3hC,IAAjBojC,QAA0CpjC,IAAZse,GAChC,EAAKiB,aAAa+jB,wBAAwB,CAAEF,aAAAA,EAAcC,OAAAA,IAC1D,EAAK7wB,SAAS,CACZ8E,0BAA0B,EAC1B0oB,oBAAoB,KAGtBx3B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,+CAIR,EAAC,EAKDq/B,0CAA4C,WAC1Cx9B,QAAQyF,KAAK,mCACb,EAAK+T,aAAaE,0BAA0B,CAAC,GAC7C,EAAKjN,SAAS,CACZ8E,0BAA0B,EAC1B0oB,oBAAoB,GAExB,EAAC,EAMDa,uBAAyB,WACvB96B,QAAQyF,KAAK,aACb,IAAMsW,EAAO,EAAKvC,aAAama,aACzBjH,EAAe,EAAKlT,aAAa8W,qBACjCp0B,EAAW,EAAKsd,aAAaikB,uBACjC/Q,EAAa,GAAG9oB,YAElB,EAAK6I,UAAS,SAACixB,GACb,IAAMrrB,EAASsrB,GAAe,CAC5B5hB,KAAAA,EACA7f,SAAAA,EACAmmB,KAAM,EAAKloB,MAAMkoB,KACjBC,IAAK,EAAKnoB,MAAMmoB,IAChBvL,eAAgB2mB,EAAU3mB,iBAE5B,MAAO,CACL7E,qBAAsBG,EAAOH,qBAC7B8R,gBAAiB3R,EAAO2R,gBAE5B,GACF,EAAC,EAOD4Z,yBAA2B,YACzB59B,QAAQyF,KAAK,iCACsBxL,IAA/B,EAAKqS,MAAM0X,kBACE,EAAK7pB,MAAMkL,QAAQnH,EAAe2/B,qBAG1CC,eAAe,CAAEC,SAAU,CAAE,EAAKzxB,MAAM0X,gBAAoDga,WAAYtO,MAC7G,kBAAMpxB,EAAAA,GAAAA,KAAa,0BAA0B,IAC7CgK,OAAM,SAAC5H,GACPV,QAAQU,MAAMA,GAEd+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,kCAGN,IAEF,EAAKsO,SAAS,CACZyF,sBAAsB,EACtB8R,qBAAiB/pB,GAErB,EAAC,EAKDgkC,yBAA2B,WACzB,EAAKxxB,SAAS,CACZyF,sBAAsB,EACtB8R,qBAAiB/pB,GAErB,EAAC,EAMD25B,iCAAmC,YAGtB,IAHyBnf,EAAM,EAANA,OAIpC,GAJqD,EAAT5E,UAI7B,CACb7P,QAAQyF,KAAK,YAAD,OAAagP,IACzB,IAAMnF,EAAM,EAAKkK,aAAaie,OAAOhjB,GAC/BpN,EAAM8Q,GAAU7I,GAChBrE,EAAQ,EAAKsoB,YAAYlsB,GAC/B,EAAKmS,aAAaqe,YAAYvoB,EAAI5U,IAAKuQ,GACvC,EAAKwB,UAAS,SAAAH,GACZ,IAAMyK,EAAiBzK,EAAMyK,eAE7B,OADAA,EAAe7T,IAAIoM,EAAI5U,KAChB,CAAEqc,eAAAA,EACX,GACF,MACE/W,QAAQyF,KAAK,YAAD,OAAagP,IACzB,EAAKhI,UAAS,SAAAH,GACZ,IAAM8P,EAAkB9P,EAAM8P,gBAC9BA,EAAgB9U,OAAOmN,GACvB,IAAMsC,EAAiBzK,EAAMyK,eAE7B,OADAA,EAAezP,OAAOmN,GACf,CAAEsC,eAAAA,EAAgBqF,gBAAAA,EAC3B,IACA,EAAK5C,aAAaqe,YAAYpjB,EAAQ,CAAC,EAE3C,EAAC,EAMDqf,sCAAwC,YAG3B,I3Cx1DgBlyB,E2Cq1Dc2b,EAAkB,EAAlBA,mBAAoB1N,EAAS,EAATA,UAKvDhG,EADsB,EAAK2P,aAAaqa,yBACFhzB,MAAK,SAAAq9B,GAAE,OAAIA,EAAGxjC,MAAQ6iB,CAAkB,IASpF,GARwB,OAApB1T,QAAgD5P,IAApB4P,I3C31DLjI,E2C41DV,CACbuI,QAAQ,EACRC,QAAS,CAAEP,gBAAAA,EAAiBpF,MAAO,EAAKtK,MAAMsK,Q3C71DpB,OAA5BoE,SAAgE5O,IAA5B4O,GACtC7I,QAAQD,KAAK,8EAGR8I,GAAwBqB,eAAetI,I2C61D5C5B,QAAQm+B,IAAI,yCAAD,OAA0C5gB,IACjD1N,EAAW,CACb7P,QAAQyF,KAAK,yBAAD,OAA0B8X,IACtC,IACE,EAAK/D,aAAa4kB,oBAAoB7gB,EAWxC,CAVE,MAAO7c,GASP,MAPA+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,qCAGEuC,CACR,CACA,EAAK+L,UAAS,SAAAH,GACZ,IAAM6S,EAA6B,IAAIzc,IACrC4J,EAAM6S,4BAGR,OADAA,EAA2Bjc,IAAIqa,GACxB,CAAE4B,2BAAAA,EACX,GACF,MACEnf,QAAQyF,KAAK,yBAAD,OAA0B8X,IACtC,EAAK/D,aAAa6kB,oBAAoB9gB,GACtC,EAAK9Q,UAAS,SAAAH,GACZ,IAAM6S,EAA6B,IAAIzc,IACrC4J,EAAM6S,4BAGR,OADAA,EAA2B7X,OAAOiW,GAC3B,CAAE4B,2BAAAA,EACX,GAEJ,EAAC,EAKDmf,iCAAmC,YAOtB,IAPyB5jC,EAAG,EAAHA,IAAKwY,EAAY,EAAZA,aAQzClT,QAAQm+B,IAAI,oCAAD,OAAqCzjC,IAChD,IACE,EAAK8e,aAAaib,wBAChB/5B,EACAwY,EAYJ,CAVE,MAAOxS,GASP,MAPA+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,gDAGEuC,CACR,CACF,EAAC,EAED69B,iBAAmB,SACjBrrB,GAA4D,IAAD,MACrDL,EAA8B,QAAvB,EAAGK,EAAaL,eAAO,QxBnmEE,GwBomEhC2rB,EAAgC,QAArB,EAAGtrB,EAAa/G,aAAK,QAAI2O,GACpC2jB,EAAYvrB,EAAaH,YAAc,CAAC,EAAG,EAAG,EAAG,GAAKyrB,EAAYjkC,KAAI,SAACmkC,GAAC,OAAKrlB,KAAK1F,IAAI+qB,EAAI,GAAI,IAAI,IAMxG,OALc1lB,GAAe,CAC3BE,KAAM,CAAE/M,MAAM,GAAD,gBAAMsyB,GAAS,CAAE5rB,KAC9BoG,OAAQ,CAAE9M,MAAM,GAAD,gBAAMqyB,GAAW,CAAE3rB,KAClCuG,OAAmC,QAA7B,EAAE,EAAK8V,gBAAgBjW,cAAM,aAA3B,EAA6BlL,OAGzC,EAAC,EAED4wB,qBAAuB,YAGV,IAHajkC,EAAG,EAAHA,IAAKwY,EAAY,EAAZA,aAI7BlT,QAAQm+B,IAAI,uBAAD,OAAwBzjC,IACnC,IACE,EAAKuZ,wBAAwBvZ,GAAOwY,EACpC,IAAMjI,EAAQ,EAAKszB,iBAAiBrrB,GAE9B5D,EAAM,EAAKkK,aAAaie,OAAO/8B,GAC/B2M,EAAM8Q,GAAU7I,GACtB,EAAK6f,UAAU9nB,GAAO4D,EACtB,EAAKuO,aAAaqe,YAAYn9B,EAAKuQ,GACnC,EAAKqB,MAAMyK,eAAe7T,IAAIxI,EAWhC,CAVE,MAAOgG,GASP,MAPA+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,mCAGEuC,CACR,CACF,EAAC,EAMDszB,8BAAgC,YAGnB,IAHsB1G,EAAU,EAAVA,WAAYzd,EAAS,EAATA,UAI7C7P,QAAQm+B,IAAI,gCAAD,OAAiC7Q,IACxCzd,GACF7P,QAAQyF,KAAK,gBAAD,OAAiB6nB,IAC7B,EAAK9T,aAAaolB,YAAYtR,GAC9B,EAAK7gB,UAAS,SAAAH,GACZ,IAAMohB,EAAqB,IAAIhrB,IAAI4J,EAAMohB,oBAEzC,OADAA,EAAmBxqB,IAAIoqB,GAChB,CAAEI,mBAAAA,EACX,MAEA1tB,QAAQyF,KAAK,gBAAD,OAAiB6nB,IAC7B,EAAK9T,aAAaqlB,YAAYvR,GAC9B,EAAK7gB,UAAS,SAAAH,GACZ,IAAMohB,EAAqB,IAAIhrB,IAAI4J,EAAMohB,oBAEzC,OADAA,EAAmBpmB,OAAOgmB,GACnB,CAAEI,mBAAAA,EACX,IAEJ,EAAC,EAKDoR,yBAA2B,YAKd,IALiBxR,EAAU,EAAVA,WAAYpa,EAAY,EAAZA,aAMxClT,QAAQm+B,IAAI,2BAAD,OAA4B7Q,IACvC,EAAK9T,aAAaulB,gBAAgBzR,EAAYpa,EAChD,EAAC,EAMDihB,8BAAgC,YAGnB,IAHsBrG,EAAU,EAAVA,WAAYje,EAAS,EAATA,UAI7C7P,QAAQm+B,IAAI,gCAAD,OAAiCrQ,IACxCje,GACF7P,QAAQyF,KAAK,gBAAD,OAAiBqoB,IAC7B,EAAKtU,aAAawlB,qBAAqBlR,GACvC,EAAKrhB,UAAS,SAAAH,GACZ,IAAM2hB,EAAqB,IAAIvrB,IAAI4J,EAAM2hB,oBAEzC,OADAA,EAAmB/qB,IAAI4qB,GAChB,CAAEG,mBAAAA,EACX,MAEAjuB,QAAQyF,KAAK,gBAAD,OAAiBqoB,IAC7B,EAAKtU,aAAaylB,qBAAqBnR,GACvC,EAAKrhB,UAAS,SAAAH,GACZ,IAAM2hB,EAAqB,IAAIvrB,IAAI4J,EAAM2hB,oBAEzC,OADAA,EAAmB3mB,OAAOwmB,GACnB,CAAEG,mBAAAA,EACX,IAEJ,EAAC,EAKDiR,yBAA2B,YAKd,IALiBpR,EAAU,EAAVA,WAAY5a,EAAY,EAAZA,aAMxClT,QAAQm+B,IAAI,2BAAD,OAA4BrQ,IACvC,EAAKtU,aAAa2lB,yBAAyBrR,EAAY5a,EACzD,EAAC,EAMDkhB,kCAAoC,YAGvB,IAH0BpJ,EAAqB,EAArBA,sBAAuBnb,EAAS,EAATA,UAI5D7P,QAAQm+B,IAAI,qCAAD,OAAsCnT,IAC7Cnb,GACF7P,QAAQyF,KAAK,qBAAD,OAAsBulB,IAClC,EAAKxR,aAAayZ,gBAAgBjI,GAClC,EAAKve,UAAS,SAAAH,GACZ,IAAM0gB,EAAgC,IAAItqB,IACxC4J,EAAM0gB,+BAGR,OADAA,EAA8B9pB,IAAI8nB,GAC3B,CAAEgC,8BAAAA,EACX,MAEAhtB,QAAQyF,KAAK,qBAAD,OAAsBulB,IAClC,EAAKxR,aAAagX,gBAAgBxF,GAClC,EAAKve,UAAS,SAAAH,GACZ,IAAM0gB,EAAgC,IAAItqB,IACxC4J,EAAM0gB,+BAGR,OADAA,EAA8B1lB,OAAO0jB,GAC9B,CAAEgC,8BAAAA,EACX,IAEJ,EAAC,EAKDoS,6BAA+B,YAOlB,IAPqBpU,EAAqB,EAArBA,sBAAuB9X,EAAY,EAAZA,aAQvDlT,QAAQm+B,IAAI,gCAAD,OAAiCnT,IAC5C,EAAKxR,aAAamX,oBAAoB3F,EAAuB9X,EAC/D,EAAC,EAMDmsB,gCAAkC,YAGrB,IAHwBrU,EAAqB,EAArBA,sBAAuBuB,EAAQ,EAARA,SAI1DvsB,QAAQm+B,IAAI,mCAAD,OAAoCnT,IAC3CuB,GACFvsB,QAAQyF,KAAK,yBAAD,OAA0BulB,IACtC,EAAKxR,aAAawZ,oBAAoBhI,GACtC,EAAKve,UAAS,SAAAH,GACZ,IAAMygB,EAA+B,IAAIrqB,IACvC4J,EAAMygB,8BAGR,OADAA,EAA6B7pB,IAAI8nB,GAC1B,CAAE+B,6BAAAA,EACX,MAEA/sB,QAAQyF,KAAK,2BAAD,OAA4BulB,IACxC,EAAKxR,aAAaiX,sBAAsBzF,GACxC,EAAKve,UAAS,SAAAH,GACZ,IAAMygB,EAA+B,IAAIrqB,IACvC4J,EAAMygB,8BAGR,OADAA,EAA6BzlB,OAAO0jB,GAC7B,CAAE+B,6BAAAA,EACX,IAEJ,EAAC,EAMDuI,4BAA8B,WAC5B,IAAMtI,EAA6C,IAAItqB,IACjDgqB,EAAe,EAAKlT,aAAa8W,qBAkCvC,GAjCA5D,EAAa5nB,MAAK,SAACC,EAAGC,GACpB,OAAiD,IAA7CD,EAAEnB,WAAW07B,cAAct6B,EAAEpB,YACxB,EAC+C,IAA7CoB,EAAEpB,WAAW07B,cAAcv6B,EAAEnB,aAC9B,EAEH,CACT,IACA8oB,EAAazpB,SAAQ,SAACzI,GACpB,IAAMoJ,EAAapJ,EAAKoJ,WAClBqH,EAAQ,EAAKuO,aAAakX,2BAA2B9sB,GAC3D,EAAK4V,aAAamX,oBAAoB/sB,EAAYqH,GAClD,EAAKuO,aAAagX,gBAAgB5sB,GAClC,EAAK4V,aAAaiX,sBAAsB7sB,GACpCpJ,EAAKixB,gBAKiC,OAApCjxB,EAAK+kC,4BACPvS,EAA8B9pB,IAAIU,GAIpCopB,EAA8B9pB,IAAIU,EAEtC,IAO2C,IAAvCopB,EAA8BvxB,KAAY,CAC5C,IAAM+jC,EAAgB,CACpB,CAAC,IAAK,IAAK,MAEb9S,EAAazpB,SAAQ,SAACzI,GACpB,IAAMoJ,EAAapJ,EAAKoJ,WACxB,GAAIpJ,EAAKixB,gBAAiB,CACxB,IAAMgU,EAAazS,EAA8BvxB,KACjD,GAAIgkC,EAAaD,EAAch9B,OAAQ,CACrC,IAAMyI,GAAK,UACN,EAAKuO,aAAaggB,oBAAoB51B,IAErCnJ,EAAQglC,EACdx0B,EAAMkB,MAAQqzB,EAAc/kC,GAC5B,IAAM6+B,EAAQ,EAAKhtB,MAAMysB,oBAAoBv+B,EAAKoJ,YACpC,OAAV01B,IACFruB,EAAM0S,YAAc,CAAC2b,EAAM3lB,IAAK2lB,EAAM1lB,MAExC,EAAK4F,aAAamX,oBAAoBn2B,EAAKoJ,WAAYqH,GACvD+hB,EAA8B9pB,IAAI1I,EAAKoJ,WACzC,CACF,CACF,GACF,CAEA5D,QAAQyF,KACN,qBAAcunB,EAA8BvxB,KAAI,mBAChD,qBAEFuxB,EAA8B/pB,SAAQ,SAAAW,GACpC,EAAK4V,aAAayZ,gBAAgBrvB,EACpC,IACA,EAAK6I,UAAS,SAAAH,GAAK,MAAK,CACtBygB,6BAA8B,IAAIrqB,IAAIsqB,GACtCA,8BAA+B,IAAItqB,IAAIsqB,GACxC,GACH,EAAC,EAMD0S,6BAA+B,WAC7B,EAAKjzB,SAAS,CAAE0jB,kCAA8Bl2B,IAC9C,IAAM0lC,EAAU,EAAKxlC,MAAMqU,SAAS6kB,SACpC,EAAKl5B,MAAMuU,SAASixB,GACpB,EAAKrK,6BACP,EAAC,EAMDsK,iCAAmC,SACjCxkC,EACAqgC,GAIE,IAAI1L,EAFN,GAAc,OAAV30B,EAQF,GAPA4E,QAAQyF,KAAK,uCAAD,OAA6C,OAALrK,QAAK,IAALA,EAAAA,EAAS,YAAW,MAExE,EAAKkR,MAAM+jB,mBAAmBptB,SAAQ,SAAAijB,GAChCA,EAASlc,iBAAmB5O,IAC9B20B,EAAoB7J,EAExB,IAC0B,OAAtB6J,QAAoD91B,IAAtB81B,EAAiC,CACjE,IAAI4P,EAAU,EAAKxlC,MAAMqU,SAAS6kB,SAClCsM,GAAO,iBAAmB,OAALvkC,QAAK,IAALA,EAAAA,EAAS,IAC9B,EAAKjB,MAAMuU,SAASixB,GACpB,EAAKvP,qBAAqBL,EAC5B,MAEEttB,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,0CAGJ6B,QAAQm+B,IACN,mDAAkD,mCACjB,OAAL/iC,QAAK,IAALA,EAAAA,EAAS,YAAW,WAIpD,EAAKskC,+BAEP,EAAKjzB,SAAS,CAAE0jB,6BAA8B/0B,GAChD,EAAC,EAMDq/B,iBAAmB,WACb,EAAKnuB,MAAM2tB,oBACbj6B,QAAQyF,KAAK,8BACb,EAAK+T,aAAa0gB,4BAClB,EAAK1gB,aAAaE,0BAA0B,CAAC,GAC7C,EAAKjN,SAAS,CACZ8E,0BAA0B,EAC1BK,2BAA2B,EAC3ByoB,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,EACzBpoB,oBAAoB,MAGtB/R,QAAQyF,KAAK,4BACb,EAAKgH,SAAS,CACZ8E,0BAA0B,EAC1BK,2BAA2B,EAC3BqoB,oBAAoB,EACpBE,yBAAyB,EACzBE,wBAAwB,EACxBtoB,oBAAoB,IAEtB,EAAKyH,aAAaqmB,8BAClB,EAAKrmB,aAAasmB,4BAClB,EAAKtmB,aAAa8gB,iCAClB,EAAK9gB,aAAa4gB,8BAEtB,EAAC,EAMDM,sBAAwB,WACtB16B,QAAQyF,KAAK,+BACT,EAAK+T,aAAaumB,2BACpB,EAAKvmB,aAAa4gB,8BAClB,EAAK5gB,aAAasmB,4BAClB,EAAKtmB,aAAaE,0BAA0B,CAAC,GAC7C,EAAKjN,SAAS,CACZ4tB,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,MAG3B,EAAK1tB,SAAS,CACZ0tB,yBAAyB,EACzBF,oBAAoB,EACpBI,wBAAwB,IAE1B,EAAK7gB,aAAa0gB,4BAClB,EAAK1gB,aAAa8gB,iCAClB,EAAK9gB,aAAaqmB,8BAClB,EAAKrmB,aAAawmB,wBAAwB,CAAC,GAC3C,EAAKxmB,aAAaymB,0BAA0B,CAAC,GAEjD,EAAC,EAMDtF,qBAAuB,WACrB36B,QAAQyF,KAAK,8BACT,EAAK+T,aAAa0mB,8BACpB,EAAK1mB,aAAa8gB,iCAClB,EAAK7tB,SAAS,CACZ4tB,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,MAG3B,EAAK1tB,SAAS,CACZ4tB,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,IAE3B,EAAK3gB,aAAa4gB,8BAClB,EAAK5gB,aAAasmB,4BAClB,EAAKtmB,aAAa0gB,4BAClB,EAAK1gB,aAAaqmB,8BAClB,EAAKrmB,aAAa2mB,6BAA6B,CAAC,GAEpD,EAAC,EAEDpF,WAAa,WACX,EAAKvhB,aAAa0gB,4BAClB,EAAK1gB,aAAa4gB,8BAClB,EAAK5gB,aAAasmB,4BAClB,EAAKtmB,aAAa8gB,iCAClB,EAAK9gB,aAAaqmB,8BAClB,EAAKpzB,SAAS,CACZsF,oBAAoB,EACpBR,0BAA0B,EAC1BK,2BAA2B,EAC3BM,sBAAsB,EACtBmoB,wBAAwB,EACxBF,yBAAyB,EACzBF,oBAAoB,GAExB,EAAC,EAMDW,iBAAmB,WACjB,EAAKphB,aAAa0gB,4BAClB,EAAK1gB,aAAasmB,4BAClB,EAAKtmB,aAAa8gB,iCAClB,EAAK9gB,aAAa4gB,8BACd,EAAK9tB,MAAM8P,gBAAgB3gB,KAAO,GACpC,EAAK6Q,MAAM8P,gBAAgBnZ,SAAQ,SAAAvI,QACrBT,IAARS,GAKJsF,QAAQyF,KAAK,eAAD,OAAgB/K,EAAG,MAC/B,EAAK8e,aAAa4mB,UAAU1lC,GAE5B4D,EAAAA,GAAAA,KAAa,2BANXA,EAAAA,GAAAA,QAAgB,yCAOpB,IACA,EAAKmO,SAAS,CACZ2P,gBAAiB,IAAI1Z,IACrB23B,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,MAG3B,EAAK7tB,MAAMyK,eAAe9T,SAAQ,SAAAvI,GAChCsF,QAAQyF,KAAK,eAAD,OAAgB/K,EAAG,MAC/B,EAAK8e,aAAa4mB,UAAU1lC,EAC9B,IACA,EAAK+R,SAAS,CACZsK,eAAgB,IAAIrU,IACpB23B,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,KAG7B,EAAK3gB,aAAaE,0BAA0B,CAAC,EAC/C,EAAC,EAMDmhB,0BAA4B,WAC1B76B,QAAQyF,KAAK,6BACR,EAAK6G,MAAM+zB,eAcd,EAAK7mB,aAAa8mB,WAClB,EAAK9mB,aAAaE,0BAA0B,CAAC,GAC7C,EAAKpN,MAAM8P,gBAAgBnZ,SAAQ,SAAAvI,QACrBT,IAARS,GACF,EAAK8e,aAAaqe,YAAYn9B,EAAK,EAAK40B,iBAE5C,IACA,EAAK7iB,SAAS,CAAE4zB,eAAe,MApB/B,EAAK7mB,aAAa0gB,4BAClB,EAAK1gB,aAAasmB,4BAClB,EAAKtmB,aAAa8gB,iCAClB,EAAK9gB,aAAaqmB,8BAClB,EAAKrmB,aAAa4gB,8BAClB,EAAK5gB,aAAa+mB,WAClB,EAAK9zB,SAAS,CACZ4zB,eAAe,EACfpG,oBAAoB,EACpBE,yBAAyB,EACzBE,wBAAwB,IAY9B,EAAC,EAED7c,2BAA6B,SAACD,GAC5B,EAAK/D,aAAagnB,UAAUjjB,EAC9B,EAAC,EAEDkjB,+BAAiC,SAACrlC,GAChC,EAAKqR,SAAS,CAAEe,0BAA2BpS,GAC7C,EAAC,EAEDslC,qBAAuB,SAACn6B,GAEtB,IAAMihB,EAAQmZ,GAAAA,SAA4B,EAAKxmC,MAAMmL,kBAErD,GAAwB,QAAd,OAALkiB,QAAK,IAALA,OAAK,EAALA,EAAOpjB,SAA8B,OAAVojB,QAA4BvtB,IAAVutB,EAAqB,CAErE,IAAMpjB,EAASojB,EAAMpjB,OAAOvD,MAAK,SAAAC,GAAC,OAAIA,EAAEsC,oBAAsBmD,CAAiB,IAE/E,QAAkCtM,KAAxB,OAANmK,QAAM,IAANA,OAAM,EAANA,EAAQshB,oBAAgE,KAA7BthB,EAAOshB,kBACpD,OAAOthB,EAAOshB,iBAElB,CAGA,MAAM,UAAN,OAAiBnf,EAAkBhG,MAAM,EAAG,GAAE,MAChD,EAAC,EAMDqgC,wBAA0B,SAAC3vB,GACzB,IAAM8C,EAAU9C,EAAMC,OAAO6C,QAC7B,EAAKtH,SAAS,CAAEo0B,qBAAsB9sB,IACtC,EAAKyF,aAAasnB,mBACpB,EAAC,EAEDC,iBAAmB,SAACnrB,GAAiD,IAAD,EAC5DtG,EAAM,EAAKkK,aAAaie,OAAO7hB,EAAWlb,KAC1C2M,EAAM8Q,GAAU7I,GAChBnD,OAAgClS,IAAxB,EAAKk1B,UAAU9nB,GACC,QADiB,EAC3C,EAAK8nB,UAAU9nB,GAAK4R,cAAM,aAA1B,EAA4B9M,MAAM5L,MAAM,EAAG,GAC3Cwa,GACArX,OAAOC,KAAK,EAAKwrB,WAAW3sB,OAASuY,GAAiCvY,QAE1E,EAAKyR,wBAAwB2B,EAAWlb,KAAO,CAC7CyR,MAAOA,EACP0G,QxB7oFoC,GwB8oFpCE,aAAa,GAGf,EAAKoc,UAAU9nB,GAAO,EAAKk3B,iBACzB,EAAKtqB,wBAAwB2B,EAAWlb,KAE5C,EAAC,EAGgBsmC,kBAAoB,WAOnC,IAAMjlB,EAAsB,GACtB0R,EAAkC,GAClCO,EAA2C,GAC3C/O,EAAqD,GAC3DlD,EAAK3f,KAAI,MAAT2f,GAAI,QAAS,EAAKvC,aAAama,eAC/BlG,EAASrxB,KAAI,MAAbqxB,GAAQ,QAAS,EAAKjU,aAAaua,mBACnC/F,EAAS5xB,KAAI,MAAb4xB,GAAQ,QAAS,EAAKxU,aAAaya,4BACnC,IAAMgN,EAAsB,EAAKznB,aAAaqa,yBACxCqN,EAA8C,OAAnBD,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBl9B,QAAO,SAAC8F,GAAe,OAC3EA,EAAgBs3B,8BAAgC,EAAKhnC,MAAMoM,iBAAiB,IAE9E0Y,EAAiB7iB,KAAI,MAArB6iB,GAAgB,QAASiiB,IAEzB,IAAMzrB,EAAcsG,EAAKxhB,KAAI,SAAA+U,GAAG,OAAID,GAAqBC,EAAI,IAE7D,MAAO,CAAEyM,KAAAA,EAAM0R,SAAAA,EAAUO,SAAAA,EAAU/O,iBAAAA,EAAkBxJ,YAAAA,EACvD,EAAC,EAMgB2rB,UAAY,WAC3B,IAAMh7B,EAAU,EAAKkG,MAAM0X,gBAC3B,QAAgB/pB,IAAZmM,EACF,OAAO,SAAC,GAAM,CAACA,QAASA,GAG5B,EAAC,EAEgBi7B,uBAAyB,SAACtlB,GACzC,GAAIA,EAAKvZ,OAAS,EAChB,OACE,SAAC,GAAc,CACbuZ,KAAMA,EACNK,gBAAiB,EAAK9P,MAAM8P,gBAC5BrF,eAAgB,EAAKzK,MAAMyK,eAC3BkF,YAAa,EAAKic,0BAClBjd,mBAAoB,EAAK2Y,kCAKjC,EAAC,EAEgB0N,kBAAoB,WACnC,OAAO,EAAK1S,eAAer0B,KAAI,SAACge,EAAS9d,GACvC,OACE,SAAC,YAAa,CAEZW,MAAOmd,EAAQrJ,UAAU,SAExBqJ,EAAQ/I,kBAHmBvV,IAAtBse,EAAQrJ,WAAiD,KAAtBqJ,EAAQrJ,UAAoBqJ,EAAQrJ,UAAS,kBAAczU,GAM1G,GACF,EAAC,EAsBgB8mC,4BAA8B,WAC7C,IAAM3S,EAAiB,EAAK0S,oBACtBE,EAA6B7S,EAAY8S,gCAEzC9vB,EAA8C,EAEhD,SAAC,KAAM,CACL1G,MAAO,CAAE8T,SAAU,KACnB/Q,SAAU,EAAK0zB,iCAEfC,0BAAwB,EACxB9wB,YAAY,iBAAgB,SAE3B+d,GAJG,uBAQJgH,EAAkB,EAAKtpB,MAAMspB,gBACnC,QAAwB37B,IAApB27B,EAA+B,CACjC,IAAMvuB,EAAM2Q,GAAS4d,GACrB,EAAK/G,kBAAkBxnB,GAAKpE,SAAQ,SAACkd,EAAY1lB,GAC/C,IAAMo0B,EAAoB1O,EAAW9M,OAAO9Y,KAAI,SAAAigC,GAC9C,OACE,SAAC,YAAa,CAEZp/B,MAAOo/B,EAAKtrB,UACZtU,MAAOulB,EAAWtlB,KAAK,SAEtB2/B,EAAKhrB,kBAJmBvV,IAAnBugC,EAAKtrB,WAA8C,KAAnBsrB,EAAKtrB,UAAoBsrB,EAAKtrB,UAAS,qBAAiBzU,GAOpG,IACAkX,EAAyBvV,MACvB,gCACG+jB,EAAWtlB,KAAK2U,aACjB,SAAC,KAAM,CACLvE,MAAO,CAAE8T,SAAU,KACnB/Q,SAAU,EAAK6tB,oCACfzO,YAAU,EACVwU,QAAS,EAAK7F,oCACd4F,0BAA0B,EAAM,SAE/B9S,OAIT,IACA,IAAMC,EAAsB,EAAKA,oBAAoBznB,GAAK9M,KAAI,SAAAM,GAC5D,OAAO2mC,EAA2B3mC,EACpC,IACA8W,EAAyBvV,MACvB,qDAEE,SAAC,KAAM,CACL6O,MAAO,CAAE8T,SAAU,KACnB/Q,SAAU,EAAKwtB,sCAEf3qB,YAAY,uBAAsB,SAEjCie,GAHG,gCAOVnd,EAAyBvV,MACvB,SAAC,KAAQ,CACP2U,SAAU,EAAK4qB,sCAAsC,oBACjD,0BAKV,CAEA,OAAOhqB,CACT,EAAC,EAEgBkwB,gBAAkB,WACjC,OACE,SAAC,YAAY,CAAiBvmC,MAAM,YAAW,UAC7C,SAAC,GAAY,CACXY,SAAU,EAAK/B,MAAMsK,MAAMrC,aAAa,GACxC+nB,WAAW,KAHG,YAOtB,EAAC,EAEgB2X,iBAAmB,WAClC,OACE,SAAC,YAAY,CAAiBxmC,MAAM,YAAW,UAC7C,SAAC,GAAS,CAACY,SAAU,EAAK/B,MAAMsK,MAAMrC,aAAa,MADnC,YAItB,EAAC,EAEgB2/B,mBAAqB,WACpC,IAAMrV,EAAe,EAAKlT,aAAa8W,qBACvC5D,EAAa5nB,MAAK,SAACC,EAAGC,GACpB,OAAiD,IAA7CD,EAAEnB,WAAW07B,cAAct6B,EAAEpB,YACxB,EAC+C,IAA7CoB,EAAEpB,WAAW07B,cAAcv6B,EAAEnB,aAC9B,EAEH,CACT,IACA,IAAM2sB,EAOF,CAAC,EACCyR,EAEF,CAAC,EAUL,OATAtV,EAAazpB,SAAQ,SAAA8nB,GACnB,IAAMnnB,EAAamnB,EAAYnnB,WACzB1H,EAAW,EAAKsd,aAAaikB,uBAAuB75B,GAC1Do+B,EAAoBp+B,GAAc1H,EAClC,IAAM+O,GAAK,UACN,EAAKuO,aAAaggB,oBAAoB51B,IAE3C2sB,EAAkB3sB,GAAcqH,CAClC,KAEE,SAAC,YAAY,CAAqB3P,MAAM,gBAAe,UACrD,SAAC,GAAe,CACdY,SAAU8lC,EACVtV,aAAcA,EACdO,yBAA0BsD,EAC1BvD,8BAA+B,EAAK1gB,MAAM0gB,8BAC1CD,6BAA8B,EAAKzgB,MAAMygB,6BACzCG,8BAA+B,EAAKkH,kCACpCjH,yBAA0B,EAAKiS,6BAC/B9S,4BAA6B,EAAK+S,gCAClClP,6BAA8B,EAAK7jB,MAAM6jB,gCAV3B,gBActB,EAAC,EAEgB8R,yBAA2B,WAC1C,GAAI,EAAK31B,MAAM+jB,mBAAmB7tB,OAAS,EAAG,CAC5C,IAAM0/B,EAA2B,GAuBjC,OAtBA,EAAK51B,MAAM+jB,mBAAmBptB,SAAQ,SAACijB,EAAUzrB,GAC/CynC,EAAyB9lC,MACvB,SAAC,YAAa,CAEZhB,MAAO8qB,EAASlc,eAChB2U,0BAA0B,EAC1BljB,KAAK,QAAO,cAEqBxB,IAAhCisB,EAASic,oBAAoE,KAAhCjc,EAASic,mBAA4Bjc,EAASic,mBAAqB,iBAL/EloC,IAA5BisB,EAASlc,gBAA4D,KAA5Bkc,EAASlc,eAAyBkc,EAASlc,eAAc,6BAAyBvP,IAQvI,IACAynC,EAAyB9lC,MACvB,SAAC,YAAa,CAEZhB,WAAOnB,EACP0kB,0BAA0B,EAC1BljB,KAAK,QAAO,SAEX,MALG,gCASN,SAAC,YAAY,CAA2BH,MAAM,sBAAqB,UACjE,UAAC,KAAK,CAAC2U,MAAM,SAASxU,KAAM,GAAIwP,MAAO,CAAEqS,QAAS,QAAS,WACzD,SAAC,KAAM,CACLrS,MAAO,CAAE8T,SAAU,IAAKqjB,SAAU,KAClCp0B,SAAU,EAAK4xB,iCAEfxkC,MAAO,EAAKkR,MAAM6jB,6BAA6B,SAE9C+R,GAHG,wBAKN,SAAC,IAAO,CAAC5mC,MAAM,QAAO,UACpB,SAAC,GAAG,CACFD,KAAMgnC,GAAAA,EACNhmB,QAAS,EAAKqjB,qCAbJ,sBAmBtB,CAEF,EAAC,EAEgB4C,oBAAsB,SAAC7U,GACtC,GAAIA,EAASjrB,OAAS,EAAG,CACvB,IAAMmrB,EAIF,CAAC,EACC4U,EAEF,CAAC,EASL,OARA9U,EAASxqB,SAAQ,SAAAsqB,GACfI,EAAqBJ,EAAQ7yB,KAAO,EAAK8e,aAAagpB,gBACpDjV,EAAQ7yB,KAEV6nC,EAAgBhV,EAAQ7yB,KAAO,EAAK8e,aAAaipB,mBAC/ClV,EAAQ7yB,IAEZ,KAEE,SAAC,YAAY,CAAqBY,MAAM,gBAAe,UACrD,SAAC,GAAW,CACVmyB,SAAUA,EACVvxB,SAAUqmC,EACV5U,qBAAsBA,EACtBD,mBAAoB,EAAKphB,MAAMohB,mBAC/BE,0BAA2B,EAAKoG,8BAChCnG,qBAAsB,EAAKiR,4BAPb,gBAWtB,CAEF,EAAC,EAEgB4D,qBAAuB,SAAC1U,GACvC,GAAIA,EAASxrB,OAAS,EAAG,CACvB,IAAM0rB,EAIF,CAAC,EACCyU,EAEF,CAAC,EASL,OARA3U,EAAS/qB,SAAQ,SAAA8qB,GACfG,EAAqBH,EAAQrzB,KAAO,EAAK8e,aAAaopB,yBACpD7U,EAAQrzB,KAEVioC,EAAgB5U,EAAQrzB,KAAO,EAAK8e,aAAaqpB,4BAC/C9U,EAAQrzB,IAEZ,KAEE,SAAC,YAAY,CAAsBY,MAAM,kBAAiB,UACxD,SAAC,GAAW,CACV0yB,SAAUA,EACV9xB,SAAUymC,EACVzU,qBAAsBA,EACtBD,mBAAoB,EAAK3hB,MAAM2hB,mBAC/BE,0BAA2B,EAAKgG,8BAChC/F,qBAAsB,EAAK8Q,4BAPb,iBAWtB,CAEF,EAAC,EAEgB4D,uBAAyB,SAAC7jB,GACzC,GAAIA,EAAiBzc,OAAS,EAAG,CAAC,IAAD,EACzBugC,EAEF,CAAC,EACC3jB,EAKF,CAAC,EACLH,EAAiBhc,SAAQ,SAAA4G,GACvBuV,EAA6BvV,EAAgBnP,KAAO,EAAK8e,aAAawpB,wBACpEn5B,EAAgBnP,KAElBqoC,EAAwBl5B,EAAgBnP,KAAO,EAAK8e,aAAaypB,2BAC/Dp5B,EAAgBnP,IAEpB,IAGA,IAAMwoC,EAA8F,CAAC,EACrGjkB,EAAiBhc,SAAQ,SAAA4G,GACvB,IAAMs5B,EAAYt5B,EAAgBtD,kBAC5B48B,KAAaD,IACjBA,EAAyBC,GAAa,IAExCD,EAAyBC,GAAW/mC,KAAKyN,EAC3C,SAG6C5P,IAAzC,EAAKqS,MAAMkB,2BAAuE,IAA5ByR,EAAiBzc,QACzE,EAAKiK,SAAS,CAAEe,0BAA2B,QAI7C,IAAM41B,EAAe,CACnB,CACEhoC,MAAO,MACPR,MAAO,QACR,gBACE8I,OAAOC,KAAKu/B,GAA0B3oC,KAAI,SAAC4oC,GAAS,cAAM,CAC3D/nC,MAAO+nC,EACPvoC,MAAM,GAAD,OAAK,EAAK8lC,qBAAqByC,GAAU,aAAgD,QAAhD,EAAwC,QAAxC,EAAKD,EAAyBC,UAAU,aAAnC,EAAqC3gC,cAAM,QAAI,EAAC,YACpG,MAIG6gC,EAA0E,QAAzC,EAAK/2B,MAAMkB,0BAC9CyR,OAC0ChlB,IAAzC,EAAKqS,MAAMkB,2BACsD,QADf,EAC/C01B,EAAyB,EAAK52B,MAAMkB,kCAA0B,QAC9D,GAER,OACE,UAAC,YAAY,CAAyBlS,MAAM,oBAAmB,WAE7D,gBACE2P,MAAO,CACLyJ,YAAa,OACb4uB,aAAc,OACdpnB,WAAY,MACZC,cAAe,OACf,UAEF,SAAC,KAAM,CACLlR,MAAO,CAAE8C,MAAO,QAChB8C,YAAY,kBACZzV,MAAO,EAAKkR,MAAMkB,0BAClBuD,SAAU,EAAK0vB,+BACf7+B,QAASwhC,MAKZC,EAA+B7gC,OAAS,IACvC,SAAC,GAAmB,CAClByc,iBAAkBokB,EAClBnnC,SAAU6mC,EACVtlB,uBAAwB,EAAKD,2BAG7B4B,6BAA8BA,EAC9BD,2BAA4B,EAAK7S,MAAM6S,2BACvCD,kCAAmC,EAAK4U,sCACxCzU,6BAA8B,EAAKif,qCA9BvB,oBAmCtB,CAEF,EAAC,EAEgBiF,WAAa,WAC5B,IAmDI3rB,EAnDE4rB,EAAkB,EACtB,SAAC,GAAG,CACF9U,QAAQ,mBACRrzB,KAAMooC,EAAAA,IACNpnB,QAAS,EAAKoe,iBACdhM,WAAY,EAAKniB,MAAM2tB,oBACnB,oBAEN,SAAC,GAAG,CACFvL,QAAQ,sBACRrzB,KAAMqoC,EAAAA,IACNrnB,QAAS,EAAKqe,sBACdjM,WAAY,EAAKniB,MAAM6tB,yBACnB,sBAEN,SAAC,GAAG,CACFzL,QAAQ,yBACRrzB,KAAMsoC,EAAAA,IACNtnB,QAAS,EAAKse,qBACdlM,WAAY,EAAKniB,MAAM+tB,wBACnB,yBAEN,SAAC,GAAG,CACF3L,QAAQ,8BACRrS,QAAS,EAAKue,iBACdv/B,KAAMuoC,EAAAA,KACF,sBAEN,SAAC,GAAG,CACFlV,QAAQ,yBACRrzB,KAAM,EAAKiR,MAAM+zB,cAAgBwD,EAAAA,IAAQC,EAAAA,IACzCznB,QAAS,EAAKwe,0BACdpM,WAAY,EAAKniB,MAAM+zB,eACnB,iCAEN,SAAC,GAAG,CACF3R,QAAQ,oBACRrzB,KAAM0oC,EAAAA,IACN1nB,QAAS,EAAKye,wBACV,2BAGFkJ,EAAe,EACnB,SAAC,GAAG,CACFtV,QAAQ,gBACRrzB,KAAM4oC,EAAAA,GACN5nB,QAAS,EAAK0e,YACV,gCAKJljB,EAAgB,MAgBpB,OAdI,EAAK1d,MAAM+pC,wBACbtsB,GACE,UAAC,KAAG,CAACpE,QAAQ,QAAO,UACjBgwB,EAAgBjpC,KAAI,SAACC,EAAMoT,GAC1B,OAAO,SAAC,WAAc,UAAUpT,GAAJoT,EAC9B,IACCo2B,EAAazpC,KAAI,SAACC,EAAMoT,GACvB,OAAO,SAAC,WAAc,UAAUpT,GAAJoT,EAC9B,OAGJiK,EAAgB,QAGX,CAAED,QAAAA,EAASC,cAAAA,EACpB,EAAC,EAEgBssB,UAAY,WAC3B,OAAI,EAAK73B,MAAM5E,UACN,WAEF,SACT,EAAC,EAEgB08B,0BAA4B,WAC3C,GAA+B,OAA3B,EAAK93B,MAAMkrB,kBAAmDv9B,IAA3B,EAAKqS,MAAMkrB,YAA2B,CAC3E,IAAM6M,EAID,CACH,CACExpC,KAAM,MACNO,MAAO,EAAKkR,MAAMkrB,YAAY98B,MAG5B4pC,EAGD,CACH,CACEzpC,KAAM,eACNO,MAAO,EAAKkR,MAAMkrB,YAAY/e,SAASC,cAGrC6rB,EAGD,GACL,EAAKj4B,MAAMkrB,YAAYjoB,YAAYtM,SAAQ,SAAAzI,GACzC,GAAuB,SAAnBA,EAAKkV,UAAsB,CAC7B,IAAM80B,EAAWhqC,EACjB+pC,EAAwBnoC,KAAK,CAC3BvB,KAAM2pC,EAASv1B,wBAAwB,GAAGO,YAC1CpU,MAAOopC,EAAS50B,oBAAoB,GAAGJ,aAE3C,KAAO,CACL,IAAMi1B,EAAWjqC,EACjB+pC,EAAwBnoC,KAAK,CAC3BvB,KAAM4pC,EAASx1B,wBAAwB,GAAGO,YAC1CpU,MAAOqpC,EAASnpB,WAEpB,CACF,IACA,IAAMopB,EAMF,CAAC,EACL,EAAKp4B,MAAMkrB,YAAYjd,aAAatX,SAAQ,SAAAzI,GAC1C,IAAIoJ,EAAa,UACjB,GAA6B,OAAzBpJ,EAAKyf,sBAAqDhgB,IAAzBO,EAAKyf,gBAA+B,CACvE,IAAM0qB,EAAW71B,GAAuB,CACtCC,QAASvU,EAAKyf,gBACdpf,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6B,CACrCvU,MAAO,SACPid,QAAS,wBACTC,iBAAkB,UAGlBqsB,EAASniC,OAAS,IACpBoB,EACE+gC,EAAS,GAENC,sBAAsB,GACtBC,gCAGT,CACMjhC,KAAc8gC,IAClBA,EAAsC9gC,GAAc,IAEtD,IAAMkhC,EAAoBtqC,EAAKghB,sBAAsB,GACrDkpB,EAAsC9gC,GAAYxH,KAAK,CACrDvB,KAAML,EAAKyU,wBAAwB,GAAGO,YACtCpU,MAAO0pC,EAAkBrpB,aAAatN,WACtCuN,KAAMopB,EAAkBnpB,6BAA6B,GAAGnM,aAE5D,IACA,IAAMu1B,EAAuB,SAC3BzqC,GAEA,OAAOA,EAAWC,KAAI,SAAAC,GACpB,IAAIY,EAMJ,OAJEA,EADgB,OAAdZ,EAAKkhB,WAA+BzhB,IAAdO,EAAKkhB,KACxB,UAAMlhB,EAAKY,MAAK,aAAKZ,EAAKkhB,KAAI,KAE3BlhB,EAAKY,OAGb,SAAC,SAAiB,CAEhBR,MAAOJ,EAAKK,KAAK,SAEhBO,GAHIZ,EAAKK,KAMhB,GACF,EACMmqC,EAAkBD,EAAqBV,GACvCY,EAAwBF,EAC5BT,GAEIY,EAA4BH,EAChCR,GAEIY,EAA6B,GACnC,IAAK,IAAMvhC,KAAc8gC,EAAuC,CAC9D,IAAMU,EAAeL,EACnBL,EAAsC9gC,IAErB,YAAfA,EACFuhC,EAA2B/oC,KAAKgpC,GAEhCD,EAA2B/oC,MACzB,iCACE,SAAC,KAAO,CAACud,YAAY,OAAO0rB,kBAAmB,EAAGC,QAAM,EAAC/xB,OAAK,WAC3D3P,IAEFwhC,KAIT,CACA,OACE,iCACE,SAAC,IAAY,CAACrrC,OAAO,aAAagC,OAAQ,EAAE,SACzCipC,KAEH,SAAC,KAAO,CAACrrB,YAAY,OAAO0rB,kBAAmB,EAAE,kCAGjD,SAAC,IAAY,CAACtrC,OAAO,aAAagC,OAAQ,EAAE,SACzCkpC,KAEH,SAAC,KAAO,CAACtrB,YAAY,OAAO0rB,kBAAmB,EAAE,0BAGjD,SAAC,IAAY,CAACtrC,OAAO,aAAagC,OAAQ,EAAE,SACzCmpC,KAEH,SAAC,KAAO,CAACvrB,YAAY,OAAO0rB,kBAAmB,EAAE,2BAGjD,SAAC,IAAY,CAACtrC,OAAO,aAAagC,OAAQ,EAAE,SACzCopC,MAIT,CAEF,EAAC,EAEgBI,mBAAqB,WACpC,OAAO,EAAK/rB,aAAagsB,iBAAiBhjC,OAAS,IACjD,gBAAKyI,MAAO,CAAEw6B,OAAQ,UAAW,UAC/B,SAAC,KAAQ,CACP1xB,QAAS,EAAKzH,MAAMu0B,qBACpB9vB,SAAU,EAAK6vB,wBAAwB,2BAM/C,EAAC,EAED7zB,OAAS,WAAwB,IAAD,EAC9B,EAAoE,EAAKi0B,oBAAjEjlB,EAAI,EAAJA,KAAM0R,EAAQ,EAARA,SAAUO,EAAQ,EAARA,SAAU/O,EAAgB,EAAhBA,iBAAkBxJ,EAAW,EAAXA,YAE9CY,EAAmBsY,EAAY+W,sBAC/BrzB,EAAS,EAAK+uB,YACdzqB,EAAsB,EAAK0qB,uBAAuBtlB,GAClDpK,EAA2B,EAAK4vB,8BAChCjrB,EAAe,EAAKurB,kBACpBrrB,EAAgB,EAAKsrB,mBACrBrrB,EAAkB,EAAKsrB,qBACvBrrB,EAAwB,EAAKurB,2BAC7BprB,EAAmB,EAAKyrB,oBAAoB7U,GAC5C3W,EAAoB,EAAK4rB,qBAAqB1U,GAC9CpX,EAAsB,EAAKksB,uBAAuB7jB,GACxD,EAAmC,EAAKskB,aAAhC3rB,EAAO,EAAPA,QAASC,EAAa,EAAbA,cACXC,EAAS,EAAKqsB,YACdryB,EAAyB,EAAKsyB,4BAC9B7tB,EAAkB,EAAKgvB,qBAgB7B,OAbyB,OAArB1uB,QAAkD5c,IAArB4c,GAC/BR,EAAiBja,KAAK,iBAEE,OAAtB0a,QAAoD7c,IAAtB6c,GAChCT,EAAiBja,KAAK,mBAEI,OAAxBwa,QAAwD3c,IAAxB2c,GAClCP,EAAiBja,KAAK,oBAIb,OAAXqZ,QAAW,IAAXA,GAAoB,QAAT,EAAXA,EAAaxS,eAAO,OAApB,OAAAwS,EAAuB,EAAKsrB,mBAG1B,UAAC,IAAM,CAAC91B,MAAO,CAAEiC,OAAQ,QAAUy4B,UAAQ,aACzC,SAAC,GAAkB,CACjB/tB,QAASA,EACTC,cAAeA,EACfC,OAAQA,EACRC,kBAAmB,EAAKA,kBAAkB,UAE1C,SAAC,GAAiB,CAChBxG,yBAA0B,EAAKjF,MAAMiF,yBACrCC,oCAAqC,EAAK4rB,wCAC1C3rB,sCAAuC,EAAK+rB,0CAC5C9rB,8BAAyDzX,IAA/B,EAAKqS,MAAMspB,sBAAqE37B,IAApC,EAAKqS,MAAMovB,sBACjF/pB,yBAA0BA,EAC1BC,0BAA2B,EAAKtF,MAAMsF,0BACtCC,2BAA4B,EAAKsmB,+BACjCrmB,uBAAwBA,EACxBC,mBAAoB,EAAKzF,MAAMyF,mBAC/BC,yBAA0B,EAAKyqB,6BAC/BxqB,qCAAsC,EAAKkrB,yCAC3C9sB,sBAAuB,EAAK/D,MAAM+D,sBAClCC,sBAAuB,EAAKhE,MAAMgE,sBAClCC,2BAA4B,EAAKjE,MAAMiE,2BACvCC,2BAA4B,EAAKlE,MAAMkE,2BACvCC,6BAA8B,EAAKnE,MAAMmE,6BACzCC,uBAAwB,EAAKsrB,2BAC7BrrB,uBAAwB,EAAKwrB,2BAC7BvrB,yBAA0B,EAAK0rB,6BAC/BpqB,qBAAsB,EAAK5F,MAAM4F,qBACjCC,qBAAsB,EAAKyrB,yBAC3BxrB,qBAAsB,EAAK6rB,yBAC3B5rB,OAAQA,OAIZ,SAAC,GAAkB,CACjB8D,iBAAkB,EAAKA,iBACvBC,YAAa,EAAKA,YAClBC,iBAAkBA,EAClBC,aAAcA,EACdC,gBAAiBA,EACjBC,cAAeA,EACfC,gBAAiBA,EACjBC,sBAAuBA,EACvBC,oBAAqBA,EACrBC,oBAAqBA,EACrBC,iBAAkBA,EAClBC,kBAAmBA,EACnBrB,YAAaA,EACbsB,eAAgB,EAAKzK,MAAMyK,eAC3BC,6BAA8B,EAAK4c,iCACnC3c,iBAAkB,EAAK0nB,qBACvB1qB,wBAAyB,EAAKA,0BAG/B,EAAK3H,MAAM2qB,4BACZ,EAAK3qB,MAAM+pB,qBAAqB7zB,OAAS,GAErC,SAAC,GAAiB,CAChBsf,UAAW,EAAKxV,MAAM4qB,mBACtBnV,UAAW,EAAKzV,MAAM6qB,mBACtBpb,KAAM,EAAKzP,MAAM+pB,uBAGnB,OAGV,EA5yGEr2B,QAAQyF,KAAK,eAAD,OACK,EAAKtL,MAAMsK,MAAM1C,oBAAmB,OACnD,EAAK5H,MAAMsK,OAEb,IAAMqqB,EAAsB,CAC1B,QACA,SACA,MACA,UACA,OACA,kBACA,gBAEF30B,EAAMsb,YAAYxS,SAAQ,SAAC2S,GACzB,IAAM2C,EAAU,IAAI5I,EAAAA,GAAAA,OAAAA,aAA6BiG,EAAW2C,SAC5D,EAAKqW,eAAexyB,KAAKmc,GACzB,IAAMlR,EAAM2Q,GAASO,QACYte,IAA7B2b,EAAWgwB,cACb,EAAK9W,oBAAoBznB,GAAOuO,EAAWgwB,cAE3C,EAAK9W,oBAAoBznB,GAAOynB,EAElC,EAAKD,kBAAkBxnB,GAAO,QACCpN,IAA3B2b,EAAWrG,aACbqG,EAAWrG,YAAYtM,SAAQ,SAAAkd,GAC7B,EAAK0O,kBAAkBxnB,GAAKjL,KAAK,CAC/BvB,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6BwQ,EAAWtlB,MAClDwY,OAAQ8M,EAAW9M,OAAO9Y,KAAI,SAAAa,GAC5B,OAAO,IAAIuU,EAAAA,GAAAA,OAAAA,aAA6BvU,EAC1C,KAEJ,SAE8BnB,IAA5B2b,EAAW2E,cACb3E,EAAW2E,aAAatX,SAAQ,SAAA6a,GAC9B,EAAKvD,aAAane,KAAK,CACrBvB,KAAM,IAAI8U,EAAAA,GAAAA,OAAAA,aAA6BmO,EAAYjjB,MACnDO,WAAOnB,EACPyhB,KAAM,IAAI/L,EAAAA,GAAAA,OAAAA,aAA6BmO,EAAYpC,OAEvD,IAEuB,OAArB9F,EAAW3K,YAAuChR,IAArB2b,EAAW3K,MAC1C,EAAKkkB,UAAU9nB,GAAO2R,GAAepD,EAAW3K,OAEhD,EAAKkkB,UAAU9nB,GAAO,EAAK6nB,eAE/B,IAEA,MAAsC5V,GAAiB,CACrDjU,QAAS,EAAKlL,MAAMkL,QACpBZ,MAAO,EAAKtK,MAAMsK,MAClB8U,QAAS,EAAKpf,MAAMof,UAHdC,EAAY,EAAZA,aAAcpD,EAAW,EAAXA,YAKtB,EAAKoD,aAAeA,EACpB,EAAKpD,YAAcA,EACnB,EAAK2B,kBAAoB9b,EAAAA,YACzB,EAAKka,iBAAmBla,EAAAA,YAMxB,EAAKud,aAAa8W,qBAAqBrtB,SAAQ,SAAA8nB,GAC7C,EAAKvR,aAAaiX,sBAAsB1F,EAAYnnB,WACtD,IAEA,cAAuB,EAAK4V,aAAaqsB,YAAW,GAA7C9oB,EAAM,KAAEthB,EAAI,KAwClB,OAtCD,EAAK6Q,MAAQ,CACX8P,gBAAiB,IAAI1Z,IACrBqU,eAAgB,IAAIrU,IACpBgrB,mBAAoB,IAAIhrB,IACxBurB,mBAAoB,IAAIvrB,IACxByc,2BAA4B,IAAIzc,IAChCsqB,8BAA+B,IAAItqB,IACnCqqB,6BAA8B,IAAIrqB,IAClC2tB,mBAAoB,GACpBuF,qBAAiB37B,EACjB47B,oBAAqB,GACrB7R,qBAAiB/pB,EACjByN,WAAW,EACX6J,0BAA0B,EAC1BK,2BAA2B,EAC3BqlB,4BAA4B,EAC5BC,mBAAoB,EACpBC,mBAAoB,EACpBd,qBAAsB,GACtB5lB,8BAA8B,EAC9ByB,sBAAsB,EACtB+nB,oBAAoB,EACpBI,wBAAwB,EACxBF,yBAAyB,EACzBpoB,oBAAoB,EACpBxB,4BAA4B,EAC5BC,4BAA4B,EAC5B0rB,yBAAqBjiC,EACrBoW,sBAAuB,CAAC0M,EAAO,GAAIA,EAAO,GAAKthB,EAAK,IACpD4gC,yBAAqBpiC,EACrBqW,sBAAuB,CAACyM,EAAO,GAAIA,EAAO,GAAKthB,EAAK,IACpD+gC,2BAAuBviC,EACvBomC,eAAe,EACf7yB,+BAA2BvT,EAC3B8+B,oBAAqB,CAAC,EACtB5I,6BAA8B,EAAKh2B,MAAMg2B,6BACzCsI,cAAe,IAAI/1B,IACnBm+B,sBAAsB,GACvB,CACH,CAsgFC,OAtgFA,0CAED,SACEhW,EACAC,GACO,IAAD,OAIN,GACE5wB,KAAKC,MAAMqU,SAAS6kB,WAAaxI,EAAcrc,SAAS6kB,UACxDn5B,KAAKC,MAAMmL,mBAAqBulB,EAAcvlB,kBAC9CpL,KAAKC,MAAMoM,oBAAsBskB,EAActkB,mBAC/CrM,KAAKC,MAAMsK,QAAUomB,EAAcpmB,OACnCvK,KAAKC,MAAMkL,UAAYwlB,EAAcxlB,QACrC,CACuC,OAAnCnL,KAAK6d,kBAAkBrL,cAAuDzS,IAAnCC,KAAK6d,kBAAkBrL,UACpExS,KAAK6d,kBAAkBrL,QAAQC,UAAY,IAE7CzS,KAAKsf,aAAawgB,UACO,OAArB9/B,KAAKkc,kBAA6Cnc,IAArBC,KAAKkc,cACE,OAAlClc,KAAKic,iBAAiBzJ,cAAsDzS,IAAlCC,KAAKic,iBAAiBzJ,UAClExS,KAAKic,iBAAiBzJ,QAAQC,UAAY,IAE5CzS,KAAKkc,YAAY4jB,WAEnB,MAAsC1gB,GAAiB,CACrDjU,QAASnL,KAAKC,MAAMkL,QACpBZ,MAAOvK,KAAKC,MAAMsK,MAClB8U,QAASrf,KAAKC,MAAMof,UAHdC,EAAY,EAAZA,aAAcpD,EAAW,EAAXA,YAKtBlc,KAAKsf,aAAeA,EACpBtf,KAAKkc,YAAcA,EAEnB,IAAM2W,EAA4C,IAAIrqB,IAChDsqB,EAA6C,IAAItqB,IACvDxI,KAAKsf,aAAa8W,qBAAqBrtB,SAAQ,SAAA8nB,GAC7C,IAAMnnB,EAAamnB,EAAYnnB,WAC3B,EAAK4V,aAAassB,qBAAqBliC,IACzCopB,EAA8B9pB,IAAIU,GAEhC,EAAK4V,aAAausB,oBAAoBniC,IACxCmpB,EAA6B7pB,IAAIU,EAErC,IAEA,cAAuB1J,KAAKsf,aAAaqsB,YAAW,GAA7C9oB,EAAM,KAAEthB,EAAI,KAEnBvB,KAAKuS,SAAS,CACZsK,eAAgB,IAAIrU,IACpBgrB,mBAAoB,IAAIhrB,IACxBurB,mBAAoB,IAAIvrB,IACxByc,2BAA4B,IAAIzc,IAChCsqB,8BAAAA,EACAD,6BAAAA,EACAsD,mBAAoB,GACpBoI,cAAe,IAAI/1B,IACnB2N,sBAAuB,CAAC0M,EAAO,GAAIA,EAAO,GAAKthB,EAAK,IACpD6U,sBAAuB,CAACyM,EAAO,GAAIA,EAAO,GAAKthB,EAAK,MAEtDvB,KAAKm7B,mBACP,CACF,GAiHA,4BA2MA,yCAKA,8GACe,IAAIpvB,SAAc,SAACiC,EAASC,GACvCnI,QAAQyF,KAAK,4CACb,IAAMC,EAAS,EAAKvL,MAAMkL,QAAQnH,EAAe2/B,qBACjDn4B,EAAO+pB,mBAAmB,CACxBnqB,iBAAkB,EAAKnL,MAAMmL,iBAC7BO,YAAa,CACXC,SAAU,QAEX4pB,MAAK,SAACC,GACkB,OAArBA,QAAkD11B,IAArB01B,IAC/BA,EAAmB,IAErBA,EAAiB1sB,SAAQ,SAAA2K,GACvB,IACMsY,EADc/f,EAAAA,SAAAA,eAA4ByH,GAAxCxH,QAEJ8f,EAASwN,cAAgBx1B,EAAe2/B,sBAC1C79B,QAAQyF,KAAK,yBAAD,OAA0BygB,EAASlc,eAAc,MAC7DtE,EAAOmqB,iBAAiB,CACtBvqB,iBAAkB,EAAKnL,MAAMmL,iBAC7BiB,kBAAmB2f,EAAS9iB,kBAC5BihB,eAAgB6B,EAASlc,iBACxB0lB,MAAK,SAACI,GACP,IAAM5L,EAAOvU,EAAAA,GAAAA,aAAAA,SAAiCmgB,GAExCzd,EADclM,EAAAA,SAAAA,eAA4B+d,EAAK6D,MAA7C3hB,QAMHwT,GAAkBvH,GAQlB2H,GAAyB3H,GAOzBiI,GAAuBjI,IAQZ,IAAIoO,GAAkBpO,GAC9B2O,KAAK/d,SAAQ,SAAAqM,GACnBtP,QAAQyF,KAAK,YAAD,OAAa6J,EAAI5U,IAAG,MAChC,IAAM+d,EAAWnJ,EAAImJ,SACfpX,EAAQ,EAAKlH,MAAMsK,MAAMrC,aAAa,GAC5C,GAAIqW,EAAS3W,sBAAwBT,EAAMmC,oBAezC,GALqB,EAAKgW,aAAama,aAAa7pB,MAClD,SAACk8B,GACC,OAAOxtB,GAAawtB,EAAU12B,EAChC,IAYAtP,QAAQ0iB,MAAM,8BAAD,OAA+BpT,EAAI5U,IAAG,WATnD,IAEE,EAAK8e,aAAayc,OAAO3mB,EAAK,CAAC,GAC/B,IAAM22B,EAAkB52B,GAAqBC,GAC7C,EAAKyxB,iBAAiBkF,EAGxB,CAFE,SACAjmC,QAAQU,MAAM,sBAAD,OAAuB4O,EAAI5U,IAAG,KAC7C,MAKFsF,QAAQ0iB,MACN,oBAAapT,EAAI5U,IAAG,gCACD2X,EAAOrI,eAAc,KACxC,sDAGN,IAEA9B,KAhDElI,QAAQ0iB,MACN,8BAAuBrQ,EAAOrI,eAAc,MAC5C,4DATFhK,QAAQ0iB,MACN,8BAAuBrQ,EAAOrI,eAAc,MAC5C,mDAVFhK,QAAQ0iB,MACN,8BAAuBrQ,EAAOrI,eAAc,MAA5C,kFA+DN,IAAG1B,OAAM,SAAC5H,GAER+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,oCAGJ6B,QAAQU,MACN,uBAAsB,2BACFwlB,EAASlc,eAAc,MAAI,qBACjCkc,EAAS9iB,kBAAiB,MAAI,oBAC/B,EAAKjJ,MAAMmL,iBAAgB,OACxC5E,EAEJ,IAMA,EAAKg0B,cAET,GACF,IAAGpsB,OAAM,SAAC5H,GACRV,QAAQU,MAAMA,GAEd+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,oCAGJgK,EAAOzH,aAAiBlC,MAAQkC,EAAQ,IAAIlC,MAAMuC,OAAOL,IAC3D,GACF,IAAE,mFACH,kDA1ID,IAqaA,8CA2qBA,SACEtF,EACAqgC,GACO,IAAD,OACNvhC,KAAK00B,eAAe3rB,SAAQ,SAAAsV,GACtBA,EAAQrJ,YAAc9T,IACxB4E,QAAQyF,KAAK,qBAAD,OAAsB8S,EAAQ/I,YAAW,MACrD,EAAK/C,SAAS,CACZmpB,gBAAiBrd,EACjBsd,oBAAqB,KAG3B,GACF,IA29BA,kCA0BA,WACE,MAAO,CAAC,YAAa,gBAAiB,cAAe,sBACvD,GAAC,2CAsCD,WACE,MAAO,CACLqH,OAAO,SAAC,YAAa,CAAa9hC,MAAM,QAAO,kBAArB,SAC1B+d,QAAQ,SAAC,YAAa,CAAc/d,MAAM,SAAQ,mBAAvB,UAC3B8qC,KAAK,SAAC,YAAa,CAAW9qC,MAAM,MAAK,gBAAjB,OACxB+qC,SAAS,SAAC,YAAa,CAAe/qC,MAAM,UAAS,oBAAzB,WAC5BgrC,MAAM,SAAC,YAAa,CAAYhrC,MAAM,OAAM,iBAAnB,QACzBirC,iBACE,SAAC,YAAa,CAAuBjrC,MAAM,kBAAiB,+BAAzC,mBAIrBkrC,cACE,SAAC,YAAa,CAAoBlrC,MAAM,eAAc,4BAAnC,gBAKzB,KAAC,EAjrFc,CAASa,EAAAA,WA82G1B,SAAeqS,GAAWqgB,IC16G1B,IAAQ4X,GAAsB52B,EAAAA,GAAAA,oBAAAA,kBA2BxB62B,GAAkB,SAAC3hC,EAAiB0B,GACxC,OAAO1B,EAAOhE,MAAK,SAAC4D,GAClB,OAAOA,EAAMzC,mBAAmBnB,MAAK,SAACnG,GACpC,OAAOA,IAAQ6L,CACjB,GACF,GACF,EAEA,SAASkgC,GAAuB,GAqBR,IApBtBphC,EAAO,EAAPA,QACAR,EAAM,EAANA,OACAwd,EAAI,EAAJA,KACAC,EAAG,EAAHA,IACA/I,EAAO,EAAPA,QACA2qB,EAAqB,EAArBA,sBACAzuB,EAAW,EAAXA,YAeA,GAA0D5G,EAAAA,EAAAA,MAAoE,IAAtHvJ,iBAAAA,OAAgB,MAAG,GAAE,MAAEiB,kBAAAA,OAAiB,MAAG,GAAE,EAC/CiI,GAAWC,EAAAA,EAAAA,MAEjB,GAA0CjH,EAAAA,EAAAA,UAASg/B,GAAgB3hC,EAAQ0B,IAAmB,eAAvFmgC,EAAa,KAAEC,EAAgB,KACtC,GAA4Cn/B,EAAAA,EAAAA,UAAqC,MAAK,eAA/EisB,EAAc,KAAEmT,EAAiB,MAExC/+B,EAAAA,EAAAA,YAAU,WACR,IAAMg/B,EAAcL,GAAgB3hC,EAAQ0B,GACxB,OAAhBsgC,GACFF,EAAiBE,EAErB,GAAG,CAACtgC,EAAmB1B,KAEvBgD,EAAAA,EAAAA,YAAU,WACR,IAAMi/B,EAAmB,yCAAG,8FAAqD,OAA5CzhC,EAAO,EAAPA,QAASC,EAAgB,EAAhBA,iBAAkBiB,EAAiB,EAAjBA,kBAAiB,SAI9B,IAAIN,SAAsC,SAACiC,EAASC,GACrG,IACE,IAAM4+B,EAAarjC,OAAO2P,OAAOnV,GAAgB3D,KAAI,SAACysC,GAAY,OAAK3hC,EAAQ2hC,EAAa,IAC5F/gC,QAAQC,IAAI6gC,EAAWxsC,IAAG,yCAAC,WAAOmL,GAAM,wHACTA,EAAOY,uBAAuB,CACzDhB,iBAAkBA,EAClBiB,kBAAmBA,IACnB,OAHIqgB,EAAc,SAIgBA,EAAersB,KAAI,SAAC2B,GAAQ,OAAKqqC,GAAkBrqC,EAAS,IAAC,eAEvC,OAFnD+qC,EAAyB,MAEFC,2BACtB/F,EAA8B8F,EAA0BC,yBAAyB,GAAG9jC,kBACpF+jC,EAAkBtiC,EAAOhE,MAAK,SAAC4D,GACnC,OAAOA,EAAMzC,mBAAmBnB,MAAK,SAACnG,GACpC,OAAOA,IAAQymC,CACjB,GACF,IACAj5B,EAAQ,CAAEzD,MAAO0iC,EAAiBjrC,SAAU+qC,KAGN,SAIsD,OAA7E,QAHXG,EAAwD,QAA5C,EAAGH,EAA0BhtB,uBAAe,aAAzC,EAA2CpZ,MAC9D,SAAAwmC,GAAW,MAF2B,WAEvBA,EAAYp4B,wBAAwB,GAAGC,SAA6C,WAEpF,IAAZk4B,GAA6B,QAAjB,EAAZA,EAAcntB,uBAAe,OAAK,QAAL,EAA7B,EAAgC,UAAE,OAAiB,QAAjB,EAAlC,EAAoCA,uBAAe,OAAK,QAAL,EAAnD,EAAsD,UAAE,OAAuB,QAAvB,EAAxD,EAA0D2qB,6BAAqB,WAAnE,EAAZ,EAAkF,MAC/E36B,EAA2Bm9B,EAAantB,gBAAgB,GAAGA,gBAAgB,GAAG2qB,sBAAsB,GAAG3T,yBACvGkW,EAAkBtiC,EAAOhE,MAAK,SAAC4D,GACnC,OAAOA,EAAMrC,aAAavB,MAAK,SAACQ,GAC9B,OAAOA,EAAM2I,iBAAmBC,CAClC,GACF,IACA/B,EAAQ,CAAEzD,MAAO0iC,EAAiBjrC,SAAU+qC,KAC7C,2CACF,mDA9ByB,KA8BtB3+B,MAAMH,EAGZ,CAFE,MAAOzH,GACPyH,EAAOzH,EACT,CACF,IAAE,mGAzCuB,sCA2CH,OAAlBgmC,QAA4CzsC,IAAlBysC,GACvBI,EAAoB,CAAEzhC,QAAAA,EAASC,iBAAAA,EAAkBiB,kBAAAA,IAAqBmpB,MAAK,SAACjnB,GAChE,OAAXA,QAA8BxO,IAAXwO,IACrBk+B,EAAiBl+B,EAAOhE,OACxBmiC,EAAkBn+B,EAAOvM,UAE7B,IAAGoM,OAAM,SAAA5H,GACPV,QAAQU,MAAM,kCAAmCA,EACnD,GAEJ,GAAG,CAACmE,EAAQQ,EAASC,EAAkBiB,EAAmBmgC,IAE1D,IACIY,EADEpU,EAAe,IAAIC,gBAAgB3kB,EAAS4kB,QAElD,IAAKF,EAAa5e,IAAI,gBAAiB,CACrC,IAAMizB,EAAarU,EAAanrB,IAAI,SACpCu/B,EAAsC,OAAfC,EAAsBA,OAAattC,CAC5D,CAEA,IAAIutC,EAAS,KAkBb,OAjBqB,MAAjBd,QAA2CzsC,IAAlBysC,IAC3Bc,GACE,SAAC,GAAW,CACVniC,QAASA,EACTC,iBAAkBA,EAClBiB,kBAAmBA,EACnB4pB,6BAA8BmX,EAC9B7iC,MAAOiiC,EACPntB,QAASA,EACT9D,YAAaA,EACbyuB,sBAAuBA,EACvB5hB,IAAKA,EACLD,KAAMA,EACNoR,eAA8B,OAAdA,QAAc,IAAdA,EAAAA,OAAkBx5B,KAIjCutC,CACT,CA8IA,SAAel5B,IA1Hf,SAAiBnU,GACf,IAAQkL,EAAkDlL,EAAlDkL,QAASC,EAAyCnL,EAAzCmL,iBAAkBkJ,EAAuBrU,EAAvBqU,SAAUE,EAAavU,EAAbuU,SAC7C,EAA8BnH,GAAU,CAAElC,QAAAA,EAASC,iBAAAA,IAA3CT,EAAM,EAANA,OA4BR,GA5ByB,EAAT6C,UA6Bd,OAAO,KAGT,GAAsB,IAAlB7C,EAAOrC,OACT,OAAO,KAGT,IACMilC,EADa5iC,EAAO,GACSzC,aACnC,GAA+B,IAA3BqlC,EAAgBjlC,OAClB,OAAO,KAET,IAMIgL,EAQAk6B,EAdEjmC,EAAWgmC,EAAgB,GAOjC,GAAIj5B,EAAS6kB,SAASjzB,SAAS,WAAY,CACzC,IAAMunC,EAAiBn5B,EAAS6kB,SAAS12B,MAAM,WAAW,GAC1D6Q,EAA4Bm6B,EAAevnC,SAAS,KAAOunC,EAAehrC,MAAM,KAAK,GAAKgrC,CAC5F,MACEn6B,EAA4Bi6B,EAAgB,GAAGrkC,kBAYjD,OARyC,MAArC3B,EAAStF,2BACXurC,GACE,SAAC,YAAY,CAAsBpsC,MAAM,iBAAgB,UACvD,SAAC,EAAa,CAACY,SAAUuF,KADT,oBAOpB,UAAC,IAAM,CAACwJ,MAAO,CAAEiC,OAAQ,QAAUy4B,UAAQ,aACzC,SAAC,UAAY,CACX53B,MAAO,IACP9C,MAAO,CACLiC,OAAQ,OACR06B,YAAa,QACbC,iBAAkB,IAClBtwB,SAAU,SACVC,WAAY,QACZ,UAEF,UAAC,IAAI,CACHpJ,KAAK,SACLqJ,gBAAiB,CAAC,UAAW,QAAS,iBAAkB,UACxDxM,MAAO,CAAEiC,OAAQ,QACjBmB,aAAc,GAAG,WAEjB,SAAC,YAAY,CAAe/S,MAAM,UAAS,UACzC,SAAC,EAAO,CAACY,SAAUuF,KADH,YAGlB,SAAC,YAAY,CAAanG,MAAM,QAAO,UACrC,SAAC,EAAK,CAACY,SAAUuF,KADD,SAGjBimC,GACD,SAAC,YAAY,CAAcpsC,MAAM,SAAQ,UACvC,SAAC,GAAS,CACR+J,QAASlL,EAAMkL,QACfnJ,SAAU2I,EACV2I,0BAA2BA,EAC3BC,kBA5FkB,SAAH,GAAoE,IAA9DlH,EAAiB,EAAjBA,kBAC/BvG,QAAQyF,KAAK,qBAAD,OAAsBc,EAAiB,MACnD,IAAIo5B,EACF,mBAAYr6B,GAAgB,kBACjBiB,GAGTiI,EAAS6kB,SAASjzB,SAAS,gBAC7Bu/B,EAAUnxB,EAAS6kB,SACd7kB,EAAS6kB,SAASjzB,SAAS,YAG9Bu/B,EAAUA,EAAQrM,QAAQ,kBAAkB,WAAD,OAAa/sB,IAFxDo5B,GAAO,kBAAep5B,IAOxBiI,EAAS6kB,SAASjzB,SAAS,aACR,MAAnBoO,EAAS4kB,SAETuM,GAAWnxB,EAAS4kB,QAGtB1kB,EAASixB,EAAS,CAAErM,SAAS,GAC/B,KA+D0B,gBAWtB,SAAC,KAAM,WACL,SAAC,KAAK,CACJwU,KAAK,6BACLC,SACE,SAACtB,GAAuB,CACtBphC,QAASlL,EAAMkL,QACfR,OAAQA,EACR0U,QAASpf,EAAMof,QACf9D,YAAatb,EAAMsb,YACnByuB,sBAAuB/pC,EAAM+pC,sBAC7B5hB,IAAKnoB,EAAMmoB,IACXD,KAAMloB,EAAMkoB,aAO1B,I,+ICtTQ2lB,GAAwBr4B,EAAAA,GAAAA,KAAAA,oBAkB1Bs4B,GAAc,SAACC,GACnB,MAAmB,kBAARA,GAA4B,OAARA,EACtBjoC,KAAKC,UAAUgoC,GAEjBnnC,OAAOmnC,EAChB,EAkBO,SAASC,GAASjsC,GAAsD,IAAvBksC,EAAK,uDAAG,EAC9D,QAAiBnuC,IAAbiC,GAAuC,OAAbA,EAAmB,MAAO,GACxD,IAAMmsC,EAAW3kC,OAAOC,KAAKzH,GAAU6H,QAAO,SAAAsD,GAAG,MAAY,WAARA,CAAgB,IAErE,OAAOghC,EAASC,SAAQ,SAAAC,GAAY,IAAD,IAE3BC,EAAUR,GAAoBS,QAAQF,GACxCntC,EAAQc,EAASqsC,GAGrB,QAAgBtuC,IAAZuuC,EAAuB,CAAC,IAAD,IAEzB,OAA4B,MAAxBD,EAAQG,MADE,mBAC2B,GAElC,CAAC,CACNC,IAAI,IAAD,OAAMJ,EAAQxrC,UAAU,EAAG,GAAE,YAAIwrC,EAAQxrC,UAAU,EAAG,GAAE,KAC3D6rC,GAAI,GACJL,QAAS,cACTntC,MAAwB,QAAnB,EAAO,QAAP,EAAEA,SAAK,aAAL,EAAO+S,kBAAU,QAAI,GAC5B6uB,MAAOoL,GAEX,CAGA,GAAmB,OAAfI,EAAQI,SAAyB3uC,IAAVmB,EAAqB,CAC9C,IAAMytC,EAAgBhpC,MAAMuT,QAAQhY,GAASA,EAAQ,CAACA,GAGhD0tC,EAAwB,CAC5BH,IAAKH,EAAQG,IACbC,GAAIJ,EAAQI,GACZL,QAAAA,EACAntC,MAAM,iBAAD,OAAmBytC,EAAcrmC,OAAM,YAC5Cw6B,MAAOoL,EACPpsC,SAAU,IAgBZ,OAZA8sC,EAAa9sC,SAAW6sC,EAActuC,KAAI,SAACC,EAAMC,GAS/C,MAR0B,CACxBkuC,IAAI,GAAD,OAAKH,EAAQG,IAAG,YAAIluC,EAAQ,GAC/BmuC,GAAI,OACJL,QAAQ,QAAD,OAAU9tC,EAAQ,GACzBW,MAAM,iBAAD,OAAmBX,EAAQ,GAChCuiC,MAAOoL,EAAQ,EACfpsC,SAAUmsC,GAAQ3tC,EAAM4tC,EAAQ,GAGpC,IAEO,CAACU,EACV,CASA,OANIjpC,MAAMuT,QAAQhY,GAChBA,EAAQA,EAAMb,IAAI0tC,IAAarrC,KAAK,MACV,kBAAVxB,GAAgC,OAAVA,IACtCA,EAAQ6sC,GAAY7sC,IAGf,CAAC,CACNutC,IAAKH,EAAQG,IACbC,GAAIJ,EAAQI,GACZL,QAASA,EAAQjV,QAAQ,WAAY,IACrCl4B,MAAwB,QAAnB,EAAO,QAAP,EAAEA,SAAK,aAAL,EAAO+S,kBAAU,QAAI,GAC5B6uB,MAAOoL,GAEX,GACF,CAOO,SAASW,GAAe7sC,GAE7B,OADgBisC,GAAQjsC,GACT4I,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAE4jC,IAAIrJ,cAAct6B,EAAE2jC,IAAI,GAC1D,CChHO,ICGC3c,GAAWC,GAAAA,EAAAA,OA0YnB,SAhXwB,SAAH,GAA0E,IAAD,IAAnE5mB,EAAO,EAAPA,QAASC,EAAgB,EAAhBA,iBAClC,EAA8BiC,GAAU,CAAElC,QAAAA,EAASC,iBAAAA,IAA3CT,EAAM,EAANA,OAAQ6C,EAAS,EAATA,UAChB,GAA0BF,EAAAA,EAAAA,eAA4BvN,GAAU,eAAzDutB,EAAK,KAAEwhB,EAAQ,KAEtB,GAAsCxhC,EAAAA,EAAAA,UAAuB,IAAG,eAAzDyhC,EAAW,KAAEC,EAAc,KAClC,GAA0E1hC,EAAAA,EAAAA,UAAS,GAAE,eAA9E2hC,EAA6B,KAAEC,EAAgC,KACtE,GAA4C5hC,EAAAA,EAAAA,UAAS,GAAE,eAAhD8c,EAAc,KAAE+kB,EAAiB,KACxC,GAAsC7hC,EAAAA,EAAAA,UAAS,IAAG,eAA3C8hC,EAAW,KAAEC,EAAc,KAClC,GAAwC/hC,EAAAA,EAAAA,UAAmB,IAAG,eAAvDgiC,EAAY,KAAEC,EAAe,KACpC,GAAsCjiC,EAAAA,EAAAA,UAAS,IAAG,eAA3CkiC,EAAW,KAAEC,EAAc,KAE5BC,ECvCmB,SAAKxuC,EAAUyuC,GACxC,OAA4CriC,EAAAA,EAAAA,UAAYpM,GAAM,eAAvD0uC,EAAc,KAAEC,EAAiB,KAYxC,OAVAliC,EAAAA,EAAAA,YAAU,WACR,IAAMmiC,EAAQ7yB,YAAW,WACvB4yB,EAAkB3uC,EACpB,GAAGyuC,GAEH,OAAO,WACLI,aAAaD,EACf,CACF,GAAG,CAAC5uC,EAAOyuC,IAEJC,CACT,CDyB+BI,CAAYR,EAAa,MAEtD7hC,EAAAA,EAAAA,YAAU,WACqB,KAAzB+hC,GACFL,EAAe,IACfE,EAAgB,KAEhBF,EAAeK,EAEnB,GAAG,CAACA,KAEJ/hC,EAAAA,EAAAA,YAAU,WACR,IAAMsiC,EAAU,SAACl5B,GACf,IAAMuW,EAA2B9jB,OAAOojB,OAAO,CAAC,EAAG6Z,GAAAA,SAA4Br7B,IAC/E0jC,EAASxhB,EACX,EACM4iB,EAA0BzJ,GAAAA,UAA6BA,GAAAA,OAAAA,aAAwCwJ,GAC/FE,EAA6B1J,GAAAA,UAA6BA,GAAAA,OAAAA,gBAA2CwJ,GAErG3iB,EAAQ9jB,OAAOojB,OAAO,CAAC,EAAG6Z,GAAAA,SAA4Br7B,IAG5D,OAFA0jC,EAASxhB,GAEF,WACL4iB,EAAwBplB,cACxBqlB,EAA2BrlB,aAC7B,CACF,GAAG,CAAC1f,KAEJuC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACVohC,EAA4B,GAC5BqB,EAAmC,GACjCC,EAA4B,GAC9B9vC,EAAQ,EAERoK,EAAOrC,OAAS,IAClBymC,EAAcpkC,EACXtK,KAAI,SAACkK,GACJ,IAAQrC,EAAiBqC,EAAjBrC,aACR,QAA0BnI,KAAV,OAAZmI,QAAY,IAAZA,OAAY,EAAZA,EAAe,IAAkB,OAAO,KAE5C,MAOIA,EAAa,GANfujB,EAAU,EAAVA,WACAC,EAAU,EAAVA,WACAH,EAAY,EAAZA,aACAriB,EAAiB,EAAjBA,kBACAsiB,EAAiB,EAAjBA,kBACA5f,EAAQ,EAARA,SAGFykC,EAAgBnuC,KAAKgH,GAErB,IAAMonC,EAAiB,CACrBC,sBAAuBhwC,EACvBkrB,WAAAA,EACAC,WAAAA,EACAxiB,kBAAAA,EAEAqiB,aAAAA,EACAC,kBAAAA,EACA5f,SAAAA,EACAvD,OAAQH,GAGV,OADA3H,IACO+vC,CACT,IACCzmC,QAAO,SAACqE,GAAG,OAAgC,OAARA,QAAwBnO,IAARmO,CAAiB,UAG3DnO,IAAVutB,IAAmC,QAAZ,EAAAA,EAAMpjB,cAAM,aAAZ,EAAc5B,QAAS,IAChD8nC,EAAqB9iB,EAAMpjB,OAAOL,QAAO,SAAAjD,GAAC,OAAKypC,EAAgBnqC,SAASU,EAAEsC,kBAAkB,IACzF7I,KAAI,SAAC6J,GAAgC,IAAD,EAC7BomC,EAAiB,CACrBC,sBAAuBhwC,EACvBkrB,WAAYvhB,EAAOuhB,WACnBC,WAAYxhB,EAAOwhB,WAEnBH,aAAcrhB,EAAOqhB,aACrBC,kBAAmBthB,EAAOshB,kBAC1BtiB,kBAAmBgB,EAAOhB,kBAC1B0C,SAAU1B,EAAO0B,SACjBvD,QAAc,OAAN6B,QAAM,IAANA,GAAiB,QAAX,EAANA,EAAQmhB,iBAAS,WAAX,EAAN,EAAmB/iB,QAAS,EAAI4B,EAAOmhB,UAAY,CAACnhB,IAG9D,OADA3J,IACO+vC,CACT,KAGJtB,EAAe,GAAD,gBAAKD,IAAW,QAAKqB,IACrC,GAAG,CAACzlC,EAAQ2iB,IAEZ,IAAMkjB,GAAiBhiC,EAAAA,EAAAA,UAAQ,WAE7B,OADAugC,EAAYnkC,MAAK,SAACC,EAAGC,GAAC,OAAKG,OAAOJ,EAAE0gB,cAAgBtgB,OAAOH,EAAEygB,aAAa,IACnEwjB,EAAY1uC,KAAI,SAACowC,EAAYlwC,GAClC,MAMIkwC,EALFhlB,WAAAA,OAAU,MAAG,GAAE,IAKbglB,EAJF/kB,WAAAA,OAAU,MAAG,GAAE,IAIb+kB,EAHFllB,aAAAA,OAAY,MAAG,GAAE,IAGfklB,EAFFjlB,kBAAAA,OAAiB,MAAG,GAAE,IAEpBilB,EADF7kC,SAAAA,OAAQ,MAAG,GAAE,EAIT8kC,ED9ImB,SAACC,GAE9B,IAAMnC,EAAQmC,EAAQnC,MAAM,gDAC5B,GAAa,MAATA,EAAe,OAAOmC,EAE1B,cAAmDnC,EAAK,GAA/C5rC,EAAI,KAAEE,EAAK,KAAEC,EAAG,KAAE6tC,EAAI,KAAEC,EAAM,KAAEC,EAAM,KAGzCC,EAAWC,SAASluC,GACpBmuC,EAASD,SAASjuC,GACxB,GAAIguC,EAAW,GAAKA,EAAW,IAAME,EAAS,GAAKA,EAAS,GAC1D,OAAON,EAGT,IAAMO,EAAO,IAAIjkC,KACf+jC,SAASpuC,GACTmuC,EAAW,EACXE,EACAD,SAASJ,GACTI,SAASH,GACTG,SAASF,IAKX,GACEI,EAAKC,aAAeJ,EAAW,GAC/BG,EAAKE,YAAcH,EAEnB,OAAON,EAIT,IAAMU,EAAUH,EAAKI,mBAAmB,QAAS,CAAED,QAAS,UACtDE,EAAYL,EAAKI,mBAAmB,QAAS,CAAExuC,MAAO,UACtD0uC,EAAeN,EAAKE,UACpBK,EAAUP,EAAKQ,cAErB,MAAM,GAAN,OAAUL,EAAO,aAAKE,EAAS,YAAIC,EAAY,YAAIC,EACrD,CCuG0BE,CADJ,UAAGlmB,EAAU,YAAIC,GAAajpB,MAAM,KAAK,IAGzD,MAAO,CACLvB,MAAOX,EACPG,MAAM,GAAD,OAAK6qB,EAAY,aAAK3f,EAAQ,cAAM4f,GACzCzkB,YAAa2pC,EAEjB,GACF,GAAG,CAAC3B,IAEE6C,GACsC,QAA1C,EAAA7C,EAAYE,UAA8B,aAA1C,EAA4C5mC,OAAOC,QAAS,EAExDupC,GAAsBrjC,EAAAA,EAAAA,UAAQ,WAAO,IAAD,EACxC,QAAmDzO,IAA/CgvC,EAAYE,GAA8C,MAAO,CAAC,EACtE,IAAM6C,EAAiB/C,EAAYE,GAA+B5mC,OAAOC,OASzE,OANmC,GACjC,EAAG,MAAG,UACL6W,KAAK6f,KAAK8S,EAAiB,GAAKjrC,OAAOsY,KAAK6f,KAAK8S,EAAiB,MAAG,UACrEA,EAAiBjrC,OAAOirC,IAAe,CAI5C,GAAG,CAAC7C,EAA+BF,IA6B7BgD,GAAYvjC,EAAAA,EAAAA,UAAQ,WAAO,IAAD,EAuB9B,QAAmDzO,IAA/CgvC,EAAYE,GAA8C,MAAO,GACrE,IAAM5mC,EAAmD,QAA7C,EAAG0mC,EAAYE,UAA8B,aAA1C,EAA4C5mC,OAW3D,OAlCiC,SAA3B2pC,EAA4BC,GAAkD,IAArCC,EAAS,uDAAG,GACzD,OAAOD,EAAK5xC,KAAI,SAACouC,EAAKluC,GAEpB,IAAM4xC,EAA8B,KAAZ1D,EAAIA,IAAaA,EAAIA,IAAIrV,QAAQ,SAAU,IAAM74B,EAAM0T,WACzEm+B,EAAmC,KAAdF,EAAgB,UAAMA,EAAS,YAAIC,GAAYA,EAEpE7xC,EAAsB,CAC1B6M,IAAKilC,EACL3D,IAAKA,EAAIA,IACTC,GAAID,EAAIC,GACRL,QAASI,EAAIJ,QACbntC,MAAOutC,EAAIvtC,OAOb,YAJqBnB,IAAjB0uC,EAAI3sC,UAA0B2sC,EAAI3sC,SAASwG,OAAS,IACtDhI,EAAKwB,SAAWkwC,EAAyBvD,EAAI3sC,SAAUswC,IAGlD9xC,CACT,GACF,CAcO0xC,CADMnD,IATUlpC,MAAMuT,QAAQ7Q,IACjC,QAAIA,GAAQuC,MAAK,SAACC,EAAGC,GACnB,YAAyB/K,IAArB8K,EAAEwnC,qBAAqDtyC,IAArB+K,EAAEunC,eAC/BpnC,OAAOJ,EAAEwnC,gBAAkBpnC,OAAOH,EAAEunC,gBAEtC,CACT,IACA,IAC4BjoB,EAAiB,IAGnD,GAAG,CAACA,EAAgB6kB,EAA+BF,IAE7CuD,GAAe9jC,EAAAA,EAAAA,UAAQ,WAC3B,QAAoBzO,IAAhBqvC,GAA6C,KAAhBA,EAAoB,OAAO2C,EAE5D,IAAMQ,EAAcnD,EAAYoD,cAC1BC,EAAc,IAAIjqC,IAElBkqC,EAAc,SAACC,GAAkC,IAAD,gBACpD,OAC0B,QAAxB,EAAS,QAAT,EAACA,EAAKlE,WAAG,aAAR,EAAU+D,qBAAa,QAAI,IAAItsC,SAASqsC,KAClB,QAAvB,EAAQ,QAAR,EAACI,EAAKjE,UAAE,aAAP,EAAS8D,qBAAa,QAAI,IAAItsC,SAASqsC,KACZ,QAA5B,EAAa,QAAb,EAACI,EAAKtE,eAAO,aAAZ,EAAcmE,qBAAa,QAAI,IAAItsC,SAASqsC,KACR,QAArC,EAAW,QAAX,EAACI,EAAKzxC,aAAK,aAAV,EAAY+S,WAAWu+B,qBAAa,QAAI,IAAItsC,SAASqsC,EAE1D,EAGMK,EAAoB,SAApBA,EACJD,GAEuB,IADvBE,EAA2B,uDAAG,GAExBC,EAAW,mBAAOD,GAAU,CAAEF,IAChCI,EAAmC,GAavC,OAXIL,EAAYC,IACdI,EAAc7wC,KAAK4wC,GAGA,MAAjBH,EAAK7wC,UACP6wC,EAAK7wC,SAASiH,SAAQ,SAAAiqC,GACpB,IAAMC,EAAaL,EAAkBI,EAAOF,GAC5CC,EAAa,mBAAOA,IAAa,QAAKE,GACxC,IAGKF,CACT,EAuCMG,EAjCkB,SAAlBC,EACJC,GAEqB,IADrBtQ,EAAK,uDAAG,EAER,GAAqB,IAAjBsQ,EAAM9qC,QAAgBw6B,GAASsQ,EAAM,GAAG9qC,OAAQ,MAAO,GAE3D,IAAM+qC,EAAe,IAAIzmC,IAoBzB,OAfAwmC,EAAMrqC,SAAQ,SAAA6kC,GACZ,GAAI9K,EAAQ8K,EAAKtlC,OAAQ,CACvB,IAO6B,EAPvBqqC,EAAO/E,EAAK9K,GAOlB,GANKuQ,EAAaj5B,IAAIu4B,EAAKxlC,MACzBkmC,EAAanlC,IAAIykC,EAAKxlC,IAAK,CACzBwlC,MAAK,UAAMA,GACXM,WAAY,KAGZnQ,EAAQ,EAAI8K,EAAKtlC,OACO,QAA1B,EAAA+qC,EAAaxlC,IAAI8kC,EAAKxlC,YAAI,OAA1B,EAA4B8lC,WAAW/wC,KAAK0rC,EAEhD,CACF,IAEOjoC,MAAMC,KAAKytC,EAAal6B,UAAU9Y,KAAI,YAA2B,IAAxBsyC,EAAI,EAAJA,KAAMM,EAAU,EAAVA,WACpDR,EAAYzpC,IAAI2pC,EAAKxlC,KACrB,IAAMrL,EAAWqxC,EAAgBF,EAAYnQ,EAAQ,GACrD,OAAOhhC,EAASwG,OAAS,GAAC,kBAAQqqC,GAAI,IAAE7wC,SAAAA,IAAa6wC,CACvD,GACF,CAEiBQ,CApCKpB,EAAU3D,SAAQ,SAAAuE,GAAI,OAAIC,EAAkBD,EAAK,KAuCvE,OAFApD,EAAgB5pC,MAAMC,KAAK6sC,IAEpBS,CACT,GAAG,CAACnB,EAAW3C,IAEf,OAAI5hC,GACK,yCAIP,gBAAK8lC,UAAU,oBAAmB,UAChC,iBACEviC,MAAO,CACL8C,MAAO,OACPuP,QAAS,kBACT,WAEF,iBAAKrS,MAAO,CAAEC,QAAS,OAAQuiC,IAAK,OAAQC,aAAc,QAAS,WACjE,iBAAKziC,MAAO,CAAE0iC,KAAM,GAAI,WACtB,SAAC,UAAe,CAACC,QAAM,EAAC3iC,MAAO,CAAEC,QAAS,QAASwiC,aAAc,OAAQ,qBACzE,SAAC,KAAM,CACLziC,MAAO,CAAE8C,MAAO,QAChB3S,MAAO+tC,EACPp4B,SAAU,SAAC3V,GACTguC,EAAiChuC,GACjCiuC,EAAkB,EACpB,EACAwE,gBAAgB,QAChBC,iBAAiB,QAAO,SAEvBpD,EAAenwC,KAAI,SAACC,GAAI,OACvB,SAAC,GAAM,CAAkBY,MAAOZ,EAAKY,MAAOR,MAAOJ,EAAKI,MAAM,UAC5D,4BACE,yBAAMJ,EAAKI,SACX,gBACEqQ,MAAO,CAAEmB,SAAU,OAAQD,MAAO,uBAAwB,SAEzD3R,EAAKyG,kBANCzG,EAAKY,MAST,SAKd0wC,IACC,iBAAK7gC,MAAO,CAAE0iC,KAAM,GAAI,WACtB,UAAC,UAAe,CAACC,QAAM,EAAC3iC,MAAO,CAAEC,QAAS,QAASwiC,aAAc,OAAQ,8BACrDppB,MAEpB,SAAC,KAAM,CACL3Q,IAAK,EACLC,IAA+C,QAA5C,EAAEq1B,EAAYE,UAA8B,aAA1C,EAA4C5mC,OAAOC,OACxDpH,MAAOkpB,EACPvT,SAAU,SAAC3V,GAAK,OAAKiuC,EAAkBjuC,EAAM,EAC7C2yC,MAAOhC,EACPrd,QAAS,CACPsf,UAAW,SAAC5yC,GAAyB,YAAenB,IAAVmB,EAAmB,mBAAeA,GAAU,EAAE,YAOlG,SAAC,KAAK,CACJ6P,MAAO,CAAEyiC,aAAc,QACvB78B,YAAY,uBACZC,QAAQ,SAACm9B,GAAA,EAAc,IACvBl9B,SAAU,SAAC4D,GAAC,OAAKg1B,EAAeh1B,EAAEzD,OAAO9V,MAAM,EAC/CA,MAAOsuC,KAGT,SAAC,KAAK,CACJwE,QArNQ,CACd,CACE5yC,MAAO,MACP6yC,UAAW,MACX9mC,IAAK,MACL0G,MAAO,OAET,CACEzS,MAAO,KACP6yC,UAAW,KACX9mC,IAAK,KACL0G,MAAO,MAET,CACEzS,MAAO,UACP6yC,UAAW,UACX9mC,IAAK,UACL0G,MAAO,OAET,CACEzS,MAAO,QACP6yC,UAAW,QACX9mC,IAAK,QACL0G,MAAO,QA+LHqgC,WAAY5B,EACZ6B,YAAY,EACZC,WAAY,CACVC,gBAAiB/E,EACjBgF,qBAAsB,SAAC7qC,GAAI,OAAK8lC,EAAgB9lC,EAAiB,GAEnElI,KAAK,QACLgzC,OAAQ,CAAErS,EAAG,WAKvB,EEyIA,SAAe9tB,GApdH,0CACV,WAAanU,GAAqB,IAAD,mBAC/B,cAAMA,IAuDRu0C,iBAAmB,SAACC,GAClB,GAAW,MAAPA,GAAuB,KAARA,EACjB,OAAO,EAET,IACE,IAAMC,EAAS,IAAIC,IAAIF,GACvB,OAAOC,EAAOE,SAASC,WAAW,SAAWH,EAAOvb,SAAS7wB,OAAS,CAGxE,CAFE,MAAOwsC,GACP,OAAO,CACT,CACF,EAAC,EAEDC,sBAAwB,WACtB,IAAMC,GAAUC,EAAAA,GAAAA,MACVC,EAQF,CACFF,QAAS,CAAC,EACVG,GAAI,CAAC,GAEQ,MAAXH,IACFE,EAAYF,QAAU,CACpBr0C,KAAsB,MAAhBq0C,EAAQr0C,KAAeq0C,EAAQr0C,UAAOZ,EAC5Cq1C,QAA4B,MAAnBJ,EAAQI,QAAkBJ,EAAQI,aAAUr1C,GAEvDm1C,EAAYC,GAAK,CACfx0C,KAAoB,MAAdq0C,EAAQG,GAAaH,EAAQG,QAAKp1C,IAI5Cs1C,EAAAA,EAAAA,KAAW,CACTj0C,MAAO,QACPyS,MAAO,IACPgB,SACE,iCACE,UAAC,IAAY,CAACzT,MAAM,cAAcS,OAAQ,EAAE,WAC1C,SAAC,SAAiB,CAACnB,MAAM,OAAM,SAC5B,EAAKT,MAAMmoB,IAAIznB,QAElB,SAAC,SAAiB,CAACD,MAAM,UAAS,SAC/B,EAAKT,MAAMmoB,IAAIgtB,WAElB,SAAC,SAAiB,CAAC10C,MAAM,WAAU,SAChC,EAAKT,MAAMmoB,IAAIktB,eAGpB,UAAC,IAAY,CAACl0C,MAAM,UAAUS,OAAQ,EAAE,WACtC,SAAC,SAAiB,CAACnB,MAAM,OAAM,SAC5Bw0C,EAAYF,QAAQr0C,QAEvB,SAAC,SAAiB,CAACD,MAAM,UAAS,SAC/Bw0C,EAAYF,QAAQI,cAGzB,SAAC,IAAY,CAACh0C,MAAM,mBAAmBS,OAAQ,EAAE,UAC/C,SAAC,SAAiB,CAACnB,MAAM,OAAM,SAC5Bw0C,EAAYC,GAAGx0C,YAKxB+P,KAAI,WAAW,GAEnB,EAAC,EAED6kC,iCAAmC,WAAa,IAAD,IACvC1hC,EAAQgsB,OAAO2V,WAAa,IAClCH,EAAAA,EAAAA,KAAW,CACTj0C,MAAO,oBACPyS,MAAAA,EACAgB,SAAS,SAAC,GAAe,CACvB1J,QAA2B,QAApB,EAAE,EAAKlL,MAAMkL,eAAO,QAAI,CAAC,EAChCC,iBAAoD,QAApC,EAAE,EAAKnL,MAAMyU,OAAOtJ,wBAAgB,QAAI,KAE1DsF,KAAI,WAAW,GAEnB,EAAC,EAED+kC,uBAAyB,WACvB,IAAMC,EAKF,CACFC,eAAgB,GAChBC,cAAe,GACfC,iBAAkB,GAClBC,cAAe,IAIXC,EAAW,EAAK3jC,MAAM4jC,SAAS1tC,OAErC,GAAIytC,EAAW,EACb,IAAK,IAAIriC,EAAI,EAAGA,EAAIqiC,EAAUriC,IAAK,CAEjCgiC,EADiB,EAAKtjC,MAAM1L,cAAcgN,IACtBxR,KAAK,GAAD,OAAI,EAAKkQ,MAAM4jC,SAAStiC,GAAGtP,QAAO,qBAAuB,EAAKgO,MAAM4jC,SAAStiC,GAAGnN,OAAM,KAChH,CAGF,IAM0B0vC,EANlBC,EAAUC,GAAAA,EAAAA,MAEZC,EAAiB,SAACC,GAAgB,OACtC,SAAC,KAAK,CAACvzB,MAAOuzB,GAAY,EAO5BhB,EAAAA,EAAAA,KAAW,CACTj0C,MAAO,2DACPyS,MAAO,IACPgB,SACE,UAAC,KAAQ,YACP,SAACqhC,EAAK,CACJ70C,OAAO,sBAEPC,MAAO80C,EAAeV,EAAUE,cAActtC,QAAQ,UAEtD,wBACGotC,EAAUE,cAAcv1C,KAAI,SAAAoa,GAAC,OAC5B,wBAAoBA,IAAX67B,EAAAA,EAAAA,KAAkB,OAL3B,uBASN,SAACJ,EAAK,CACJ70C,OAAO,+BAEPC,MAAO80C,EAAeV,EAAUG,iBAAiBvtC,QAAQ,UAEzD,wBACGotC,EAAUG,iBAAiBx1C,KAAI,SAAAoa,GAAC,OAC/B,wBAAoBA,IAAX67B,EAAAA,EAAAA,KAAkB,OAL3B,sBASN,SAACJ,EAAK,CACJ70C,OAAO,sBAEPC,MAAO80C,EAAeV,EAAUI,cAAcxtC,QAAQ,UAEtD,wBACGotC,EAAUI,cAAcz1C,KAAI,SAAAoa,GAAC,OAC5B,wBAAoBA,IAAX67B,EAAAA,EAAAA,KAAkB,OAL3B,uBASN,SAACJ,EAAK,CACJ70C,OAAO,uBAEPC,MAAO80C,EAAeV,EAAUC,eAAertC,QAAQ,UAEvD,wBACGotC,EAAUC,eAAet1C,KAAI,SAAAoa,GAAC,OAC7B,wBAAoBA,IAAX67B,EAAAA,EAAAA,KAAkB,OAL3B,cASN,SAACJ,EAAK,CACJ70C,OAAO,UAEPC,OAxDkB20C,EAwDM,EAAK7jC,MAAMmkC,SAASjuC,QAvDlD,SAAC,KAAK,CAAC2J,MAAM,QAAQ6Q,MAAOmzB,KAuD8B,UAEpD,wBACG,EAAK7jC,MAAMmkC,SAASl2C,KAAI,SAAA4Q,GAAO,OAC9B,wBAAoBA,IAAXqlC,EAAAA,EAAAA,KAAwB,OALjC,cAWV5lC,KAAI,WAAW,GAEnB,EAAC,EAED8lC,iCAAmC,WACjC,EAAKjkC,SAAS,CAAEkkC,+BAA+B,GACjD,EAAC,EAEDC,2BAA6B,SAC3B3/B,GAEA,IAAM7V,EAAQ6V,EAAM4/B,cAAcz1C,MAClC,EAAKqR,SAAS,CACZqkC,kBAAmB11C,EACnB21C,2BAA4B,EAAKrC,iBAAiBtzC,IAEtD,EAAC,EAED41C,kCAAoC,WAClC,IAAMC,EAAkBlX,OAAOmX,aAAaC,QAAQ,wBACpD,EAAK1kC,SAAS,CACZ2kC,oBAAyC,OAApBH,QAAgDh3C,IAApBg3C,GAAqD,KAApBA,EAAyB,SAAW,UACtHH,kBAAkC,OAAfG,QAAe,IAAfA,EAAAA,OAAmBh3C,EACtC02C,+BAA+B,EAC/BI,2BAA4B,EAAKrC,iBAAiBuC,IAEtD,EAAC,EAEDI,gCAAkC,SAAC18B,GACjC,IAAMvG,EAAOuG,EAAEzD,OAAO9V,MACtB,EAAKqR,SAAS,CAAE2kC,oBAAqBhjC,GACvC,EAAC,EAEDkjC,sBAAwB,WAGtB,GAFAvX,OAAOmX,aAAaK,QAAQ,6BAA8B,EAAKjlC,MAAM8kC,qBAE9B,YAAnC,EAAK9kC,MAAM8kC,oBAMb,OALA,EAAKj3C,MAAMq3C,kBAAkB,CAAE7C,IAAK,UACpC,EAAKliC,SAAS,CACZkkC,+BAA+B,EAC/BI,2BAA2B,IAK/B,IAAMpC,EAAM,EAAKriC,MAAMwkC,kBACnBW,GAAa,EACN,MAAP9C,GAAuB,KAARA,IACbA,EAAII,WAAW,YAAcJ,EAAII,WAAW,eAC9C,EAAK50C,MAAMq3C,kBAAkB,CAAE7C,IAAAA,IAC/B8C,GAAa,GAGjB,EAAKhlC,SAAS,CACZkkC,+BAAgCc,EAChCV,2BAA4BU,GAEhC,EAlSE,IAAMR,EAAkBlX,OAAOmX,aAAaC,QAAQ,wBAC9CO,EAAa3X,OAAOmX,aAAaC,QAAQ,8BAE/C,EAAK7kC,MAAQ,CACX4jC,SAAU,GACVtvC,cAAe,GACf6vC,SAAU,GACVK,kBAAkC,OAAfG,QAAe,IAAfA,EAAAA,EAAmB,GACtCN,+BAA+B,EAC/BI,2BAA4B,EAAKrC,iBAAiBuC,GAClDG,oBAAoC,WAAfM,GAA+C,OAApBT,QAAgDh3C,IAApBg3C,GAAqD,KAApBA,EAAyB,SAAW,WA6BlJ,OARDxuC,GAAAA,UACEtD,GAnBqB,SAAH,GAGP,IAHasB,EAAM,EAANA,OAAQC,EAAK,EAALA,MAIhC,EAAK+L,UAAS,SAAAH,GAAK,yBACdA,GAAK,IACR4jC,SAAS,GAAD,gBAAM5jC,EAAM4jC,UAAQ,oBAAOxvC,GAAK,IAAED,OAAAA,MAC1CG,cAAc,GAAD,gBAAM0L,EAAM1L,eAAa,CAAEF,EAAMrC,QAAK,GAEvD,IAcAoE,GAAAA,UACEtD,GAbuB,SAACgM,GACxB,EAAKsB,UAAS,SAAAH,GAAK,yBACdA,GAAK,IACRmkC,SAAS,GAAD,gBAAMnkC,EAAMmkC,UAAQ,CAAEtlC,KAAQ,GAE1C,IAUC,CACH,CAsaC,OAtaA,0CAED,SAAoBwmC,EAAkCjU,IAC9CA,EAAU+S,SAASjuC,OAAS,GAAOk7B,EAAUwS,SAAS1tC,OAAS,IAAOtI,KAAKC,MAAMqU,SAAS6kB,WAAase,EAAUnjC,SAAS6kB,UAC9Hn5B,KAAKuS,SAAS,CACZkkC,+BAA+B,EAC/BI,2BAA2B,EAC3Bb,SAAU,GACVtvC,cAAe,GACf6vC,SAAU,IAGhB,GAAC,oBAgPD,WAA4B,IAAD,UA6BrBmB,EA7BqB,OACrBvvB,EAAO,KACX,QAAwBpoB,IAApBC,KAAKC,MAAMkoB,KAAoB,CACjC,IAAMwvB,EAAgB,QACU53C,IAA5BC,KAAKC,MAAM23C,cACbD,EAAcz1C,KACZ,CACExB,MAAO,SACPyM,IAAK,cACLgV,QAAS,gBACyBpiB,IAA5B,EAAKE,MAAM23C,cACb,EAAK33C,MAAM23C,cAEf,IAIN,IAAMC,EAAW,CAAE13C,MAAOw3C,GAC1BxvB,GACE,SAAC,KAAQ,CAAC2vB,KAAMD,EAAUE,QAAS,CAAC,SAAS,UAC3C,SAAC,GAAM,CACL52C,KAAM62C,GAAAA,EACN71B,QAAS,SAAA1H,GAAC,OAAIA,EAAEgI,gBAAgB,EAChC/hB,MAAK,UAAKV,KAAKC,MAAMkoB,KAAKxnB,KAAI,aAAKX,KAAKC,MAAMkoB,KAAKQ,MAAK,QAIhE,CAGI3oB,KAAKC,MAAMg4C,qBACbP,GACE,SAAC,KAAO,CAACQ,GAAG,IAAG,UACb,SAAC,GAAM,CAAC/2C,KAAMg3C,GAAAA,EAAuB3jB,QAAQ,sBAKnD,IAgCI4jB,EAhCEC,GACJ,SAAC,GAAM,CACLl3C,KAAMm3C,GAAAA,EACN9jB,QAAQ,eACRrS,QAASniB,KAAK+0C,wBAIZwD,GACJ,SAAC,KAAK,CAACz1B,MAAO9iB,KAAKoS,MAAM4jC,SAAS1tC,OAAQyI,MAAO,CAAEgB,OAAQ,KAAO,UAChE,SAAC,KAAK,CAACE,MAAM,QAAQ6Q,MAAO9iB,KAAKoS,MAAMmkC,SAASjuC,OAAQyI,MAAO,CAAEgB,OAAQ,MAAO,UAC9E,SAAC,GAAM,CACL5Q,KAAM8Z,GAAAA,EACNuZ,QAAQ,aACRrS,QAASniB,KAAKy1C,6BAQhB+C,EAFsBx4C,KAAKC,MAAMqU,SAAS6kB,SAASjzB,SAAS,cAI9D,SAAC,GAAM,CACL/E,KAAMs3C,GAAAA,EACNjkB,QAAQ,oBACRrS,QAASniB,KAAKu1C,mCAGhB,KAGAv1C,KAAKC,MAAMy4C,4BACbN,GACE,SAAC,GAAM,CACLj3C,KAAMw3C,GAAAA,EACNnkB,QAAQ,gBACRrS,QAASniB,KAAKw2C,oCAKpB,IAEMI,EAAuD,WAAnC52C,KAAKoS,MAAM8kC,oBACjCl3C,KAAKoS,MAAMwkC,kBACyB,QADR,EACV,QADU,EAC5B52C,KAAKC,MAAMkL,eAAO,OAAS,QAAT,EAAlB,EAAoBytC,eAAO,WAAT,EAAlB,EAA6BC,eAAO,QAA6B,QAA7B,EAAI74C,KAAKC,MAAM64C,sBAAc,OAAS,QAAT,EAAzB,EAA2BF,eAAO,WAAT,EAAzB,EAAoCC,QAE1EE,EAA+B,MAArBnC,GAAmD,KAAtBA,GAEzC,SAAC,IAAO,CAACx1C,MAAOw1C,EAAkB,UAChC,gBACE7lC,MAAO,CACLsM,SAAU,SACV27B,aAAc,WACdh4C,WAAY,SACZooC,aAAc,OACd5uB,YAAa,QAEfpZ,MAAOw1C,EAAkB,SAExBA,MAIL,KAEJ,OACE,iCACE,SAAC,WAAa,CAAC7lC,MAAO,CAAE8C,MAAO,OAAQuP,QAAS,UAAW,UACzD,UAAC,KAAG,CAACrS,MAAO,CAAEkoC,SAAU,UAAW,WACjC,SAAC,KAAG,CAACloC,MAAO,CAAEmoC,WAAY,GAAI,UAC5B,SAAC,KAAK,CAACnjC,MAAM,SAASC,UAAU,aAAY,UAC1C,gBACEmjC,IAhCEC,qDAiCFC,IAAI,GACJtoC,MAAO,CAAEiC,OAAQ,OAAQu4B,OAAQ,gBAIvC,SAAC,KAAG,CAACkI,KAAK,OAAO1iC,MAAO,CAAE8T,SAAU,EAAGxH,SAAU,UAAW,UAC1D,gBAAKtM,MAAO,CAAE8C,MAAO,OAAQwJ,SAAU,UAAW,SAC/Crd,KAAKC,MAAMy4C,0BAA4BK,EAAU,QAGtD,SAAC,KAAG,CAAChoC,MAAO,CAAEmoC,WAAY,GAAI,UAC5B,UAAC,KAAK,CAACljC,UAAU,aAAY,UAC1B0hC,EACAW,EACAE,EACAC,EACAJ,EACAjwB,aAMT,UAAC,IAAK,CACJ3X,KAAMxQ,KAAKoS,MAAMqkC,8BACjBr1C,MAAM,yBACNsP,KAAM1Q,KAAKo3C,sBACX3mC,SAAUzQ,KAAK82C,kCAAkC,WAEjD,UAAC,YAAW,CACV51C,MAAOlB,KAAKoS,MAAM8kC,oBAClBrgC,SAAU7W,KAAKm3C,gCACfpmC,MAAO,CAAEyiC,aAAc,QAAS,WAEhC,SAAC,MAAK,CAACtyC,MAAM,UAAS,iCACtB,SAAC,MAAK,CAACA,MAAM,SAAQ,kCAGa,WAAnClB,KAAKoS,MAAM8kC,sBACV,SAAC,IAAO,CAAC91C,MAAOpB,KAAKoS,MAAMwkC,kBAAkB,UAC3C,SAAC,KAAK,CACJjgC,YAAY,2CACZzV,MAAOlB,KAAKoS,MAAMwkC,kBAClB//B,SAAU7W,KAAK02C,2BACf5/B,aAAc9W,KAAKo3C,sBACnBlgC,WACAlX,KAAKoS,MAAMykC,2BACP,SAACz/B,GAAA,EAAY,CAACrG,MAAO,CAAEkB,MAAO,sBAC9B,SAACkF,GAAA,EAAa,CAACpG,MAAO,CAAEkB,MAAO,8BAQjD,KAAC,EAjdS,CAASlQ,EAAAA,Y,eC/CrB,SAjBiB,SAAH,GAAwD,IAAlDX,EAAK,EAALA,MAAOgD,EAAO,EAAPA,QACzB,OACE,gBAAK2M,MAAO,CACViC,OAAQ,QACRhC,QAAS,OACTmC,WAAY,SACZC,eAAgB,UAChB,UAEA,SAAC,MAAM,CACLhS,MAAOA,EACPk4C,SAAUl1C,KAIlB,EC6TA,SAAegQ,GAxTD,0CAGZ,WAAanU,GAAuB,IAAD,EAOhC,OAPgC,gBACjC,cAAMA,IAHSs5C,gBAAkB,GAAE,EAmDrCplB,YAAc,SAACpd,EAA6BuW,GAC1C,EAAKrtB,MAAMuU,SAAS,YAAD,OAAa8Y,EAAMzhB,kBACxC,EAAC,EAED2tC,UAAY,YAIC,IAJE32B,EAAM,EAANA,OAAQ42B,EAAK,EAALA,MAAOC,EAAc,EAAdA,eAKtB/tC,EAAsC,CAC1CygB,kBAAmB,KACnBvJ,OAAQA,EACR42B,MAAOA,GAET,QAAuB15C,IAAnB25C,EAA8B,CAChC,IAAK,IAAMvsC,KAAOusC,EAAgB,CAChC,IAAMx4C,EAAQw4C,EAAevsC,GAE3BxB,EAAYwB,GADF,eAARA,EACc,WAAOjM,EAAK,KAETA,CAEvB,CACAyK,EAAYguC,cAAgB,MAC9B,CACA,IAAMC,EAAgB,CAAEjuC,YAAAA,GACT,EAAK1L,MAAMkL,QACxBnH,EAAeyH,iCAEVouC,iBAAiBD,GAAepkB,MAAK,SAACtI,GAC3C,EAAK3a,SAAS,CACZ2a,QAASA,EAAQ7sB,KAAI,SAAAitB,GAEnB,OADoBrhB,EAAAA,SAAAA,eAA4BqhB,GAAxCphB,OAEV,KAEJ,IACGkC,OAAM,SAAC5H,GACNV,QAAQU,MAAMA,GACd+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,yCAGN,GACJ,EAAC,EAED61C,aAAe,SACb3F,EACA4F,GAEA,EAAKxnC,SAAS,CAAE/E,WAAW,IAC3B,IAAIjN,EAAQ4zC,EAAW3hC,aACTzS,IAAVQ,IACFA,EAAQ,GAEV,IAAIy5C,EAAW7F,EAAW6F,cACTj6C,IAAbi6C,IACFA,EAAW,EAAK5nC,MAAM4nC,UAExB,IAAMn3B,EAASm3B,GAAYz5C,EAAQ,GAC7Bk5C,EAAQO,EACdl0C,QAAQ0iB,MAAM,+BAAD,OAAgCjoB,EAAK,QAClD,IAAMm5C,EAAkD,CAAC,EACzD,IAAK,IAAMzF,KAAa8F,EACK,OAAvBA,EAAQ9F,SAA8Cl0C,IAAvBg6C,EAAQ9F,KACzCyF,EAAezF,GAAa8F,EAAQ9F,GAAW,GAAGhgC,YAGtD,EAAKulC,UAAU,CAAE32B,OAAAA,EAAQ42B,MAAAA,EAAOC,eAAAA,IAChC,EAAKnnC,SAAS,CAAE/E,WAAW,EAAOwsC,SAAUA,GAC9C,EAAC,EAEDC,aAAe,SACbrmC,EACAsmC,EACAjG,GAEAiG,GACF,EAAC,EAEDC,YAAc,SAACC,GACbA,GACF,EAAC,EAEDC,UAAY,SAACC,GACX,OAAOA,EAAOzuC,gBAChB,EAAC,EAED0uC,eAAiB,SAACD,GAChB,MAAO,CACLn4B,QAAS,SAACpL,GACR,OAAO,EAAKod,YAAYpd,EAAOujC,EACjC,EAEJ,EAAC,EAEDE,iBAAmB,SAAC5mC,EAA2BsmC,EAAgDjG,GAC7F,EAAKgG,aAAarmC,EAAcsmC,EAASjG,EAC3C,EAAC,EAEDwG,kBAAoB,SAAChgC,EAAwCigC,GAC3DA,OAAmC36C,IAAnB0a,EAAEzD,OAAO9V,MAAsB,CAACuZ,EAAEzD,OAAO9V,OAAS,GACpE,EAAC,EAEDy5C,4BAA8B,SAACD,GAC7B,OAAO,SAACjgC,GAAsC,OAAK,EAAKggC,kBAAkBhgC,EAAGigC,EAAgB,CAC/F,EAAC,EAEDE,2BAA6B,SAAChnC,EAA2BsmC,EAAgDjG,GACvG,OAAO,kBAAM,EAAKuG,iBAAiB5mC,EAAcsmC,EAASjG,EAAU,CACtE,EAAC,EAED4G,uBAAyB,SAACjnC,EAA2BsmC,EAAgDjG,GACnG,OAAO,kBAAM,EAAKgG,aAAarmC,EAAcsmC,EAASjG,EAAU,CAClE,EAAC,EAED6G,sBAAwB,SAACV,GACvB,OAAO,kBAAM,EAAKD,YAAYC,EAAa,CAC7C,EAAC,EA8FDW,qBAAuB,SAAC9G,GACtB,MAAO,CACL+G,eAAgB,gBAAGN,EAAe,EAAfA,gBAAiB9mC,EAAY,EAAZA,aAAcsmC,EAAO,EAAPA,QAASE,EAAY,EAAZA,aAAY,OAMrE,iBAAKrpC,MAAO,CAAEqS,QAAS,GAAI,WACzB,SAAC,KAAK,CACJzM,YAAY,SACZzV,MAAO0S,EAAa,GACpBiD,SAAU,EAAK8jC,4BAA4BD,GAC3C5jC,aAAc,EAAK8jC,2BAA2BhnC,EAAcsmC,EAASjG,GACrEljC,MAAO,CAAE8C,MAAO,IAAK2/B,aAAc,EAAGxiC,QAAS,YAEjD,UAAC,KAAK,YACJ,SAAC,KAAM,CACL7M,KAAK,UACLge,QAAS,EAAK04B,uBAAuBjnC,EAAcsmC,EAASjG,GAC5D9yC,MAAM,SAAC4yC,GAAA,EAAc,IACrBxyC,KAAK,QACLwP,MAAO,CAAE8C,MAAO,IAAK,qBAIvB,SAAC,KAAM,CACLsO,QAAS,EAAK24B,sBAAsBV,GACpC74C,KAAK,QACLwP,MAAO,CAAE8C,MAAO,IAAK,wBAKrB,EAERonC,WAAY,SAAC/H,GAAiB,OAC5B,SAACa,GAAA,EAAc,CACbhjC,MAAO,CAAEkB,MAAOihC,EAAW,eAAYnzC,IACvC,EAGR,EAhTE,EAAKqS,MAAQ,CACX8a,QAAS,GACT1f,WAAW,EACX0tC,WAAY,EACZlB,SAAU,EAAKT,iBAChB,CACH,CA8PC,OA9PA,wCAED,WAA2B,IAAD,OAElBK,EAAgB,CAAEjuC,YADoB,CAAEygB,kBAAmB,OAGlDpsB,KAAKC,MAAMkL,QACxBnH,EAAeyH,iCAEVouC,iBAAiBD,GAAepkB,MAAK,SAACtI,GAC3C,EAAK3a,SAAS,CACZ2oC,WAAYhuB,EAAQ5kB,OACpB4kB,QAASA,EAAQ7mB,MAAM,EAAG,EAAK+L,MAAM4nC,UAAU35C,KAAI,SAAAitB,GAEjD,OADoBrhB,EAAAA,SAAAA,eAA4BqhB,GAAxCphB,OAEV,KAEJ,IACGkC,OAAM,SAAC5H,GACNV,QAAQU,MAAMA,GAEd+B,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,gDAGN,GACJ,GAAC,+BAED,WACEjE,KAAK65C,kBACP,GAAC,gCAED,SAAoBlpB,GACd3wB,KAAKC,MAAMkL,UAAYwlB,EAAcxlB,SACvCnL,KAAK65C,kBAET,GAAC,oBA6HD,WACE,IAAM7F,EAA2C,EAAC,QAE9C5yC,MAAO,mBACP6yC,UAAW,mBACRj0C,KAAK+6C,qBAAqB,qBAAkB,QAG/C35C,MAAO,WACP6yC,UAAW,WACRj0C,KAAK+6C,qBAAqB,YAE/B,CACE35C,MAAO,aACP6yC,UAAW,YACXphC,OAAQ,SAAC3R,GAAa,OAAayB,EAAUzB,EAAM,GAErD,CACEE,MAAO,aACP6yC,UAAW,YACXphC,OAAQ,SAAC3R,GAAa,OAAa8B,EAAU9B,EAAM,IACnD,QAEAE,MAAO,aACP6yC,UAAW,aACRj0C,KAAK+6C,qBAAqB,eAAY,QAGzC35C,MAAO,iBACP6yC,UAAW,cACXphC,OAAQ,SAAC3R,GAA8B,OAAaqB,EAAUrB,EAAM,GACjElB,KAAK+6C,qBAAqB,gBAE/B,CACE35C,MAAO,gBACP6yC,UAAW,aACXphC,OAAQ,SAAC3R,GAAa,OAAakC,EAASlC,EAAM,GAEpD,CACEE,MAAO,sBACP6yC,UAAW,mBACXphC,OAAQ,SAAC3R,GAAa,OAAayB,EAAUzB,EAAM,GAErD,CACEE,MAAO,6BACP6yC,UAAW,yBACXphC,OAAQ,SAAC3R,GAA8B,OAAaqB,EAAUrB,EAAM,GAEtE,CACEE,MAAO,sBACP6yC,UAAW,oBACXphC,OAAQ,SAAC3R,GACP,YAAcnB,IAAVmB,EAKK,GAEA2F,OAAO3F,EAElB,IAIEizC,EAAa,CACjBoF,gBAAiBv5C,KAAKu5C,gBACtBS,SAAUh6C,KAAKoS,MAAM4nC,SACrBmB,kBAAkB,EAClBC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAW,SAACC,EAAe/hC,GACzB,MAAM,GAAN,OAAUA,EAAM,GAAE,YAAIA,EAAM,GAAE,eAAO+hC,EAAK,WAC5C,EACAA,MAAOv7C,KAAKoS,MAAM8oC,YAGpB,OACE,SAAC,KAAK,CACJnqC,MAAO,CAAE6M,OAAQ,WACjBo2B,QAASA,EACTwH,OAAQx7C,KAAKq6C,UACbnG,WAAYl0C,KAAKoS,MAAM8a,QACvBinB,WAAYA,EACZsH,MAAOz7C,KAAKu6C,eACZ1jC,SAAU7W,KAAK85C,aACfv4C,KAAK,QACLm6C,QAAS17C,KAAKoS,MAAM5E,WAG1B,KAAC,EAzQW,CAASzL,EAAAA,Y,eCvBV45C,GAAU,SAAC/N,EAAcgO,GACpC,IAAIC,EAAUD,EAKd,OAJKC,EAAQC,SAAS,OACpBD,GAAW,KAED,IAAIlH,IAAI/G,EAAMiO,GACf5nC,UACb,EAQa8nC,GAA2B,SAACznC,GAGzB,IAAD,UACP0kB,EAAe,IAAIC,gBAAgB3kB,EAAS4kB,QAC5C8iB,EAAa,IAAI/iB,gBAAgB3kB,EAAS2nC,KAAK7iB,QAAQ,IAAK,MAElE,OAAO8iB,QAKqB,QALd,EAIU,QAJV,EAGqB,QAHrB,EAEgB,QAFhB,EACY,QADZ,EACZljB,EAAanrB,IAAI,eAAO,QACxBmrB,EAAanrB,IAAI,mBAAW,QAC5BmrB,EAAanrB,IAAI,wBAAgB,QACjCmuC,EAAWnuC,IAAI,eAAO,QACtBmuC,EAAWnuC,IAAI,mBAAW,QAC1BmuC,EAAWnuC,IAAI,iBAEnB,EC3BMsuC,GAAa,SAACC,GAClB,IAAIC,EAKJ,GAJiB,OAAbD,IACFC,EAAUD,EAASC,cAGLt8C,IAAZs8C,EAAuB,CACzB,QAAqBt8C,IAAjBs8C,EAAQ17C,WAAwCZ,IAAlBs8C,EAAQ1zB,MASxC,MAAO,CACLhoB,KAAM07C,EAAQ17C,KACdgoB,MAAO0zB,EAAQ1zB,OAVjBpgB,GAAAA,QACErD,GACA,IAAIhB,EACFD,EACA,6CASR,MACEsE,GAAAA,QACErD,GACA,IAAIhB,EACFD,EACA,mCAIN,MAAO,CACLtD,UAAMZ,EACN4oB,WAAO5oB,EAEX,EAEqBu8C,IAAW,QAG9B,WAAaT,EAAiBx5B,GAAyB,IAAD,4BAF9Ck6B,WAAK,OA0DbC,OAAM,yCAAG,gGAYN,GAZeC,EAAQ,EAARA,SAGVC,EAAe,SAACN,GACpB,IAAMj0B,EAAOg0B,GAAWC,GAClBO,EAAa,UAAMP,EAASQ,WAAU,YAAIR,EAASS,cACzC,MAAZJ,GACF32C,QAAQyF,KAAK,qDACbkxC,EAAS,CAAEt0B,KAAMA,EAAMw0B,cAAeA,KAEtC72C,QAAQD,KAAK,sDAEjB,GAEIk2C,GAAyBlc,OAAOvrB,UAAU,CAAD,gBAKJ,OAAvCxO,QAAQyF,KAAK,2BAA0B,SAChB,EAAKgxC,MAAMO,iBAAgB,OAClC,OADVV,EAAQ,UAEZt2C,QAAQyF,KAAK,uBAAwB6wC,GACrCM,EAAaN,IACd,yCAMsB,EAAKG,MAAMQ,UAAS,QAA7B,GACG,QADXX,EAAQ,cACwBr8C,IAAbq8C,IAA0BA,EAASY,QAAO,iBAC9B,OAAnCl3C,QAAQyF,KAAK,uBAAsB,UAC7B,EAAKgxC,MAAMU,iBAAgB,gCAEjCn3C,QAAQyF,KAAK,uCACbmxC,EAAaN,GAAS,4CAG3B,mDAvCK,GAuCL,KAKDc,SAAO,uBAAG,mFACkD,OAA1Dp3C,QAAQm+B,IAAI,+CAA8C,SAC7C,EAAKsY,MAAMY,kBAAiB,mFAC1C,KAKDC,kBAAgB,uBAAG,mGACJ,EAAKb,MAAMQ,UAAUvnB,MAAK,SAAC4mB,GACtC,GAAiB,OAAbA,QAAkCr8C,IAAbq8C,EACvB,OAAOA,EAASS,aAEhBt0C,GAAAA,QACErD,GACA,IAAIhB,EACFD,EACA,kCAIR,IAAE,mFACH,KAKD84C,SAAO,uBAAG,mGACK,EAAKR,MAAMQ,UAAUvnB,MAAK,SAAC4mB,GAUtC,OATiB,OAAbA,QAAkCr8C,IAAbq8C,GACvB7zC,GAAAA,QACErD,GACA,IAAIhB,EACFD,EACA,uCAICk4C,GAAWC,EACpB,IAAE,mFA1IF,IAAIiB,EAAe,YACQt9C,IAAvBsiB,EAASi7B,WACgB,aAAvBj7B,EAASi7B,YACXD,EAAe,kBAGnBr9C,KAAKu8C,MAAQ,IAAIgB,GAAAA,YAAY,CAC3BC,UAAWn7B,EAASm7B,UACpBC,UAAWp7B,EAASq7B,SACpBC,aAAc9B,EACd+B,MAAOv7B,EAASu7B,MAChBC,cAAeR,EACfS,cAAc,EACdC,sBAAsB,EACtBC,4BAA4B,EAC5BC,yBAAyB,GAAD,OAAKpC,EAAO,aAEH,MAA/Bx5B,EAAS67B,oBAUXl+C,KAAKu8C,MAAM4B,gBAAgBC,cAAc5oB,MAAK,SAAAxzB,GACT,MAA/BqgB,EAAS67B,qBACXl8C,EAASq8C,qBAAuBh8B,EAAS67B,mBACzC,EAAK3B,MAAQ,IAAIgB,GAAAA,YAAY,CAC3BC,UAAWn7B,EAASm7B,UACpBC,UAAWp7B,EAASq7B,SACpBC,aAAc9B,EACd+B,MAAOv7B,EAASu7B,MAChBC,cAAeR,EACfS,cAAc,EACdC,sBAAsB,EACtBC,4BAA4B,EAC5BC,yBAAyB,GAAD,OAAKpC,EAAO,WACpC75C,SAAAA,IAGN,IAAGoM,OAAM,SAAC5H,GACRV,QAAQU,MACN,qDACAA,EAEJ,GAEJ,I,sBCqBF,SAxF+B,WAOX,IAPYkB,EAA6B,uDAAG,CAC9D42C,QAAS,EACTC,OAAQ,EACRC,WAAY,IACZC,WAAY,IACZC,WAAW,EACXC,qBAAsB,CAAC,IAAK,MAEtBC,EAAel3C,EAEE,MAAnBA,EAAQ42C,UACVM,EAAaN,QAAU52C,EAAQ42C,SAGX,MAAlB52C,EAAQ62C,SACVK,EAAaL,OAAS72C,EAAQ62C,QAGN,MAAtB72C,EAAQ82C,aACVI,EAAaJ,WAAa92C,EAAQ82C,YAGV,MAAtB92C,EAAQ+2C,aACVG,EAAaH,WAAa/2C,EAAQ+2C,YAGX,MAArB/2C,EAAQg3C,YACVE,EAAaF,UAAYh3C,EAAQg3C,WAGC,MAAhCh3C,EAAQi3C,uBACVC,EAAaD,qBAAuBj3C,EAAQi3C,sBAY9C,IAAME,EAAe,SACnBC,EACA98C,GAEA,IAAQyyC,EAAgBzyC,EAAhByyC,IAAKsK,EAAW/8C,EAAX+8C,OAgCb,IAAMC,EAAsBF,EAAQG,KAGpC,OAFAH,EAAQG,KA/BR,WACE,IAAMC,EAAYC,GAAMD,UAAUN,GAElCM,EAAUE,SAAQ,SAA2BC,GAC3C,IAAMC,EAA6BR,EAAQS,mBAG3CT,EAAQS,mBAAqB,WAC3B,GAAkC,MAA9BD,EAAoC,CAAC,IAAD,uBADmB75C,EAAI,yBAAJA,EAAI,gBAE7D65C,EAA2Bn5C,MAAM24C,EAASr5C,EAC5C,CAEA,GAAIm5C,EAAaD,qBAAqBz4C,SAAS44C,EAAQU,QAAS,CAC9D,IAAMC,EAAY,6BAAyBhL,EAAG,YACxCiL,EAAqB,IAAIp7C,MAAMm7C,GACrCP,EAAUC,MAAMO,EAClB,CACF,EAGIL,EAAiB,IACnBv5C,QAAQD,KAAK,cAAD,OAAe4uC,EAAG,yBAAiB4K,EAAc,MAC7DP,EAAQtuC,KAAKuuC,EAAQtK,GAAK,GAE9B,IAAE,2BAxBkChvC,EAAI,yBAAJA,EAAI,gBA0BxCu5C,EAAoB74C,MAAM24C,EAASr5C,EACrC,EAMOq5C,CACT,EAEA,OAAOD,CACT,ECtGA,IAAQxS,GAAsB52B,EAAAA,GAAAA,oBAAAA,kBASTkqC,GAAe,WAKlC,cAII,IAAD,OAJY9D,EAAO,EAAPA,QAASx5B,EAAQ,EAARA,SAAU/W,EAAO,EAAPA,SAAO,oBAJxBs0C,OAAkB,GAAE,KAEpBC,iBAAW,OAsG5BC,cAAgB,SAACC,GACf,IAAK,IAAMC,KAAKD,EACd,EAAKH,OAAO,GAAGp0C,OAAOy0C,QAAQD,GAAKD,EAAOC,EAE9C,EAAC,KAMDpc,eAAc,yCAAG,WACfl8B,GAAsC,0EAElC,EAAKk4C,OAAO,GAAG9b,MAAM,CAAD,+BACT,EAAK8b,OAAO,GAAGp0C,OAAOo4B,eAAel8B,GAAQ,OAIzD,wCAJyD,uBAE7CqE,QAAQkC,OACnB,IAAI3J,MAAM,2BACX,2CAEJ,mDAVa,GAUb,KAEDu1C,iBAAgB,yCAAG,WACjBnyC,GAAwC,sFAE3B,EAAKk4C,OAAO,GAAGp0C,OAAOquC,iBAAiBnyC,GAAQ,mFAC7D,mDAJe,GAIf,KAEDgE,gBAAe,yCAAG,WAChBhE,GAAuC,sFAE1B,EAAKk4C,OAAO,GAAGp0C,OAAOE,gBAAgBhE,GAAQ,mFAC5D,mDAJc,GAId,KAED6tB,mBAAkB,yCAAG,WACnB7tB,GAA0C,sFAE7B,EAAKk4C,OAAO,GAAGp0C,OAAO+pB,mBAAmB7tB,GAAQ,mFAC/D,mDAJiB,GAIjB,KAEDw4C,sBAAqB,yCAAG,WACtBx4C,GAA6C,8FAEV,EAAKk4C,OAAO,GAAGp0C,OAAO00C,sBAAsBx4C,GAAQ,OAE/C,OAFlCy4C,EAAoB,OACpBC,EAAc/T,GAAkB8T,GACtC1Z,GAAAA,SAA4B2Z,GAAY,kBACjCD,GAAoB,2CAC5B,mDAPoB,GAOpB,KAED/zC,uBAAsB,yCAAG,WACvB1E,GAA8C,8FAEV,EAAKk4C,OAAO,GAAGp0C,OAAOY,uBAAuB1E,GAAQ,OAElC,OAFjDwmB,EAAqB,OACrBkyB,EAAclyB,EAAsB7tB,IAAIgsC,IAC9C5F,GAAAA,kBAAqC2Z,GAAa,GAAK,kBAChDlyB,GAAqB,2CAC7B,mDAPqB,GAOrB,KAEDmyB,yBAAwB,yCAAG,WACzB34C,GAAgD,sFAEnC,EAAKk4C,OAAO,GAAGp0C,OAAO60C,yBAAyB34C,GAAQ,mFACrE,mDAJuB,GAIvB,KAEDiuB,iBAAgB,yCAAG,WACjBjuB,GAAwC,kGAEjB,EAAKk4C,OAAO,GAAGp0C,OAAOmqB,iBAAiBjuB,GAAQ,OAGhB,OAHhDskB,EAAQ,OACRhC,EAAOvU,EAAAA,GAAAA,aAAAA,SAAiCuW,GAAS,EACnC/f,EAAAA,SAAAA,eAA4B+d,EAAK6D,MAA7C3hB,EAAO,EAAPA,QACRu6B,GAAAA,aAAgC,CAACv6B,IAAqB,kBAC/C8f,GAAQ,2CAChB,mDARe,GAQf,KAEDs0B,uBAAsB,yCAAG,WACvB54C,GAA8C,sFAEjC,EAAKk4C,OAAO,GAAGp0C,OAAO80C,uBAAuB54C,GAAQ,mFACnE,mDAJqB,GAIrB,KAED64C,yBAAwB,yCAAG,WACzB74C,GAAgD,sFAEnC,EAAKk4C,OAAO,GAAGp0C,OAAO+0C,yBAAyB74C,GAAQ,mFACrE,mDAJuB,GAIvB,KAED84C,+BAA8B,yCAAG,WAC/B94C,GAAsD,sFAEzC,EAAKk4C,OAAO,GAAGp0C,OAAOg1C,+BAA+B94C,GAAQ,mFAC3E,mDAJ6B,GAI7B,KAED+4C,iBAAgB,yCAAG,WACjB/4C,GAAwC,sFAE3B,EAAKk4C,OAAO,GAAGp0C,OAAOi1C,iBAAiB/4C,GAAQ,mFAC7D,mDAJe,GA1LZ1H,KAAK6/C,YADQ,MAAXv0C,EACiBA,EAEA,SAAC9E,EAAOk6C,GACzB56C,QAAQU,MAAMA,EAAOk6C,EACvB,EAGFr+B,EAAStZ,SAAQ,SAAA23C,GAAmB,IAAD,IAW7BC,OAVmB5gD,IAAnB2gD,GACFn4C,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,qDAMqBlE,IAAvB2gD,EAAejM,IACjBkM,EAAaD,EAAejM,SACK10C,IAAxB2gD,EAAe9S,KACxB+S,EAAahF,GAAQ+E,EAAe9S,KAAMiO,GAE1CtzC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,+DAKN,IAEM28C,EAAgD,CACpDnM,IAAKkM,GAGDE,GAAmE,IAA3CH,EAAeI,yBAAoC,CAC/EH,EACAD,EAAeK,eACfL,EAAeM,eACfN,EAAeO,gBACfrxC,MAXkB,SAAC6kC,GAAY,aAAsC,QAAtC,EAAiB,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKI,WAAW,gBAAQ,QAAS,SAa1C90C,IAAlC2gD,EAAeK,iBACjBH,EAAeM,cAAgBR,EAAeK,qBAEVhhD,IAAlC2gD,EAAeM,iBACjBJ,EAAeO,cAAgBT,EAAeM,qBAEVjhD,IAAlC2gD,EAAeO,iBACjBL,EAAeQ,cAAgBV,EAAeO,gBAG5CJ,IACFD,EAAeX,SAAO,kBACjBW,EAAeX,SAAO,IACzB,0BAA2B,oCAIFlgD,IAAzB2gD,EAAevB,QACjByB,EAAeS,aAAe,CAACC,GAAgBZ,EAAevB,SAGhEyB,EAAehuC,iBAAmB,SAACpM,GACjC,EAAKq5C,YAAYr5C,EAAOk6C,EAC1B,EAEA,EAAKd,OAAO19C,KAAK,CACfwlB,GAAIg5B,EAAeh5B,GACnBoc,MAA2B,QAAtB,EAAE4c,EAAe5c,aAAK,SAC3Byd,KAAyB,QAArB,EAAEb,EAAea,YAAI,SACzB/1C,OAAQ,IAAIg2C,GAAAA,GAAAA,eAAuBZ,IAEvC,IAEI5gD,KAAK4/C,OAAOt3C,OAAS,GACvBC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,wCAIR,CAcC,OAdA,6BAED,WACE,OAAOjE,KAAK4/C,OAAO,GAAGp0C,OAAOqtC,OAC/B,GAAC,mBAQD,WACE,OAAO74C,KAAK4/C,OAAO,GAAGp0C,OAAOy0C,OAC/B,KAAC,EAjHiC,GCKpC,SAASwB,GAAsB,GAUd,IAAD,IAVmBt2C,EAAO,EAAPA,QAASgd,EAAI,EAAJA,KAAMC,EAAG,EAAHA,IAAKs5B,EAAM,EAANA,OAW7Ct2C,GAAqBuJ,EAAAA,EAAAA,MAArBvJ,iBAEF4+B,IAAuD,QAA/B,EAAE0X,EAAOC,8BAAsB,UACvDtiC,EAAwB,QAAjB,EAAGqiC,EAAOriC,eAAO,SAC9B,OACE,SAACzQ,GAAkB,CAACzD,QAASA,EAASC,iBAAkBA,EAAiB,UACvE,SAACw2C,GAAU,CACTz2C,QAASA,EACTgd,KAAMA,EACN5M,YAAammC,EAAOnmC,YACpB8D,QAASA,EACT+I,IAAKA,EACL4hB,sBAAuBA,EACvB5+B,iBAAkBA,KAI1B,CAohBA,SAlaS,0CAgDP,WAAanL,GAAkB,IAAD,qBAC5B,cAAMA,IAhDS4hD,UAAI,IAEJC,oBAAsB,SACrCt7C,EACAk6C,GAEqB,MAAjBl6C,EAAMg5C,OACR,EAAKhD,SACqB,MAAjBh2C,EAAMg5C,QAEfj3C,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,yDAIN,IAAM89C,EAAiB,WAErBx5C,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,uCAGN,OAEqClE,IAAjC2gD,EAAesB,cACjBtB,EAAesB,cAAcj5C,SAAQ,SAACk5C,GAChCz7C,EAAMg5C,SAAWyC,EAAQzC,OAC3B,EAAKjtC,SAAS,CACZ/L,MAAO,CACLg5C,OAAQh5C,EAAMg5C,OACdp7C,QAAS69C,EAAQ79C,WAGK,MAAjBoC,EAAMg5C,QACfuC,GAEJ,IAC0B,MAAjBv7C,EAAMg5C,QACfuC,GAEJ,EAAC,EAyHDrF,aAAe,YAGF,IAHKv0B,EAAI,EAAJA,KAAMw0B,EAAa,EAAbA,cAItB,IAAK,IAAMxvC,KAAO,EAAKiF,MAAMjH,QAAS,CACrB,EAAKiH,MAAMjH,QAAQgC,GAC3B2yC,cAAc,CAAEoC,cAAevF,GACxC,CACA,IAAMwF,EAAatiB,OAAOmX,aAAaC,QAAQ,aACzCmL,EAAeviB,OAAOmX,aAAaC,QAAQ,eACjD,GAAmB,OAAfkL,GAAsC,KAAfA,GAErBA,IADgBtiB,OAAOvrB,SAAS6kB,SACJ,CAC9B,IAAIyU,EAAOuU,EACU,OAAjBC,GAA0C,KAAjBA,IAC3BxU,GAAQwU,GAEVviB,OAAOvrB,SAAS+tC,KAAOzU,CACzB,CAEF/N,OAAOmX,aAAasL,WAAW,aAC/BziB,OAAOmX,aAAasL,WAAW,eAC/B,EAAK/vC,SAAS,CAAE4V,KAAMA,GACxB,EA3IEriB,QAAQyF,KAAK,kBACbzF,QAAQyF,KAAK,sBAAD,OAAuBtL,EAAMyhD,OAAO9T,KAAI,MACpD,MAA2B/N,OAAOvrB,SAA1BsgC,EAAQ,EAARA,SAAU2N,EAAI,EAAJA,KACZ1G,EAAO,UAAMjH,EAAQ,aAAK2N,GAC1BC,EAAS7G,GAAQ17C,EAAMyhD,OAAO9T,KAAMiO,GAEpC4G,EAAexiD,EAAMyhD,OAAOgB,UACb3iD,IAAjB0iD,IACF38C,QAAQyF,KACN,8CACAtL,EAAMyhD,OAAOgB,MAEf,EAAKb,KAAO,IAAIvF,GAAYkG,EAAQC,IAGF,IAAhCxiD,EAAMyhD,OAAOiB,QAAQr6C,QACvBC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,uCAGN6B,QAAQyF,KACN,yDACAtL,EAAMyhD,OAAOiB,SAGf,EAAKvL,sBAAwB,EAAKA,sBAAsB/+B,MAAK,WAE7DjU,EAAAA,GAAAA,OAAe,CAAE4C,SAAU,IAC3B,EAAK47C,gCAAgC3iD,EAAMyhD,QAE3C,IAAM5I,EApMV,SAA6B,GAQmB,IARf+C,EAAO,EAAPA,QAASgH,EAAU,EAAVA,WAAYxgC,EAAQ,EAARA,SAAU/W,EAAO,EAAPA,QASxDw3C,EAAiD,CAAElK,QAAS,GAC5Dr5B,EAA4D,CAAC,EA6CnE,IAAK,IAAMpS,KA3CXkV,EAAStZ,SAAQ,SAAA23C,GACf,GAAqC,MAAjCA,EAAeqC,eACjBrC,EAAeqC,eAAeh6C,SAAQ,SAAA41B,GAChCn1B,OAAO2P,OAAenV,GAAgBkC,SAASy4B,GAC7CA,KAAemkB,EACjBA,EAAoBnkB,IAAgB,EAEpCmkB,EAAoBnkB,GAAe,EAGrC74B,QAAQD,KACN,iCAA0B84B,EAAW,iDACX+hB,EAAeh5B,GAAE,KAGjD,QACK,CACL,GAAImY,OAAOvrB,SAAS6kB,SAASjzB,SAAS,cAAe,CACnD,IAAMizB,EAAW0G,OAAOvrB,SAAS6kB,SAAS12B,MAAM,WAAW,GACrDugD,EAAO,UAAMH,GAAU,OAAG1pB,EAAQ,aACxCunB,EAAejM,IAAMuO,CACvB,CAEAF,EAAoBlK,SAAW,EAC/Br5B,EAAcq5B,QAAU,IAAI+G,GAAgB,CAC1C9D,QAAAA,EACAx5B,SAAU,CAACq+B,GACXp1C,QAAAA,GAEJ,CACF,IAEIw3C,EAAoBlK,QAAU,GAChCrwC,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,wFAMY6+C,EACJ,YAAR31C,GAGA21C,EAAoB31C,GAAO,GAC7B5E,GAAAA,QACErD,EACA,IAAIhB,EACFD,EACA,iEAAgE,yBAC9CkJ,EAAG,oCACrB,+BA0BR,OApBI3D,OAAOC,KAAKq5C,GAAqBx6C,OAAS,GAC5C+Z,EAAStZ,SAAQ,SAAAk6C,GACf,IAAMz3C,EAAS,IAAIm0C,GAAgB,CACjC9D,QAAAA,EACAx5B,SAAU,CAAC4gC,GACX33C,QAAAA,IAE2B,MAAzB23C,EAAOF,gBACTE,EAAOF,eAAeh6C,SAAQ,SAAA41B,GAC5Bpf,EAAcof,GAAenzB,CAC/B,GAEJ,IAGFhC,OAAO2P,OAAOnV,GAAgB+E,SAAQ,SAAA41B,GAC9BA,KAAepf,IACnBA,EAAcof,GAAepf,EAAcq5B,QAE/C,IACOr5B,CACT,CAuG2B2jC,CAAqB,CAC1CrH,QAAAA,EACAgH,WAAmC,QAAzB,EAAE5iD,EAAMyhD,OAAOmB,kBAAU,QAAI,uCACvCxgC,SAAUpiB,EAAMyhD,OAAOiB,QACvBr3C,QAAS,EAAKw2C,sBAQf,OALD,EAAK1vC,MAAQ,CACXjH,QAAS2tC,EACTA,eAAAA,EACAtrC,WAAW,EACX21C,mBAAmB,GACpB,CACH,CA8TC,OA9TA,uDAED,SAAiCzB,GAC/B,IAAM0B,EAAW,kCAEX3O,EADY,IAAIxb,gBAAgB4G,OAAOvrB,SAAS4kB,QAChCrrB,IAAI,YAIW9N,IAHA2hD,EAAOiB,QAAQh8C,MAClD,SAACs8C,GAAM,OAAKA,EAAOv7B,KAAO07B,CAAQ,KAE6B,kBAAR3O,GACvDiN,EAAOiB,QAAQzgD,KAAK,CAClBwlB,GAAI07B,EACJtf,OAAO,EACP2Q,IAAAA,EACAsO,eAAgB,CACd/+C,EAAeq/C,iBACfr/C,EAAe2/B,oBACf3/B,EAAe02B,aACf12B,EAAeo2B,kCACfp2B,EAAe+2B,eACf/2B,EAAesxB,qCACftxB,EAAes/C,kCACft/C,EAAeu/C,sCACfv/C,EAAew/C,0CAIvB,GAAC,mCAED,YAAwD,IAA/B/O,EAAG,EAAHA,IAEvB,GADA3uC,QAAQyF,KAAK,2BAA4BkpC,GAC7B,KAARA,GAA4E,YAA9D5U,OAAOmX,aAAaC,QAAQ,8BAA9C,CAIApX,OAAOmX,aAAaK,QAAQ,uBAAwB5C,GACpD,IAAMgP,EAAY,IAAI9D,GAAgB,CACpC9D,QAAS,GACTx5B,SAAU,CAAC,CACTqF,GAAI,MACJ+sB,IAAAA,EACA8M,MAAM,EACNzd,OAAO,IAETx4B,QAAStL,KAAK8hD,sBAEhB2B,EAAU3D,cAAc9/C,KAAKoS,MAAMjH,QAAQytC,QAAQqH,SAMnDjgD,KAAKuS,UAAS,SAAAH,GACZ,IAAMjH,EAA8C,CAAC,EACrD,IAAK,IAAMgC,KAAOiF,EAAMjH,QACtBA,EAAQgC,GAAOs2C,EAEjB,MAAO,CAAEt4C,QAAAA,EACX,GAxBA,MAFEnL,KAAKuS,SAAS,CAAEpH,QAASnL,KAAKoS,MAAM0mC,gBA2BxC,GAEA,oBAkCA,WAAiB,IAAD,YACI/4C,IAAdC,KAAK6hD,MACP/7C,QAAQyF,KAAK,uBACbvL,KAAK6hD,KAAKrF,OAAO,CAAEC,SAAUz8C,KAAK08C,eAAgBlnB,MAAK,WACrD1vB,QAAQyF,KAAK,0BACb,EAAKgH,SAAS,CACZ/E,WAAW,EACX21C,mBAAmB,GAEvB,IAAG/0C,OAAM,SAAC5H,GACRV,QAAQU,MAAMA,GAEd+B,GAAAA,QACErD,GACA,IAAIhB,EACFD,EACA,4BAEJ,EAAKsO,SAAS,CACZ/E,WAAW,EACXk2C,gBAAY3jD,EACZojD,mBAAmB,GAEvB,KAEAnjD,KAAKuS,SAAS,CACZ/E,WAAW,EACXk2C,gBAAY3jD,EACZojD,mBAAmB,GAGzB,GAAC,+BAED,WACE,IAAMvV,EAAO/N,OAAOmX,aAAaC,QAAQ,aAC5B,OAATrJ,QAA0B7tC,IAAT6tC,GAA+B,KAATA,IACzC/N,OAAOmX,aAAaK,QAAQ,YAAaxX,OAAOvrB,SAAS6kB,UACzD0G,OAAOmX,aAAaK,QAAQ,cAAexX,OAAOvrB,SAAS4kB,SAI7D,IAAM6d,EAAkBlX,OAAOmX,aAAaC,QAAQ,wBAC5B,OAApBF,QAAgDh3C,IAApBg3C,GAAqD,KAApBA,GAC/D/2C,KAAKo3C,sBAAsB,CAAE3C,IAAKsC,IAGpC/2C,KAAKw8C,QACP,GAAC,oBAED,WAA4B,IAAD,IAgBrBmH,EAhBqB,OACnBC,EAAU,CACdjjD,KAAMX,KAAKC,MAAMU,KACjBy0C,QAASp1C,KAAKC,MAAMm1C,QACpBE,SAAUt1C,KAAKC,MAAMq1C,SACrB90C,IAAK,iCACLqjD,aAAc7jD,KAAKC,MAAMyhD,OAAOmC,cAG5BC,IAC6B,QADZ,EACrB9jD,KAAKC,MAAMyhD,OAAOqC,uBAAe,UAE7BC,EACmC,QADd,EACzBhkD,KAAKC,MAAMyhD,OAAOsC,6BAAqB,SAKvCL,EADEG,GACS,SAAC,GAAQ,CAAC34C,QAASnL,KAAKoS,MAAMjH,WAE9B,yDAGb,IACI84C,EADAC,GAAmB,EAIK,MAA1BlkD,KAAKC,MAAMyhD,OAAOgB,MAC2B,MAA7C1iD,KAAKC,MAAMyhD,OAAOgB,KAAKxE,oBAEvB+F,EAAW,WACQ,MAAb,EAAKpC,MAEP,EAAKA,KAAK3E,SAEd,EACAgH,GAAmB,IAEnBD,EAAW,WAAO,EAClBC,GAAmB,GAGrB,IAAMC,EAAc,CAAEnxC,OAAQ,SACxBoxC,EAAqB,CAAEpxC,OAAQ,QAErC,YAA8BjT,IAA1BC,KAAKoS,MAAMsxC,YAEX,SAAC,KAAa,CAACW,SAAUrkD,KAAKC,MAAMyhD,OAAO9T,KAAK,UAC9C,SAAC,KAAQ,CAACsK,GAAIl4C,KAAKoS,MAAMsxC,WAAYtqB,SAAO,MAGvCp5B,KAAKoS,MAAM5E,WAElB,SAAC,KAAa,CAAC62C,SAAUrkD,KAAKC,MAAMyhD,OAAO9T,KAAK,UAC9C,UAAC,IAAM,CAAC78B,MAAOozC,EAAY,WACzB,SAAC,GAAM,CACL/7B,IAAKw7B,EACLz7B,KAAMnoB,KAAKoS,MAAM+V,KACjB8vB,oBAAoB,EACpBX,kBAAmBt3C,KAAKo3C,sBACxBsB,2BAA2B,EAC3BvtC,QAASnL,KAAKoS,MAAMjH,QACpB2tC,eAAgB94C,KAAKoS,MAAM0mC,kBAE7B,SAAC,YAAc,CAAC/nC,MAAOqzC,EAAmB,UACxC,SAAC,MAAS,WAKRpkD,KAAKoS,MAAM+wC,kBAIQ,MAApBnjD,KAAKoS,MAAM5L,OAElB,SAAC,GAAQ,CAACrC,KAAK,QAAQC,QAASpE,KAAKoS,MAAM5L,MAAMpC,WAIjD,SAAC,KAAa,CAACigD,SAAUrkD,KAAKC,MAAMyhD,OAAO9T,KAAK,UAC9C,UAAC,KAAM,YACL,SAAC,KAAK,CACJA,KAAK,IACLC,SACE,UAAC,IAAM,CAAC98B,MAAOozC,EAAY,WACzB,SAAC,GAAM,CACL/7B,IAAKw7B,EACLz7B,KAAMnoB,KAAKoS,MAAM+V,KACjB8vB,oBAAoB,EACpBX,kBAAmBt3C,KAAKo3C,sBACxBQ,aAAcsM,EAAmBD,OAAWlkD,EAC5C24C,0BAA2BsL,EAC3B74C,QAASnL,KAAKoS,MAAMjH,QACpB2tC,eAAgB94C,KAAKoS,MAAM0mC,kBAE7B,SAAC,YAAc,CAAC/nC,MAAOqzC,EAAmB,SACvCT,UAKT,SAAC,KAAK,CACJ/V,KAAK,+BACLC,SACE,UAAC,IAAM,CAAC98B,MAAOozC,EAAY,WACzB,SAAC,GAAM,CACL/7B,IAAKw7B,EACLz7B,KAAMnoB,KAAKoS,MAAM+V,KACjB8vB,mBAAoB6L,EACpBxM,kBAAmBt3C,KAAKo3C,sBACxBQ,aAAcsM,EAAmBD,OAAWlkD,EAC5C24C,0BAA2BsL,EAC3B74C,QAASnL,KAAKoS,MAAMjH,QACpB2tC,eAAgB94C,KAAKoS,MAAM0mC,kBAE7B,SAAC,YAAc,CAAC/nC,MAAOqzC,EAAmB,UACxC,SAAC3C,GAAsB,CACrBt2C,QAASnL,KAAKoS,MAAMjH,QACpBgd,KAAMnoB,KAAKoS,MAAM+V,KACjBu5B,OAAQ1hD,KAAKC,MAAMyhD,OACnBt5B,IAAKw7B,YAMf,SAAC,KAAK,CACJhW,KAAK,6GACLC,SACE,UAAC,IAAM,CAAC98B,MAAOozC,EAAY,WACzB,SAAC,GAAM,CACL/7B,IAAKw7B,EACLz7B,KAAMnoB,KAAKoS,MAAM+V,KACjB8vB,mBAAoB6L,EACpBxM,kBAAmBt3C,KAAKo3C,sBACxBQ,aAAcsM,EAAmBD,OAAWlkD,EAC5C24C,0BAA2BsL,EAC3B74C,QAASnL,KAAKoS,MAAMjH,QACpB2tC,eAAgB94C,KAAKoS,MAAM0mC,kBAE7B,SAAC,YAAc,CAAC/nC,MAAOqzC,EAAmB,UACxC,SAAC3C,GAAsB,CACrBt2C,QAASnL,KAAKoS,MAAMjH,QACpBgd,KAAMnoB,KAAKoS,MAAM+V,KACjBu5B,OAAQ1hD,KAAKC,MAAMyhD,OACnBt5B,IAAKw7B,YAMf,SAAC,KAAK,CACJhW,KAAK,UACLC,SACE,UAAC,IAAM,CAAC98B,MAAOozC,EAAY,WACzB,SAAC,GAAM,CACL/7B,IAAKw7B,EACLz7B,KAAMnoB,KAAKoS,MAAM+V,KACjB8vB,oBAAoB,EACpBX,kBAAmBt3C,KAAKo3C,sBACxBQ,aAAcsM,EAAmBD,OAAWlkD,EAC5C24C,0BAA2BsL,EAC3B74C,QAASnL,KAAKoS,MAAMjH,QACpB2tC,eAAgB94C,KAAKoS,MAAM0mC,iBAC3B,wBA7FZ,SAAC,GAAQ,CAAC30C,KAAK,QAAQC,QAAQ,mBAsGrC,KAAC,EA/ZM,CAASrC,EAAAA,U","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","utils/CustomError.js","utils/PubSub.js","services/NotificationMiddleware.js","data/slides.tsx","services/fetchImageMetadata.ts","hooks/useSlides.ts","contexts/ValidationContext.tsx","components/ValidationWarning.tsx","components/SlideItem.tsx","components/SlideList.tsx","utils/router.tsx","utils/sr.tsx","services/RoiToAnnotationAdapter.ts","components/SlideViewer/AnnotationModal.tsx","components/SlideViewer/SelectedRoiModal.tsx","components/SlideViewer/GoToModal.tsx","components/SlideViewer/ReportModal.tsx","components/SlideViewer/SlideViewerModals.tsx","components/ColorSettingsMenu.tsx","components/AnnotationCategoryItem.tsx","components/AnnotationCategoryList.tsx","components/SlideViewer/SlideViewerSidebar.tsx","components/SlideViewer/SlideViewerContent.tsx","components/SlideViewer/utils/roiUtils.ts","components/SlideViewer/utils/viewerUtils.ts","components/SlideViewer/constants.ts","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Report.tsx","components/HoveredRoiTooltip.tsx","utils/generateReport.ts","utils/pubSubServiceInterface.ts","utils/createSeriesMetadata.ts","utils/createStudyMetadata.ts","services/DICOMMetadataStore.ts","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/Equipment.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/Button.tsx","components/SlideViewer.tsx","components/CaseViewer.tsx","components/DicomTagBrowser/dicomTagUtils.ts","utils/formatDicomDate.ts","components/DicomTagBrowser/DicomTagBrowser.tsx","hooks/useDebounce.ts","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Sex',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","const errorTypes = {\n  AUTHENTICATION: 'Authentication',\n  COMMUNICATION: 'Communication',\n  ENCODINGANDDECODING: 'EncodingDecoding',\n  VISUALIZATION: 'Visualization'\n}\n\nclass CustomError extends Error {\n  constructor (type, message) {\n    super()\n    this.message = message\n    this.stack = new Error().stack\n    this.type = type\n  }\n}\n\nexport { errorTypes, CustomError }\n","// Use symbols to prevent exposing private attributes\nconst _subscriptions = Symbol('subscriptions')\nconst _lastSubscriptionId = Symbol('lastSubscriptionId')\n\n/**\n * Class to enable implementation of publish/subscribe pattern\n * @class\n * @classdesc Enables publishing/subscribing\n */\nexport default class PubSub {\n  constructor () {\n    this[_subscriptions] = {}\n    this[_lastSubscriptionId] = 0\n  }\n\n  /**\n   * Adds a subscription callback to the provided event name\n   * @param {string} eventName Event name that will trigger the callback\n   * @param {Function} callback Function to be executed when event is published\n   * @returns {void}\n   */\n  subscribe (eventName, callback) {\n    if (eventName === undefined) {\n      throw new Error('Trying to subscribe to an inexistent event')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('The provided callback must be a function')\n    }\n\n    if (!this[_subscriptions].hasOwnProperty(eventName)) {\n      this[_subscriptions][eventName] = {}\n    }\n\n    const subscriptionId = `sub${this[_lastSubscriptionId]++}`\n    this[_subscriptions][eventName][subscriptionId] = callback\n  }\n\n  /**\n   * Removes a subscription callback for the provided event name\n   * @param {string} eventName Event name for the registerd callback\n   * @param {Function} [callback] Function to have its subscription removed\n   * @returns {void}\n   */\n  unsubscribe (eventName, callback) {\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      if (!callback) {\n        delete callbacks[subscriptionId]\n      } else if (callbacks[subscriptionId] === callback) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n\n  /**\n   * Trigger all registered subscription callbacks for a specific event name\n   * @param {String} eventName Event name to trigger subscriptions from\n   * @param {any} [payload] Payload that will be passed to the callback fuction\n   * @returns {void}\n   */\n  publish (eventName, ...payload) {\n    if (eventName === undefined) {\n      throw new Error('Trying to publish an inexistent event')\n    }\n\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      callbacks[subscriptionId](...payload)\n    }\n  }\n\n  /**\n   * Cleares all subscriptions for current instance\n   * @returns {void}\n   */\n  unsubscribeFromAll () {\n    for (const eventName in this[_subscriptions]) {\n      const callbacks = this[_subscriptions][eventName]\n      for (const subscriptionId in callbacks) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n}\n","import PubSub from '../utils/PubSub'\nimport { notification } from 'antd'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nexport const NotificationMiddlewareEvents = {\n  OnError: 'onError',\n  OnWarning: 'onWarning'\n}\n\nexport const NotificationMiddlewareContext = {\n  DICOMWEB: 'dicomweb-client',\n  DMV: 'dicom-microscopy-viewer',\n  DCMJS: 'dcmjs',\n  SLIM: 'slim',\n  AUTH: 'authentication'\n}\n\nconst NotificationType = {\n  TOAST: 'toast',\n  CONSOLE: 'console'\n}\n\n/* Sources of Error:\n  1. 'dicomweb-client': Error while requesting/fetching data, tagged as 'Communication'\n  2. 'slim' and 'dicom-microscopy-viewer' library: Error related to dicom data encoding/decoding,\n  could directly/indirectly impact image-related visualization, tagged as 'Visualization' or\n  'Encoding/Decoding' accordingly\n  3. 'dcmjs' library: Data parsing error, tagged as 'DICOMError'\n  4. 'authentication': Error during user authentication, tagged as 'Authentication'\n  */\nconst NotificationSourceDefinition = {\n  sources: [\n    {\n      category: errorTypes.AUTHENTICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.COMMUNICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.VISUALIZATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.ENCODINGANDDECODING,\n      notificationType: NotificationType.CONSOLE\n    },\n    {\n      category: 'Warning',\n      notificationType: NotificationType.TOAST\n    }\n  ]\n}\n\nclass NotificationMiddleware extends PubSub {\n  constructor () {\n    super()\n\n    const outerContext = (args) => {\n      this.publish(NotificationMiddlewareEvents.OnWarning, Array.from(args).join(' '))\n    }\n\n    (function () {\n      const warn = console.warn\n      console.warn = function () {\n        if (!JSON.stringify(arguments).includes('request')) {\n          outerContext(arguments)\n        }\n        warn.apply(this, Array.prototype.slice.call(arguments))\n      }\n    }())\n  }\n\n  /**\n   * Error handling middleware function\n   *\n   * @param source - source of error - dicomweb-client, dmv, dcmjs or slim itself\n   * @param error - error object\n   */\n  onError (source, error) {\n    const errorCategory = error.type\n    const sourceConfig = NotificationSourceDefinition.sources.find(\n      s => s.category === errorCategory\n    )\n\n    const { notificationType } = sourceConfig\n\n    this.publish(NotificationMiddlewareEvents.OnError, {\n      source,\n      error\n    })\n\n    let notificationMsg\n    if (error instanceof CustomError) {\n      notificationMsg = error.message\n    } else {\n      notificationMsg = String(error)\n    }\n\n    switch (notificationType) {\n      case NotificationType.TOAST:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        return notification.error({\n          message: `${errorCategory} error`,\n          description: notificationMsg,\n          duration: 3\n        })\n\n      case NotificationType.CONSOLE:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        break\n\n      default:\n    }\n  }\n}\n\nexport default new NotificationMiddleware()\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID !== null && image.AcquisitionUID !== undefined) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null | undefined\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Value of option \"images\" have been non-zero length.'\n        )\n      )\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID !== null && image.AcquisitionUID !== undefined) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (hasImageFlavor(image, ImageFlavors.VOLUME) || hasImageFlavor(image, ImageFlavors.THUMBNAIL)) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID !== null && image.PyramidUID !== undefined) {\n          for (const identifier of Object.keys(opticalPathIdentifiers)) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n\n    if (volumeImages.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'At least one VOLUME image must be provided for a slide.'\n        )\n      )\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n            'image that has not been resampled per optical path'\n        )\n      }\n    }\n\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All images of a slide must have the same Container Identifier.'\n        )\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must have ' +\n          'the same Frame of Reference UID.'\n        )\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `All VOLUME images for optical path \"${identifier}\"` +\n              'must be part of the same multi-resolution pyramid.'\n            )\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must be part of the same  ' +\n          'acquisition and have the same Acquisition UID.'\n        )\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter(\n        (image) =>\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      )\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './NotificationMiddleware'\nimport { createSlides, Slide } from '../data/slides'\n\ninterface FetchImageMetadataParams {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  onSuccess: (slides: Slide[]) => void\n  onError: (error: Error) => void\n}\n\nexport const fetchImageMetadata = async ({\n  clients,\n  studyInstanceUID,\n  onSuccess,\n  onError\n}: FetchImageMetadataParams): Promise<void> => {\n  try {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n\n    const client = clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(\n      matchedSeries.map(async (s) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const loadingSeries = dataset as dmv.metadata.Series\n        console.info(\n          `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n        )\n        const retrievedMetadata = await client.retrieveSeriesMetadata({\n          studyInstanceUID: studyInstanceUID,\n          seriesInstanceUID: loadingSeries.SeriesInstanceUID\n        })\n\n        const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n        retrievedMetadata.forEach((item) => {\n          if (\n            item['00080016']?.Value?.[0] ===\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        })\n\n        if (seriesImages.length > 0) {\n          images.push(seriesImages)\n        }\n      })\n    )\n    const newSlides = createSlides(images)\n    onSuccess(newSlides)\n  } catch (err) {\n    console.error(err)\n    const customError = new CustomError(\n      errorTypes.ENCODINGANDDECODING,\n      'Image metadata could not be retrieved or decoded.'\n    )\n    onError(customError)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      customError\n    )\n  }\n}\n","import { useState, useEffect, useMemo } from 'react'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\nimport { fetchImageMetadata } from '../services/fetchImageMetadata'\n\ninterface UseSlidesProps {\n  clients?: { [key: string]: DicomWebManager }\n  studyInstanceUID?: string\n}\n\ninterface UseSlidesReturn {\n  slides: Slide[]\n  isLoading: boolean\n  error: Error | null\n}\n\nconst slidesCache = new Map<string, Slide[]>()\nconst pendingRequests = new Map<string, Promise<Slide[]>>()\nconst cacheTimestamps = new Map<string, number>()\n\n// Cache expiration time: 30 minutes\nconst CACHE_EXPIRATION_TIME = 30 * 60 * 1000\n\n// Clean up expired cache entries\nconst cleanupExpiredCache = (): void => {\n  const now = Date.now()\n  for (const [key, timestamp] of cacheTimestamps.entries()) {\n    if (now - timestamp > CACHE_EXPIRATION_TIME) {\n      slidesCache.delete(key)\n      cacheTimestamps.delete(key)\n    }\n  }\n}\n\n// Utility functions for cache management\nexport const clearSlidesCache = (studyInstanceUID?: string): void => {\n  if (studyInstanceUID !== null && studyInstanceUID !== undefined && studyInstanceUID !== '' && studyInstanceUID.length > 0) {\n    slidesCache.delete(studyInstanceUID)\n    cacheTimestamps.delete(studyInstanceUID)\n    pendingRequests.delete(studyInstanceUID)\n  } else {\n    slidesCache.clear()\n    cacheTimestamps.clear()\n    pendingRequests.clear()\n  }\n}\n\nexport const getCachedSlides = (studyInstanceUID: string): Slide[] | undefined => {\n  return slidesCache.get(studyInstanceUID)\n}\n\nexport const isSlidesCached = (studyInstanceUID: string): boolean => {\n  return slidesCache.has(studyInstanceUID)\n}\n\n/**\n * Hook to fetch and manage whole slide microscopy images for a given study.\n * Values are cached so they can be reused if props are not provided.\n * If no arguments are provided, returns the most recently cached slides.\n *\n * @param props - Hook configuration props (optional)\n * @param props.clients - Map of DICOM web clients keyed by storage class\n * @param props.studyInstanceUID - Study instance UID to fetch slides for\n */\nexport const useSlides = ({ clients, studyInstanceUID }: UseSlidesProps = {}): UseSlidesReturn => {\n  const [slides, setSlides] = useState<Slide[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    // Clean up expired cache entries periodically\n    cleanupExpiredCache()\n\n    // If no arguments provided, return cached slides if available\n    if ((clients === null || clients === undefined) || (studyInstanceUID === null || studyInstanceUID === undefined) || studyInstanceUID === '' || studyInstanceUID.length === 0) {\n      // Get the most recently cached slides (last entry in the cache)\n      const cachedEntries = Array.from(slidesCache.entries())\n      if (cachedEntries.length > 0) {\n        const lastCachedSlides = cachedEntries[cachedEntries.length - 1][1]\n        setSlides(lastCachedSlides)\n        setIsLoading(false)\n        setError(null)\n      } else {\n        setSlides([])\n        setIsLoading(false)\n        setError(null)\n      }\n      return\n    }\n\n    const cachedData = slidesCache.get(studyInstanceUID)\n    if (cachedData !== undefined) {\n      setSlides(cachedData)\n      setIsLoading(false)\n      setError(null)\n      return\n    }\n\n    setIsLoading(true)\n    setError(null)\n\n    const fetchSlides = async (): Promise<void> => {\n      // Check if there's already a pending request for this study\n      let pendingRequest = pendingRequests.get(studyInstanceUID)\n\n      if (pendingRequest === undefined) {\n        // Create a new promise for this request\n        pendingRequest = new Promise<Slide[]>((resolve, reject): void => {\n          fetchImageMetadata({\n            clients,\n            studyInstanceUID,\n            onSuccess: (newSlides) => {\n              slidesCache.set(studyInstanceUID, newSlides)\n              cacheTimestamps.set(studyInstanceUID, Date.now())\n              resolve(newSlides)\n            },\n            onError: (err) => {\n              reject(err)\n            }\n          }).catch((err) => {\n            reject(err)\n          })\n        })\n        pendingRequests.set(studyInstanceUID, pendingRequest)\n      }\n\n      try {\n        const newSlides = await pendingRequest\n        setSlides(newSlides)\n        setError(null)\n      } catch (err) {\n        setError(err as Error)\n        setSlides([])\n      } finally {\n        pendingRequests.delete(studyInstanceUID)\n        setIsLoading(false)\n      }\n    }\n\n    void fetchSlides()\n  }, [clients, studyInstanceUID])\n\n  // Memoize the return value to prevent unnecessary re-renders\n  const result = useMemo(() => ({\n    slides,\n    isLoading,\n    error\n  }), [slides, isLoading, error])\n\n  return result\n}\n","import React, { createContext, useContext, useState, useCallback, useEffect, useMemo } from 'react'\nimport { Modal } from 'antd'\nimport { useSlides } from '../hooks/useSlides'\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\ninterface ValidationResult {\n  isValid: boolean\n  message?: string\n  type: 'warning' | 'error' | 'info'\n}\n\ninterface ValidationContextType {\n  runValidations: (options: { dialog?: boolean, context: { annotationGroup?: dmv.annotation.AnnotationGroup, slide?: Slide } }) => ValidationResult\n}\n\nconst ValidationContext = createContext<ValidationContextType | undefined>(undefined)\n\n/**\n * Global validation function for class components\n */\nlet globalValidationContext: ValidationContextType | null = null\n\nfunction setGlobalValidationContext (context: ValidationContextType): void {\n  globalValidationContext = context\n}\n\ninterface ValidationProviderProps {\n  children: React.ReactNode\n  clients?: { [key: string]: DicomWebManager }\n  studyInstanceUID?: string\n}\n\n/**\n * ValidationProvider - Provides validation context for running validations and showing dialogs\n *\n * Usage:\n * 1. Wrap your component tree with ValidationProvider\n * 2. Use useValidation hook to access validation functions\n *\n * Example:\n * ```tsx\n * // Simple usage - just call runValidations with options\n * const { runValidations } = useValidation()\n *\n * const handleAction = () => {\n *   const result = runValidations({\n *     dialog: true,\n *     context: { annotationGroup, slide }\n *   })\n *   if (result.isValid) {\n *     // proceed with action\n *   }\n * }\n * ```\n */\nexport const ValidationProvider: React.FC<ValidationProviderProps> = ({\n  children,\n  clients,\n  studyInstanceUID\n}) => {\n  const [isDialogVisible, setIsDialogVisible] = useState(false)\n  const [currentValidationResult, setCurrentValidationResult] = useState<ValidationResult | null>(null)\n  const { slides } = useSlides({ clients, studyInstanceUID })\n\n  // Memoize slides to prevent unnecessary re-renders when slides array reference changes but content is the same\n  const memoizedSlides = useMemo(() => {\n    // Only update if slides actually changed (deep comparison would be expensive, so we use a simple approach)\n    // For now, we'll use the slides directly but memoize the validation functions more efficiently\n    return slides\n  }, [slides])\n\n  // Memoize the slides length and existence to avoid unnecessary validation function recreations\n  const slidesInfo = useMemo(() => {\n    const slidesLength = slides?.length\n    let hasSlides = false\n    if (slides !== null && slides !== undefined && typeof slidesLength === 'number' && !Number.isNaN(slidesLength)) {\n      hasSlides = slidesLength !== 0\n    }\n    return {\n      hasSlides,\n      slidesLength: slidesLength ?? 0\n    }\n  }, [slides])\n\n  const showValidationDialog = useCallback((result: ValidationResult) => {\n    setCurrentValidationResult(result)\n    setIsDialogVisible(true)\n  }, [])\n\n  const validateMultiResolutionPyramid = useCallback((slide: Slide): ValidationResult => {\n    if ((slide?.volumeImages?.length ?? 0) <= 1) {\n      return {\n        isValid: false,\n        message: 'This slide is missing a multi-resolution pyramid. Display and performance may be degraded.',\n        type: 'warning'\n      }\n    }\n    return { isValid: true, type: 'info' }\n  }, [])\n\n  const validateAnnotationGroupAssociation = useCallback((annotationGroup?: dmv.annotation.AnnotationGroup): ValidationResult => {\n    if (annotationGroup !== null && annotationGroup !== undefined && slidesInfo.hasSlides) {\n      const checkSlideMatch = (slide: Slide): boolean => {\n        const checkImageMatch = (volumeImage: dmv.metadata.VLWholeSlideMicroscopyImage): boolean =>\n          volumeImage.SOPInstanceUID !== null && volumeImage.SOPInstanceUID !== undefined &&\n          volumeImage.SOPInstanceUID === (annotationGroup as dmv.annotation.AnnotationGroup & { referencedSOPInstanceUID: string }).referencedSOPInstanceUID\n\n        const hasMatchingImage = slide.volumeImages?.some(checkImageMatch)\n        return hasMatchingImage\n      }\n\n      const hasMatchingSlide = memoizedSlides.some(checkSlideMatch)\n\n      if (!hasMatchingSlide) {\n        return {\n          isValid: false,\n          message: 'The annotation group is not associated with any slide.',\n          type: 'warning'\n        }\n      }\n    }\n    return { isValid: true, type: 'info' }\n  }, [memoizedSlides, slidesInfo.hasSlides])\n\n  const runValidations = useCallback((options: { dialog?: boolean, context: { annotationGroup?: dmv.annotation.AnnotationGroup, slide?: Slide } }): ValidationResult => {\n    const { dialog = false, context } = options\n    const { annotationGroup, slide } = context\n\n    if (slide !== null && slide !== undefined) {\n      const pyramidValidation = validateMultiResolutionPyramid(slide)\n      if (!pyramidValidation.isValid) {\n        if (dialog) {\n          showValidationDialog(pyramidValidation)\n        }\n        return pyramidValidation\n      }\n    }\n\n    const associationValidation = validateAnnotationGroupAssociation(annotationGroup)\n    if (!associationValidation.isValid) {\n      if (dialog) {\n        showValidationDialog(associationValidation)\n      }\n      return associationValidation\n    }\n\n    return { isValid: true, type: 'info' }\n  }, [validateMultiResolutionPyramid, validateAnnotationGroupAssociation, showValidationDialog])\n\n  /**\n   * Set global validation context for class components\n   */\n  useEffect(() => {\n    const context: ValidationContextType = {\n      runValidations\n    }\n    setGlobalValidationContext(context)\n  }, [runValidations])\n\n  const handleDialogClose = useCallback((): void => {\n    setIsDialogVisible(false)\n    setCurrentValidationResult(null)\n  }, [])\n\n  function getModalType (type: ValidationResult['type']): { error?: boolean, warning?: boolean, info?: boolean } {\n    switch (type) {\n      case 'error':\n        return { error: true }\n      case 'warning':\n        return { warning: true }\n      case 'info':\n        return { info: true }\n      default:\n        return { info: true }\n    }\n  }\n\n  const value: ValidationContextType = {\n    runValidations\n  }\n\n  return (\n    <ValidationContext.Provider value={value}>\n      {children}\n      {(currentValidationResult !== null && currentValidationResult !== undefined) && (\n        <Modal\n          open={isDialogVisible}\n          onCancel={handleDialogClose}\n          onOk={handleDialogClose}\n          title={`Validation ${currentValidationResult.type.charAt(0).toUpperCase() + currentValidationResult.type.slice(1)}`}\n          okText='OK'\n          cancelButtonProps={{ style: { display: 'none' } }}\n          {...getModalType(currentValidationResult.type)}\n        >\n          <p>{currentValidationResult.message}</p>\n        </Modal>\n      )}\n    </ValidationContext.Provider>\n  )\n}\n\nexport const useValidation = (): ValidationContextType => {\n  const context = useContext(ValidationContext)\n  if (context === undefined) {\n    throw new Error('useValidation must be used within a ValidationProvider')\n  }\n  return context\n}\n\nexport const runValidations = (options: { dialog?: boolean, context: { annotationGroup?: dmv.annotation.AnnotationGroup, slide?: Slide } }): ValidationResult => {\n  if (globalValidationContext === null || globalValidationContext === undefined) {\n    console.warn('Validation context not available. Make sure ValidationProvider is mounted.')\n    return { isValid: true, type: 'info' }\n  }\n  return globalValidationContext.runValidations(options)\n}\n","import React, { useState, useEffect } from 'react'\nimport { FaExclamationTriangle } from 'react-icons/fa'\nimport { Tooltip } from 'antd'\nimport { useValidation } from '../contexts/ValidationContext'\nimport { Slide } from '../data/slides'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\ninterface ValidationWarningProps {\n  annotationGroup?: dmv.annotation.AnnotationGroup\n  onEvent?: () => void\n  slide?: Slide\n  iconColor?: string\n  iconSize?: string\n  style?: React.CSSProperties\n  position?: {\n    top?: string\n    right?: string\n  }\n}\n\nconst ValidationWarning: React.FC<ValidationWarningProps> = ({\n  slide,\n  annotationGroup,\n  iconColor = '#e69500',\n  iconSize = '1.3em',\n  position = { top: '4px', right: '4px' },\n  style\n}) => {\n  const [show, setShow] = useState(false)\n  const [tooltipText, setTooltipText] = useState<string | undefined>(undefined)\n\n  const { runValidations } = useValidation()\n\n  useEffect(() => {\n    const validationResult = runValidations({\n      dialog: false,\n      context: { annotationGroup, slide }\n    })\n    if (!validationResult.isValid) {\n      setShow(true)\n      setTooltipText(validationResult.message)\n      console.warn(validationResult.message)\n    } else {\n      setShow(false)\n      setTooltipText(undefined)\n    }\n  }, [slide, annotationGroup, runValidations])\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <Tooltip title={tooltipText}>\n      <div style={{\n        ...style,\n        position: 'absolute',\n        top: position.top,\n        right: position.right,\n        zIndex: 2,\n        pointerEvents: 'auto'\n      }}\n      >\n        <FaExclamationTriangle style={{\n          color: iconColor,\n          fontSize: iconSize,\n          textShadow: '0 2px 6px rgba(0,0,0,0.25), 0 0px 2px #fff'\n        }}\n        />\n      </div>\n    </Tooltip>\n  )\n}\n\nexport default ValidationWarning\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport ValidationWarning from './ValidationWarning'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null && this.overviewViewportRef.current !== undefined) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          disableInteractions: true,\n          metadata,\n          resizeFactor: 1,\n          errorInterceptor: (error: CustomError) => {\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.DMV,\n              error\n            )\n          }\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n\n    const attributes = []\n    const description = this.props.slide.description\n    if (description !== null && description !== undefined && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ position: 'relative', height: '100px' }}>\n            {this.props.slide.overviewImages.length > 0\n              ? (\n                <div ref={this.overviewViewportRef} style={{ height: '100%' }} />\n                )\n              : (\n                <div style={{\n                  height: '100%',\n                  textAlign: 'center',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  fontSize: '1.5rem',\n                  fontWeight: 300,\n                  color: '#8F9BA8',\n                  letterSpacing: '0.1em'\n                }}\n                >\n                  SM\n                </div>\n                )}\n            <ValidationWarning slide={this.props.slide} />\n          </div>\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== null && this.state.selectedSeriesInstanceUID !== undefined) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { AnnotationCategoryAndType } from '../components/AnnotationCategoryList'\n\nexport const adaptRoiToAnnotation = (roi: dmv.roi.ROI): AnnotationCategoryAndType => {\n  const { uid, evaluations } = roi\n\n  const result = {\n    category: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    },\n    type: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    }\n  }\n\n  evaluations.forEach((\n    item: (\n      dcmjs.sr.valueTypes.TextContentItem |\n      dcmjs.sr.valueTypes.CodeContentItem\n    )\n  ) => {\n    const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n    if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n      const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n      const value = codeContentItem.ConceptCodeSequence[0]\n      // For consistency with Segment and Annotation Group\n      if (nameValue === '276214006') {\n        result.category = { ...value }\n      } else if (nameValue === '121071') {\n        result.type = { ...value }\n      }\n    }\n  })\n\n  return {\n    ...result,\n    uid\n  }\n}\n","import React from 'react'\nimport { Modal, Space } from 'antd'\n\ninterface AnnotationModalProps {\n  isVisible: boolean\n  onOk: () => void\n  onCancel: () => void\n  isOkDisabled: boolean\n  children: React.ReactNode\n}\n\n/**\n * Modal component for configuring annotations\n */\nconst AnnotationModal: React.FC<AnnotationModalProps> = ({\n  isVisible,\n  onOk,\n  onCancel,\n  isOkDisabled,\n  children\n}) => {\n  return (\n    <Modal\n      open={isVisible}\n      title='Configure annotations'\n      onOk={onOk}\n      okButtonProps={{ disabled: isOkDisabled }}\n      onCancel={onCancel}\n      okText='Select'\n    >\n      <Space align='start' direction='vertical'>\n        {children}\n      </Space>\n    </Modal>\n  )\n}\n\nexport default AnnotationModal\n","import React from 'react'\nimport { Modal, Space } from 'antd'\n\ninterface SelectedRoiModalProps {\n  isVisible: boolean\n  onCancel: () => void\n  children: React.ReactNode\n}\n\n/**\n * Modal component for displaying selected ROI information\n */\nconst SelectedRoiModal: React.FC<SelectedRoiModalProps> = ({\n  isVisible,\n  onCancel,\n  children\n}) => {\n  return (\n    <Modal\n      open={isVisible}\n      title='Selected ROI'\n      onCancel={onCancel}\n      maskClosable\n      footer={null}\n    >\n      <Space align='start' direction='vertical'>\n        {children}\n      </Space>\n    </Modal>\n  )\n}\n\nexport default SelectedRoiModal\n","import React from 'react'\nimport { Modal, Space, InputNumber } from 'antd'\nimport { CheckOutlined, StopOutlined } from '@ant-design/icons'\n\ninterface GoToModalProps {\n  isVisible: boolean\n  onOk: () => void\n  onCancel: () => void\n  validXCoordinateRange: number[]\n  validYCoordinateRange: number[]\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  isSelectedMagnificationValid: boolean\n  onXCoordinateSelection: (value: number | string | null) => void\n  onYCoordinateSelection: (value: number | string | null) => void\n  onMagnificationSelection: (value: number | string | null) => void\n}\n\n/**\n * Modal component for navigating to specific slide positions\n */\nconst GoToModal: React.FC<GoToModalProps> = ({\n  isVisible,\n  onOk,\n  onCancel,\n  validXCoordinateRange,\n  validYCoordinateRange,\n  isSelectedXCoordinateValid,\n  isSelectedYCoordinateValid,\n  isSelectedMagnificationValid,\n  onXCoordinateSelection,\n  onYCoordinateSelection,\n  onMagnificationSelection\n}) => {\n  function handleXCoordinateEnter (event: React.KeyboardEvent<HTMLInputElement>): void {\n    const target = event.target as HTMLInputElement\n    onXCoordinateSelection(target.value !== '' ? Number(target.value) : null)\n  }\n\n  function handleYCoordinateEnter (event: React.KeyboardEvent<HTMLInputElement>): void {\n    const target = event.target as HTMLInputElement\n    onYCoordinateSelection(target.value !== '' ? Number(target.value) : null)\n  }\n\n  function handleMagnificationEnter (event: React.KeyboardEvent<HTMLInputElement>): void {\n    const target = event.target as HTMLInputElement\n    onMagnificationSelection(target.value !== '' ? Number(target.value) : null)\n  }\n\n  return (\n    <Modal\n      open={isVisible}\n      title='Go to slide position'\n      onOk={onOk}\n      onCancel={onCancel}\n      okText='Select'\n    >\n      <Space align='start' direction='vertical'>\n        <InputNumber\n          placeholder={\n            '[' +\n            `${validXCoordinateRange[0]}` +\n            ', ' +\n            `${validXCoordinateRange[1]}` +\n            ']'\n          }\n          prefix='X Coordinate [mm]'\n          onChange={onXCoordinateSelection}\n          onPressEnter={handleXCoordinateEnter}\n          controls={false}\n          addonAfter={\n            isSelectedXCoordinateValid\n              ? (\n                <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n              : (\n                <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n          }\n        />\n        <InputNumber\n          placeholder={\n            '[' +\n            `${validYCoordinateRange[0]}` +\n            ', ' +\n            `${validYCoordinateRange[1]}` +\n            ']'\n          }\n          prefix='Y Coordinate [mm]'\n          onChange={onYCoordinateSelection}\n          onPressEnter={handleYCoordinateEnter}\n          controls={false}\n          addonAfter={\n            isSelectedYCoordinateValid\n              ? (\n                <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n              : (\n                <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n          }\n        />\n        <InputNumber\n          placeholder='[0 - 40]'\n          prefix='Magnification'\n          onChange={onMagnificationSelection}\n          onPressEnter={handleMagnificationEnter}\n          controls={false}\n          addonAfter={\n            isSelectedMagnificationValid\n              ? (\n                <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n              : (\n                <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n          }\n        />\n      </Space>\n    </Modal>\n  )\n}\n\nexport default GoToModal\n","import React from 'react'\nimport { Modal } from 'antd'\n\ninterface ReportModalProps {\n  isVisible: boolean\n  onOk: () => void\n  onCancel: () => void\n  children: React.ReactNode\n}\n\n/**\n * Modal component for verifying and saving reports\n */\nconst ReportModal: React.FC<ReportModalProps> = ({\n  isVisible,\n  onOk,\n  onCancel,\n  children\n}) => {\n  return (\n    <Modal\n      open={isVisible}\n      title='Verify and save report'\n      onOk={onOk}\n      onCancel={onCancel}\n      okText='Save'\n    >\n      {children}\n    </Modal>\n  )\n}\n\nexport default ReportModal\n","import React from 'react'\nimport AnnotationModal from './AnnotationModal'\nimport SelectedRoiModal from './SelectedRoiModal'\nimport GoToModal from './GoToModal'\nimport ReportModal from './ReportModal'\n\ninterface SlideViewerModalsProps {\n  // Annotation Modal\n  isAnnotationModalVisible: boolean\n  onAnnotationConfigurationCompletion: () => void\n  onAnnotationConfigurationCancellation: () => void\n  isAnnotationOkDisabled: boolean\n  annotationConfigurations: React.ReactNode\n\n  // Selected ROI Modal\n  isSelectedRoiModalVisible: boolean\n  onRoiSelectionCancellation: () => void\n  selectedRoiInformation: React.ReactNode\n\n  // Go To Modal\n  isGoToModalVisible: boolean\n  onSlidePositionSelection: () => void\n  onSlidePositionSelectionCancellation: () => void\n  validXCoordinateRange: number[]\n  validYCoordinateRange: number[]\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  isSelectedMagnificationValid: boolean\n  onXCoordinateSelection: (value: number | string | null) => void\n  onYCoordinateSelection: (value: number | string | null) => void\n  onMagnificationSelection: (value: number | string | null) => void\n\n  // Report Modal\n  isReportModalVisible: boolean\n  onReportVerification: () => void\n  onReportCancellation: () => void\n  report: React.ReactNode\n}\n\n/**\n * Component that renders all modals for the SlideViewer\n */\nconst SlideViewerModals: React.FC<SlideViewerModalsProps> = ({\n  // Annotation Modal\n  isAnnotationModalVisible,\n  onAnnotationConfigurationCompletion,\n  onAnnotationConfigurationCancellation,\n  isAnnotationOkDisabled,\n  annotationConfigurations,\n\n  // Selected ROI Modal\n  isSelectedRoiModalVisible,\n  onRoiSelectionCancellation,\n  selectedRoiInformation,\n\n  // Go To Modal\n  isGoToModalVisible,\n  onSlidePositionSelection,\n  onSlidePositionSelectionCancellation,\n  validXCoordinateRange,\n  validYCoordinateRange,\n  isSelectedXCoordinateValid,\n  isSelectedYCoordinateValid,\n  isSelectedMagnificationValid,\n  onXCoordinateSelection,\n  onYCoordinateSelection,\n  onMagnificationSelection,\n\n  // Report Modal\n  isReportModalVisible,\n  onReportVerification,\n  onReportCancellation,\n  report\n}) => {\n  return (\n    <>\n      <AnnotationModal\n        isVisible={isAnnotationModalVisible}\n        onOk={onAnnotationConfigurationCompletion}\n        onCancel={onAnnotationConfigurationCancellation}\n        isOkDisabled={isAnnotationOkDisabled}\n      >\n        {annotationConfigurations}\n      </AnnotationModal>\n\n      <SelectedRoiModal\n        isVisible={isSelectedRoiModalVisible}\n        onCancel={onRoiSelectionCancellation}\n      >\n        {selectedRoiInformation}\n      </SelectedRoiModal>\n\n      <GoToModal\n        isVisible={isGoToModalVisible}\n        onOk={onSlidePositionSelection}\n        onCancel={onSlidePositionSelectionCancellation}\n        validXCoordinateRange={validXCoordinateRange}\n        validYCoordinateRange={validYCoordinateRange}\n        isSelectedXCoordinateValid={isSelectedXCoordinateValid}\n        isSelectedYCoordinateValid={isSelectedYCoordinateValid}\n        isSelectedMagnificationValid={isSelectedMagnificationValid}\n        onXCoordinateSelection={onXCoordinateSelection}\n        onYCoordinateSelection={onYCoordinateSelection}\n        onMagnificationSelection={onMagnificationSelection}\n      />\n\n      <ReportModal\n        isVisible={isReportModalVisible}\n        onOk={onReportVerification}\n        onCancel={onReportCancellation}\n      >\n        {report}\n      </ReportModal>\n    </>\n  )\n}\n\nexport default SlideViewerModals\n","import React from 'react'\nimport { Checkbox, Col, Divider, InputNumber, Row, Slider } from 'antd'\n\ninterface ColorSettingsMenuProps {\n  annotationGroupsUIDs: string[]\n  defaultStyle: {\n    opacity: number\n    color: number[]\n    contourOnly: boolean\n  }\n  onStyleChange: Function\n}\n\ninterface ColorSettingsMenuState {\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    contourOnly: boolean\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass ColorSettingsMenu extends React.Component<\nColorSettingsMenuProps,\nColorSettingsMenuState\n> {\n  constructor (props: ColorSettingsMenuProps) {\n    super(props)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        contourOnly: this.props.defaultStyle.contourOnly\n      }\n    }\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: this.state.currentStyle.color,\n            opacity: value,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n      this.updateCurrentStyle({ opacity: value })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleShowOutlineOnly (value: boolean): void {\n    this.updateCurrentStyle({ contourOnly: value })\n\n    this.props.annotationGroupsUIDs.forEach((uid) => {\n      this.props.onStyleChange({\n        uid,\n        styleOptions: {\n          color: this.state.currentStyle.color,\n          opacity: this.state.currentStyle.opacity,\n          contourOnly: value\n        }\n      })\n    })\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  updateCurrentStyle ({\n    color,\n    opacity,\n    contourOnly\n  }: {\n    color?: number[]\n    opacity?: number\n    contourOnly?: boolean\n  }): void {\n    this.setState((state) => ({\n      currentStyle: {\n        opacity: opacity ?? state.currentStyle.opacity,\n        color: color ?? state.currentStyle.color,\n        contourOnly: contourOnly ?? state.currentStyle.contourOnly\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    return (\n      <div>\n        {colorSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Checkbox\n            value={this.state.currentStyle.contourOnly}\n            onChange={(event) =>\n              this.handleShowOutlineOnly(event.target.checked)}\n          >\n            Show outline only\n          </Checkbox>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default ColorSettingsMenu\n","import React from 'react'\nimport { Menu, Space, Checkbox, Tooltip, Popover, Button } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { Category, Type } from './AnnotationCategoryList'\nimport ColorSettingsMenu from './ColorSettingsMenu'\n\nconst AnnotationCategoryItem = ({\n  category,\n  onChange,\n  checkedAnnotationUids,\n  onStyleChange,\n  defaultAnnotationStyles,\n  ...props\n}: {\n  category: Category\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const { types } = category\n\n  const onCheckCategoryChange = (e: any): void => {\n    const isVisible = e.target.checked\n    types.forEach((type: Type) => {\n      handleChangeCheckedType({ type, isVisible })\n    })\n  }\n\n  const checkAll = types.every((type: Type) =>\n    type.uids.every((uid: string) => checkedAnnotationUids.has(uid))\n  )\n  const indeterminate =\n    !checkAll &&\n    types.some((type: Type) =>\n      type.uids.some((uid: string) => checkedAnnotationUids.has(uid))\n    )\n\n  const handleChangeCheckedType = ({\n    type,\n    isVisible\n  }: {\n    type: Type\n    isVisible: boolean\n  }): void => {\n    type.uids.forEach((uid: string) => {\n      onChange({ roiUID: uid, isVisible })\n    })\n  }\n\n  return (\n    <Menu.Item\n      style={{ height: '100%', paddingLeft: '3px' }}\n      {...props}\n    >\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px', color: 'black' }}>\n          <Space direction='vertical' align='end'>\n            <Checkbox\n              indeterminate={indeterminate}\n              checked={checkAll}\n              onChange={onCheckCategoryChange}\n            >\n              <Tooltip\n                title={`${category.CodeValue}:${category.CodingSchemeDesignator}`}\n                mouseEnterDelay={1}\n              >\n                {category.CodeMeaning}\n              </Tooltip>\n              <Popover\n                placement='topLeft'\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n                content={() => (\n                  <ColorSettingsMenu\n                    annotationGroupsUIDs={types.reduce(\n                      (acc: string[], type) => {\n                        return [...acc, ...type.uids]\n                      },\n                      []\n                    )}\n                    onStyleChange={onStyleChange}\n                    defaultStyle={\n                      defaultAnnotationStyles[types[0].uids[0]]\n                    }\n                  />\n                )}\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  style={{ marginLeft: '10px' }}\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Checkbox>\n          </Space>\n          {types.map((type: Type) => {\n            const { CodeMeaning, CodingSchemeDesignator, CodeValue, uids } =\n              type\n            const shortenedCodeMeaning = CodeMeaning.slice(0, 22)\n            const displayCodeMeaning = shortenedCodeMeaning === CodeMeaning ? CodeMeaning : `${shortenedCodeMeaning}...`\n            const isChecked = uids.every((uid: string) =>\n              checkedAnnotationUids.has(uid)\n            )\n            const indeterminateType =\n              !isChecked &&\n              uids.some((uid: string) => checkedAnnotationUids.has(uid))\n            return (\n              <div\n                key={`${type.CodingSchemeDesignator}:${type.CodeMeaning}`}\n                style={{\n                  paddingLeft: '25px',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'row'\n                }}\n              >\n                <Checkbox\n                  indeterminate={indeterminateType}\n                  checked={isChecked}\n                  onChange={(e: any) =>\n                    handleChangeCheckedType({\n                      type,\n                      isVisible: e.target.checked\n                    })}\n                />\n                <div style={{ paddingLeft: '5px' }}>\n                  <Tooltip\n                    title={`${CodeValue}:${CodingSchemeDesignator}`}\n                    mouseEnterDelay={1}\n                  >\n                    {displayCodeMeaning}\n                  </Tooltip>\n                  <Popover\n                    placement='topLeft'\n                    overlayStyle={{ width: '350px' }}\n                    title='Display Settings'\n                    content={() => (\n                      <ColorSettingsMenu\n                        annotationGroupsUIDs={type.uids}\n                        onStyleChange={onStyleChange}\n                        defaultStyle={defaultAnnotationStyles[type.uids[0]]}\n                      />\n                    )}\n                  >\n                    <Button\n                      type='primary'\n                      shape='circle'\n                      style={{ marginLeft: '10px' }}\n                      icon={<SettingOutlined />}\n                    />\n                  </Popover>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </Space>\n    </Menu.Item>\n  )\n}\n\nexport default AnnotationCategoryItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport AnnotationCategoryItem from './AnnotationCategoryItem'\n\nexport interface AnnotationCategoryAndType {\n  uid: string\n  type: Omit<Type, 'uids'>\n  category: Omit<Category, 'types'>\n}\nexport interface Type {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  uids: string[]\n}\nexport interface Category {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  types: Type[]\n}\n\nconst getCategories = (annotations: any): Record<string, Category> => {\n  const categories = annotations?.reduce(\n    (\n      categoriesAcc: Record<string, Category & { types: Record<string, Type> }>,\n      annotation: AnnotationCategoryAndType\n    ) => {\n      const { category, type, uid } = annotation\n      const categoryKey = category.CodeMeaning\n      const typeKey = type.CodeMeaning\n\n      const oldCategory = categoriesAcc[categoryKey] ?? {\n        ...category,\n        types: {}\n      }\n      const oldType = oldCategory.types[typeKey] ?? {\n        ...type,\n        uids: []\n      }\n\n      return {\n        ...categoriesAcc,\n        [categoryKey]: {\n          ...oldCategory,\n          types: {\n            ...oldCategory.types,\n            [typeKey]: { ...oldType, uids: [...oldType.uids, uid] }\n          }\n        }\n      }\n    },\n    {}\n  )\n\n  // Normalizing types so that it's an array instead of an object:\n  Object.keys(categories).forEach((categoryKey: string) => {\n    const category = categories[categoryKey]\n    const { types } = category\n    const typesArr = Object.keys(types).map(\n      (typeKey: string) => types[typeKey]\n    )\n    categories[categoryKey].types = typesArr\n  })\n\n  return categories\n}\n\nconst AnnotationCategoryList = ({\n  annotations,\n  onChange,\n  onStyleChange,\n  defaultAnnotationStyles,\n  checkedAnnotationUids\n}: {\n  annotations: AnnotationCategoryAndType[]\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const categories: Record<string, Category> = getCategories(annotations)\n\n  if (Object.keys(categories).length === 0) {\n    return <></>\n  }\n\n  const items = Object.keys(categories).map((categoryKey: string) => {\n    const category = categories[categoryKey]\n    return (\n      <AnnotationCategoryItem\n        key={category.CodeMeaning !== '' ? category.CodeMeaning : `category-${categoryKey}`}\n        category={category}\n        onChange={onChange}\n        onStyleChange={onStyleChange}\n        defaultAnnotationStyles={defaultAnnotationStyles}\n        checkedAnnotationUids={checkedAnnotationUids}\n      />\n    )\n  })\n\n  return <Menu selectable={false}>{items}</Menu>\n}\nexport default AnnotationCategoryList\n","import React, { useCallback } from 'react'\nimport { Layout, Menu } from 'antd'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport AnnotationCategoryList from '../AnnotationCategoryList'\nimport { AnnotationCategoryAndType } from '../../types/annotations'\nimport { StyleOptions } from './types'\n\ninterface SlideViewerSidebarProps {\n  labelViewportRef: React.RefObject<HTMLDivElement>\n  labelViewer?: dmv.viewer.LabelImageViewer\n  openSubMenuItems: string[]\n  specimenMenu: React.ReactNode\n  iccProfilesMenu: React.ReactNode\n  equipmentMenu: React.ReactNode\n  opticalPathMenu: React.ReactNode\n  presentationStateMenu: React.ReactNode\n  annotationMenuItems: React.ReactNode\n  annotationGroupMenu: React.ReactNode\n  segmentationMenu: React.ReactNode\n  parametricMapMenu: React.ReactNode\n  annotations: AnnotationCategoryAndType[]\n  visibleRoiUIDs: Set<string>\n  onAnnotationVisibilityChange: ({ roiUID, isVisible }: { roiUID: string, isVisible: boolean }) => void\n  onRoiStyleChange: ({ uid, styleOptions }: { uid: string, styleOptions: StyleOptions }) => void\n  defaultAnnotationStyles: { [annotationUID: string]: StyleOptions }\n}\n\n/**\n * Sidebar component for the SlideViewer containing all menu items\n */\nconst SlideViewerSidebar: React.FC<SlideViewerSidebarProps> = ({\n  labelViewportRef,\n  labelViewer,\n  openSubMenuItems,\n  specimenMenu,\n  iccProfilesMenu,\n  equipmentMenu,\n  opticalPathMenu,\n  presentationStateMenu,\n  annotationMenuItems,\n  annotationGroupMenu,\n  segmentationMenu,\n  parametricMapMenu,\n  annotations,\n  visibleRoiUIDs,\n  onAnnotationVisibilityChange,\n  onRoiStyleChange,\n  defaultAnnotationStyles\n}) => {\n  const handleMenuOpenChange = useCallback((): void => {\n    // Give menu item time to render before updating viewer size\n    const resizeViewer = (): void => {\n      if (labelViewer !== null && labelViewer !== undefined) {\n        labelViewer.resize()\n      }\n    }\n    setTimeout(resizeViewer, 100)\n  }, [labelViewer])\n\n  return (\n    <Layout.Sider\n      width={300}\n      reverseArrow\n      style={{\n        borderLeft: 'solid',\n        borderLeftWidth: 0.25,\n        overflow: 'hidden',\n        background: 'none'\n      }}\n    >\n      <Menu\n        mode='inline'\n        defaultOpenKeys={openSubMenuItems}\n        style={{ height: '100%' }}\n        inlineIndent={14}\n        forceSubMenuRender\n        onOpenChange={handleMenuOpenChange}\n      >\n        {labelViewportRef.current !== null && (\n          <Menu.SubMenu key='label' title='Slide label'>\n            <Menu.Item style={{ height: '100%' }} key='image'>\n              <div\n                style={{ height: '220px' }}\n                ref={labelViewportRef}\n              />\n            </Menu.Item>\n          </Menu.SubMenu>\n        )}\n        {specimenMenu}\n        {iccProfilesMenu}\n        {equipmentMenu}\n        {opticalPathMenu}\n        {presentationStateMenu}\n        <Menu.SubMenu key='annotations' title='Annotations'>\n          {annotationMenuItems}\n        </Menu.SubMenu>\n        {annotationGroupMenu}\n        {annotations.length === 0\n          ? null\n          : (\n            <Menu.SubMenu\n              key='annotation-categories'\n              title='Annotation Categories'\n            >\n              <AnnotationCategoryList\n                annotations={annotations}\n                onChange={onAnnotationVisibilityChange}\n                checkedAnnotationUids={visibleRoiUIDs}\n                onStyleChange={onRoiStyleChange}\n                defaultAnnotationStyles={defaultAnnotationStyles}\n              />\n            </Menu.SubMenu>\n            )}\n        {segmentationMenu}\n        {parametricMapMenu}\n      </Menu>\n    </Layout.Sider>\n  )\n}\n\nexport default SlideViewerSidebar\n","import React from 'react'\nimport { Layout } from 'antd'\n\ninterface SlideViewerContentProps {\n  toolbar: React.ReactNode\n  toolbarHeight: string\n  cursor: string\n  volumeViewportRef: React.RefObject<HTMLDivElement>\n  children: React.ReactNode\n}\n\n/**\n * Main content area component for the SlideViewer\n */\nconst SlideViewerContent: React.FC<SlideViewerContentProps> = ({\n  toolbar,\n  toolbarHeight,\n  cursor,\n  volumeViewportRef,\n  children\n}) => {\n  return (\n    <Layout.Content style={{ height: '100%' }}>\n      {toolbar}\n\n      <div\n        style={{\n          height: `calc(100% - ${toolbarHeight})`,\n          overflow: 'hidden',\n          cursor\n        }}\n        ref={volumeViewportRef}\n      />\n\n      {children}\n    </Layout.Content>\n  )\n}\n\nexport default SlideViewerContent\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { findContentItemsByName } from '../../../utils/sr'\n\n/**\n * Builds a key for a concept based on its coding scheme and value\n */\nexport const buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\n/**\n * Gets the ROI key from a ROI object\n */\nexport const getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length > 0) {\n    const finding = matches[0].ConceptNameCodeSequence[0]\n    return buildKey(finding)\n  }\n  return undefined\n}\n\n/**\n * Compares two ROIs for equality based on their spatial coordinates\n */\nexport const areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\n/**\n * Formats ROI style options\n */\nexport const formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: style.stroke?.color ?? [255, 234, 0],\n    width: style.stroke?.width ?? 2\n  }\n  const fill = {\n    color: style.fill?.color ?? [255, 234, 0, 0.2]\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius ?? Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { Slide } from '../../../data/slides'\nimport { StorageClasses } from '../../../data/uids'\nimport { CustomError, errorTypes } from '../../../utils/CustomError'\nimport { findContentItemsByName } from '../../../utils/sr'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../../../services/NotificationMiddleware'\n\n/**\n * Constructs volume and label viewers for the slide\n */\nexport const constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      preload,\n      errorInterceptor: (error: CustomError) => {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DMV, error\n        )\n      }\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical',\n        errorInterceptor: (error: CustomError) => {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.DMV,\n            error\n          )\n        }\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'Failed to instantiate viewer'\n      )\n    )\n    throw error\n  }\n}\n\n/**\n * Checks if a report implements TID1500\n */\nexport const implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Checks if a report describes a specimen subject\n */\nexport const describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  return retrievedConcept.equals(expectedConcept)\n}\n\n/**\n * Checks if a report contains appropriate graphic ROI annotations.\n */\nexport const containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n","/**\n * Default ROI stroke color\n */\nexport const DEFAULT_ROI_STROKE_COLOR = [255, 234, 0] // [0, 126, 163]\n\n/**\n * Default ROI fill color\n */\nexport const DEFAULT_ROI_FILL_COLOR = [255, 234, 0, 0.2] // [0, 126, 163, 0.2]\n\n/**\n * Default ROI stroke width\n */\nexport const DEFAULT_ROI_STROKE_WIDTH = 2\n\n/**\n * Default ROI radius\n */\nexport const DEFAULT_ROI_RADIUS = 5\n\n/**\n * Default annotation opacity\n */\nexport const DEFAULT_ANNOTATION_OPACITY = 0.4\n\n/**\n * Default annotation stroke color\n */\nexport const DEFAULT_ANNOTATION_STROKE_COLOR = [0, 0, 0]\n\n/**\n * Default annotation color palette\n */\nexport const DEFAULT_ANNOTATION_COLOR_PALETTE = [\n  [255, 0, 0],\n  [0, 255, 0],\n  [0, 0, 255],\n  [255, 255, 0],\n  [0, 255, 255],\n  [0, 0, 0]\n]\n\n/**\n * Selection stroke color\n */\nexport const SELECTION_STROKE_COLOR = [0, 153, 255]\n\n/**\n * Selection fill color\n */\nexport const SELECTION_FILL_COLOR = [255, 255, 255]\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: (uid: string) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection(object.key)\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React, { useCallback } from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\nimport ValidationWarning from './ValidationWarning'\n\n// Helper function components\nfunction AnnotationGroupControls ({\n  isVisible,\n  onVisibilityChange,\n  settings\n}: {\n  isVisible: boolean\n  onVisibilityChange: (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => void\n  settings: React.ReactNode\n}): React.ReactElement {\n  return (\n    <Space direction='vertical' align='end'>\n      <Switch\n        size='small'\n        onChange={onVisibilityChange}\n        checked={isVisible}\n        checkedChildren={<FaEye />}\n        unCheckedChildren={<FaEyeSlash />}\n      />\n      <Popover\n        placement='left'\n        content={settings}\n        overlayStyle={{ width: '350px' }}\n        title='Display Settings'\n      >\n        <Button type='primary' shape='circle' icon={<SettingOutlined />} />\n      </Popover>\n    </Space>\n  )\n}\n\nfunction AnnotationGroupBadgeDescription ({\n  annotationGroup,\n  onClick,\n  isBadgeVisible,\n  color,\n  label,\n  attributes\n}: {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  onClick: () => void\n  isBadgeVisible: boolean\n  color: string\n  label: string\n  attributes: Array<{ name: string, value: string }>\n}): React.ReactElement {\n  const handleKeyDown = useCallback((event: React.KeyboardEvent): void => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault()\n      onClick()\n    }\n  }, [onClick])\n\n  return (\n    <div\n      onClick={onClick}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      role='button'\n      aria-label={`Annotation group ${label}`}\n    >\n      <Badge\n        offset={[-20, 20]}\n        count={' '}\n        style={{\n          borderStyle: 'solid',\n          borderWidth: '1px',\n          borderColor: 'gray',\n          visibility: isBadgeVisible ? 'visible' : 'hidden',\n          backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n        }}\n      >\n        <ValidationWarning\n          annotationGroup={annotationGroup}\n          style={{ padding: '0.3rem' }}\n        />\n        <Description\n          header={label}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      </Badge>\n    </div>\n  )\n}\n\n// Interfaces\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onAnnotationGroupClick: (annotationGroupUID: string) => void\n  onVisibilityChange: ({\n    annotationGroupUID,\n    isVisible\n  }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({\n    uid,\n    styleOptions\n  }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n// Class\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<\nAnnotationGroupItemProps,\nAnnotationGroupItemState\n> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleMeasurementSelection =\n      this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange = (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value !== null && value !== undefined) {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color,\n          limitValues: this.state.currentStyle.limitValues\n        }\n      })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value !== null && value !== undefined && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value !== null && value !== undefined && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value !== null && value !== undefined && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color !== null && this.state.currentStyle.color !== undefined) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange (value: number | null): void {\n    if (value !== null && value !== undefined && this.state.currentStyle.limitValues !== undefined) {\n      this.setState((state) => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [value, this.state.currentStyle.limitValues[1]]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (value: number | null): void {\n    if (value !== null && value !== undefined && this.state.currentStyle.limitValues !== undefined) {\n      this.setState((state) => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [this.state.currentStyle.limitValues[0], value]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (values: number[]): void {\n    this.setState((state) => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      uid: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleAnnotationGroupClick = (): void => {\n    this.props.onAnnotationGroupClick(this.props.annotationGroup.uid)\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value !== null && value !== undefined && option?.children !== null && option?.children !== undefined) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState((state) => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState((state) => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      (item) => item.AnnotationGroupUID === this.props.annotationGroup.uid\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      },\n      {\n        name: 'Annotation coordinate type',\n        value: this.props.metadata.AnnotationCoordinateType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const createMeasurementOption = (measurementItem: { ConceptNameCodeSequence: Array<{ CodingSchemeDesignator: string, CodeValue: string, CodeMeaning: string }> }): React.ReactElement => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      const key = `${name.CodingSchemeDesignator}-${name.CodeValue}`\n      return (\n        <Select.Option\n          key={key}\n          value={key}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    }\n    const measurementOptions = measurementsSequence.map(createMeasurementOption)\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        {null}\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color !== null && this.state.currentStyle.color !== undefined) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues !== null && this.state.currentStyle.limitValues !== undefined) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>Values of interest</Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>Exploration</Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>Measurement</Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible =\n      this.state.isVisible && this.state.currentStyle.measurement === null\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <AnnotationGroupControls\n              isVisible={this.props.isVisible}\n              onVisibilityChange={this.handleVisibilityChange}\n              settings={settings}\n            />\n          </div>\n          <AnnotationGroupBadgeDescription\n            onClick={this.handleAnnotationGroupClick}\n            annotationGroup={this.props.annotationGroup}\n            isBadgeVisible={isBadgeVisible}\n            color={color}\n            label={this.props.annotationGroup.label}\n            attributes={attributes}\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu, Switch } from 'antd'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupClick: (annotationGroupUID: string) => void\n  onAnnotationGroupVisibilityChange: ({\n    annotationGroupUID,\n    isVisible\n  }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({\n    uid,\n    styleOptions\n  }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<\nAnnotationGroupListProps,\nunknown\n> {\n  handleVisibilityChange = (checked: boolean): void => {\n    if (checked) {\n      this.props.annotationGroups.forEach((annotationGroup) => {\n        this.props.onAnnotationGroupVisibilityChange({\n          annotationGroupUID: annotationGroup.uid,\n          isVisible: checked\n        })\n      })\n      return\n    }\n\n    this.props.visibleAnnotationGroupUIDs.forEach((annotationGroupUID) => {\n      this.props.onAnnotationGroupVisibilityChange({\n        annotationGroupUID,\n        isVisible: checked\n      })\n    })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          onAnnotationGroupClick={this.props.onAnnotationGroupClick}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <>\n        <div\n          style={{\n            paddingLeft: '14px',\n            paddingTop: '7px',\n            paddingBottom: '7px'\n          }}\n        >\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleAnnotationGroupUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu selectable={false}>{items}</Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.ENCODINGANDDECODING,\n        'Content item \"Imaging Measurements\" not found.' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\".'\n      )\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Tracking Unique Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Finding\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Image Region\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: any\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Content item \"Image Region\" has unknown graphic type ' +\n            `\"${regionItem.GraphicType}\". ` +\n            'Content of Comprehensive 3D SR document is not structured ' +\n            'based on TID 1500 \"Measurement Report\" -> ' +\n            'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n          )\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen UID\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Container Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","const HoveredRoiTooltip = ({\n  xPosition,\n  yPosition,\n  rois\n}: {\n  xPosition: number\n  yPosition: number\n  rois: Array<{ index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n}): JSX.Element => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: `${yPosition}px`,\n        left: `${xPosition}px`,\n        backgroundColor: 'rgba(230, 230, 230, 0.65)',\n        minWidth: '150px',\n        minHeight: '60px',\n        padding: '20px',\n        fontWeight: 'bold',\n        pointerEvents: 'none'\n      }}\n    >\n      {rois.map((roi, i) => {\n        const attributes = roi.attributes\n        return (\n          <div key={roi.roiUid}>\n            <span>ROI {roi.index}</span>\n            {attributes.map((attr) => {\n              return (\n                <div key={attr.name + roi.roiUid}>\n                  {attr.name}: <span style={{ fontWeight: 500 }}>{attr.value}</span>\n                </div>\n              )\n            })}\n          </div>\n\n        )\n      })}\n    </div>\n  )\n}\n\nexport default HoveredRoiTooltip\n","import { roi, metadata } from 'dicom-microscopy-viewer'\nimport { sr, data } from 'dcmjs'\n\nimport { CustomError, errorTypes } from './CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { User } from '../auth'\n\ninterface AppInfo {\n  name: string\n  version: string\n  uid: string\n  organization?: string\n}\n\nconst generateReport = ({\n  rois,\n  metadata,\n  user,\n  app,\n  visibleRoiUIDs\n}: {\n  rois: roi.ROI[]\n  metadata: metadata.VLWholeSlideMicroscopyImage[]\n  user: User | undefined\n  app: AppInfo\n  visibleRoiUIDs: Set<string>\n}): { isReportModalVisible: boolean, generatedReport: metadata.Comprehensive3DSR } => {\n  // Metadata should be sorted such that the image with the highest\n  // resolution is the last item in the array.\n  const refImage = metadata[metadata.length - 1]\n  // We assume that there is only one specimen (tissue section) per\n  // ontainer (slide). Only the tissue section is tracked with a unique\n  // identifier, even if the section may be composed of different biological\n  // samples.\n  if ((refImage.SpecimenDescriptionSequence?.length ?? 0) > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'More than one specimen has been described for the slide'\n      )\n    )\n  }\n  const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n  console.debug('create Observation Context')\n  let observer\n\n  if (user !== undefined) {\n    observer = new sr.templates.PersonObserverIdentifyingAttributes({\n      name: user.name ?? 'ANONYMOUS',\n      loginName: user.email ?? ''\n    })\n  } else {\n    console.warn('no user information available')\n    observer = new sr.templates.PersonObserverIdentifyingAttributes({\n      name: 'ANONYMOUS'\n    })\n  }\n\n  const observationContext = new sr.templates.ObservationContext({\n    observerPersonContext: new sr.templates.ObserverContext({\n      observerType: new sr.coding.CodedConcept({\n        value: '121006',\n        schemeDesignator: 'DCM',\n        meaning: 'Person'\n      }),\n      observerIdentifyingAttributes: observer\n    }),\n    observerDeviceContext: new sr.templates.ObserverContext({\n      observerType: new sr.coding.CodedConcept({\n        value: '121007',\n        schemeDesignator: 'DCM',\n        meaning: 'Device'\n      }),\n      observerIdentifyingAttributes: new sr.templates.DeviceObserverIdentifyingAttributes({\n        uid: app.uid,\n        manufacturerName: 'MGH Computational Pathology',\n        modelName: app.name\n      })\n    }),\n    subjectContext: new sr.templates.SubjectContext({\n      subjectClass: new sr.coding.CodedConcept({\n        value: '121027',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen'\n      }),\n      subjectClassSpecificContext: new sr.templates.SubjectContextSpecimen({\n        uid: refSpecimen.SpecimenUID,\n        identifier: refSpecimen.SpecimenIdentifier,\n        containerIdentifier: refImage.ContainerIdentifier\n      })\n    })\n  })\n\n  console.debug('encode Imaging Measurements')\n  const imagingMeasurements: sr.valueTypes.ContainerContentItem[] = []\n  for (let i = 0; i < rois.length; i++) {\n    const roi = rois[i]\n    if (!visibleRoiUIDs.has(roi.uid)) {\n      continue\n    }\n\n    let findingType = roi.evaluations.find((item: sr.valueTypes.ContentItem) => {\n      return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n    })\n\n    if (findingType === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          `No finding type was specified for ROI \"${String(roi.uid)}\"`\n        )\n      )\n    }\n\n    findingType = findingType as sr.valueTypes.CodeContentItem\n\n    const trackingIdentifier = new sr.templates.TrackingIdentifier({\n      uid: roi.properties.trackingUID ?? roi.uid,\n      identifier: `ROI #${i + 1}`\n    })\n\n    const group = new sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n      trackingIdentifier,\n      referencedRegion: new sr.contentItems.ImageRegion3D({\n        graphicType: roi.scoord3d.graphicType,\n        graphicData: roi.scoord3d.graphicData,\n        frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n      }),\n      findingType: new sr.coding.CodedConcept({\n        value: findingType.ConceptCodeSequence[0].CodeValue,\n        schemeDesignator: findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n        meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n      }),\n      qualitativeEvaluations: roi.evaluations.filter((item: sr.valueTypes.ContentItem) => {\n        return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n      }),\n      measurements: roi.measurements\n    })\n\n    const measurements = group as sr.valueTypes.ContainerContentItem[]\n    measurements[0].ContentTemplateSequence = [\n      {\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }\n    ]\n    imagingMeasurements.push(...measurements)\n  }\n\n  console.debug('create Measurement Report document content')\n  const measurementReport = new sr.templates.MeasurementReport({\n    languageOfContentItemAndDescendants: new sr.templates.LanguageOfContentItemAndDescendants(\n      {}\n    ),\n    observationContext,\n    procedureReported: new sr.coding.CodedConcept({\n      value: '112703',\n      schemeDesignator: 'DCM',\n      meaning: 'Whole Slide Imaging'\n    }),\n    imagingMeasurements\n  })\n\n  console.info('create Comprehensive 3D SR document')\n  const dataset = new sr.documents.Comprehensive3DSR({\n    content: measurementReport[0],\n    evidence: [refImage],\n    seriesInstanceUID: data.DicomMetaDictionary.uid(),\n    seriesNumber: 1,\n    seriesDescription: 'Annotation',\n    sopInstanceUID: data.DicomMetaDictionary.uid(),\n    instanceNumber: 1,\n    manufacturer: 'MGH Computational Pathology',\n    previousVersions: undefined // TODO\n  })\n\n  return {\n    isReportModalVisible: true,\n    generatedReport: dataset as metadata.Comprehensive3DSR\n  }\n}\n\nexport default generateReport\n","import { v4 as generateUUID } from 'uuid'\n\n/**\n * Consumer must implement:\n * this.listeners = {}\n * this.EVENTS = { \"EVENT_KEY\": \"EVENT_VALUE\" }\n */\nconst pubSubInterface = {\n  subscribe,\n  _broadcastEvent,\n  _unsubscribe,\n  _isValidEvent\n}\n\nexport default pubSubInterface\n\n/**\n * Subscribe to updates.\n *\n * @param {string} eventName The name of the event\n * @param {Function} callback Events callback\n * @return {Object} Observable object with actions\n */\nfunction subscribe (this: PubSubService, eventName: string, callback: Function): { unsubscribe: () => any } {\n  if (this._isValidEvent(eventName)) {\n    const listenerId = generateUUID()\n    const subscription = { id: listenerId, callback }\n\n    // console.info(`Subscribing to '${eventName}'.`);\n    if (Array.isArray(this.listeners[eventName])) {\n      this.listeners[eventName].push(subscription)\n    } else {\n      this.listeners[eventName] = [subscription]\n    }\n\n    return {\n      unsubscribe: () => this._unsubscribe(eventName, listenerId)\n    }\n  } else {\n    throw new Error(`Event ${eventName} not supported.`)\n  }\n}\n\n/**\n * Unsubscribe to measurement updates.\n *\n * @param {string} eventName The name of the event\n * @param {string} listenerId The listeners id\n * @return void\n */\nfunction _unsubscribe (this: PubSubService, eventName: string, listenerId: string): void {\n  if (this.listeners[eventName] === undefined) {\n    return\n  }\n\n  const listeners = this.listeners[eventName]\n  if (Array.isArray(listeners)) {\n    this.listeners[eventName] = listeners.filter(({ id }) => id !== listenerId)\n  } else {\n    this.listeners[eventName] = []\n  }\n}\n\n/**\n * Check if a given event is valid.\n *\n * @param {string} eventName The name of the event\n * @return {boolean} Event name validation\n */\nfunction _isValidEvent (this: PubSubService, eventName: string): boolean {\n  return Object.values(this.EVENTS).includes(eventName)\n}\n\n/**\n * Broadcasts changes.\n *\n * @param {string} eventName - The event name\n * @param {func} callbackProps - Properties to pass callback\n * @return void\n */\nfunction _broadcastEvent (this: PubSubService, eventName: string, callbackProps: any): void {\n  const hasListeners = Object.keys(this.listeners).length > 0\n  const hasCallbacks = Array.isArray(this.listeners[eventName])\n\n  if (hasListeners && hasCallbacks) {\n    this.listeners[eventName].forEach((listener: { id: string, callback: Function }) => {\n      listener.callback(callbackProps)\n    })\n  }\n}\n\n/** Export a PubSubService class to be used instead of the individual items */\nexport class PubSubService {\n  EVENTS: any\n  subscribe: (\n    eventName: string,\n    callback: Function\n  ) => { unsubscribe: () => any }\n\n  _broadcastEvent: (eventName: string, callbackProps: any) => void\n  _unsubscribe: (eventName: string, listenerId: string) => void\n  _isValidEvent: (eventName: string) => boolean\n  listeners: { [key: string]: Array<{ id: string, callback: Function }> }\n  unsubscriptions: any[]\n  constructor (EVENTS: Record<string, string>) {\n    this.EVENTS = EVENTS\n    this.subscribe = subscribe\n    this._broadcastEvent = _broadcastEvent\n    this._unsubscribe = _unsubscribe\n    this._isValidEvent = _isValidEvent\n    this.listeners = {}\n    this.unsubscriptions = []\n  }\n\n  reset (): void {\n    this.unsubscriptions.forEach((unsub) => unsub())\n    this.unsubscriptions = []\n  }\n\n  /**\n   * Creates an event that records whether or not someone\n   * has consumed it.  Call eventData.consume() to consume the event.\n   * Check eventData.isConsumed to see if it is consumed or not.\n   * @param props - to include in the event\n   */\n  protected createConsumableEvent (props: Record<string, any>): Record<string, any> {\n    return {\n      ...props,\n      isConsumed: false,\n      consume: function Consume () {\n        this.isConsumed = true\n      }\n    }\n  }\n}\n","import { Instance, Series } from '../services/DICOMMetadataStore'\n\nfunction createSeriesMetadata (SeriesInstanceUID: string, defaultInstances?: Instance[]): Series {\n  const instances: Instance[] = []\n  const instancesMap = new Map<string, Instance>()\n\n  return {\n    SeriesInstanceUID,\n    Modality: '',\n    SeriesNumber: 0,\n    SeriesDescription: '',\n    SeriesDate: '',\n    SeriesTime: '',\n    ...defaultInstances?.[0],\n    instances,\n    addInstance: function (newInstance: Instance) {\n      this.addInstances([newInstance])\n    },\n    addInstances: function (newInstances: Instance[]) {\n      for (let i = 0, len = newInstances.length; i < len; i++) {\n        const instance = newInstances[i]\n\n        if (!instancesMap.has(instance.SOPInstanceUID)) {\n          instancesMap.set(instance.SOPInstanceUID, instance)\n          instances.push(instance)\n        }\n      }\n    },\n    getInstance: function (SOPInstanceUID: string) {\n      return instancesMap.get(SOPInstanceUID)\n    }\n  }\n}\n\nexport default createSeriesMetadata\n","import createSeriesMetadata from './createSeriesMetadata'\n\nimport { Study, Series, Instance } from '../services/DICOMMetadataStore'\n\nfunction createStudyMetadata (StudyInstanceUID: string): Study {\n  return {\n    StudyInstanceUID,\n    StudyDescription: '',\n    PatientID: '',\n    PatientName: '',\n    StudyDate: '',\n    AccessionNumber: '',\n    NumInstances: 0,\n    ModalitiesInStudy: [],\n    isLoaded: false,\n    series: [] as Series[],\n    /**\n     * @param {object} instance\n     */\n    addInstanceToSeries: function (instance: Instance) {\n      this.addInstancesToSeries([instance])\n    },\n    /**\n     * @param {object[]} instances\n     * @param {string} instances[].SeriesInstanceUID\n     * @param {string} instances[].StudyDescription\n     */\n    addInstancesToSeries: function (instances: Instance[]) {\n      const { SeriesInstanceUID } = instances[0]\n\n      if (this.StudyDescription !== '' && this.StudyDescription !== undefined) {\n        this.StudyDescription = instances[0].StudyDescription\n      }\n\n      let series = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (series == null) {\n        series = createSeriesMetadata(SeriesInstanceUID, instances)\n        this.series.push(series)\n      }\n\n      series.addInstances(instances)\n    },\n\n    setSeriesMetadata: function (\n      SeriesInstanceUID: string,\n      seriesMetadata: any\n    ) {\n      let existingSeries = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (existingSeries != null) {\n        existingSeries = Object.assign(existingSeries, seriesMetadata)\n      } else {\n        const series = createSeriesMetadata(SeriesInstanceUID)\n        this.series.push(Object.assign(series, seriesMetadata))\n      }\n    }\n  }\n}\n\nexport default createStudyMetadata\n","import dcmjs from 'dcmjs'\n\nimport pubSubServiceInterface from '../utils/pubSubServiceInterface'\nimport createStudyMetadata from '../utils/createStudyMetadata'\n\nexport const EVENTS = {\n  STUDY_ADDED: 'event::dicomMetadataStore:studyAdded',\n  INSTANCES_ADDED: 'event::dicomMetadataStore:instancesAdded',\n  SERIES_ADDED: 'event::dicomMetadataStore:seriesAdded',\n  SERIES_UPDATED: 'event::dicomMetadataStore:seriesUpdated'\n}\n\nexport interface Instance {\n  SOPInstanceUID: string\n  SOPClassUID: string\n  Rows: number\n  Columns: number\n  PatientSex: string\n  Modality: string\n  InstanceNumber: string\n  imageId?: string\n  [key: string]: any // For dynamic metadata properties\n}\n\nexport interface Series {\n  Modality: string\n  SeriesInstanceUID: string\n  SeriesNumber: number\n  SeriesDate: string\n  SeriesTime: string\n  SeriesDescription: string\n  instances: Instance[]\n  addInstance: (newInstance: Instance) => void\n  addInstances: (newInstances: Instance[]) => void\n  getInstance: (SOPInstanceUID: string) => Instance | undefined\n}\n\nexport interface Study {\n  StudyInstanceUID: string\n  StudyDescription: string\n  PatientID: string\n  PatientName: string\n  StudyDate: string\n  AccessionNumber: string\n  NumInstances: number\n  ModalitiesInStudy: any[]\n  NumberOfStudyRelatedSeries?: number\n  isLoaded: boolean\n  series: Series[]\n  addInstanceToSeries: (instance: Instance) => void\n  addInstancesToSeries: (instances: Instance[]) => void\n  setSeriesMetadata: (SeriesInstanceUID: string, metadata: any) => void\n}\n\ninterface Model {\n  studies: Study[]\n}\n\nconst _model: Model = {\n  studies: []\n}\n\nfunction _getStudyInstanceUIDs (): string[] {\n  return _model.studies.map((aStudy) => aStudy.StudyInstanceUID)\n}\n\nfunction _getStudy (StudyInstanceUID: string): Study | undefined {\n  return _model.studies.find(\n    (aStudy) => aStudy.StudyInstanceUID === StudyInstanceUID\n  )\n}\n\nfunction _getSeries (StudyInstanceUID: string, SeriesInstanceUID: string): Series | undefined {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  return study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n}\n\nfunction _getInstance (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  SOPInstanceUID: string\n): Instance | undefined {\n  const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n\n  if (series == null) {\n    return\n  }\n\n  return series.getInstance(SOPInstanceUID)\n}\n\nfunction _getInstanceByImageId (imageId: string): Instance | undefined {\n  for (const study of _model.studies) {\n    for (const series of study.series) {\n      for (const instance of series.instances) {\n        if (instance.imageId === imageId) {\n          return instance\n        }\n      }\n    }\n  }\n}\n\n/**\n * Update the metadata of a specific series\n * @param {*} StudyInstanceUID\n * @param {*} SeriesInstanceUID\n * @param {*} metadata metadata inform of key value pairs\n * @returns\n */\nfunction _updateMetadataForSeries (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  metadata: Record<string, any>\n): void {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  const series = study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n\n  if (series == null) {\n    return\n  }\n\n  const { instances } = series\n  instances.forEach((instance) => {\n    Object.keys(metadata).forEach((key) => {\n      if (typeof metadata[key] === 'object') {\n        instance[key] = { ...instance[key], ...metadata[key] }\n      } else {\n        instance[key] = metadata[key]\n      }\n    })\n  })\n}\n\ninterface BaseImplementationType {\n  EVENTS: typeof EVENTS\n  listeners: Record<string, any>\n  addInstance: (dicomJSONDatasetOrP10ArrayBuffer: ArrayBuffer | Record<string, any>) => void\n  addInstances: (instances: Instance[], madeInClient?: boolean) => void\n  updateSeriesMetadata: (seriesMetadata: Record<string, any>) => void\n  addSeriesMetadata: (seriesSummaryMetadata: Array<Record<string, any>>, madeInClient?: boolean) => void\n  addStudy: (study: Record<string, any>) => void\n  getStudyInstanceUIDs: typeof _getStudyInstanceUIDs\n  getStudy: typeof _getStudy\n  getSeries: typeof _getSeries\n  getInstance: typeof _getInstance\n  getInstanceByImageId: typeof _getInstanceByImageId\n  updateMetadataForSeries: typeof _updateMetadataForSeries\n  _broadcastEvent: (eventName: string, data: any) => void\n}\n\nconst BaseImplementation: BaseImplementationType = {\n  EVENTS,\n  listeners: {},\n  addInstance (dicomJSONDatasetOrP10ArrayBuffer) {\n    let dicomJSONDataset\n\n    // If Arraybuffer, parse to DICOMJSON before naturalizing.\n    if (dicomJSONDatasetOrP10ArrayBuffer instanceof ArrayBuffer) {\n      const dicomData = dcmjs.data.DicomMessage.readFile(\n        dicomJSONDatasetOrP10ArrayBuffer\n      )\n\n      dicomJSONDataset = dicomData.dict\n    } else {\n      dicomJSONDataset = dicomJSONDatasetOrP10ArrayBuffer\n    }\n\n    let naturalizedDataset: Instance\n\n    if (!('SeriesInstanceUID' in dicomJSONDataset)) {\n      naturalizedDataset =\n        dcmjs.data.DicomMetaDictionary.naturalizeDataset(dicomJSONDataset) as Instance\n    } else {\n      naturalizedDataset = dicomJSONDataset as unknown as Instance\n    }\n\n    const { StudyInstanceUID } = naturalizedDataset\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstanceToSeries(naturalizedDataset)\n  },\n  addInstances (instances, madeInClient = false) {\n    const { StudyInstanceUID, SeriesInstanceUID } = instances[0]\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstancesToSeries(instances)\n\n    // Broadcast an event even if we used cached data.\n    // This is because the mode needs to listen to instances that are added to build up its active displaySets.\n    // It will see there are cached displaySets and end early if this Series has already been fired in this\n    // Mode session for some reason.\n    this._broadcastEvent(EVENTS.INSTANCES_ADDED, {\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      madeInClient\n    })\n  },\n  updateSeriesMetadata (seriesMetadata) {\n    const { StudyInstanceUID, SeriesInstanceUID } = seriesMetadata\n    const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n    if (series == null) {\n      return\n    }\n\n    const study = _getStudy(StudyInstanceUID)\n    if (study != null) {\n      study.setSeriesMetadata(SeriesInstanceUID, seriesMetadata)\n    }\n  },\n  addSeriesMetadata (seriesSummaryMetadata, madeInClient = false) {\n    if (\n      seriesSummaryMetadata === undefined ||\n      seriesSummaryMetadata.length === 0 ||\n      seriesSummaryMetadata[0] === undefined\n    ) {\n      return\n    }\n\n    const { StudyInstanceUID } = seriesSummaryMetadata[0]\n    let study = _getStudy(StudyInstanceUID)\n    if (study == null) {\n      study = createStudyMetadata(StudyInstanceUID)\n      // Will typically be undefined with a compliant DICOMweb server, reset later\n      study.StudyDescription = seriesSummaryMetadata[0].StudyDescription\n      seriesSummaryMetadata?.forEach((item) => {\n        if (study !== undefined && !study.ModalitiesInStudy?.includes(item.Modality)) {\n          study.ModalitiesInStudy?.push(item.Modality)\n        }\n      })\n      study.NumberOfStudyRelatedSeries = seriesSummaryMetadata.length\n      _model.studies.push(study)\n    }\n\n    seriesSummaryMetadata.forEach((series) => {\n      const { SeriesInstanceUID } = series\n      study?.setSeriesMetadata(SeriesInstanceUID, series)\n    })\n\n    this._broadcastEvent(EVENTS.SERIES_ADDED, {\n      StudyInstanceUID,\n      seriesSummaryMetadata,\n      madeInClient\n    })\n  },\n  addStudy (study) {\n    const { StudyInstanceUID } = study\n\n    const existingStudy = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (existingStudy == null) {\n      const newStudy = createStudyMetadata(StudyInstanceUID)\n\n      newStudy.PatientID = study.PatientID\n      newStudy.PatientName = study.PatientName\n      newStudy.StudyDate = study.StudyDate\n      newStudy.ModalitiesInStudy = study.ModalitiesInStudy\n      newStudy.StudyDescription = study.StudyDescription\n      newStudy.AccessionNumber = study.AccessionNumber\n      newStudy.NumInstances = study.NumInstances // todo: Correct naming?\n\n      _model.studies.push(newStudy)\n    }\n  },\n  getStudyInstanceUIDs: _getStudyInstanceUIDs,\n  getStudy: _getStudy,\n  getSeries: _getSeries,\n  getInstance: _getInstance,\n  getInstanceByImageId: _getInstanceByImageId,\n  updateMetadataForSeries: _updateMetadataForSeries,\n  _broadcastEvent (eventName: string, data: any): void {\n  }\n}\n\ninterface DicomMetadataStoreType extends BaseImplementationType {\n  subscribe: (event: string, callback: (data: any) => void) => { unsubscribe: () => any }\n  unsubscribe: (event: string, callback: (data: any) => void) => void\n}\n\nconst DicomMetadataStore = Object.assign(\n  {},\n  BaseImplementation,\n  pubSubServiceInterface\n) as unknown as DicomMetadataStoreType\n\nexport { DicomMetadataStore }\nexport default DicomMetadataStore\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number | null\n  ): void {\n    if (value != null) {\n      const identifier = this.props.opticalPath.identifier\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { opacity: value }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          color: state.currentStyle.color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: value,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    try {\n      specimenDescriptions.forEach(description => {\n        const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] =\n          description.SpecimenPreparationSequence ?? []\n        specimenPreparationSteps.forEach(\n          (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n            step.SpecimenPreparationStepContentItemSequence.forEach((\n              item: (\n                dcmjs.sr.valueTypes.CodeContentItem |\n                dcmjs.sr.valueTypes.TextContentItem |\n                dcmjs.sr.valueTypes.UIDRefContentItem |\n                dcmjs.sr.valueTypes.PNameContentItem |\n                dcmjs.sr.valueTypes.DateTimeContentItem\n              ),\n              index: number\n            ) => {\n              const name = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptNameCodeSequence[0].CodeValue,\n                schemeDesignator:\n                    item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n              })\n              if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n                item = item as dcmjs.sr.valueTypes.CodeContentItem\n                const value = new dcmjs.sr.coding.CodedConcept({\n                  value: item.ConceptCodeSequence[0].CodeValue,\n                  schemeDesignator:\n                      item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                  meaning: item.ConceptCodeSequence[0].CodeMeaning\n                })\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: value.CodeMeaning\n                    })\n                  }\n                }\n              } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n                item = item as dcmjs.sr.valueTypes.TextContentItem\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: item.TextValue\n                    })\n                  }\n                }\n              }\n            })\n          }\n        )\n      })\n    } catch (error: any) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DCMJS,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          error.message\n        )\n      )\n    }\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({ currentStyle: { opacity: value } })\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        mappingUID: this.props.mapping.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: value\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\nimport { IconType } from 'react-icons'\n\ninterface ButtonProps {\n  icon: IconType | React.ComponentType<{}>\n  tooltip?: string\n  label?: string\n  onClick?: (options: React.SyntheticEvent) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport { Layout, Space, Checkbox, Descriptions, Divider, Select, Tooltip, message, Menu, Row } from 'antd'\nimport { CheckboxChangeEvent } from 'antd/es/checkbox'\nimport { UndoOutlined } from '@ant-design/icons'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { withRouter } from '../utils/router'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport { findContentItemsByName } from '../utils/sr'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { adaptRoiToAnnotation } from '../services/RoiToAnnotationAdapter'\nimport { AnnotationSettings, AnnotationCategoryAndType } from '../types/annotations'\nimport {\n  SlideViewerProps,\n  SlideViewerState,\n  StyleOptions,\n  EvaluationOptions,\n  Evaluation,\n  Measurement\n} from './SlideViewer/types'\nimport SlideViewerModals from './SlideViewer/SlideViewerModals'\nimport SlideViewerSidebar from './SlideViewer/SlideViewerSidebar'\nimport SlideViewerContent from './SlideViewer/SlideViewerContent'\nimport {\n  buildKey,\n  getRoiKey,\n  areROIsEqual,\n  formatRoiStyle\n} from './SlideViewer/utils/roiUtils'\nimport {\n  constructViewers,\n  implementsTID1500,\n  describesSpecimenSubject,\n  containsROIAnnotations\n} from './SlideViewer/utils/viewerUtils'\nimport {\n  DEFAULT_ROI_STROKE_COLOR,\n  DEFAULT_ROI_FILL_COLOR,\n  DEFAULT_ROI_STROKE_WIDTH,\n  DEFAULT_ROI_RADIUS,\n  DEFAULT_ANNOTATION_OPACITY,\n  DEFAULT_ANNOTATION_STROKE_COLOR,\n  DEFAULT_ANNOTATION_COLOR_PALETTE\n} from './SlideViewer/constants'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Report, { MeasurementReport } from './Report'\nimport HoveredRoiTooltip from './HoveredRoiTooltip'\nimport generateReport from '../utils/generateReport'\nimport { runValidations } from '../contexts/ValidationContext'\nimport DicomMetadataStore from '../services/DICOMMetadataStore'\nimport SpecimenList from './SpecimenList'\nimport Equipment from './Equipment'\nimport OpticalPathList from './OpticalPathList'\nimport SegmentList from './SegmentList'\nimport MappingList from './MappingList'\nimport Btn from './Button'\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private hoveredRois = [] as dmv.roi.ROI[]\n\n  private lastPixel = [0, 0] as [number, number]\n\n  private readonly keysDown = new Set<string>()\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private defaultAnnotationStyles: {\n    [annotationUID: string]: StyleOptions\n  } = {}\n\n  private readonly selectionStrokeColor: number[] = [0, 153, 255]\n  private readonly selectionFillColor: number[] = [255, 255, 255]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionStrokeColor, 1], width: 3 },\n    fill: { color: [...this.selectionFillColor, 0.5] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionStrokeColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style !== null && annotation.style !== undefined) {\n        this.roiStyles[key] = formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    const { volumeViewer, labelViewer } = constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isHoveredRoiTooltipVisible: false,\n      hoveredRoiTooltipX: 0,\n      hoveredRoiTooltipY: 0,\n      hoveredRoiAttributes: [],\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      selectedSeriesInstanceUID: undefined,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set(),\n      isICCProfilesEnabled: true\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current !== null && this.volumeViewportRef.current !== undefined) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer !== null && this.labelViewer !== undefined) {\n        if (this.labelViewportRef.current !== null && this.labelViewportRef.current !== undefined) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances: dwc.api.Instance[] | null): void => {\n      if (matchedInstances === null || matchedInstances === undefined) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance: dwc.api.Instance, index: number) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance: dwc.api.Dataset): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                (this.props.selectedPresentationStateUID === null ||\n                 this.props.selectedPresentationStateUID === undefined)\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Presentation State could not be loaded'\n            )\n          )\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Presentation State could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence !== null && blendingItem.PaletteColorLookupTableSequence !== undefined) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID !== null && cpLUTItem.PaletteColorLookupTableUID !== undefined\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData !== null && cpLUTItem.RedPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData !== null && cpLUTItem.GreenPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData !== null && cpLUTItem.BluePaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData !== null && cpLUTItem.SegmentedRedPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData !== null && cpLUTItem.SegmentedGreenPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData !== null && cpLUTItem.SegmentedBluePaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence !== null && blendingItem.SoftcopyVOILUTSequence !== undefined) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions !== null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key === null || key === undefined) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  loadDerivedDataset = (derivedDataset: dmv.metadata.Dataset): void => {\n    console.debug('Loading derived dataset')\n    const Comprehensive3DSR = '1.2.840.10008.5.1.4.1.1.88.34'\n    const MicroscopyBulkSimpleAnnotation = '1.2.840.10008.5.1.4.1.1.88.24'\n    const Segmentation = '1.2.840.10008.5.1.4.1.1.66.4'\n    const ParametricMap = '1.2.840.10008.5.1.4.1.1.88.22'\n    const OpticalPath = '1.2.840.10008.5.1.4.1.1.88.21'\n    if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Comprehensive3DSR) {\n      const allRois = this.volumeViewer.getAllROIs()\n      allRois.forEach((roi) => {\n        this.handleAnnotationVisibilityChange({ roiUID: roi.uid, isVisible: true })\n      })\n      console.debug('Loading Comprehensive 3D SR')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === MicroscopyBulkSimpleAnnotation) {\n      const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      allAnnotationGroups.forEach((annotationGroup) => {\n        this.handleAnnotationGroupVisibilityChange({ annotationGroupUID: annotationGroup.uid, isVisible: true })\n      })\n      console.debug('Loading Microscopy Bulk Simple Annotation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Segmentation) {\n      const allSegments = this.volumeViewer.getAllSegments()\n      allSegments.forEach((segment) => {\n        this.handleSegmentVisibilityChange({ segmentUID: segment.uid, isVisible: true })\n      })\n      console.debug('Loading Segmentation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === ParametricMap) {\n      const allParameterMappings = this.volumeViewer.getAllParameterMappings()\n      allParameterMappings.forEach((parameterMapping) => {\n        this.handleMappingVisibilityChange({ mappingUID: parameterMapping.uid, isVisible: true })\n      })\n      console.debug('Loading Parametric Map')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === OpticalPath) {\n      const allOpticalPaths = this.volumeViewer.getAllOpticalPaths()\n      allOpticalPaths.forEach((opticalPath) => {\n        this.handleOpticalPathVisibilityChange({ opticalPathIdentifier: opticalPath.identifier, isVisible: true })\n      })\n      console.debug('Loading Optical Path')\n    }\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  async addAnnotations (): Promise<void> {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Comprehensive 3D SR instances')\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.searchForInstances({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SR'\n        }\n      }).then((matchedInstances): void => {\n        if (matchedInstances === null || matchedInstances === undefined) {\n          matchedInstances = []\n        }\n        matchedInstances.forEach(i => {\n          const { dataset } = dmv.metadata.formatMetadata(i)\n          const instance = dataset as dmv.metadata.Instance\n          if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n            console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n            client.retrieveInstance({\n              studyInstanceUID: this.props.studyInstanceUID,\n              seriesInstanceUID: instance.SeriesInstanceUID,\n              sopInstanceUID: instance.SOPInstanceUID\n            }).then((retrievedInstance): void => {\n              const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n              const { dataset } = dmv.metadata.formatMetadata(data.dict)\n              const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n              /*\n              * Perform a couple of checks to ensure the document content of the\n              * report fullfils the requirements of the application.\n              */\n              if (!implementsTID1500(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it is not structured according to template ' +\n                  'TID 1500 \"MeasurementReport\"'\n                )\n                return\n              }\n              if (!describesSpecimenSubject(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not describe a specimen subject'\n                )\n                return\n              }\n              if (!containsROIAnnotations(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not contain any suitable ROI annotations'\n                )\n                return\n              }\n\n              const content = new MeasurementReport(report)\n              content.ROIs.forEach(roi => {\n                console.info(`add ROI \"${roi.uid}\"`)\n                const scoord3d = roi.scoord3d\n                const image = this.props.slide.volumeImages[0]\n                if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                  /*\n                  * ROIs may get assigned new UIDs upon re-rendering of the\n                  * page and we need to ensure that we don't add them twice.\n                  * The same ROI may be stored in multiple SR documents and\n                  * we don't want them to show up twice.\n                  * TODO: We should probably either \"merge\" measurements and\n                  * quantitative evaluations or pick the ROI from the \"best\"\n                  * available report (COMPLETE and VERIFIED).\n                  */\n                  const doesROIExist = this.volumeViewer.getAllROIs().some(\n                    (otherROI: dmv.roi.ROI): boolean => {\n                      return areROIsEqual(otherROI, roi)\n                    }\n                  )\n                  if (!doesROIExist) {\n                    try {\n                      // Add ROI without style such that it won't be visible.\n                      this.volumeViewer.addROI(roi, {})\n                      const roiAsAnnotation = adaptRoiToAnnotation(roi)\n                      this.formatAnnotation(roiAsAnnotation)\n                    } catch {\n                      console.error(`could not add ROI \"${roi.uid}\"`)\n                    }\n                  } else {\n                    console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(\n                    `skip ROI \"${roi.uid}\" ` +\n                    `of SR document \"${report.SOPInstanceUID}\"` +\n                    'because it is defined in another frame of reference'\n                  )\n                }\n              })\n\n              resolve()\n            }).catch((error) => {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Annotations could not be loaded'\n                )\n              )\n              console.error(\n                'failed to load ROIs ' +\n                `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n                `of series \"${instance.SeriesInstanceUID}\" ` +\n                `of study \"${this.props.studyInstanceUID}\": `,\n                error\n              )\n            })\n            /*\n            * React is not aware of the fact that ROIs have been added via the\n            * viewer (the viewport is a ref object) and won't show the\n            * annotations in the user interface unless an update is forced.\n            */\n            this.forceUpdate()\n          }\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Annotations could not be loaded'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Microscopy Bulk Simple Annotations instances')\n      const client = this.props.clients[\n        StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n      ]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'ANN'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries === null || matchedSeries === undefined) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[] = retrievedMetadata.map(metadata => {\n              return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n                metadata\n              })\n            })\n            // annotations = annotations.filter(ann => {\n            //   const refImage = this.props.slide.volumeImages[0]\n            //   return (\n            //     ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n            //     ann.ContainerIdentifier === refImage.ContainerIdentifier\n            //   )\n            // })\n            annotations.forEach(ann => {\n              try {\n                this.volumeViewer.addAnnotationGroups(ann)\n              } catch (error: unknown) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Microscopy Bulk Simple Annotations cannot be displayed.'\n                  )\n                )\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                console.error('failed to add annotation groups:', error)\n              }\n              ann.AnnotationGroupSequence.forEach(item => {\n                const annotationGroupUID = item.AnnotationGroupUID\n                const finding = item.AnnotationPropertyTypeCodeSequence[0]\n                const key = buildKey(finding)\n                const style = this.roiStyles[key]\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                if (style !== null && style !== undefined && style.fill !== null && style.fill !== undefined) {\n                  this.volumeViewer.setAnnotationGroupStyle(\n                    annotationGroupUID,\n                    { color: style.fill.color }\n                  )\n                }\n              })\n            })\n            /*\n            * React is not aware of the fact that annotation groups have been\n            * added via the viewer (the underlying HTML viewport element is a\n            * ref object) and won't show the annotation groups in the user\n            * interface unless an update is forced.\n            */\n            this.forceUpdate()\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n                'instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Microscopy Bulk Simple Annotations instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Segmentation instances')\n      const client = this.props.clients[StorageClasses.SEGMENTATION]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SEG'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries === null || matchedSeries === undefined) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach((s, i) => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const segmentations: dmv.metadata.Segmentation[] = []\n            retrievedMetadata.forEach(metadata => {\n              const seg = new dmv.metadata.Segmentation({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                seg.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                segmentations.push(seg)\n              }\n            })\n            if (segmentations.length > 0) {\n              try {\n                this.volumeViewer.addSegments(segmentations)\n              } catch (error: unknown) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Segmentations cannot be displayed'\n                  )\n                )\n                console.error('failed to add segments: ', error)\n              }\n              /*\n              * React is not aware of the fact that segments have been added via\n              * the viewer (the underlying HTML viewport element is a ref object)\n              * and won't show the segments in the user interface unless an update\n              * is forced.\n              */\n              this.forceUpdate()\n            }\n\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Segmentation instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Segmentation instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Parametric Map instances')\n      const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'OT'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries === null || matchedSeries === undefined) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const parametricMaps: dmv.metadata.ParametricMap[] = []\n            retrievedMetadata.forEach(metadata => {\n              const pm = new dmv.metadata.ParametricMap({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                pm.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                parametricMaps.push(pm)\n              } else {\n                console.warn(\n                  `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n                )\n              }\n            })\n            if (parametricMaps.length > 0) {\n              try {\n                this.volumeViewer.addParameterMappings(parametricMaps)\n              } catch (error: unknown) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Parametric Map cannot be displayed'\n                  )\n                )\n                console.error('failed to add mappings: ', error)\n              }\n              /*\n               * React is not aware of the fact that mappings have been added via\n               * the viewer (the underlying HTML viewport element is a ref object)\n               * and won't show the mappings in the user interface unless an update\n               * is forced.\n               */\n              this.forceUpdate()\n            }\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Parametric Map instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Parametric Map instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current !== null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current !== null &&\n      this.labelViewer !== null && this.labelViewer !== undefined\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    // Handle promises properly with catch blocks\n    void this.addAnnotations()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotations:', error)\n      })\n\n    void this.addAnnotationGroups()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotation groups:', error)\n      })\n\n    void this.addSegmentations()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add segmentations:', error)\n      })\n\n    void this.addParametricMaps()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add parametric maps:', error)\n      })\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer !== null && this.labelViewer !== undefined) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiDoubleClicked = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi !== null) {\n      this.setState({\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  setHoveredRoiAttributes = (hoveredRois: dmv.roi.ROI[]): void => {\n    const rois = this.volumeViewer.getAllROIs()\n    if (rois.length === 0) {\n      this.setState({ hoveredRoiAttributes: [] })\n      return\n    }\n\n    const result = hoveredRois.map((roi) => {\n      const attributes: Array<{ name: string, value: string }> = []\n      const evaluations = roi.evaluations\n      evaluations.forEach((\n        item: (\n          dcmjs.sr.valueTypes.TextContentItem |\n          dcmjs.sr.valueTypes.CodeContentItem\n        )\n      ) => {\n        const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n        const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n        const name = `${nameMeaning}`\n        if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n          const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n          // For consistency with Segment and Annotation Group\n          if (nameValue === '276214006') {\n            attributes.push({\n              name: 'Property category',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '121071') {\n            attributes.push({\n              name: 'Property type',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '111001') {\n            attributes.push({\n              name: 'Algorithm Name',\n              value: `${valueMeaning}`\n            })\n          } else {\n            attributes.push({\n              name: name,\n              value: `${valueMeaning}`\n            })\n          }\n        } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n          const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n          attributes.push({\n            name: name,\n            value: textContentItem.TextValue\n          })\n        }\n      })\n\n      const index = (rois.findIndex((r) => r.uid === roi.uid) ?? 0) + 1\n      return { index, roiUid: roi.uid, attributes }\n    }, [] as Array<dcmjs.sr.valueTypes.CodeContentItem | dcmjs.sr.valueTypes.TextContentItem>)\n\n    this.setState({ hoveredRoiAttributes: result })\n  }\n\n  clearHoveredRois = (): void => {\n    this.hoveredRois = [] as any\n  }\n\n  getUniqueHoveredRois = (newRoi: dmv.roi.ROI | null): dmv.roi.ROI[] => {\n    if (newRoi === null || newRoi === undefined) {\n      return this.hoveredRois\n    }\n    const allRois = [...this.hoveredRois, newRoi]\n    const uniqueIds = Array.from(new Set(allRois.map(roi => roi.uid)))\n    return uniqueIds.map(id => allRois.find(roi => roi.uid === id))\n      .filter((roi): roi is dmv.roi.ROI => roi !== undefined)\n  }\n\n  isSamePixelAsLast = (event: MouseEvent): boolean => {\n    return event.clientX === this.lastPixel[0] && event.clientY === this.lastPixel[1]\n  }\n\n  onPointerMove = (event: CustomEventInit): void => {\n    const { feature: hoveredRoi, event: evt } = event.detail.payload\n    const originalEvent = evt.originalEvent\n\n    if (!this.isSamePixelAsLast(originalEvent)) {\n      this.lastPixel = [originalEvent.clientX, originalEvent.clientY]\n      this.clearHoveredRois()\n    }\n\n    this.hoveredRois = this.getUniqueHoveredRois(hoveredRoi)\n\n    if (this.hoveredRois.length > 0) {\n      this.setHoveredRoiAttributes(this.hoveredRois)\n      this.setState({\n        isHoveredRoiTooltipVisible: true,\n        hoveredRoiTooltipX: originalEvent.clientX,\n        hoveredRoiTooltipY: originalEvent.clientY\n      })\n    } else {\n      this.setState({\n        isHoveredRoiTooltipVisible: false\n      })\n    }\n  }\n\n  getUpdatedSelectedRois = (newSelectedRoiUid?: string): { selectedRoiUIDs: Set<string>, selectedRoi?: dmv.roi.ROI} => {\n    const selectedRoiUid = newSelectedRoiUid\n    const emptySelection = {\n      selectedRoiUIDs: new Set<string>(),\n      selectedRoi: undefined\n    }\n\n    if (selectedRoiUid === undefined) {\n      return emptySelection\n    }\n\n    const selectedRoi = this.volumeViewer.getROI(selectedRoiUid)\n    if (selectedRoi === undefined) {\n      return emptySelection\n    }\n\n    console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n\n    if (!this.keysDown.has('Shift')) {\n      return {\n        selectedRoiUIDs: new Set([selectedRoi.uid]),\n        selectedRoi\n      }\n    }\n\n    const oldSelectedRois = Array.from(this.state.selectedRoiUIDs)\n    return {\n      selectedRoiUIDs: new Set([...oldSelectedRois, selectedRoi.uid]),\n      selectedRoi\n    }\n  }\n\n  resetUnselectedRoiStyles = (selectionState: { selectedRoiUIDs: Set<string> }): void => {\n    this.volumeViewer.getAllROIs().forEach(roi => {\n      const uid = roi.uid\n\n      if (selectionState.selectedRoiUIDs.has(uid) || !this.state.visibleRoiUIDs.has(uid)) {\n        return\n      }\n\n      const key = getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(uid, style)\n    })\n  }\n\n  onMapClicked = (event: CustomEventInit): void => {\n    const roisClicked = (event.detail?.payload?.rois ?? []) as dmv.roi.ROI[]\n\n    if (roisClicked.length !== 0) {\n      return\n    }\n\n    const updatedSelectedRois = this.getUpdatedSelectedRois()\n    this.setState(updatedSelectedRois)\n\n    // @ts-expect-error\n    this.volumeViewer.clearSelections()\n\n    this.resetUnselectedRoiStyles(updatedSelectedRois)\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoiUid = event.detail?.payload?.uid as string\n    const updatedSelectedRois = this.getUpdatedSelectedRois(selectedRoiUid)\n    this.setState(updatedSelectedRois)\n\n    this.resetUnselectedRoiStyles(updatedSelectedRois)\n  }\n\n  handleAnnotationSelection = (uid: string): void => {\n    // @ts-expect-error\n    this.volumeViewer.clearSelections()\n\n    const updatedSelectedRois = this.getUpdatedSelectedRois(uid)\n    this.setState(updatedSelectedRois)\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (updatedSelectedRois.selectedRoiUIDs.has(roi.uid)) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  handleRoiSelectionCancellation = (): void => {\n    console.info('cancel ROI selection')\n    this.setState({\n      isSelectedRoiModalVisible: false\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load frame')\n  }\n\n  onLoadingError = (event: CustomEventInit): void => {\n    const message = (event.detail?.payload?.message ?? 'Failed to load data') as string\n    console.error(message)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        message\n      ) as any\n    )\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray !== null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] !== null && stats[opticalPathIdentifier] !== undefined) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID === null || state.selectedPresentationStateUID === undefined) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup = (): void => {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_viewport_clicked',\n      this.onMapClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyDown\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer !== null && this.labelViewer !== undefined) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyDown = (event: KeyboardEvent): void => {\n    this.keysDown.add(event.key)\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    this.keysDown.delete(event.key)\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount = (): void => {\n    this.volumeViewer.cleanup()\n    if (this.labelViewer !== null && this.labelViewer !== undefined) {\n      this.labelViewer.cleanup()\n    }\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup = (): void => {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_viewport_clicked',\n      this.onMapClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_error',\n      this.onLoadingError\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_error',\n      this.onFrameLoadingError\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    document.body.addEventListener(\n      'keydown',\n      this.onKeyDown\n    )\n    window.addEventListener('beforeunload', this.componentCleanup)\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount = (): void => {\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile === null || metadataItem.ICCProfile === undefined) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    _option: { label: React.ReactNode }\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection = (value: string, _option: { label: string }): void => {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation = (event: CheckboxChangeEvent): void => {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection = (\n    value: string,\n    option: { label: dcmjs.sr.coding.CodedConcept }\n  ): void => {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance = (): void => {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection = (value: number | string | null): void => {\n    if (value !== null && value !== undefined) {\n      const x = Number(value)\n      this.setState(state => {\n        const isValid = x >= state.validXCoordinateRange[0] && x <= state.validXCoordinateRange[1]\n        return {\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: isValid\n        }\n      })\n    } else {\n      this.setState({\n        selectedXCoordinate: undefined,\n        isSelectedXCoordinateValid: false\n      })\n    }\n  }\n\n  handleYCoordinateSelection = (value: number | string | null): void => {\n    if (value !== null && value !== undefined) {\n      const y = Number(value)\n      this.setState(state => {\n        const isValid = y >= state.validYCoordinateRange[0] && y <= state.validYCoordinateRange[1]\n        return {\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: isValid\n        }\n      })\n    } else {\n      this.setState({\n        selectedYCoordinate: undefined,\n        isSelectedYCoordinateValid: false\n      })\n    }\n  }\n\n  handleMagnificationSelection = (value: number | string | null): void => {\n    if (value !== null && value !== undefined) {\n      const magnification = Number(value)\n      this.setState(() => {\n        const isValid = magnification >= 0 && magnification <= 40\n        return {\n          selectedMagnification: magnification,\n          isSelectedMagnificationValid: isValid\n        }\n      })\n    } else {\n      this.setState({\n        selectedMagnification: undefined,\n        isSelectedMagnificationValid: false\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection = (): void => {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n              this.state.selectedXCoordinate !== null && this.state.selectedXCoordinate !== undefined &&\n        this.state.selectedYCoordinate !== null && this.state.selectedYCoordinate !== undefined &&\n        this.state.selectedMagnification !== null && this.state.selectedMagnification !== undefined\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation = (): void => {\n    console.info('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion = (): void => {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Could not complete annotation configuration'\n        )\n      )\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation = (): void => {\n    console.info('cancel annotation configuration')\n    this.volumeViewer.activateSelectInteraction({})\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration = (): void => {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    this.setState((prevState) => {\n      const report = generateReport({\n        rois,\n        metadata,\n        user: this.props.user,\n        app: this.props.app,\n        visibleRoiUIDs: prevState.visibleRoiUIDs\n      })\n      return {\n        isReportModalVisible: report.isReportModalVisible,\n        generatedReport: report.generatedReport\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification = (): void => {\n    console.info('verify report generation')\n    if (this.state.generatedReport !== undefined) {\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      // The Comprehensive3DSR object should have a write method or similar\n      // For now, let's try to access it as an ArrayBuffer directly\n      client.storeInstances({ datasets: [(this.state.generatedReport as unknown as dcmjs.data.DicomDict).write()] }).then(\n        () => message.info('Annotations were saved.')\n      ).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Annotations could not be saved'\n          )\n        )\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation = (): void => {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange = ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void => {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(roi.uid, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange = ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void => {\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const annotationGroup = allAnnotationGroups.find(ag => ag.uid === annotationGroupUID)\n    if (annotationGroup !== null && annotationGroup !== undefined) {\n      runValidations({\n        dialog: true,\n        context: { annotationGroup, slide: this.props.slide }\n      })\n    }\n\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Failed to show annotation group.'\n          )\n        )\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange = ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void => {\n    console.log(`change style of annotation group ${uid}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        uid,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of annotation group.'\n        )\n      )\n      throw error\n    }\n  }\n\n  generateRoiStyle = (\n    styleOptions: StyleOptions): dmv.viewer.ROIStyleOptions => {\n    const opacity = styleOptions.opacity ?? DEFAULT_ANNOTATION_OPACITY\n    const strokeColor = styleOptions.color ?? DEFAULT_ANNOTATION_STROKE_COLOR\n    const fillColor = styleOptions.contourOnly ? [0, 0, 0, 0] : strokeColor.map((c) => Math.min(c + 25, 255))\n    const style = formatRoiStyle({\n      fill: { color: [...fillColor, opacity] },\n      stroke: { color: [...strokeColor, opacity] },\n      radius: this.defaultRoiStyle.stroke?.width\n    })\n    return style\n  }\n\n  handleRoiStyleChange = ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: StyleOptions\n  }): void => {\n    console.log(`change style of ROI ${uid}`)\n    try {\n      this.defaultAnnotationStyles[uid] = styleOptions\n      const style = this.generateRoiStyle(styleOptions)\n\n      const roi = this.volumeViewer.getROI(uid)\n      const key = getRoiKey(roi) as string\n      this.roiStyles[key] = style\n      this.volumeViewer.setROIStyle(uid, style)\n      this.state.visibleRoiUIDs.add(uid)\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of ROI.'\n        )\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange = ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void => {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange = ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void => {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange = ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void => {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange = ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void => {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange = ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void => {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange = ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void => {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange = ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void => {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState = (): void => {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID !== null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats !== null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset = (): void => {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection = (\n    value?: string,\n    _option?: any\n  ): void => {\n    if (value !== null) {\n      console.info(`select Presentation State instance \"${value ?? 'undefined'}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState !== null && presentationState !== undefined) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value ?? ''}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Presentation State could not be found'\n          )\n        )\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value ?? 'undefined'}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing = (): void => {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification = (): void => {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation = (): void => {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo = (): void => {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval = (): void => {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange = (): void => {\n    console.info('toggle visibility of ROIs')\n    if (!this.state.areRoisHidden) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  handleAnnotationGroupClick = (annotationGroupUID: string): void => {\n    this.volumeViewer.zoomToROI(annotationGroupUID)\n  }\n\n  handleAnnotationGroupSelection = (value: string): void => {\n    this.setState({ selectedSeriesInstanceUID: value })\n  }\n\n  getSeriesDescription = (seriesInstanceUID: string): string => {\n    // Get the study from DicomMetadataStore\n    const study = DicomMetadataStore.getStudy(this.props.studyInstanceUID)\n\n    if ((study?.series) !== null && study !== null && study !== undefined) {\n      // Find the series that matches this series instance UID\n      const series = study.series.find(s => s.SeriesInstanceUID === seriesInstanceUID)\n\n      if (series?.SeriesDescription !== undefined && series.SeriesDescription !== '') {\n        return series.SeriesDescription\n      }\n    }\n\n    // Fallback to truncated UID if no description found\n    return `Series ${seriesInstanceUID.slice(0, 8)}...`\n  }\n\n  /**\n   * Handler that will toggle the ICC profile color management, i.e., either\n   * enable or disable it, depending on its current state.\n   */\n  handleICCProfilesToggle = (event: CheckboxChangeEvent): void => {\n    const checked = event.target.checked\n    this.setState({ isICCProfilesEnabled: checked })\n    this.volumeViewer.toggleICCProfiles()\n  }\n\n  formatAnnotation = (annotation: AnnotationCategoryAndType): void => {\n    const roi = this.volumeViewer.getROI(annotation.uid)\n    const key = getRoiKey(roi) as string\n    const color = this.roiStyles[key] !== undefined\n      ? this.roiStyles[key].stroke?.color.slice(0, 3)\n      : DEFAULT_ANNOTATION_COLOR_PALETTE[\n        Object.keys(this.roiStyles).length % DEFAULT_ANNOTATION_COLOR_PALETTE.length\n      ]\n    this.defaultAnnotationStyles[annotation.uid] = {\n      color: color as number[],\n      opacity: DEFAULT_ANNOTATION_OPACITY,\n      contourOnly: false\n    }\n\n    this.roiStyles[key] = this.generateRoiStyle(\n      this.defaultAnnotationStyles[annotation.uid]\n    )\n  }\n\n  // Helper functions to extract render logic\n  private readonly getDataFromViewer = (): {\n    rois: dmv.roi.ROI[]\n    segments: dmv.segment.Segment[]\n    mappings: dmv.mapping.ParameterMapping[]\n    annotationGroups: dmv.annotation.AnnotationGroup[]\n    annotations: AnnotationCategoryAndType[]\n  } => {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const filteredAnnotationGroups = allAnnotationGroups?.filter((annotationGroup) =>\n      annotationGroup.referencedSeriesInstanceUID === this.props.seriesInstanceUID\n    )\n    annotationGroups.push(...filteredAnnotationGroups)\n\n    const annotations = rois.map(roi => adaptRoiToAnnotation(roi))\n\n    return { rois, segments, mappings, annotationGroups, annotations }\n  }\n\n  private static getOpenSubMenuItems (): string[] {\n    return ['specimens', 'optical-paths', 'annotations', 'presentation-states']\n  }\n\n  private readonly getReport = (): React.ReactNode => {\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      return <Report dataset={dataset} />\n    }\n    return undefined\n  }\n\n  private readonly getAnnotationMenuItems = (rois: dmv.roi.ROI[]): React.ReactNode => {\n    if (rois.length > 0) {\n      return (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n    return undefined\n  }\n\n  private readonly getFindingOptions = (): React.ReactNode[] => {\n    return this.findingOptions.map((finding, index) => {\n      return (\n        <Select.Option\n          key={(finding.CodeValue !== undefined && finding.CodeValue !== '') ? finding.CodeValue : `finding-${index}`}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n  }\n\n  private static getGeometryTypeOptionsMapping (): { [key: string]: React.ReactNode } {\n    return {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n  }\n\n  private readonly getAnnotationConfigurations = (): React.ReactNode[] => {\n    const findingOptions = this.getFindingOptions()\n    const geometryTypeOptionsMapping = SlideViewer.getGeometryTypeOptionsMapping()\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n          placeholder='Select finding'\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach((evaluation, index) => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={(code.CodeValue !== undefined && code.CodeValue !== '') ? code.CodeValue : `evaluation-${index}`}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n            placeholder='Select geometry type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    return annotationConfigurations\n  }\n\n  private readonly getSpecimenMenu = (): React.ReactNode => {\n    return (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n  }\n\n  private readonly getEquipmentMenu = (): React.ReactNode => {\n    return (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n  }\n\n  private readonly getOpticalPathMenu = (): React.ReactNode => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    return (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n  }\n\n  private readonly getPresentationStateMenu = (): React.ReactNode => {\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach((instance, index) => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={(instance.SOPInstanceUID !== undefined && instance.SOPInstanceUID !== '') ? instance.SOPInstanceUID : `presentation-state-${index}`}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription !== undefined && instance.ContentDescription !== '' ? instance.ContentDescription : 'Untitled'}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={undefined}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          {null}\n        </Select.Option>\n      )\n      return (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={UndoOutlined}\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getSegmentationMenu = (segments: dmv.segment.Segment[]): React.ReactNode => {\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      return (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getParametricMapMenu = (mappings: dmv.mapping.ParameterMapping[]): React.ReactNode => {\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      return (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getAnnotationGroupMenu = (annotationGroups: dmv.annotation.AnnotationGroup[]): React.ReactNode => {\n    if (annotationGroups.length > 0) {\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const defaultAnnotationGroupStyles: {\n        [annotationUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n\n      // Group annotation groups by seriesInstanceUID\n      const annotationGroupsBySeries: { [seriesInstanceUID: string]: dmv.annotation.AnnotationGroup[] } = {}\n      annotationGroups.forEach(annotationGroup => {\n        const seriesUID = annotationGroup.seriesInstanceUID\n        if (!(seriesUID in annotationGroupsBySeries)) {\n          annotationGroupsBySeries[seriesUID] = []\n        }\n        annotationGroupsBySeries[seriesUID].push(annotationGroup)\n      })\n\n      // Initialize selected series if not set\n      if (this.state.selectedSeriesInstanceUID === undefined && annotationGroups.length !== 0) {\n        this.setState({ selectedSeriesInstanceUID: 'all' })\n      }\n\n      // Create dropdown options for series\n      const dropdownOptions = [\n        {\n          value: 'all',\n          label: 'All'\n        },\n        ...Object.keys(annotationGroupsBySeries).map((seriesUID) => ({\n          value: seriesUID,\n          label: `${this.getSeriesDescription(seriesUID)} (${annotationGroupsBySeries[seriesUID]?.length ?? 0} groups)`\n        }))\n      ]\n\n      // Get annotation groups for the selected series or all series\n      const selectedSeriesAnnotationGroups = this.state.selectedSeriesInstanceUID === 'all'\n        ? annotationGroups\n        : (this.state.selectedSeriesInstanceUID !== undefined\n            ? annotationGroupsBySeries[this.state.selectedSeriesInstanceUID] ?? []\n            : [])\n\n      return (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          {/* Series Selection Dropdown */}\n          <div\n            style={{\n              paddingLeft: '14px',\n              paddingRight: '14px',\n              paddingTop: '7px',\n              paddingBottom: '7px'\n            }}\n          >\n            <Select\n              style={{ width: '100%' }}\n              placeholder='Select a series'\n              value={this.state.selectedSeriesInstanceUID}\n              onChange={this.handleAnnotationGroupSelection}\n              options={dropdownOptions}\n            />\n          </div>\n\n          {/* Display annotation groups for the selected series */}\n          {selectedSeriesAnnotationGroups.length > 0 && (\n            <AnnotationGroupList\n              annotationGroups={selectedSeriesAnnotationGroups}\n              metadata={annotationGroupMetadata}\n              onAnnotationGroupClick={this.handleAnnotationGroupClick}\n              // when adding annotationGroups to annotationCategory list,\n              // make so that this is uses this.defaultAnnotationStyles later instead of defaultAnnotationGroupStyles\n              defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n              visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n              onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n              onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n            />\n          )}\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getToolbar = (): { toolbar: React.ReactNode, toolbarHeight: string } => {\n    const annotationTools = [\n      <Btn\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Btn\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Btn\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Btn\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Btn\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Btn\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Btn\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n\n    let toolbar: React.ReactNode\n    let toolbarHeight = '0px'\n\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    return { toolbar, toolbarHeight }\n  }\n\n  private readonly getCursor = (): string => {\n    if (this.state.isLoading) {\n      return 'progress'\n    }\n    return 'default'\n  }\n\n  private readonly getSelectedRoiInformation = (): React.ReactNode => {\n    if (this.state.selectedRoi !== null && this.state.selectedRoi !== undefined) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence !== null && item.ContentSequence !== undefined) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit !== null && item.unit !== undefined) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      return (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getICCProfilesMenu = (): React.ReactNode => {\n    return this.volumeViewer.getICCProfiles().length > 0 && (\n      <div style={{ margin: '0.9rem' }}>\n        <Checkbox\n          checked={this.state.isICCProfilesEnabled}\n          onChange={this.handleICCProfilesToggle}\n        >\n          ICC Profiles\n        </Checkbox>\n      </div>\n    )\n  }\n\n  render = (): React.ReactNode => {\n    const { rois, segments, mappings, annotationGroups, annotations } = this.getDataFromViewer()\n\n    const openSubMenuItems = SlideViewer.getOpenSubMenuItems()\n    const report = this.getReport()\n    const annotationMenuItems = this.getAnnotationMenuItems(rois)\n    const annotationConfigurations = this.getAnnotationConfigurations()\n    const specimenMenu = this.getSpecimenMenu()\n    const equipmentMenu = this.getEquipmentMenu()\n    const opticalPathMenu = this.getOpticalPathMenu()\n    const presentationStateMenu = this.getPresentationStateMenu()\n    const segmentationMenu = this.getSegmentationMenu(segments)\n    const parametricMapMenu = this.getParametricMapMenu(mappings)\n    const annotationGroupMenu = this.getAnnotationGroupMenu(annotationGroups)\n    const { toolbar, toolbarHeight } = this.getToolbar()\n    const cursor = this.getCursor()\n    const selectedRoiInformation = this.getSelectedRoiInformation()\n    const iccProfilesMenu = this.getICCProfilesMenu()\n\n    // Add segmentations and parametric maps to open sub menu items if they exist\n    if (segmentationMenu !== null && segmentationMenu !== undefined) {\n      openSubMenuItems.push('segmentations')\n    }\n    if (parametricMapMenu !== null && parametricMapMenu !== undefined) {\n      openSubMenuItems.push('parametric-maps')\n    }\n    if (annotationGroupMenu !== null && annotationGroupMenu !== undefined) {\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    // Format annotations\n    annotations?.forEach?.(this.formatAnnotation)\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <SlideViewerContent\n          toolbar={toolbar}\n          toolbarHeight={toolbarHeight}\n          cursor={cursor}\n          volumeViewportRef={this.volumeViewportRef}\n        >\n          <SlideViewerModals\n            isAnnotationModalVisible={this.state.isAnnotationModalVisible}\n            onAnnotationConfigurationCompletion={this.handleAnnotationConfigurationCompletion}\n            onAnnotationConfigurationCancellation={this.handleAnnotationConfigurationCancellation}\n            isAnnotationOkDisabled={!(this.state.selectedFinding !== undefined && this.state.selectedGeometryType !== undefined)}\n            annotationConfigurations={annotationConfigurations}\n            isSelectedRoiModalVisible={this.state.isSelectedRoiModalVisible}\n            onRoiSelectionCancellation={this.handleRoiSelectionCancellation}\n            selectedRoiInformation={selectedRoiInformation}\n            isGoToModalVisible={this.state.isGoToModalVisible}\n            onSlidePositionSelection={this.handleSlidePositionSelection}\n            onSlidePositionSelectionCancellation={this.handleSlidePositionSelectionCancellation}\n            validXCoordinateRange={this.state.validXCoordinateRange}\n            validYCoordinateRange={this.state.validYCoordinateRange}\n            isSelectedXCoordinateValid={this.state.isSelectedXCoordinateValid}\n            isSelectedYCoordinateValid={this.state.isSelectedYCoordinateValid}\n            isSelectedMagnificationValid={this.state.isSelectedMagnificationValid}\n            onXCoordinateSelection={this.handleXCoordinateSelection}\n            onYCoordinateSelection={this.handleYCoordinateSelection}\n            onMagnificationSelection={this.handleMagnificationSelection}\n            isReportModalVisible={this.state.isReportModalVisible}\n            onReportVerification={this.handleReportVerification}\n            onReportCancellation={this.handleReportCancellation}\n            report={report}\n          />\n        </SlideViewerContent>\n\n        <SlideViewerSidebar\n          labelViewportRef={this.labelViewportRef}\n          labelViewer={this.labelViewer}\n          openSubMenuItems={openSubMenuItems}\n          specimenMenu={specimenMenu}\n          iccProfilesMenu={iccProfilesMenu}\n          equipmentMenu={equipmentMenu}\n          opticalPathMenu={opticalPathMenu}\n          presentationStateMenu={presentationStateMenu}\n          annotationMenuItems={annotationMenuItems}\n          annotationGroupMenu={annotationGroupMenu}\n          segmentationMenu={segmentationMenu}\n          parametricMapMenu={parametricMapMenu}\n          annotations={annotations}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onAnnotationVisibilityChange={this.handleAnnotationVisibilityChange}\n          onRoiStyleChange={this.handleRoiStyleChange}\n          defaultAnnotationStyles={this.defaultAnnotationStyles}\n        />\n\n        {this.state.isHoveredRoiTooltipVisible &&\n        this.state.hoveredRoiAttributes.length > 0\n          ? (\n            <HoveredRoiTooltip\n              xPosition={this.state.hoveredRoiTooltipX}\n              yPosition={this.state.hoveredRoiTooltipY}\n              rois={this.state.hoveredRoiAttributes}\n            />\n            )\n          : null}\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import { Routes, Route, useLocation, useParams } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { useEffect, useState } from 'react'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide } from '../data/slides'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { useSlides } from '../hooks/useSlides'\nimport { StorageClasses } from '../data/uids'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface NaturalizedInstance {\n  SeriesInstanceUID: string\n  SOPInstanceUID: string\n  ReferencedSeriesSequence?: Array<{\n    SeriesInstanceUID: string\n  }>\n  ContentSequence?: Array<{\n    ConceptNameCodeSequence: Array<{\n      CodeValue: string\n    }>\n    ContentSequence?: Array<{\n      ContentSequence: Array<{\n        ReferencedSOPSequence: Array<{\n          ReferencedSOPInstanceUID: string\n        }>\n      }>\n    }>\n  }>\n}\n\ninterface ReferencedSlideResult {\n  slide: Slide | undefined\n  metadata: NaturalizedInstance\n}\n\nconst findSeriesSlide = (slides: Slide[], seriesInstanceUID: string): Slide | undefined => {\n  return slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n}\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID = '', seriesInstanceUID = '' } = useParams<{ studyInstanceUID: string, seriesInstanceUID: string }>()\n  const location = useLocation()\n\n  const [selectedSlide, setSelectedSlide] = useState(findSeriesSlide(slides, seriesInstanceUID))\n  const [derivedDataset, setDerivedDataset] = useState<NaturalizedInstance | null>(null)\n\n  useEffect(() => {\n    const seriesSlide = findSeriesSlide(slides, seriesInstanceUID)\n    if (seriesSlide !== null) {\n      setSelectedSlide(seriesSlide)\n    }\n  }, [seriesInstanceUID, slides])\n\n  useEffect(() => {\n    const findReferencedSlide = async ({ clients, studyInstanceUID, seriesInstanceUID }: {\n      clients: { [key: string]: DicomWebManager }\n      studyInstanceUID: string\n      seriesInstanceUID: string\n    }): Promise<ReferencedSlideResult | null> => await new Promise<ReferencedSlideResult | null>((resolve, reject) => {\n      try {\n        const allClients = Object.values(StorageClasses).map((storageClass) => clients[storageClass])\n        Promise.all(allClients.map(async (client) => {\n          const seriesMetadata = await client.retrieveSeriesMetadata({\n            studyInstanceUID: studyInstanceUID,\n            seriesInstanceUID: seriesInstanceUID\n          })\n          const [naturalizedSeriesMetadata] = seriesMetadata.map((metadata) => naturalizeDataset(metadata)) as NaturalizedInstance[]\n\n          if (naturalizedSeriesMetadata.ReferencedSeriesSequence != null) {\n            const referencedSeriesInstanceUID = naturalizedSeriesMetadata.ReferencedSeriesSequence[0].SeriesInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.seriesInstanceUIDs.find((uid: string) => {\n                return uid === referencedSeriesInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n\n          const IMAGE_LIBRARY_CONCEPT_NAME_CODE = '111028'\n          const imageLibrary = naturalizedSeriesMetadata.ContentSequence?.find(\n            contentItem => contentItem.ConceptNameCodeSequence[0].CodeValue === IMAGE_LIBRARY_CONCEPT_NAME_CODE\n          )\n          if ((imageLibrary?.ContentSequence?.[0]?.ContentSequence?.[0]?.ReferencedSOPSequence?.[0]) != null) {\n            const referencedSOPInstanceUID = imageLibrary.ContentSequence[0].ContentSequence[0].ReferencedSOPSequence[0].ReferencedSOPInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.volumeImages.find((image: { SOPInstanceUID: string }) => {\n                return image.SOPInstanceUID === referencedSOPInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n        })).catch(reject)\n      } catch (error) {\n        reject(error)\n      }\n    })\n\n    if (selectedSlide === null || selectedSlide === undefined) {\n      void findReferencedSlide({ clients, studyInstanceUID, seriesInstanceUID }).then((result: ReferencedSlideResult | null) => {\n        if (result !== null && result !== undefined) {\n          setSelectedSlide(result.slide)\n          setDerivedDataset(result.metadata)\n        }\n      }).catch(error => {\n        console.error('Error finding referenced slide:', error)\n      })\n    }\n  }, [slides, clients, studyInstanceUID, seriesInstanceUID, selectedSlide])\n\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string | undefined\n  if (!searchParams.has('access_token')) {\n    const stateParam = searchParams.get('state')\n    presentationStateUID = stateParam !== null ? stateParam : undefined\n  }\n\n  let viewer = null\n  if (selectedSlide != null && selectedSlide !== undefined) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n        derivedDataset={derivedDataset ?? undefined}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\nfunction Viewer (props: ViewerProps): JSX.Element | null {\n  const { clients, studyInstanceUID, location, navigate } = props\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n\n  const handleSeriesSelection = ({ seriesInstanceUID }: { seriesInstanceUID: string }): void => {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n\n    if (location.pathname.includes('/projects/')) {\n      urlPath = location.pathname\n      if (!location.pathname.includes('/series/')) {\n        urlPath += `/series/${seriesInstanceUID}`\n      } else {\n        urlPath = urlPath.replace(/\\/series\\/[^/]+/, `/series/${seriesInstanceUID}`)\n      }\n    }\n\n    if (\n      location.pathname.includes('/series/') &&\n      location.search != null\n    ) {\n      urlPath += location.search\n    }\n\n    navigate(urlPath, { replace: true })\n  }\n\n  if (isLoading) {\n    return null\n  }\n\n  if (slides.length === 0) {\n    return null\n  }\n\n  const firstSlide = slides[0]\n  const volumeInstances = firstSlide.volumeImages\n  if (volumeInstances.length === 0) {\n    return null\n  }\n  const refImage = volumeInstances[0]\n\n  /* If a series is encoded in the path, route the viewer to this series.\n   * Otherwise select the first series correspondent to\n   * the first slide contained in the study.\n   */\n  let selectedSeriesInstanceUID: string\n  if (location.pathname.includes('series/')) {\n    const seriesFragment = location.pathname.split('series/')[1]\n    selectedSeriesInstanceUID = seriesFragment.includes('/') ? seriesFragment.split('/')[0] : seriesFragment\n  } else {\n    selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n  }\n\n  let clinicalTrialMenu\n  if (refImage.ClinicalTrialSponsorName != null) {\n    clinicalTrialMenu = (\n      <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n        <ClinicalTrial metadata={refImage} />\n      </Menu.SubMenu>\n    )\n  }\n\n  return (\n    <Layout style={{ height: '100%' }} hasSider>\n      <Layout.Sider\n        width={300}\n        style={{\n          height: '100%',\n          borderRight: 'solid',\n          borderRightWidth: 0.25,\n          overflow: 'hidden',\n          background: 'none'\n        }}\n      >\n        <Menu\n          mode='inline'\n          defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n          style={{ height: '100%' }}\n          inlineIndent={14}\n        >\n          <Menu.SubMenu key='patient' title='Patient'>\n            <Patient metadata={refImage} />\n          </Menu.SubMenu>\n          <Menu.SubMenu key='study' title='Study'>\n            <Study metadata={refImage} />\n          </Menu.SubMenu>\n          {clinicalTrialMenu}\n          <Menu.SubMenu key='slides' title='Slides'>\n            <SlideList\n              clients={props.clients}\n              metadata={slides}\n              selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n              onSeriesSelection={handleSeriesSelection}\n            />\n          </Menu.SubMenu>\n        </Menu>\n      </Layout.Sider>\n\n      <Routes>\n        <Route\n          path='/series/:seriesInstanceUID'\n          element={\n            <ParametrizedSlideViewer\n              clients={props.clients}\n              slides={slides}\n              preload={props.preload}\n              annotations={props.annotations}\n              enableAnnotationTools={props.enableAnnotationTools}\n              app={props.app}\n              user={props.user}\n            />\n          }\n        />\n      </Routes>\n    </Layout>\n  )\n}\n\nexport default withRouter(Viewer)\n","import dcmjs from 'dcmjs'\n\nconst { DicomMetaDictionary } = dcmjs.data\n\ninterface TagInfo {\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TagInfo[]\n  level: number\n}\n\nexport interface DicomTag {\n  name: string\n  vr: string\n  Value?: any[]\n  [key: string]: any\n}\n\nconst formatValue = (val: any): string => {\n  if (typeof val === 'object' && val !== null) {\n    return JSON.stringify(val)\n  }\n  return String(val)\n}\n\nexport const formatTagValue = (tag: DicomTag): string => {\n  if (tag.Value == null) return ''\n\n  if (Array.isArray(tag.Value)) {\n    return tag.Value.map(formatValue).join(', ')\n  }\n\n  return formatValue(tag.Value)\n}\n\n/**\n * Processes DICOM metadata and returns a flattened array of tag information\n * @param metadata - The DICOM metadata object to process\n * @param depth - The current depth level for nested sequences (default: 0)\n * @returns Array of processed tag information\n */\nexport function getRows (metadata: Record<string, any>, depth = 0): TagInfo[] {\n  if (metadata === undefined || metadata === null) return []\n  const keywords = Object.keys(metadata).filter(key => key !== '_vrMap')\n\n  return keywords.flatMap(keyword => {\n    // @ts-expect-error\n    const tagInfo = DicomMetaDictionary.nameMap[keyword] as TagInfo | undefined\n    let value = metadata[keyword]\n\n    // Handle private or unknown tags\n    if (tagInfo === undefined) {\n      const regex = /[0-9A-Fa-f]{6}/g\n      if (keyword.match(regex) == null) return []\n\n      return [{\n        tag: `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`,\n        vr: '',\n        keyword: 'Private Tag',\n        value: value?.toString() ?? '',\n        level: depth\n      }]\n    }\n\n    // Handle sequence values (SQ VR)\n    if (tagInfo.vr === 'SQ' && value !== undefined) {\n      const sequenceItems = Array.isArray(value) ? value : [value]\n\n      // Create a parent sequence node\n      const sequenceNode: TagInfo = {\n        tag: tagInfo.tag,\n        vr: tagInfo.vr,\n        keyword,\n        value: `Sequence with ${sequenceItems.length} item(s)`,\n        level: depth,\n        children: []\n      }\n\n      // Create individual nodes for each sequence item\n      sequenceNode.children = sequenceItems.map((item, index) => {\n        const itemNode: TagInfo = {\n          tag: `${tagInfo.tag}.${index + 1}`,\n          vr: 'Item',\n          keyword: `Item ${index + 1}`,\n          value: `Sequence Item ${index + 1}`,\n          level: depth + 1,\n          children: getRows(item, depth + 2)\n        }\n        return itemNode\n      })\n\n      return [sequenceNode]\n    }\n\n    // Handle array values\n    if (Array.isArray(value)) {\n      value = value.map(formatValue).join('\\\\')\n    } else if (typeof value === 'object' && value !== null) {\n      value = formatValue(value)\n    }\n\n    return [{\n      tag: tagInfo.tag,\n      vr: tagInfo.vr,\n      keyword: keyword.replace('RETIRED_', ''),\n      value: value?.toString() ?? '',\n      level: depth\n    }]\n  })\n}\n\n/**\n * Sorts DICOM tags alphabetically by tag value\n * @param metadata - The DICOM metadata object to process\n * @returns Sorted array of tag information\n */\nexport function getSortedTags (metadata: Record<string, any>): TagInfo[] {\n  const tagList = getRows(metadata)\n  return tagList.sort((a, b) => a.tag.localeCompare(b.tag))\n}\n","/**\n * Formats a DICOM datetime string (YYYYMMDD:HHmmss) into a human-readable format\n *\n * @param dateStr - DICOM datetime string in format \"YYYYMMDD:HHmmss\"\n * @returns Formatted date string (e.g., \"Mon, Jan 1 2024\")\n * @example\n * formatDicomDate(\"20240101:120000\") // Returns \"Mon, Jan 1 2024\"\n * formatDicomDate(\"invalid\") // Returns \"invalid\"\n */\nexport const formatDicomDate = (dateStr: string): string => {\n  // Parse YYYYMMDD:HHmmss format\n  const match = dateStr.match(/^(\\d{4})(\\d{2})(\\d{2}):(\\d{2})(\\d{2})(\\d{2})/)\n  if (match == null) return dateStr\n\n  const [, year, month, day, hour, minute, second] = match\n\n  // Validate month and day\n  const monthNum = parseInt(month)\n  const dayNum = parseInt(day)\n  if (monthNum < 1 || monthNum > 12 || dayNum < 1 || dayNum > 31) {\n    return dateStr\n  }\n\n  const date = new Date(\n    parseInt(year),\n    monthNum - 1, // months are 0-based\n    dayNum,\n    parseInt(hour),\n    parseInt(minute),\n    parseInt(second)\n  )\n\n  // Check if the date is invalid or if the month/day combination is invalid\n  // This catches cases like February 31st where the date rolls over to March\n  if (\n    date.getMonth() !== monthNum - 1 || // month rolled over\n    date.getDate() !== dayNum // day rolled over\n  ) {\n    return dateStr\n  }\n\n  // Format parts separately to avoid the extra comma\n  const weekday = date.toLocaleDateString('en-US', { weekday: 'short' })\n  const monthName = date.toLocaleDateString('en-US', { month: 'short' })\n  const dayFormatted = date.getDate()\n  const yearNum = date.getFullYear()\n\n  return `${weekday}, ${monthName} ${dayFormatted} ${yearNum}`\n}\n","import { useState, useMemo, useEffect } from 'react'\nimport { Select, Input, Slider, Typography, Table } from 'antd'\nimport { SearchOutlined } from '@ant-design/icons'\n\nimport DicomWebManager from '../../DicomWebManager'\nimport './DicomTagBrowser.css'\nimport { useSlides } from '../../hooks/useSlides'\nimport { getSortedTags } from './dicomTagUtils'\nimport { formatDicomDate } from '../../utils/formatDicomDate'\nimport DicomMetadataStore, { Series, Study } from '../../services/DICOMMetadataStore'\nimport { useDebounce } from '../../hooks/useDebounce'\n\nconst { Option } = Select\n\ninterface DisplaySet {\n  displaySetInstanceUID: number\n  SeriesDate?: string\n  SeriesTime?: string\n  SeriesNumber: string\n  SeriesDescription?: string\n  Modality: string\n  images: any[]\n}\n\ninterface TableDataItem {\n  key: string\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TableDataItem[]\n}\n\ninterface DicomTagBrowserProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\nconst DicomTagBrowser = ({ clients, studyInstanceUID }: DicomTagBrowserProps): JSX.Element => {\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n  const [study, setStudy] = useState<Study | undefined>(undefined)\n\n  const [displaySets, setDisplaySets] = useState<DisplaySet[]>([])\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] = useState(0)\n  const [instanceNumber, setInstanceNumber] = useState(1)\n  const [filterValue, setFilterValue] = useState('')\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([])\n  const [searchInput, setSearchInput] = useState('')\n\n  const debouncedSearchValue = useDebounce(searchInput, 300)\n\n  useEffect(() => {\n    if (debouncedSearchValue === '') {\n      setFilterValue('')\n      setExpandedKeys([])\n    } else {\n      setFilterValue(debouncedSearchValue)\n    }\n  }, [debouncedSearchValue])\n\n  useEffect(() => {\n    const handler = (event: any): void => {\n      const study: Study | undefined = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n      setStudy(study)\n    }\n    const seriesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.SERIES_ADDED, handler)\n    const instancesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.INSTANCES_ADDED, handler)\n\n    const study = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n    setStudy(study)\n\n    return () => {\n      seriesAddedSubscription.unsubscribe()\n      instancesAddedSubscription.unsubscribe()\n    }\n  }, [studyInstanceUID])\n\n  useEffect(() => {\n    let displaySets: DisplaySet[] = []\n    let derivedDisplaySets: DisplaySet[] = []\n    const processedSeries: string[] = []\n    let index = 0\n\n    if (slides.length > 0) {\n      displaySets = slides\n        .map((slide): DisplaySet | null => {\n          const { volumeImages } = slide\n          if (volumeImages?.[0] === undefined) return null\n\n          const {\n            SeriesDate,\n            SeriesTime,\n            SeriesNumber,\n            SeriesInstanceUID,\n            SeriesDescription,\n            Modality\n          } = volumeImages[0]\n\n          processedSeries.push(SeriesInstanceUID)\n\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate,\n            SeriesTime,\n            SeriesInstanceUID,\n            // @ts-expect-error\n            SeriesNumber,\n            SeriesDescription,\n            Modality,\n            images: volumeImages\n          }\n          index++\n          return ds\n        })\n        .filter((set): set is DisplaySet => set !== null && set !== undefined)\n    }\n\n    if (study !== undefined && study.series?.length > 0) {\n      derivedDisplaySets = study.series.filter(s => !processedSeries.includes(s.SeriesInstanceUID))\n        .map((series: Series): DisplaySet => {\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate: series.SeriesDate,\n            SeriesTime: series.SeriesTime,\n            // @ts-expect-error\n            SeriesNumber: series.SeriesNumber,\n            SeriesDescription: series.SeriesDescription,\n            SeriesInstanceUID: series.SeriesInstanceUID,\n            Modality: series.Modality,\n            images: series?.instances?.length > 0 ? series.instances : [series]\n          }\n          index++\n          return ds\n        })\n    }\n\n    setDisplaySets([...displaySets, ...derivedDisplaySets])\n  }, [slides, study])\n\n  const displaySetList = useMemo(() => {\n    displaySets.sort((a, b) => Number(a.SeriesNumber) - Number(b.SeriesNumber))\n    return displaySets.map((displaySet, index) => {\n      const {\n        SeriesDate = '',\n        SeriesTime = '',\n        SeriesNumber = '',\n        SeriesDescription = '',\n        Modality = ''\n      } = displaySet\n\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0]\n      const displayDate = formatDicomDate(dateStr)\n\n      return {\n        value: index,\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\n        description: displayDate\n      }\n    })\n  }, [displaySets])\n\n  const showInstanceList =\n    displaySets[selectedDisplaySetInstanceUID]?.images.length > 1\n\n  const instanceSliderMarks = useMemo(() => {\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return {}\n    const totalInstances = displaySets[selectedDisplaySetInstanceUID].images.length\n\n    // Create marks for first, middle, and last instances\n    const marks: Record<number, string> = {\n      1: '1', // First\n      [Math.ceil(totalInstances / 2)]: String(Math.ceil(totalInstances / 2)), // Middle\n      [totalInstances]: String(totalInstances) // Last\n    }\n\n    return marks\n  }, [selectedDisplaySetInstanceUID, displaySets])\n\n  const columns = [\n    {\n      title: 'Tag',\n      dataIndex: 'tag',\n      key: 'tag',\n      width: '30%'\n    },\n    {\n      title: 'VR',\n      dataIndex: 'vr',\n      key: 'vr',\n      width: '5%'\n    },\n    {\n      title: 'Keyword',\n      dataIndex: 'keyword',\n      key: 'keyword',\n      width: '30%'\n    },\n    {\n      title: 'Value',\n      dataIndex: 'value',\n      key: 'value',\n      width: '40%'\n    }\n  ]\n\n  const tableData = useMemo(() => {\n    const transformTagsToTableData = (tags: any[], parentKey = ''): TableDataItem[] => {\n      return tags.map((tag, index) => {\n        // Create a unique key using tag value if available, otherwise use index\n        const keyBase: string = tag.tag !== '' ? tag.tag.replace(/[(),]/g, '') : index.toString()\n        const currentKey: string = parentKey !== '' ? `${parentKey}-${keyBase}` : keyBase\n\n        const item: TableDataItem = {\n          key: currentKey,\n          tag: tag.tag,\n          vr: tag.vr,\n          keyword: tag.keyword,\n          value: tag.value\n        }\n\n        if (tag.children !== undefined && tag.children.length > 0) {\n          item.children = transformTagsToTableData(tag.children, currentKey)\n        }\n\n        return item\n      })\n    }\n\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return []\n    const images = displaySets[selectedDisplaySetInstanceUID]?.images\n    const sortedMetadata = Array.isArray(images)\n      ? [...images].sort((a, b) => {\n          if (a.InstanceNumber !== undefined && b.InstanceNumber !== undefined) {\n            return Number(a.InstanceNumber) - Number(b.InstanceNumber)\n          }\n          return 0 // keep original order if either is missing InstanceNumber\n        })\n      : []\n    const metadata = sortedMetadata[instanceNumber - 1]\n    const tags = getSortedTags(metadata)\n    return transformTagsToTableData(tags)\n  }, [instanceNumber, selectedDisplaySetInstanceUID, displaySets])\n\n  const filteredData = useMemo(() => {\n    if (filterValue === undefined || filterValue === '') return tableData\n\n    const searchLower = filterValue.toLowerCase()\n    const matchedKeys = new Set<string>()\n\n    const nodeMatches = (node: TableDataItem): boolean => {\n      return (\n        (node.tag?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.vr?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.keyword?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.value?.toString().toLowerCase() ?? '').includes(searchLower)\n      )\n    }\n\n    // First pass: find all matching nodes and their parent paths\n    const findMatchingPaths = (\n      node: TableDataItem,\n      parentPath: TableDataItem[] = []\n    ): TableDataItem[][] => {\n      const currentPath = [...parentPath, node]\n      let matchingPaths: TableDataItem[][] = []\n\n      if (nodeMatches(node)) {\n        matchingPaths.push(currentPath)\n      }\n\n      if (node.children != null) {\n        node.children.forEach(child => {\n          const childPaths = findMatchingPaths(child, currentPath)\n          matchingPaths = [...matchingPaths, ...childPaths]\n        })\n      }\n\n      return matchingPaths\n    }\n\n    // Find all paths that contain matches\n    const matchingPaths = tableData.flatMap(node => findMatchingPaths(node))\n\n    // Second pass: reconstruct the tree with matching paths\n    const reconstructTree = (\n      paths: TableDataItem[][],\n      level = 0\n    ): TableDataItem[] => {\n      if (paths.length === 0 || level >= paths[0].length) return []\n\n      const nodesAtLevel = new Map<string, {\n        node: TableDataItem\n        childPaths: TableDataItem[][]\n      }>()\n\n      paths.forEach(path => {\n        if (level < path.length) {\n          const node = path[level]\n          if (!nodesAtLevel.has(node.key)) {\n            nodesAtLevel.set(node.key, {\n              node: { ...node },\n              childPaths: []\n            })\n          }\n          if (level + 1 < path.length) {\n            nodesAtLevel.get(node.key)?.childPaths.push(path)\n          }\n        }\n      })\n\n      return Array.from(nodesAtLevel.values()).map(({ node, childPaths }) => {\n        matchedKeys.add(node.key)\n        const children = reconstructTree(childPaths, level + 1)\n        return children.length > 0 ? { ...node, children } : node\n      })\n    }\n\n    const filtered = reconstructTree(matchingPaths)\n    setExpandedKeys(Array.from(matchedKeys))\n\n    return filtered\n  }, [tableData, filterValue])\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div className='dicom-tag-browser'>\n      <div\n        style={{\n          width: '100%',\n          padding: '16px 20px 20px'\n        }}\n      >\n        <div style={{ display: 'flex', gap: '24px', marginBottom: '32px' }}>\n          <div style={{ flex: 1 }}>\n            <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>Series</Typography.Text>\n            <Select\n              style={{ width: '100%' }}\n              value={selectedDisplaySetInstanceUID}\n              onChange={(value) => {\n                setSelectedDisplaySetInstanceUID(value)\n                setInstanceNumber(1)\n              }}\n              optionLabelProp='label'\n              optionFilterProp='label'\n            >\n              {displaySetList.map((item) => (\n                <Option key={item.value} value={item.value} label={item.label}>\n                  <div>\n                    <div>{item.label}</div>\n                    <div\n                      style={{ fontSize: '12px', color: 'rgba(0, 0, 0, 0.45)' }}\n                    >\n                      {item.description}\n                    </div>\n                  </div>\n                </Option>\n              ))}\n            </Select>\n          </div>\n\n          {showInstanceList && (\n            <div style={{ flex: 1 }}>\n              <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>\n                Instance Number: {instanceNumber}\n              </Typography.Text>\n              <Slider\n                min={1}\n                max={displaySets[selectedDisplaySetInstanceUID]?.images.length}\n                value={instanceNumber}\n                onChange={(value) => setInstanceNumber(value)}\n                marks={instanceSliderMarks}\n                tooltip={{\n                  formatter: (value: number | undefined) => value !== undefined ? `Instance ${value}` : ''\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        <Input\n          style={{ marginBottom: '20px' }}\n          placeholder='Search DICOM tags...'\n          prefix={<SearchOutlined />}\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n        />\n\n        <Table\n          columns={columns}\n          dataSource={filteredData}\n          pagination={false}\n          expandable={{\n            expandedRowKeys: expandedKeys,\n            onExpandedRowsChange: (keys) => setExpandedKeys(keys as string[])\n          }}\n          size='small'\n          scroll={{ y: 500 }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default DicomTagBrowser\n","import { useState, useEffect } from 'react'\n\n/**\n * A hook that delays updating a value for the specified time\n * @param value The value to debounce\n * @param delay The delay time in milliseconds\n * @returns The debounced value\n * @example\n * const debouncedSearchTerm = useDebounce(searchTerm, 300)\n */\nexport const useDebounce = <T,>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Modal,\n  Row,\n  Space,\n  Badge,\n  Collapse,\n  Radio,\n  Tooltip\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  FileSearchOutlined,\n  UnorderedListOutlined,\n  UserOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport NotificationMiddleware, { NotificationMiddlewareEvents } from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\nimport { v4 as uuidv4 } from 'uuid'\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser'\nimport DicomWebManager from '../DicomWebManager'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  clients?: { [key: string]: DicomWebManager }\n  defaultClients?: { [key: string]: DicomWebManager }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface ExtendedCustomError extends CustomError {\n  source: string\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n  errorObj: ExtendedCustomError[]\n  errorCategory: string[]\n  warnings: string[]\n  serverSelectionMode: 'default' | 'custom'\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    const cachedMode = window.localStorage.getItem('slim_server_selection_mode') as 'default' | 'custom' | null\n\n    this.state = {\n      errorObj: [],\n      errorCategory: [],\n      warnings: [],\n      selectedServerUrl: cachedServerUrl ?? '',\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl),\n      serverSelectionMode: cachedMode === 'custom' && cachedServerUrl !== null && cachedServerUrl !== undefined && cachedServerUrl !== '' ? 'custom' : 'default'\n    }\n\n    const onErrorHandler = ({ source, error }: {\n      source: string\n      error: CustomError\n    }): void => {\n      this.setState(state => ({\n        ...state,\n        errorObj: [...state.errorObj, { ...error, source }],\n        errorCategory: [...state.errorCategory, error.type]\n      }))\n    }\n\n    const onWarningHandler = (warning: string): void => {\n      this.setState(state => ({\n        ...state,\n        warnings: [...state.warnings, warning]\n      }))\n    }\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnError,\n      onErrorHandler\n    )\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnWarning,\n      onWarningHandler\n    )\n  }\n\n  componentDidUpdate (prevProps: Readonly<HeaderProps>, prevState: Readonly<HeaderState>): void {\n    if (((prevState.warnings.length > 0) || (prevState.errorObj.length > 0)) && this.props.location.pathname !== prevProps.location.pathname) {\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true,\n        errorObj: [],\n        errorCategory: [],\n        warnings: []\n      })\n    }\n  }\n\n  isValidServerUrl = (url: string | null | undefined): boolean => {\n    if (url == null || url === '') {\n      return false\n    }\n    try {\n      const urlObj = new URL(url)\n      return urlObj.protocol.startsWith('http') && urlObj.pathname.length > 0\n    } catch (TypeError) {\n      return false\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleDicomTagBrowserButtonClick = (): void => {\n    const width = window.innerWidth - 200\n    Modal.info({\n      title: 'DICOM Tag Browser',\n      width,\n      content: <DicomTagBrowser\n        clients={this.props.clients ?? {}}\n        studyInstanceUID={this.props.params.studyInstanceUID ?? ''}\n               />,\n      onOk (): void {}\n    })\n  }\n\n  handleDebugButtonClick = (): void => {\n    const errorMsgs: {\n      Authentication: string[]\n      Communication: string[]\n      EncodingDecoding: string[]\n      Visualization: string[]\n    } = {\n      Authentication: [],\n      Communication: [],\n      EncodingDecoding: [],\n      Visualization: []\n    }\n\n    type ObjectKey = keyof typeof errorMsgs\n    const errorNum = this.state.errorObj.length\n\n    if (errorNum > 0) {\n      for (let i = 0; i < errorNum; i++) {\n        const category = this.state.errorCategory[i] as ObjectKey\n        errorMsgs[category].push(`${this.state.errorObj[i].message as string} (Source: ${this.state.errorObj[i].source})`)\n      }\n    }\n\n    const { Panel } = Collapse\n\n    const showErrorCount = (errcount: number): JSX.Element => (\n      <Badge count={errcount} />\n    )\n\n    const showWarningCount = (warncount: number): JSX.Element => (\n      <Badge color='green' count={warncount} />\n    )\n\n    Modal.info({\n      title: 'Debug Information\\n (Check console for more information)',\n      width: 800,\n      content: (\n        <Collapse>\n          <Panel\n            header='Communication Error'\n            key='communicationerror'\n            extra={showErrorCount(errorMsgs.Communication.length)}\n          >\n            <ol>\n              {errorMsgs.Communication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Data Encoding/Decoding error'\n            key='encodedecodeerror'\n            extra={showErrorCount(errorMsgs.EncodingDecoding.length)}\n          >\n            <ol>\n              {errorMsgs.EncodingDecoding.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Visualization error'\n            key='visualizationerror'\n            extra={showErrorCount(errorMsgs.Visualization.length)}\n          >\n            <ol>\n              {errorMsgs.Visualization.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Authentication error'\n            key='autherror'\n            extra={showErrorCount(errorMsgs.Authentication.length)}\n          >\n            <ol>\n              {errorMsgs.Authentication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Warning'\n            key='warning'\n            extra={showWarningCount(this.state.warnings.length)}\n          >\n            <ol>\n              {this.state.warnings.map(warning => (\n                <li key={uuidv4()}>{warning}</li>\n              ))}\n            </ol>\n          </Panel>\n        </Collapse>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  handleServerSelectionInput = (\n    event: React.FormEvent<HTMLInputElement>\n  ): void => {\n    const value = event.currentTarget.value\n    this.setState({\n      selectedServerUrl: value,\n      isServerSelectionDisabled: !this.isValidServerUrl(value)\n    })\n  }\n\n  handleServerSelectionCancellation = (): void => {\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    this.setState({\n      serverSelectionMode: cachedServerUrl !== null && cachedServerUrl !== undefined && cachedServerUrl !== '' ? 'custom' : 'default',\n      selectedServerUrl: cachedServerUrl ?? undefined,\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl)\n    })\n  }\n\n  handleServerSelectionModeChange = (e: any): void => {\n    const mode = e.target.value\n    this.setState({ serverSelectionMode: mode })\n  }\n\n  handleServerSelection = (): void => {\n    window.localStorage.setItem('slim_server_selection_mode', this.state.serverSelectionMode)\n\n    if (this.state.serverSelectionMode === 'default') {\n      this.props.onServerSelection({ url: '' })\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: false\n      })\n      return\n    }\n\n    const url = this.state.selectedServerUrl\n    let closeModal = false\n    if (url != null && url !== '') {\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        this.props.onServerSelection({ url })\n        closeModal = true\n      }\n    }\n    this.setState({\n      isServerSelectionModalVisible: !closeModal,\n      isServerSelectionDisabled: !closeModal\n    })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = { items: userMenuItems }\n      user = (\n        <Dropdown menu={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    const debugButton = (\n      <Badge count={this.state.errorObj.length} style={{ zIndex: 1000 }}>\n        <Badge color='green' count={this.state.warnings.length} style={{ zIndex: 1001 }}>\n          <Button\n            icon={SettingOutlined}\n            tooltip='Debug info'\n            onClick={this.handleDebugButtonClick}\n          />\n        </Badge>\n      </Badge>\n    )\n\n    const showDicomTagBrowser = this.props.location.pathname.includes('/studies/')\n\n    const dicomTagBrowserButton = showDicomTagBrowser\n      ? (\n        <Button\n          icon={FileSearchOutlined}\n          tooltip='Dicom Tag Browser'\n          onClick={this.handleDicomTagBrowserButtonClick}\n        />\n        )\n      : null\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    const selectedServerUrl = this.state.serverSelectionMode === 'custom'\n      ? this.state.selectedServerUrl\n      : this.props.clients?.default?.baseURL ?? this.props.defaultClients?.default?.baseURL\n\n    const urlInfo = selectedServerUrl != null && selectedServerUrl !== ''\n      ? (\n        <Tooltip title={selectedServerUrl}>\n          <div\n            style={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap',\n              paddingRight: '20px',\n              paddingLeft: '20px'\n            }}\n            title={selectedServerUrl}\n          >\n            {selectedServerUrl}\n          </div>\n        </Tooltip>\n        )\n      : null\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row style={{ flexWrap: 'nowrap' }}>\n            <Col style={{ flexShrink: 0 }}>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' style={{ minWidth: 0, overflow: 'hidden' }}>\n              <div style={{ width: '100%', overflow: 'hidden' }}>\n                {this.props.showServerSelectionButton ? urlInfo : ''}\n              </div>\n            </Col>\n            <Col style={{ flexShrink: 0 }}>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {debugButton}\n                {dicomTagBrowserButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          open={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={this.handleServerSelection}\n          onCancel={this.handleServerSelectionCancellation}\n        >\n          <Radio.Group\n            value={this.state.serverSelectionMode}\n            onChange={this.handleServerSelectionModeChange}\n            style={{ marginBottom: '16px' }}\n          >\n            <Radio value='default'>Use default server</Radio>\n            <Radio value='custom'>Use custom server</Radio>\n          </Radio.Group>\n\n          {this.state.serverSelectionMode === 'custom' && (\n            <Tooltip title={this.state.selectedServerUrl}>\n              <Input\n                placeholder='Enter base URL of DICOMweb Study Service'\n                value={this.state.selectedServerUrl}\n                onChange={this.handleServerSelectionInput}\n                onPressEnter={this.handleServerSelection}\n                addonAfter={\n                this.state.isServerSelectionDisabled\n                  ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                  : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n            </Tooltip>\n          )}\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { Button, Input, Space, Table, TablePaginationConfig } from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'An error occured. Search for studies failed.'\n          )\n        )\n      })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick = (event: React.SyntheticEvent, study: dmv.metadata.Study): void => {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData = ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void => {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Request to search for studies failed.'\n          )\n        )\n      })\n  }\n\n  handleChange = (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void => {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null && filters[dataIndex] !== undefined) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  getRowKey = (record: dmv.metadata.Study): string => {\n    return record.StudyInstanceUID\n  }\n\n  handleRowProps = (record: dmv.metadata.Study): object => {\n    return {\n      onClick: (event: React.SyntheticEvent): void => {\n        return this.handleClick(event, record)\n      }\n    }\n  }\n\n  handlePressEnter = (selectedKeys: React.Key[], confirm: (params?: FilterConfirmProps) => void, dataIndex: string): void => {\n    this.handleSearch(selectedKeys, confirm, dataIndex)\n  }\n\n  handleInputChange = (e: React.ChangeEvent<HTMLInputElement>, setSelectedKeys: (selectedKeys: React.Key[]) => void): void => {\n    setSelectedKeys(e.target.value !== undefined ? [e.target.value] : [])\n  }\n\n  getFilterInputChangeHandler = (setSelectedKeys: (selectedKeys: React.Key[]) => void) => {\n    return (e: React.ChangeEvent<HTMLInputElement>) => this.handleInputChange(e, setSelectedKeys)\n  }\n\n  getFilterPressEnterHandler = (selectedKeys: React.Key[], confirm: (params?: FilterConfirmProps) => void, dataIndex: string) => {\n    return () => this.handlePressEnter(selectedKeys, confirm, dataIndex)\n  }\n\n  getFilterSearchHandler = (selectedKeys: React.Key[], confirm: (params?: FilterConfirmProps) => void, dataIndex: string) => {\n    return () => this.handleSearch(selectedKeys, confirm, dataIndex)\n  }\n\n  getFilterResetHandler = (clearFilters: () => void) => {\n    return () => this.handleReset(clearFilters)\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={this.getRowKey}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={this.handleRowProps}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => {\n    return {\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n        setSelectedKeys: (selectedKeys: React.Key[]) => void\n        selectedKeys: React.Key[]\n        confirm: (params?: FilterConfirmProps) => void\n        clearFilters: () => void\n      }) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            placeholder='Search'\n            value={selectedKeys[0]}\n            onChange={this.getFilterInputChangeHandler(setSelectedKeys)}\n            onPressEnter={this.getFilterPressEnterHandler(selectedKeys, confirm, dataIndex)}\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\n          />\n          <Space>\n            <Button\n              type='primary'\n              onClick={this.getFilterSearchHandler(selectedKeys, confirm, dataIndex)}\n              icon={<SearchOutlined />}\n              size='small'\n              style={{ width: 90 }}\n            >\n              Search\n            </Button>\n            <Button\n              onClick={this.getFilterResetHandler(clearFilters)}\n              size='small'\n              style={{ width: 90 }}\n            >\n              Reset\n            </Button>\n          </Space>\n        </div>\n      ),\n      filterIcon: (filtered: boolean) => (\n        <SearchOutlined\n          style={{ color: filtered ? '#1890ff' : undefined }}\n        />\n      )\n    }\n  }\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\nimport NotificationMiddleware,\n{ NotificationMiddlewareContext } from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nconst createUser = (userData: UserData | null): User => {\n  let profile\n  if (userData !== null) {\n    profile = userData.profile\n  }\n\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.AUTH,\n        new CustomError(\n          errorTypes.AUTHENTICATION,\n          'Failed to obtain user \"name\" and \"email\".'\n        )\n      )\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.AUTH,\n      new CustomError(\n        errorTypes.AUTHENTICATION,\n        'Failed to obtain user profile.'\n      )\n    )\n  }\n  return {\n    name: undefined,\n    email: undefined\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData === undefined || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string|undefined> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null && userData !== undefined) {\n        return userData.access_token\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user profile.'\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null || userData === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user information.'\n          )\n        )\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\nimport DicomMetadataStore, { Instance } from './services/DICOMMetadataStore'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'At least one server needs to be configured.'\n          )\n        )\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Either path or full URL needs to be configured for server.'\n          )\n        )\n      }\n\n      const hasHttpsUrl = (url?: string): boolean => url?.startsWith('https') ?? false\n\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n\n      const shouldUpgradeInsecure = serverSettings.upgradeInsecureRequests === true && [\n        serviceUrl,\n        serverSettings.qidoPathPrefix,\n        serverSettings.wadoPathPrefix,\n        serverSettings.stowPathPrefix\n      ].some(hasHttpsUrl)\n\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n\n      if (shouldUpgradeInsecure) {\n        clientSettings.headers = {\n          ...clientSettings.headers,\n          'Content-Security-Policy': 'upgrade-insecure-requests'\n        }\n      }\n\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one store is supported for now.'\n        )\n      )\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const studySummaryMetadata = await this.stores[0].client.retrieveStudyMetadata(options)\n    const naturalized = naturalizeDataset(studySummaryMetadata)\n    DicomMetadataStore.addStudy(naturalized)\n    return studySummaryMetadata\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const seriesSummaryMetadata = await this.stores[0].client.retrieveSeriesMetadata(options)\n    const naturalized = seriesSummaryMetadata.map(naturalizeDataset)\n    DicomMetadataStore.addSeriesMetadata(naturalized, true)\n    return seriesSummaryMetadata\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    const instance = await this.stores[0].client.retrieveInstance(options)\n    const data = dcmjs.data.DicomMessage.readFile(instance)\n    const { dataset } = dmv.metadata.formatMetadata(data.dict)\n    DicomMetadataStore.addInstances([dataset as Instance])\n    return instance\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\nimport { ValidationProvider } from './contexts/ValidationContext'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <ValidationProvider clients={clients} studyInstanceUID={studyInstanceUID}>\n      <CaseViewer\n        clients={clients}\n        user={user}\n        annotations={config.annotations}\n        preload={preload}\n        app={app}\n        enableAnnotationTools={enableAnnotationTools}\n        studyInstanceUID={studyInstanceUID}\n      />\n    </ValidationProvider>\n  )\n}\n\nfunction _createClientMapping ({ baseUri, gcpBaseUrl, settings, onError }: {\n  baseUri: string\n  gcpBaseUrl: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      if (window.location.pathname.includes('/projects/')) {\n        const pathname = window.location.pathname.split('/study/')[0]\n        const pathUrl = `${gcpBaseUrl}${pathname}/dicomWeb`\n        serverSettings.url = pathUrl\n      }\n\n      storageClassMapping.default += 1\n      clientMapping.default = new DicomWebManager({\n        baseUri,\n        settings: [serverSettings],\n        onError\n      })\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.COMMUNICATION,\n        'Only one default server can be configured without specification ' +\n        'of storage classes.'\n      )\n    )\n  }\n\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one configured server can specify a given storage class. ' +\n          `Storage class \"${key}\" is specified by more than one ` +\n          'of the configured servers.'\n        )\n      )\n    }\n  }\n\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n  }\n\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  defaultClients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'User is not authorized to access DICOMweb resources.')\n      )\n    }\n\n    const logServerError = (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'An unexpected server error occured.'\n        )\n      )\n    }\n\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          logServerError()\n        }\n      })\n    } else if (error.status === 500) {\n      logServerError()\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'One server needs to be configured.')\n      )\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n    this.addGcpSecondaryAnnotationServer(props.config)\n\n    const defaultClients = _createClientMapping({\n      baseUri,\n      gcpBaseUrl: props.config.gcpBaseUrl ?? 'https://healthcare.googleapis.com/v1',\n      settings: props.config.servers,\n      onError: this.handleDICOMwebError\n    })\n\n    this.state = {\n      clients: defaultClients,\n      defaultClients,\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  addGcpSecondaryAnnotationServer (config: AppProps['config']): void {\n    const serverId = 'gcp_secondary_annotation_server'\n    const urlParams = new URLSearchParams(window.location.search)\n    const url = urlParams.get('gcp')\n    const gcpSecondaryAnnotationServer = config.servers.find(\n      (server) => server.id === serverId\n    )\n    if (gcpSecondaryAnnotationServer === undefined && typeof url === 'string') {\n      config.servers.push({\n        id: serverId,\n        write: true,\n        url,\n        storageClasses: [\n          StorageClasses.COMPREHENSIVE_SR,\n          StorageClasses.COMPREHENSIVE_3D_SR,\n          StorageClasses.SEGMENTATION,\n          StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION,\n          StorageClasses.PARAMETRIC_MAP,\n          StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE,\n          StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n        ]\n      })\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    if (url === '' || window.localStorage.getItem('slim_server_selection_mode') === 'default') {\n      this.setState({ clients: this.state.defaultClients })\n      return\n    }\n    window.localStorage.setItem('slim_selected_server', url)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath !== null && storedPath !== '') {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch !== null && storedSearch !== '') {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Could not sign-in user.')\n        )\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path === null || path === undefined || path === '') {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n\n    // Restore cached server selection if it exists\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    if (cachedServerUrl !== null && cachedServerUrl !== undefined && cachedServerUrl !== '') {\n      this.handleServerSelection({ url: cachedServerUrl })\n    }\n\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n              clients={this.state.clients}\n              defaultClients={this.state.defaultClients}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/projects/:project/locations/:location/datasets/:dataset/dicomStores/:dicomStore/study/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","PatientID","PatientName","PatientSex","PatientBirthDate","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","errorTypes","CustomError","type","message","stack","Error","_subscriptions","Symbol","_lastSubscriptionId","PubSub","eventName","callback","hasOwnProperty","subscriptionId","callbacks","payload","NotificationMiddlewareEvents","NotificationMiddlewareContext","NotificationType","NotificationSourceDefinition","sources","category","notificationType","outerContext","args","publish","Array","from","warn","console","JSON","stringify","arguments","includes","apply","prototype","slice","call","source","error","notificationMsg","errorCategory","find","s","String","notification","description","duration","ImageFlavors","hasImageFlavor","image","imageFlavor","ImageType","areSameAcquisition","refImage","AcquisitionUID","Slide","options","acquisitionUID","frameOfReferenceUID","containerIdentifier","seriesInstanceUIDs","opticalPathIdentifiers","pyramidUIDs","areVolumeImagesMonochrome","volumeImages","labelImages","overviewImages","images","length","NotificationMiddleware","Set","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","forEach","add","ContainerIdentifier","SeriesInstanceUID","OpticalPathSequence","OpticalPathIdentifier","THUMBNAIL","FrameOfReferenceUID","PyramidUID","Object","keys","identifier","samplesPerPixel","SamplesPerPixel","filter","requirePyramidUID","PhotometricInterpretation","createSlides","slideMetadata","series","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","findIndex","slide","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","sort","a","b","imgA","imgB","Number","fetchImageMetadata","clients","studyInstanceUID","onSuccess","onError","info","client","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","searchForSeries","queryParams","Modality","StudyInstanceUID","matchedSeries","Promise","all","dmv","dataset","loadingSeries","retrieveSeriesMetadata","seriesInstanceUID","retrievedMetadata","seriesImages","Value","newSlides","customError","slidesCache","Map","pendingRequests","cacheTimestamps","cleanupExpiredCache","now","Date","entries","key","delete","useSlides","useState","setSlides","isLoading","setIsLoading","setError","useEffect","cachedData","get","fetchSlides","pendingRequest","resolve","reject","set","err","catch","cachedEntries","lastCachedSlides","result","useMemo","ValidationContext","createContext","globalValidationContext","ValidationProvider","isDialogVisible","setIsDialogVisible","currentValidationResult","setCurrentValidationResult","memoizedSlides","slidesInfo","slidesLength","hasSlides","isNaN","showValidationDialog","useCallback","validateMultiResolutionPyramid","isValid","validateAnnotationGroupAssociation","annotationGroup","some","volumeImage","SOPInstanceUID","referencedSOPInstanceUID","runValidations","dialog","context","pyramidValidation","associationValidation","setGlobalValidationContext","handleDialogClose","Provider","open","onCancel","onOk","charAt","toUpperCase","okText","cancelButtonProps","style","display","warning","getModalType","iconColor","iconSize","position","top","right","show","setShow","tooltipText","setTooltipText","useContext","useValidation","validationResult","zIndex","pointerEvents","color","fontSize","textShadow","state","overviewViewportRef","overviewViewer","setState","current","innerHTML","disableInteractions","resizeFactor","errorInterceptor","render","container","resize","height","ref","textAlign","alignItems","justifyContent","letterSpacing","selectedSeriesInstanceUID","onSeriesSelection","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","keyPath","domEvent","toString","mode","inlineIndent","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","findContentItemsByName","content","concept","ConceptNameCodeSequence","CodeValue","CodingSchemeDesignator","hasName","adaptRoiToAnnotation","roi","evaluations","CodeMeaning","nameValue","ValueType","dcmjs","ConceptCodeSequence","isVisible","isOkDisabled","okButtonProps","disabled","align","direction","maskClosable","footer","validXCoordinateRange","validYCoordinateRange","isSelectedXCoordinateValid","isSelectedYCoordinateValid","isSelectedMagnificationValid","onXCoordinateSelection","onYCoordinateSelection","onMagnificationSelection","placeholder","prefix","onChange","onPressEnter","event","target","controls","addonAfter","CheckOutlined","StopOutlined","isAnnotationModalVisible","onAnnotationConfigurationCompletion","onAnnotationConfigurationCancellation","isAnnotationOkDisabled","annotationConfigurations","isSelectedRoiModalVisible","onRoiSelectionCancellation","selectedRoiInformation","isGoToModalVisible","onSlidePositionSelection","onSlidePositionSelectionCancellation","isReportModalVisible","onReportVerification","onReportCancellation","report","handleOpacityChange","bind","handleColorRChange","handleColorGChange","handleColorBChange","getCurrentColor","currentStyle","opacity","defaultStyle","contourOnly","annotationGroupsUIDs","onStyleChange","styleOptions","updateCurrentStyle","isArray","values","colorSettings","plain","justify","gutter","range","min","max","step","handleShowOutlineOnly","checked","checkedAnnotationUids","defaultAnnotationStyles","types","checkAll","every","uids","has","indeterminate","handleChangeCheckedType","roiUID","paddingLeft","e","mouseEnterDelay","placement","overlayStyle","reduce","acc","shape","marginLeft","SettingOutlined","shortenedCodeMeaning","displayCodeMeaning","isChecked","indeterminateType","flexDirection","annotations","categories","categoriesAcc","annotation","categoryKey","typeKey","oldCategory","oldType","typesArr","getCategories","labelViewportRef","labelViewer","openSubMenuItems","specimenMenu","iccProfilesMenu","equipmentMenu","opticalPathMenu","presentationStateMenu","annotationMenuItems","annotationGroupMenu","segmentationMenu","parametricMapMenu","visibleRoiUIDs","onAnnotationVisibilityChange","onRoiStyleChange","handleMenuOpenChange","setTimeout","reverseArrow","borderLeft","borderLeftWidth","overflow","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","toolbar","toolbarHeight","cursor","volumeViewportRef","buildKey","codingScheme","codeValue","getRoiKey","matches","meaning","schemeDesignator","finding","areROIsEqual","scoord3d","graphicType","graphicData","s1","s2","toPrecision","j","formatRoiStyle","stroke","fill","circle","radius","Math","constructViewers","preload","volumeViewer","clientMapping","activateSelectInteraction","orientation","implementsTID1500","templateSeq","ContentTemplateSequence","TemplateIdentifier","describesSpecimenSubject","ContentSequence","subjectClassValue","retrievedConcept","expectedConcept","equals","containsROIAnnotations","measurements","measurementGroups","foundRegion","group","regions","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","DEFAULT_ANNOTATION_STROKE_COLOR","DEFAULT_ANNOTATION_COLOR_PALETTE","handleVisibilityChange","onVisibilityChange","otherProps","nameMeaning","valueMeaning","textContentItem","TextValue","seq","MeasuredValueSequence","NumericValue","unit","MeasurementUnitsCodeSequence","checkedChildren","unCheckedChildren","handleMenuItemSelection","rois","object","onSelection","paddingTop","paddingBottom","selectedRoiUIDs","onClick","AnnotationGroupControls","settings","AnnotationGroupBadgeDescription","isBadgeVisible","handleKeyDown","preventDefault","onKeyDown","tabIndex","role","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","padding","annotationGroupUID","handleAnnotationGroupClick","onAnnotationGroupClick","handleMeasurementSelection","limitValues","option","codeComponents","measurement","windowSettings","explorationSettings","AnnotationGroupSequence","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","AnnotationCoordinateType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","dropdownMatchSelectWidth","handleLowerLimitChange","handleLimitChange","handleUpperLimitChange","minWidth","defaultValue","annotationGroups","onAnnotationGroupVisibilityChange","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupStyleChange","hasValueType","valueType","getROIs","measurementsItem","measurementGroupItems","observerType","trackingUIDItem","algorithmNameItem","algorithmVersionItem","regionItem","ReferencedFrameOfReferenceUID","coordinates","GraphicData","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","containerAttrs","specimenAttrs","observerAttrs","id","attrs","xPosition","yPosition","left","backgroundColor","minHeight","attr","roiUid","user","app","SpecimenDescriptionSequence","observer","refSpecimen","debug","sr","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","generatedReport","evidence","data","seriesNumber","seriesDescription","sopInstanceUID","instanceNumber","manufacturer","previousVersions","subscribe","_broadcastEvent","_unsubscribe","_isValidEvent","listenerId","subscription","listeners","unsubscribe","EVENTS","callbackProps","hasListeners","hasCallbacks","listener","defaultInstances","instances","instancesMap","SeriesNumber","SeriesDescription","SeriesDate","SeriesTime","addInstance","newInstance","addInstances","newInstances","len","instance","getInstance","StudyDescription","NumInstances","ModalitiesInStudy","isLoaded","addInstanceToSeries","addInstancesToSeries","createSeriesMetadata","setSeriesMetadata","seriesMetadata","existingSeries","assign","STUDY_ADDED","INSTANCES_ADDED","SERIES_ADDED","SERIES_UPDATED","_model","studies","_getStudy","aStudy","_getSeries","study","aSeries","BaseImplementation","dicomJSONDatasetOrP10ArrayBuffer","dicomJSONDataset","naturalizedDataset","ArrayBuffer","dict","createStudyMetadata","madeInClient","updateSeriesMetadata","addSeriesMetadata","seriesSummaryMetadata","NumberOfStudyRelatedSeries","addStudy","existingStudy","newStudy","getStudyInstanceUIDs","getStudy","getSeries","getInstanceByImageId","imageId","updateMetadataForSeries","pubSubServiceInterface","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","specimenDescription","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","showstain","overflowY","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","handleRemoval","getCurrentColors","paletteColorLookupTable","previousProps","previousState","opticalPath","opticalPathIdentifier","rgb2hex","onRemoval","illuminationWaveLength","illuminationColor","specimenDescriptions","maxValue","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","opticalPathItem","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","allowClear","AppstoreAddOutlined","segmentUID","segment","algorithmName","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","mappingUID","mapping","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","handleClick","text","button","Icon","isSelected","tooltip","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","hoveredRois","lastPixel","keysDown","defaultRoiStyle","roiStyles","selectionStrokeColor","selectionFillColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","then","matchedInstances","rawInstance","retrieveInstance","retrievedInstance","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","selectedPresentationStateUID","setPresentationState","presentationStates","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","activateOpticalPath","showOpticalPath","searchParams","URLSearchParams","search","pathname","replace","getRoiStyle","loadDerivedDataset","derivedDataset","SOPClassUID","getAllROIs","handleAnnotationVisibilityChange","getAllAnnotationGroups","handleAnnotationGroupVisibilityChange","getAllSegments","handleSegmentVisibilityChange","getAllParameterMappings","parameterMapping","handleMappingVisibilityChange","handleOpticalPathVisibilityChange","addAnnotationGroups","MICROSCOPY_BULK_SIMPLE_ANNOTATION","ann","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","forceUpdate","addSegmentations","SEGMENTATION","segmentations","seg","addSegments","addParametricMaps","PARAMETRIC_MAP","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","addAnnotations","onRoiModified","onWindowResize","onRoiDrawn","detail","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","addROI","onRoiDoubleClicked","setHoveredRoiAttributes","r","hoveredRoiAttributes","clearHoveredRois","getUniqueHoveredRois","newRoi","allRois","isSamePixelAsLast","clientX","clientY","onPointerMove","hoveredRoi","feature","originalEvent","isHoveredRoiTooltipVisible","hoveredRoiTooltipX","hoveredRoiTooltipY","getUpdatedSelectedRois","newSelectedRoiUid","selectedRoiUid","emptySelection","selectedRoi","getROI","oldSelectedRois","resetUnselectedRoiStyles","selectionState","setROIStyle","onMapClicked","updatedSelectedRois","clearSelections","onRoiSelected","handleAnnotationSelection","handleRoiSelectionCancellation","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingError","onLoadingError","onFrameLoadingEnded","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","componentCleanup","document","body","removeEventListener","onKeyUp","window","cleanup","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","componentWillUnmount","componentSetup","addEventListener","componentDidMount","hasICCProfile","metadataItem","ICCProfile","bulkdataReferences","handleAnnotationGeometryTypeSelection","_option","selectedGeometryType","handleAnnotationMeasurementActivation","selectedMarkup","handleAnnotationEvaluationSelection","filteredEvaluations","handleAnnotationEvaluationClearance","handleXCoordinateSelection","x","selectedXCoordinate","handleYCoordinateSelection","y","selectedYCoordinate","handleMagnificationSelection","magnification","selectedMagnification","handleSlidePositionSelection","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","point","handleSlidePositionSelectionCancellation","handleAnnotationConfigurationCompletion","geometryType","markup","activateDrawInteraction","handleAnnotationConfigurationCancellation","getOpticalPathMetadata","prevState","generateReport","handleReportVerification","COMPREHENSIVE_3D_SR","storeInstances","datasets","write","handleReportCancellation","ag","log","showAnnotationGroup","hideAnnotationGroup","handleAnnotationGroupStyleChange","generateRoiStyle","strokeColor","fillColor","c","handleRoiStyleChange","showSegment","hideSegment","handleSegmentStyleChange","setSegmentStyle","showParameterMapping","hideParameterMapping","handleMappingStyleChange","setParameterMappingStyle","handleOpticalPathStyleChange","handleOpticalPathActivityChange","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","handlePresentationStateReset","urlPath","handlePresentationStateSelection","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areRoisHidden","showROIs","hideROIs","zoomToROI","handleAnnotationGroupSelection","getSeriesDescription","DicomMetadataStore","handleICCProfilesToggle","isICCProfilesEnabled","toggleICCProfiles","formatAnnotation","getDataFromViewer","allAnnotationGroups","filteredAnnotationGroups","referencedSeriesInstanceUID","getReport","getAnnotationMenuItems","getFindingOptions","getAnnotationConfigurations","geometryTypeOptionsMapping","getGeometryTypeOptionsMapping","handleAnnotationFindingSelection","defaultActiveFirstOption","onClear","getSpecimenMenu","getEquipmentMenu","getOpticalPathMenu","opticalPathMetadata","getPresentationStateMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","getSegmentationMenu","segmentMetadata","getSegmentStyle","getSegmentMetadata","getParametricMapMenu","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","getAnnotationGroupMenu","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","annotationGroupsBySeries","seriesUID","dropdownOptions","selectedSeriesAnnotationGroups","paddingRight","getToolbar","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","getCursor","getSelectedRoiInformation","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","getICCProfilesMenu","getICCProfiles","margin","getOpenSubMenuItems","hasSider","geometryTypes","boundingBox","isOpticalPathVisible","isOpticalPathActive","otherROI","roiAsAnnotation","box","polygon","line","freehandpolygon","freehandline","naturalizeDataset","findSeriesSlide","ParametrizedSlideViewer","selectedSlide","setSelectedSlide","setDerivedDataset","seriesSlide","findReferencedSlide","allClients","storageClass","naturalizedSeriesMetadata","ReferencedSeriesSequence","referencedSlide","imageLibrary","contentItem","presentationStateUID","stateParam","viewer","volumeInstances","clinicalTrialMenu","seriesFragment","borderRight","borderRightWidth","path","element","DicomMetaDictionary","formatValue","val","getRows","depth","keywords","flatMap","keyword","tagInfo","nameMap","match","tag","vr","sequenceItems","sequenceNode","getSortedTags","setStudy","displaySets","setDisplaySets","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","expandedKeys","setExpandedKeys","searchInput","setSearchInput","debouncedSearchValue","delay","debouncedValue","setDebouncedValue","timer","clearTimeout","useDebounce","handler","seriesAddedSubscription","instancesAddedSubscription","derivedDisplaySets","processedSeries","ds","displaySetInstanceUID","displaySetList","displaySet","displayDate","dateStr","hour","minute","second","monthNum","parseInt","dayNum","date","getMonth","getDate","weekday","toLocaleDateString","monthName","dayFormatted","yearNum","getFullYear","formatDicomDate","showInstanceList","instanceSliderMarks","totalInstances","tableData","transformTagsToTableData","tags","parentKey","keyBase","currentKey","InstanceNumber","filteredData","searchLower","toLowerCase","matchedKeys","nodeMatches","node","findMatchingPaths","parentPath","currentPath","matchingPaths","child","childPaths","filtered","reconstructTree","paths","nodesAtLevel","className","gap","marginBottom","flex","strong","optionLabelProp","optionFilterProp","marks","formatter","SearchOutlined","columns","dataIndex","dataSource","pagination","expandable","expandedRowKeys","onExpandedRowsChange","scroll","isValidServerUrl","url","urlObj","URL","protocol","startsWith","TypeError","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleDicomTagBrowserButtonClick","innerWidth","handleDebugButtonClick","errorMsgs","Authentication","Communication","EncodingDecoding","Visualization","errorNum","errorObj","warncount","Panel","Collapse","showErrorCount","errcount","uuidv4","warnings","handleServerSelectionButtonClick","isServerSelectionModalVisible","handleServerSelectionInput","currentTarget","selectedServerUrl","isServerSelectionDisabled","handleServerSelectionCancellation","cachedServerUrl","localStorage","getItem","serverSelectionMode","handleServerSelectionModeChange","handleServerSelection","setItem","onServerSelection","closeModal","cachedMode","prevProps","worklistButton","userMenuItems","onUserLogout","userMenu","menu","trigger","UserOutlined","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","debugButton","dicomTagBrowserButton","FileSearchOutlined","showServerSelectionButton","ApiOutlined","default","baseURL","defaultClients","urlInfo","textOverflow","flexWrap","flexShrink","src","process","alt","subTitle","defaultPageSize","fetchData","limit","searchCriteria","fuzzymatching","searchOptions","searchForStudies","handleChange","filters","pageSize","handleSearch","confirm","handleReset","clearFilters","getRowKey","record","handleRowProps","handlePressEnter","handleInputChange","setSelectedKeys","getFilterInputChangeHandler","getFilterPressEnterHandler","getFilterSearchHandler","getFilterResetHandler","getColumnSearchProps","filterDropdown","filterIcon","numStudies","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","status","errorMessage","attemptFailedError","DicomWebManager","stores","handleError","updateHeaders","fields","f","headers","retrieveStudyMetadata","studySummaryMetadata","naturalized","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","shouldUpgradeInsecure","upgradeInsecureRequests","qidoPathPrefix","wadoPathPrefix","stowPathPrefix","qidoURLPrefix","wadoURLPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","read","dwc","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","auth","handleDICOMwebError","logServerError","errorMessages","setting","Authorization","storedPath","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","addGcpSecondaryAnnotationServer","gcpBaseUrl","storageClassMapping","storageClasses","pathUrl","server","_createClientMapping","wasAuthSuccessful","serverId","COMPREHENSIVE_SR","COLOR_SOFTCOPY_PRESENTATION_STATE","GRAYSCALE_SOFTCOPY_PRESENTATION_STATE","PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE","tmpClient","redirectTo","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}