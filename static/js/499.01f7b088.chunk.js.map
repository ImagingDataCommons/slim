{"version":3,"file":"static/js/499.01f7b088.chunk.js","mappings":"qTA4BMA,EAAW,qGAqDd,OArDc,8BACf,WACE,IAAIC,EAAoC,aACpCC,EAAkB,YAEWC,IAA7BC,KAAKC,MAAMC,eAA+BF,KAAKC,MAAMC,gBACvDL,EAAS,WACTC,EAAkB,QAEpB,IAAMK,EAAQH,KAAKC,MAAMG,WAAWC,KAAI,SAACC,EAAiBC,GACxD,IAAMC,GAAMC,EAAAA,EAAAA,KACZ,OACE,SAAC,SAAiB,CAEhBC,MAAOJ,EAAKK,KACZC,WAAY,CACVC,WAAYf,GAEdgB,aAAc,CACZC,WAAY,IACZC,WAAY,WACZH,WAjBkB,QAmBpBI,KAAM,EAAE,SAEPX,EAAKY,OAZDV,EAeX,IACIW,EAAO,KAIX,YAHwBpB,IAApBC,KAAKC,MAAMkB,OACbA,GAAO,cAAMlB,MAAMkB,KAAI,MAGvB,UAAC,IAAI,CACHC,MAAOpB,KAAKC,MAAMoB,OAClBC,MAAOH,EACPI,KAAK,QACLC,UAAWxB,KAAKC,MAAMwB,WACtBC,cAAgC3B,IAAtBC,KAAKC,MAAMoB,OACrBM,QAAS3B,KAAKC,MAAM2B,QAAQ,WAE5B,SAAC,IAAY,CACXC,OAAQ,EACRN,KAAK,QACL1B,OAAQA,EACR6B,UAAU,EAAM,SAEfvB,IAEFH,KAAKC,MAAM6B,WAGlB,KAAC,EArDc,CAASC,EAAAA,WAwD1B,UC/BA,QAxCmB,qGAqChB,OArCgB,8BACjB,WACE,IAAM3B,EAAa,GAkCnB,OAjCoD,MAAhDJ,KAAKC,MAAM+B,SAASC,0BAEtB7B,EAAW8B,KAAI,MAAf9B,EACK,CACD,CACEO,KAAM,eACNO,MAAOlB,KAAKC,MAAM+B,SAASC,0BAE7B,CACEtB,KAAM,cACNO,MAAOlB,KAAKC,MAAM+B,SAASG,yBAE7B,CACExB,KAAM,gBACNO,MAAOlB,KAAKC,MAAM+B,SAASI,2BAE7B,CACEzB,KAAM,YACNO,MAAOlB,KAAKC,MAAM+B,SAASK,yBAKiB,MAAhDrC,KAAKC,MAAM+B,SAASM,0BAEtBlC,EAAW8B,KACT,CACEvB,KAAM,gBACNO,MAAOlB,KAAKC,MAAM+B,SAASM,4BAK1B,SAAC,EAAW,CAAClC,WAAYA,GAClC,KAAC,EArCgB,CAAS2B,EAAAA,WCX5B,SAASQ,EAAWrB,GAClB,MAAqB,kBAAVA,GAAgC,OAAVA,QAA4BnB,IAAVmB,QACxBnB,IAArBmB,EAAMsB,WACDtB,EAAMsB,WAAWC,MAAM,KAAKC,KAAK,KAIrC,EACT,CAEA,SAASC,EAAWzB,GAClB,GAAc,OAAVA,QAA4BnB,IAAVmB,EAAqB,CACzC,IAAM0B,EAAO1B,EAAM2B,UAAU,EAAG,GAC1BC,EAAQ5B,EAAM2B,UAAU,EAAG,GAC3BE,EAAM7B,EAAM2B,UAAU,EAAG,GAC/B,MAAM,GAAN,OAAUD,EAAI,YAAIE,EAAK,YAAIC,EAC7B,CACA,MAAO,EACT,CAEA,SAASC,EAAW9B,GAClB,GAAc,OAAVA,QAA4BnB,IAAVmB,EAAqB,CACzC,IAAM+B,EAAQ/B,EAAM2B,UAAU,EAAG,GAC3BK,EAAUhC,EAAM2B,UAAU,EAAG,GAC7BM,EAAUjC,EAAM2B,UAAU,EAAG,GACnC,MAAM,GAAN,OAAUI,EAAK,YAAIC,EAAO,YAAIC,EAChC,CACA,MAAO,EACT,CAeA,SAASC,EAAUlC,GAMjB,OAAc,OAAVA,QAA4BnB,IAAVmB,EALiB,CACrCmC,EAAG,SACHC,EAAG,OACHC,EAAG,SAGQrC,GAEN,EACT,CCdA,QA1Ba,qGAuBV,OAvBU,8BACX,WACE,IAAMd,EAAa,CACjB,CACEO,KAAM,KACNO,MAAOlB,KAAKC,MAAM+B,SAASwB,WAE7B,CACE7C,KAAM,OACNO,MAAOqB,EAAUvC,KAAKC,MAAM+B,SAASyB,cAEvC,CACE9C,KAAM,MACNO,MAAOkC,EAASpD,KAAKC,MAAM+B,SAAS0B,aAEtC,CACE/C,KAAM,YACNO,MAAOyB,EAAU3C,KAAKC,MAAM+B,SAAS2B,oBAGzC,OACE,SAAC,EAAW,CAACvD,WAAYA,GAE7B,KAAC,EAvBU,CAAS2B,EAAAA,WCuBtB,QAxBW,qGAqBR,OArBQ,8BACT,WACE,IAAM3B,EAAa,CACjB,CACEO,KAAM,cACNO,MAAOlB,KAAKC,MAAM+B,SAAS4B,iBAE7B,CACEjD,KAAM,KACNO,MAAOlB,KAAKC,MAAM+B,SAAS6B,SAE7B,CACElD,KAAM,OACNO,MAAOyB,EAAU3C,KAAKC,MAAM+B,SAAS8B,YAEvC,CACEnD,KAAM,OACNO,MAAO8B,EAAUhD,KAAKC,MAAM+B,SAAS+B,aAGzC,OAAO,SAAC,EAAW,CAAC3D,WAAYA,GAClC,KAAC,EArBQ,CAAS2B,EAAAA,W,ICdRiC,E,+BAWX,SAXWA,GAAAA,EAAc,iEAAdA,EAAc,iDAAdA,EAAc,oDAAdA,EAAc,4CAAdA,EAAc,iEAAdA,EAAc,4CAAdA,EAAc,oEAAdA,EAAc,iEAAdA,EAAc,qEAAdA,EAAc,uEAWzB,CAXWA,IAAAA,EAAc,KCC1B,IAAMC,EAAiBC,OAAO,iBACxBC,EAAsBD,OAAO,sBAOdE,EAAM,WACzB,cAAgB,eACdpE,KAAKiE,GAAkB,CAAC,EACxBjE,KAAKmE,GAAuB,CAC9B,CAsEC,OApED,iCAMA,SAAWE,EAAWC,GACpB,QAAkBvE,IAAdsE,EACF,MAAM,IAAIE,MAAM,8CAGlB,GAAwB,oBAAbD,EACT,MAAM,IAAIC,MAAM,4CAGbvE,KAAKiE,GAAgBO,eAAeH,KACvCrE,KAAKiE,GAAgBI,GAAa,CAAC,GAGrC,IAAMI,EAAc,aAASzE,KAAKmE,MAClCnE,KAAKiE,GAAgBI,GAAWI,GAAkBH,CACpD,GAEA,yBAMA,SAAaD,EAAWC,GACtB,IAAMI,EAAY1E,KAAKiE,GAAgBI,IAAc,CAAC,EACtD,IAAK,IAAMI,KAAkBC,EACtBJ,EAEMI,EAAUD,KAAoBH,UAChCI,EAAUD,UAFVC,EAAUD,EAKvB,GAEA,qBAMA,SAASJ,GACP,QAAkBtE,IAAdsE,EACF,MAAM,IAAIE,MAAM,yCAGqC,IAAvD,IAAMG,EAAY1E,KAAKiE,GAAgBI,IAAc,CAAC,EAAC,mBALlCM,EAAO,iCAAPA,EAAO,kBAM5B,IAAK,IAAMF,KAAkBC,EAC3BA,EAAUD,GAAe,MAAzBC,EAA6BC,EAEjC,GAEA,gCAIA,WACE,IAAK,IAAMN,KAAarE,KAAKiE,GAAiB,CAC5C,IAAMS,EAAY1E,KAAKiE,GAAgBI,GACvC,IAAK,IAAMI,KAAkBC,SACpBA,EAAUD,EAErB,CACF,KAAC,EA1EwB,G,oBCTrBG,EACY,iBADZA,EAEW,gBAFXA,EAGiB,mBAHjBA,EAIW,gBAGXC,EAAW,0CACf,WAAaC,EAAMC,GAAU,IAAD,EAIV,OAJU,gBAC1B,gBACKA,QAAUA,EACf,EAAKC,OAAQ,IAAIT,OAAQS,MACzB,EAAKF,KAAOA,EAAI,CAClB,CAAC,iBANc,EAMd,OANuBP,QCHbU,EACF,UADEA,EAEA,YAGAC,EACD,kBADCA,EAEN,0BAFMA,EAGJ,QAHIA,EAIL,OAJKA,EAKL,iBAGFC,EACG,QADHA,GAEK,UAWLC,GAA+B,CACnCC,QAAS,CACP,CACEC,SAAUV,EACVW,iBAAkBJ,GAEpB,CACEG,SAAUV,EACVW,iBAAkBJ,GAEpB,CACEG,SAAUV,EACVW,iBAAkBJ,GAEpB,CACEG,SAAUV,EACVW,iBAAkBJ,IAEpB,CACEG,SAAU,UACVC,iBAAkBJ,KAoExB,aA/D4B,0CAC1B,aAAgB,IAAD,kBACb,eAEA,IAAMK,EAAe,SAACC,GACpB,EAAKC,QAAQT,EAAwCU,MAAMC,KAAKH,GAAM/C,KAAK,KAC7E,EAUI,OARH,WACC,IAAMmD,EAAOC,QAAQD,KACrBC,QAAQD,KAAO,WACRE,KAAKC,UAAUC,WAAWC,SAAS,YACtCV,EAAaS,WAEfJ,EAAKM,MAAMnG,KAAM2F,MAAMS,UAAUC,MAAMC,KAAKL,WAC9C,CACD,CARA,GAQG,CACN,CA2CC,OAzCD,+BAMA,SAASM,EAAQC,GACf,IAYIC,EAZEC,EAAgBF,EAAM1B,KAKpBS,EAJaH,GAA6BC,QAAQsB,MACxD,SAAAC,GAAC,OAAIA,EAAEtB,WAAaoB,CAAa,IAG3BnB,iBAcR,OAZAvF,KAAK0F,QAAQT,EAAsC,CACjDsB,OAAAA,EACAC,MAAAA,IAKAC,EADED,aAAiB3B,EACD2B,EAAMzB,QAEN8B,OAAOL,GAGnBjB,GACN,KAAKJ,EAEH,OADAW,QAAQU,MAAM,KAAD,OAAME,EAAa,qBAAqBF,GAC9CM,EAAAA,EAAAA,MAAmB,CACxB/B,QAAQ,GAAD,OAAK2B,EAAa,UACzBK,YAAaN,EACbO,SAAU,IAGd,KAAK7B,GACHW,QAAQU,MAAM,KAAD,OAAME,EAAa,qBAAqBF,GAK3D,KAAC,EA5DyB,CAASpC,IC8FrC,SAvHe,0CAOb,WAAanE,GAAwB,IAAD,EAEH,OAFG,gBAClC,cAAMA,IAPRgH,MAAQ,CAAEC,WAAW,GAAO,EAEXC,oBAAsBpF,EAAAA,YAAiC,EAEhEqF,oBAAc,EAIpB,EAAKA,oBAAiBrH,EAAS,CACjC,CA0GC,OA1GA,yCAED,WAEE,GADAC,KAAKqH,SAAS,CAAEH,WAAW,IACvBlH,KAAKC,MAAMqH,MAAMC,eAAeC,OAAS,EAAG,CAC9C,IAAMxF,EAAWhC,KAAKC,MAAMqH,MAAMC,eAAe,GACR,OAArCvH,KAAKmH,oBAAoBM,UAC3BzH,KAAKmH,oBAAoBM,QAAQC,UAAY,GAC7C5B,QAAQ6B,KACN,kDAAiD,WAC7C3F,EAAS4F,oBAAmB,MAElC5H,KAAKoH,eAAiB,IAAIS,EAAAA,OAAAA,oBAA+B,CACvDC,OAAQ9H,KAAKC,MAAM8H,QACjB/D,EAAegE,iCAEjBC,qBAAqB,EACrBjG,SAAAA,EACAkG,aAAc,EACdC,iBAAkB,SAAC3B,GACjB4B,GAAAA,QACElD,EACAsB,EAEJ,IAEFxG,KAAKoH,eAAeiB,OAAO,CACzBC,UAAWtI,KAAKmH,oBAAoBM,UAG1C,CAEAzH,KAAKqH,SAAS,CAAEH,WAAW,GAC7B,GAAC,oBAED,gBAC8BnH,IAAxBC,KAAKoH,gBACPpH,KAAKoH,eAAemB,SAGtB,IAAMnI,EAAa,GACb2G,EAAc/G,KAAKC,MAAMqH,MAAMP,YAQrC,OAPoB,OAAhBA,GAAwC,KAAhBA,GAC1B3G,EAAW8B,KAAK,CACdvB,KAAM,cACNO,MAAO6F,IAIP/G,KAAKiH,MAAMC,WACL,SAAC,MAAS,KAOlB,SAAC,UAAS,gBACRsB,MAAO,CAAEC,OAAQ,SAEbzI,KAAKC,OAAK,cAEd,SAAC,EAAW,CACVoB,OAAQrB,KAAKC,MAAMqH,MAAMoB,oBACzBtI,WAAYA,EACZqB,YAAU,YAEV,iBAAK+G,MAAO,CAAEG,SAAU,WAAYF,OAAQ,SAAU,UACnDzI,KAAKC,MAAMqH,MAAMC,eAAeC,OAAS,GAEtC,gBAAKoB,IAAK5I,KAAKmH,oBAAqBqB,MAAO,CAAEC,OAAQ,WAGrD,gBAAKD,MAAO,CACVC,OAAQ,OACRI,UAAW,SACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,SAAU,SACVlI,WAAY,IACZmI,MAAO,UACPC,cAAe,SACf,gBAKLnJ,KAAKC,MAAMqH,MAAM8B,aAAa5B,QAAU,IACvC,SAAC,IAAO,CAACpG,MAAM,6FAA4F,UACzG,SAAC,MAAqB,CAACoH,MAAO,CAC5BG,SAAU,WACVU,IAAK,EACLC,MAAO,EACPJ,MAAO,UACPD,SAAU,QACVM,OAAQ,EACRC,WAAY,yDAtCjBxJ,KAAKC,MAAMqH,MAAMmC,mBAAmB,GA+C/C,KAAC,EApHY,CAAS1H,EAAAA,WCmDxB,SA1De,qJAGZ,OAHY,oCACbkF,MAAQ,CACNyC,0BAA2B,EAAKzJ,MAAMyJ,2BACvC,EAoDA,OApDA,yCAED,WACE1J,KAAKC,MAAM0J,kBAAkB,CAC3BC,kBAAmB5J,KAAKiH,MAAMyC,2BAElC,GAAC,oBAED,WAGE,IAH0B,IAAD,OACnBG,EAAY7J,KAAKC,MAAM+B,SACvB8H,EAAgB,GACbC,EAAI,EAAGA,EAAIF,EAAUrC,SAAUuC,EAAG,CACzC,IAAMzC,EAAQuC,EAAUE,GAClBC,GACJ,SAAC,GAAS,CAER1C,MAAOA,EACPS,QAAS/H,KAAKC,MAAM8H,SAFfT,EAAMmC,mBAAmB,IAMlCK,EAAc5H,KAAK8H,EACrB,CAEA,IAWIC,EAMJ,YAL6ClK,IAAzCC,KAAKiH,MAAMyC,2BAC4B,OAAzC1J,KAAKiH,MAAMyC,4BACXO,EAAe,CAACjK,KAAKiH,MAAMyC,6BAI3B,SAAC,IAAI,CACHlB,MAAO,CAAE0B,MAAO,QAChBD,aAAcA,EACdE,SArB4B,SAAH,GAKhB,IALsBC,EAAG,EAAHA,IAAY,EAAPC,QAAiB,EAARC,SAAsB,EAAZL,aAMzDnE,QAAQ6B,KAAK,iBAAD,OAAkByC,EAAG,MACjC,EAAK/C,SAAS,CAAEqC,0BAA2BU,EAAIG,aAC/C,EAAKtK,MAAM0J,kBAAkB,CAAEC,kBAAmBQ,EAAIG,YACxD,EAaIC,KAAK,SACLC,aAAc,EAAE,SAEfX,GAGP,KAAC,EAvDY,CAAS/H,EAAAA,W,oMCuGxB,SAzGoB,0CAClB,WAAa9B,GAA6B,IAAD,EAE6B,OAF7B,gBACvC,cAAMA,IACDyK,uBAAyB,EAAKA,uBAAuBC,MAAK,WAAK,CACtE,CAkGC,OAlGA,8CAED,SACEC,EACAC,GAEA7K,KAAKC,MAAM6K,mBAAmB,CAC5BC,OAAQ/K,KAAKC,MAAM+K,IAAIxK,IACvByK,UAAWL,GAEf,GAAC,oBAED,WACE,IAAMM,EAAU,cAAUlL,KAAKC,MAAMM,MAAQ,GACvCH,EAAqD,GAK3D,EAAyDJ,KAAKC,MAApBkL,GAAzB,EAATF,UAA6B,EAAlBH,oBAAiC,eAsDpD,OArDA9K,KAAKC,MAAM+K,IAAII,YAAYC,SAAQ,SACjC/K,GAKA,IAAMgL,EAAYhL,EAAKiL,wBAAwB,GAAGC,UAC5CC,EAAcnL,EAAKiL,wBAAwB,GAAGG,YAC9C/K,EAAI,UAAM8K,GAChB,GAAInL,EAAKqL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAC1D,IACMC,EADkBvL,EACawL,oBAAoB,GAAGJ,YAE1C,cAAdJ,EACFlL,EAAW8B,KAAK,CACdvB,KAAM,oBACNO,MAAM,GAAD,OAAK2K,KAEW,WAAdP,EACTlL,EAAW8B,KAAK,CACdvB,KAAM,gBACNO,MAAM,GAAD,OAAK2K,KAEW,WAAdP,EACTlL,EAAW8B,KAAK,CACdvB,KAAM,iBACNO,MAAM,GAAD,OAAK2K,KAGZzL,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAM,GAAD,OAAK2K,IAGhB,MAAO,GAAIvL,EAAKqL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CACjE,IAAMG,EAAkBzL,EACxBF,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAO6K,EAAgBC,WAE3B,CACF,IACAhM,KAAKC,MAAM+K,IAAIiB,aAAaZ,SAAQ,SAAA/K,GAClC,IAAMmL,EAAcnL,EAAKiL,wBAAwB,GAAGG,YAC9C/K,EAAI,UAAM8K,GACVS,EAAM5L,EAAK6L,sBAAsB,GACjCjL,EAAQgL,EAAIE,aAAaC,YAAY,GACrCC,EAAOJ,EAAIK,6BAA6B,GAAGf,UACjDpL,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAM,GAAD,OAAKA,EAAK,YAAIoL,IAEvB,KAEE,UAAC,KAAK,CAACE,MAAM,QAAO,WAClB,gBAAKhE,MAAO,CAAEiE,YAAa,QAAS,UAClC,SAAC,KAAM,CACLlL,KAAK,QACLmL,SAAU1M,KAAK0K,uBACfE,QAAS5K,KAAKC,MAAMgL,UACpB0B,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,SAGlC,SAAC,UAAS,gBACRpE,MAAO,CAAEC,OAAQ,OAAQgE,YAAa,QAElCtB,GAAU,cAEd,SAAC,EAAW,CACV9J,OAAQ6J,EACR9K,WAAYA,EACZqB,YAAU,EACVvB,eAAa,MAPVF,KAAKC,MAAM+K,IAAIxK,OAY5B,KAAC,EAtGiB,CAASuB,EAAAA,WC6D7B,SA5DoB,0CAClB,WAAa9B,GAA6B,IAAD,EAG6B,OAH7B,gBACvC,cAAMA,IACD4M,wBAA0B,EAAKA,wBAAwBlC,MAAK,WACjE,EAAKD,uBAAyB,EAAKA,uBAAuBC,MAAK,WAAK,CACtE,CAoDC,OApDA,8CAED,SACEC,EACAC,GACO,IAAD,OACFD,EACF5K,KAAKC,MAAM6M,KAAKzB,SAAQ,SAAAL,GACtB,EAAK/K,MAAM6K,mBAAmB,CAAEC,OAAQC,EAAIxK,IAAKyK,UAAWL,GAC9D,IAEA5K,KAAKC,MAAM8M,eAAe1B,SAAQ,SAAAN,GAChC,EAAK9K,MAAM6K,mBAAmB,CAAEC,OAAAA,EAAQE,UAAWL,GACrD,GAEJ,GAAC,qCAED,SAAyBoC,GACvBhN,KAAKC,MAAMgN,YAAYD,EAAO5C,IAChC,GAAC,oBAED,WAA4B,IAAD,OACnBjK,EAAQH,KAAKC,MAAM6M,KAAKzM,KAAI,SAAC2K,EAAKzK,GAAK,OAC3C,SAAC,GAAc,CAEbyK,IAAKA,EACLzK,MAAOA,EACP0K,UAAW,EAAKhL,MAAM8M,eAAeG,IAAIlC,EAAIxK,KAC7CsK,mBAAoB,EAAK7K,MAAM6K,oBAJ1BE,EAAIxK,IAKT,IAGJ,OACE,iCACE,gBAAKgI,MAAO,CAAEiE,YAAa,OAAQU,WAAY,MAAOC,cAAe,OAAQ,UAC3E,SAAC,KAAM,CACL7L,KAAK,QACLmL,SAAU1M,KAAK0K,uBACfE,QAAS5K,KAAKC,MAAM8M,eAAexL,KAAO,EAC1CoL,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,SAGlC,SAAC,IAAI,CACH3C,cAAY,QAAMjK,KAAKC,MAAMoN,gBAAgBC,UAC7CnD,SAAUnK,KAAK6M,wBACfU,QAASvN,KAAK6M,wBAAwB,SAErC1M,MAIT,KAAC,EAzDiB,CAAS4B,EAAAA,W,4JCC7B,SAASyL,GAAuB,GAWR,IAVtBvC,EAAS,EAATA,UACAH,EAAkB,EAAlBA,mBACA2C,EAAQ,EAARA,SASA,OACE,UAAC,KAAK,CAACC,UAAU,WAAWlB,MAAM,MAAK,WACrC,SAAC,KAAM,CACLjL,KAAK,QACLmL,SAAU5B,EACVF,QAASK,EACT0B,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,OAEhC,SAAC,KAAO,CACNe,UAAU,OACVC,QAASH,EACTI,aAAc,CAAE3D,MAAO,SACvB9I,MAAM,mBAAkB,UAExB,SAAC,KAAM,CAAC0D,KAAK,UAAUgJ,MAAM,SAAS3M,MAAM,SAAC4M,GAAA,EAAe,UAIpE,CAEA,SAASC,GAA+B,GAUhB,IATtBC,EAAc,EAAdA,eACA/E,EAAK,EAALA,MACAxI,EAAK,EAALA,MACAN,EAAU,EAAVA,WAOA,OACE,SAAC,KAAK,CACJ8N,OAAQ,EAAE,GAAI,IACdC,MAAO,IACP3F,MAAO,CACL4F,YAAa,QACbC,YAAa,MACbC,YAAa,OACbC,WAAYN,EAAiB,UAAY,SACzCO,gBAAgB,8BAAD,OAAgCtF,EAAK,aAAKA,IACzD,UAEF,SAAC,EAAW,CACV7H,OAAQX,EACRN,WAAYA,EACZqB,YAAU,EACVvB,eAAa,KAIrB,CAujBA,SAxgByB,0CAIvB,WAAaD,GAAkC,IAAD,EAe3C,OAf2C,gBAC5C,cAAMA,IAiBRyK,uBAAyB,SACvBE,EACAC,GAEA,EAAK5K,MAAM6K,mBAAmB,CAC5B2D,mBAAoB,EAAKxO,MAAMyO,gBAAgBlO,IAC/CyK,UAAWL,IAEb,EAAKvD,SAAS,CAAE4D,UAAWL,GAC7B,EAAC,EA4KD+D,2BAA6B,WAC3B,EAAK1O,MAAM2O,uBAAuB,EAAK3O,MAAMyO,gBAAgBlO,IAC/D,EAvME,EAAKqO,2BACH,EAAKA,2BAA2BlE,MAAK,WACvC,EAAKmE,oBAAsB,EAAKA,oBAAoBnE,MAAK,WACzD,EAAKoE,mBAAqB,EAAKA,mBAAmBpE,MAAK,WACvD,EAAKqE,mBAAqB,EAAKA,mBAAmBrE,MAAK,WACvD,EAAKsE,mBAAqB,EAAKA,mBAAmBtE,MAAK,WACvD,EAAKuE,gBAAkB,EAAKA,gBAAgBvE,MAAK,WACjD,EAAK1D,MAAQ,CACXgE,UAAW,EAAKhL,MAAMgL,UACtBkE,aAAc,CACZC,QAAS,EAAKnP,MAAMoP,aAAaD,QACjClG,MAAO,EAAKjJ,MAAMoP,aAAanG,QAElC,CACH,CAifC,OAjfA,2CAaD,SAAqBhI,GACN,MAATA,IACFlB,KAAKC,MAAMqP,cAAc,CACvB9O,IAAKR,KAAKC,MAAMyO,gBAAgBlO,IAChC+O,aAAc,CACZH,QAASlO,KAGblB,KAAKqH,SAAS,CACZ8H,aAAc,CACZC,QAASlO,EACTgI,MAAOlJ,KAAKiH,MAAMkI,aAAajG,MAC/BsG,YAAaxP,KAAKiH,MAAMkI,aAAaK,eAI7C,GAAC,gCAED,SAAoBtO,GAClB,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAMkI,aAAajG,MAAqB,CAChE,IAAMA,EAAQ,CACZvD,MAAM8J,QAAQvO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BlJ,KAAKiH,MAAMkI,aAAajG,MAAM,IAEhClJ,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxBkI,aAAc,CACZjG,MAAOA,EACPkG,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAavI,EAAMkI,aAAaK,aAEnC,IACDxP,KAAKC,MAAMqP,cAAc,CACvB9O,IAAKR,KAAKC,MAAMyO,gBAAgBlO,IAChC+O,aAAc,CAAErG,MAAOA,IAE3B,CACF,GAAC,gCAED,SAAoBhI,GAClB,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAMkI,aAAajG,MAAqB,CAChE,IAAMA,EAAQ,CACZlJ,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BvD,MAAM8J,QAAQvO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAMkI,aAAajG,MAAM,IAEhClJ,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxBkI,aAAc,CACZjG,MAAOA,EACPkG,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAavI,EAAMkI,aAAaK,aAEnC,IACDxP,KAAKC,MAAMqP,cAAc,CACvB9O,IAAKR,KAAKC,MAAMyO,gBAAgBlO,IAChC+O,aAAc,CAAErG,MAAOA,IAE3B,CACF,GAAC,gCAED,SAAoBhI,GAClB,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAMkI,aAAajG,MAAqB,CAChE,IAAMA,EAAQ,CACZlJ,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BlJ,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BvD,MAAM8J,QAAQvO,GAASA,EAAM,GAAKA,GAEpClB,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxBkI,aAAc,CACZjG,MAAOA,EACPkG,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAavI,EAAMkI,aAAaK,aAEnC,IACDxP,KAAKC,MAAMqP,cAAc,CACvB9O,IAAKR,KAAKC,MAAMyO,gBAAgBlO,IAChC+O,aAAc,CAAErG,MAAOA,IAE3B,CACF,GAAC,6BAED,WACE,IAAiBoE,EAOjB,OAAqC,MAAjCtN,KAAKiH,MAAMkI,aAAajG,MAHnB,KAAO,WAJCoE,EAQAtN,KAAKiH,MAAMkI,aAAajG,OAPtB,IAGe,KAFtBoE,EAAO,IAE2B,GADlCA,EAAO,IACmC/C,SAAS,IAAIlE,MAAM,GAMhE,OAEX,GAAC,oCAED,SAAwBnF,GACT,MAATA,QAAyDnB,IAAxCC,KAAKiH,MAAMkI,aAAaK,cAC3CxP,KAAKqH,UAAS,SAACJ,GACb,YAAuClH,IAAnCkH,EAAMkI,aAAaK,YACd,CACLL,aAAc,CACZjG,MAAOjC,EAAMkI,aAAajG,MAC1BkG,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAa,CAACtO,EAAO+F,EAAMkI,aAAaK,YAAY,MAIjD,CACLL,aAAc,CACZjG,MAAOjC,EAAMkI,aAAajG,MAC1BkG,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAavI,EAAMkI,aAAaK,aAIxC,IACAxP,KAAKC,MAAMqP,cAAc,CACvB9O,IAAKR,KAAKC,MAAMyO,gBAAgBlO,IAChC+O,aAAc,CACZC,YAAa,CAACtO,EAAOlB,KAAKiH,MAAMkI,aAAaK,YAAY,OAIjE,GAAC,oCAED,SAAwBtO,GACT,MAATA,QAAyDnB,IAAxCC,KAAKiH,MAAMkI,aAAaK,cAC3CxP,KAAKqH,UAAS,SAACJ,GACb,YAAuClH,IAAnCkH,EAAMkI,aAAaK,YACd,CACLL,aAAc,CACZjG,MAAOjC,EAAMkI,aAAajG,MAC1BkG,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAa,CAACvI,EAAMkI,aAAaK,YAAY,GAAItO,KAI9C,CACLiO,aAAc,CACZjG,MAAOjC,EAAMkI,aAAajG,MAC1BkG,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAavI,EAAMkI,aAAaK,aAIxC,IACAxP,KAAKC,MAAMqP,cAAc,CACvB9O,IAAKR,KAAKC,MAAMyO,gBAAgBlO,IAChC+O,aAAc,CACZC,YAAa,CAACxP,KAAKiH,MAAMkI,aAAaK,YAAY,GAAItO,MAI9D,GAAC,+BAED,SAAmBoM,GACjBtN,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxBkI,aAAc,CACZjG,MAAOjC,EAAMkI,aAAajG,MAC1BkG,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAalC,GAEhB,IACDtN,KAAKC,MAAMqP,cAAc,CACvB9O,IAAKR,KAAKC,MAAMyO,gBAAgBlO,IAChC+O,aAAc,CAAEC,YAAalC,IAEjC,GAAC,wCAMD,SAA4BpM,EAAgBwO,GAAqB,IAAD,OAC9D,GAAa,MAATxO,GAAoC,MAAnBwO,EAAO5N,SAAkB,CAC5C,IAAM6N,EAAiBzO,EAAMuB,MAAM,KAC7BmN,EAAc,IAAIhE,EAAAA,GAAAA,OAAAA,aAA6B,CACnD1K,MAAOyO,EAAe,GACtBE,iBAAkBF,EAAe,GACjCG,QAASJ,EAAO5N,WAElB9B,KAAKC,MAAMqP,cAAc,CACvB9O,IAAKR,KAAKC,MAAMyO,gBAAgBlO,IAChC+O,aAAc,CAAEK,YAAAA,KAElB5P,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxBkI,aAAc,CACZC,QAASnI,EAAMkI,aAAaC,QAC5BQ,YAAAA,GAEH,GACH,MACE5P,KAAKC,MAAMqP,cAAc,CACvB9O,IAAKR,KAAKC,MAAMyO,gBAAgBlO,IAChC+O,aAAc,CACZrG,MAAOlJ,KAAKC,MAAMoP,aAAanG,SAGnClJ,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxBkI,aAAc,CACZC,QAASnI,EAAMkI,aAAaC,QAC5BlG,MAAO,EAAKjJ,MAAMoP,aAAanG,MAC/BsG,iBAAazP,GAEhB,GAEL,GAAC,oBAED,WAA4B,IAAD,EA0DrBgQ,EAiFAC,EACAC,EA5IqB,OACnB1P,EAAQP,KAAKC,MAAM+B,SAASkO,wBAAwBC,WACxD,SAAC7P,GAAI,OAAKA,EAAK8P,qBAAuB,EAAKnQ,MAAMyO,gBAAgBlO,GAAG,IAEhEF,EAAON,KAAKC,MAAM+B,SAASkO,wBAAwB3P,GACnDH,EAAqD,CACzD,CACEO,KAAM,gBACNO,MAAOlB,KAAKC,MAAMyO,gBAAgB2B,aAAa3E,aAEjD,CACE/K,KAAM,oBACNO,MAAOlB,KAAKC,MAAMyO,gBAAgB4B,iBAAiB5E,aAMrD,CACE/K,KAAM,eACNO,MAAOZ,EAAKiQ,aAEd,CACE5P,KAAM,6BACNO,MAAOlB,KAAKC,MAAM+B,SAASwO,2BAIzBC,EAAgD,QAA5B,EAAGnQ,EAAKoQ,4BAAoB,QAAI,GACpDC,EAAqBF,EAAqBpQ,KAC9C,SAACuQ,GACC,IAAMjQ,EAAOiQ,EAAgBrF,wBAAwB,GAC/CnB,EAAG,UAAMzJ,EAAKkQ,uBAAsB,YAAIlQ,EAAK6K,WACnD,OACE,SAAC,YAAa,CAEZtK,MAAOkJ,EACP0G,0BAA0B,EAC1BvP,KAAK,QACLwP,UAAW,EAAK9Q,MAAMgL,UAAU,SAE/BtK,EAAK+K,aANDtB,EASX,IAiGF,GA/FAuG,EAAmBzO,MACjB,SAAC,YAAa,CAEZhB,WAAOnB,EACP+Q,0BAA0B,EAC1BvP,KAAK,QACLwP,UAAW/Q,KAAKC,MAAMgL,UAAU,UAEhC,yBANI,MAW6B,MAAjCjL,KAAKiH,MAAMkI,aAAajG,QAC1B6G,GACE,iCACE,SAAC,KAAO,CAACiB,OAAK,sBACd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,kBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAK+O,wBAGnB,SAAC,KAAG,CAAC9N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,IACL9P,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAK+O,2BAKrB,UAAC,KAAG,CAACkC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,oBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKgP,wBAGnB,SAAC,KAAG,CAAC/N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,IACL9P,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKgP,2BAKrB,UAAC,KAAG,CAACiC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,mBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKiP,wBAGnB,SAAC,KAAG,CAAChO,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,IACL9P,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKiP,2BAIrB,SAAC,KAAO,CAAC+B,OAAK,QAOhBP,EAAqBjJ,OAAS,EAAG,CACnC,GAA2C,MAAvCxH,KAAKiH,MAAMkI,aAAaK,YAAqB,CAI/CQ,GACE,iCACE,SAAC,KAAO,CAACgB,OAAK,mCACd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAKrR,KAAKiH,MAAMkI,aAAaK,YAAY,GACzCjO,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAaK,YAAY,GAC3C9C,SAAU1M,KAAKuR,4BAGnB,SAAC,KAAG,CAACtQ,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAK,EACLC,IAnBO,EAoBPC,IAnBO,IAoBPC,KAAM,EACNpQ,MAAO,CACLlB,KAAKiH,MAAMkI,aAAaK,YAAY,GACpCxP,KAAKiH,MAAMkI,aAAaK,YAAY,IAEtC9C,SAAU1M,KAAKwR,uBAGnB,SAAC,KAAG,CAACvQ,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAKpR,KAAKiH,MAAMkI,aAAaK,YAAY,GACzC6B,IA/BO,IAgCP9P,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAaK,YAAY,GAC3C9C,SAAU1M,KAAKyR,gCAM3B,CACAxB,GACE,iCACE,SAAC,KAAO,CAACe,OAAK,4BACd,UAAC,KAAG,CAACC,QAAQ,QAAQzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WACjD,SAAC,KAAG,CAACjQ,KAAM,EAAE,0BACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuH,MAAO,CAAEkJ,SAAU,OAAQxH,MAAO,OAClCC,SAAUnK,KAAK6O,2BAEf8C,kBAAc5R,EAAU,SAEvB4Q,GAHG,wCAShB,CAEA,IAAMlD,GACJ,2BACGsC,EACAC,GACD,UAAC,KAAG,CAACiB,QAAQ,QAAQzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WACjD,SAAC,KAAG,CAACjQ,KAAM,EAAE,sBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,yBAGnB,SAAC,KAAG,CAAC7N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,EACL9P,KAAK,QACL+P,KAAM,GACN9I,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,2BAIpBmB,KAIC/G,EAAQlJ,KAAKkP,kBACbjB,EACJjO,KAAKiH,MAAMgE,WAAoD,MAAvCjL,KAAKiH,MAAMkI,aAAaS,YAClD,EAQI5P,KAAKC,MADJkL,GANY,EAAfuD,gBACY,EAAZW,aACS,EAATpE,UACQ,EAARjJ,SACkB,EAAlB8I,mBACa,EAAbwE,eACa,eAEf,OACE,SAAC,UAAS,gBACR9G,MAAO,CAAEC,OAAQ,OAAQgE,YAAa,OAEtCc,QAASvN,KAAK2O,4BACVxD,GAAU,cAEd,UAAC,KAAK,CAACqB,MAAM,QAAO,WAClB,gBAAKhE,MAAO,CAAEiE,YAAa,QAAS,UAClC,SAACe,GAAuB,CACtBvC,UAAWjL,KAAKC,MAAMgL,UACtBH,mBAAoB9K,KAAK0K,uBACzB+C,SAAUA,OAGd,SAACO,GAA+B,CAC9BC,eAAgBA,EAChB/E,MAAOA,EACPxI,MAAOV,KAAKC,MAAMyO,gBAAgBhO,MAClCN,WAAYA,SAhBXJ,KAAKC,MAAMyO,gBAAgBlO,IAqBtC,KAAC,EArgBsB,CAASuB,EAAAA,WC3BlC,SA/DyB,qJAqBtB,OArBsB,oCAIvB2I,uBAAyB,SAACE,GACpBA,EACF,EAAK3K,MAAM2R,iBAAiBvG,SAAQ,SAACqD,GACnC,EAAKzO,MAAM4R,kCAAkC,CAC3CpD,mBAAoBC,EAAgBlO,IACpCyK,UAAWL,GAEf,IAIF,EAAK3K,MAAM6R,2BAA2BzG,SAAQ,SAACoD,GAC7C,EAAKxO,MAAM4R,kCAAkC,CAC3CpD,mBAAAA,EACAxD,UAAWL,GAEf,GACF,EAAC,EAuCA,OAvCA,8BAED,WAA4B,IAAD,OACnBzK,EAAQH,KAAKC,MAAM2R,iBAAiBvR,KAAI,SAACqO,EAAiBnO,GAC9D,IAAMC,EAAMkO,EAAgBlO,IAC5B,OACE,SAAC,GAAmB,CAElBkO,gBAAiBA,EACjBE,uBAAwB,EAAK3O,MAAM2O,uBACnC5M,SAAU,EAAK/B,MAAM+B,SAASxB,GAC9ByK,UAAW,EAAKhL,MAAM6R,2BAA2B5E,IAAI1M,GACrD6O,aAAc,EAAKpP,MAAM8R,6BAA6BvR,GACtDsK,mBAAoB,EAAK7K,MAAM4R,kCAC/BvC,cAAe,EAAKrP,MAAM+R,8BAPrBtD,EAAgBlO,IAU3B,IAEA,OACE,iCACE,gBACEgI,MAAO,CACLiE,YAAa,OACbU,WAAY,MACZC,cAAe,OACf,UAEF,SAAC,KAAM,CACL7L,KAAK,QACLmL,SAAU1M,KAAK0K,uBACfE,QAAS5K,KAAKC,MAAM6R,2BAA2BvQ,KAAO,EACtDoL,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,SAGlC,SAAC,IAAI,CAACnL,YAAY,EAAM,SAAEtB,MAGhC,KAAC,EA5DsB,CAAS4B,EAAAA,WCmClC,SAjEY,0CACV,WAAa9B,GAAqB,IAAD,EAEe,OAFf,gBAC/B,cAAMA,IACDgS,YAAc,EAAKA,YAAYtH,MAAK,WAAK,CAChD,CA0DC,OA1DA,mCAED,SAAaE,QACgB9K,IAAvBC,KAAKC,MAAMsN,SACbvN,KAAKC,MAAMsN,QAAQ1C,EAEvB,GAAC,oBAED,WAA4B,IAAD,EAMrBqH,EAUAC,EAfEC,EAAOpS,KAAKC,MAAMkB,KACxB,YAAapB,IAATqS,EACK,MAIe,MAApBpS,KAAKC,MAAMS,QACbwR,GACE,iCACE,SAAC,KAAO,CAACpN,KAAK,aACb9E,KAAKC,MAAMS,UAOhByR,EADuB,QAAzB,EAAInS,KAAKC,MAAMoS,kBAAU,UAErB,SAAC,KAAG,CACF9E,QAASvN,KAAKiS,YACd9Q,MAAM,SAACiR,EAAI,IACXtN,KAAK,UACL0D,MAAO,CAAE3H,WAAY,OAAQ,SAE5BqR,KAKH,SAAC,KAAG,CACF3E,QAASvN,KAAKiS,YACd9Q,MAAM,SAACiR,EAAI,IACXtN,KAAK,UACL0D,MAAO,CAAE3H,WAAY,OAAQ,SAE5BqR,SAKoBnS,IAAvBC,KAAKC,MAAMqS,SAEX,SAAC,IAAO,CAAClR,MAAOpB,KAAKC,MAAMqS,QAAQ,SAChCH,IAIEA,EAEX,KAAC,EA9DS,CAASpQ,EAAAA,WC+BrB,SAjCe,qGA8BZ,OA9BY,8BACb,WACE,QAA4BhC,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAET,IAAM5B,EAAa,CACjB,CACEO,KAAM,eACNO,MAAOlB,KAAKC,MAAM+B,SAASuQ,cAE7B,CACE5R,KAAM,aACNO,MAAOlB,KAAKC,MAAM+B,SAASwQ,uBAE7B,CACE7R,KAAM,uBACNO,MAAOlB,KAAKC,MAAM+B,SAASyQ,oBAE7B,CACE9R,KAAM,oBACNO,MAAOlB,KAAKC,MAAM+B,SAAS0Q,mBAS/B,OAN2C,MAAvC1S,KAAKC,MAAM+B,SAAS2Q,iBACtBvS,EAAW8B,KAAK,CACdvB,KAAM,mBACNO,MAAOlB,KAAKC,MAAM+B,SAAS2Q,mBAGxB,SAAC,EAAW,CAACvS,WAAYA,EAAYF,eAAa,GAC3D,KAAC,EA9BY,CAAS6B,EAAAA,WCHxB,IAmCa6Q,GAAyB,SAAH,GAKM,IAJrChF,EAAO,EAAPA,QAASjN,EAAI,EAAJA,KAKLR,EAA2C,GAMjD,OALAyN,EAAQvC,SAAQ,SAAAtB,IA1CF,SACdzJ,EACAK,GAEA,IAAMkS,EAAUvS,EAAKiL,wBAAwB,GAC7C,OACEsH,EAAQrH,YAAc7K,EAAK6K,WAC3BqH,EAAQhC,yBAA2BlQ,EAAKkQ,sBAE5C,EAkCQiC,CAAQ/I,EAAGpJ,IACbR,EAAM+B,KAAK6H,EAEf,IACO5J,CACT,EC1Ca4S,GAAe,SAC1BzS,EACA0S,GAEA,OAAO1S,EAAKqL,YAAcqH,CAC5B,EA4BMC,GAAU,SAACC,GAEf,IAAMC,EAAUP,GAAuB,CACrChF,QAASsF,EAAOE,gBAChBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,2BAGU,IAAnBqD,EAAQ3L,QACVY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,oJAMN,IAAMyO,EAAmBF,EAAQ,GAE3BG,EAAwBV,GAAuB,CACnDhF,QAASyF,EAAiBD,gBAC1BzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,wBAIPhD,EAAsB,GAwK5B,OAvKAwG,EAAsBjI,SAAQ,SAAC/K,GAC7B,IACIiT,EADEnI,EAAc,GAEdoI,EAAQlT,EACVH,EAAQyS,GAAuB,CACjChF,QAAS4F,EAAMJ,gBACfzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,iCAGQ,IAAjB3P,EAAMqH,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,6NAON,IAAM6O,EAAkBtT,EAAM,GA+B9B,GArBqB,KARrBA,EAAQyS,GAAuB,CAC7BhF,QAAS4F,EAAMJ,gBACfzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,eAGHtI,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,0MAgBe,KARrBzE,EAAQyS,GAAuB,CAC7BhF,QAAS4F,EAAMJ,gBACfzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,sBAGHtI,OAAc,CACtB,IAAMkM,EAAoBvT,EAAM,GAChCiL,EAAYlJ,KAAKwR,GACjBH,EAAe,QACjB,MACEA,EAAe,SAWjB,GAAqB,KARrBpT,EAAQyS,GAAuB,CAC7BhF,QAAS4F,EAAMJ,gBACfzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,yBAGHtI,OAAc,CACtB,IAAMmM,EAAuBxT,EAAM,GACnCiL,EAAYlJ,KAAKyR,EACnB,CAUqB,KARrBxT,EAAQyS,GAAuB,CAC7BhF,QAAS4F,EAAMJ,gBACfzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,oBAGHtI,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,+MAON,IACIgP,EADEC,EAAa1T,EAAM,GAEzB,GAA+B,UAA3B0T,EAAWtD,YACbqD,EAAW,IAAI/L,EAAAA,SAAAA,MAAmB,CAChCiM,oBAAqBD,EAAWE,8BAChCC,YAAaH,EAAWI,kBAErB,CAEL,IADA,IAAMD,EAA0B,GACvBjK,EAAI,EAAGA,EAAI8J,EAAWI,YAAYzM,OAAQuC,GAAK,EACtDiK,EAAY9R,KAAK2R,EAAWI,YAAY5N,MAAM0D,EAAGA,EAAI,IAExB,YAA3B8J,EAAWtD,YACbqD,EAAW,IAAI/L,EAAAA,SAAAA,QAAqB,CAClCiM,oBAAqBD,EAAWE,8BAChCC,YAAaA,IAEqB,eAA3BH,EAAWtD,YACpBqD,EAAW,IAAI/L,EAAAA,SAAAA,WAAwB,CACrCiM,oBAAqBD,EAAWE,8BAChCC,YAAaA,IAEqB,aAA3BH,EAAWtD,YACpBqD,EAAW,IAAI/L,EAAAA,SAAAA,SAAsB,CACnCiM,oBAAqBD,EAAWE,8BAChCC,YAAaA,IAEqB,YAA3BH,EAAWtD,YACpBqD,EAAW,IAAI/L,EAAAA,SAAAA,QAAqB,CAClCiM,oBAAqBD,EAAWE,8BAChCC,YAAaA,IAEqB,cAA3BH,EAAWtD,YACpBqD,EAAW,IAAI/L,EAAAA,SAAAA,UAAuB,CACpCiM,oBAAqBD,EAAWE,8BAChCC,YAAaA,IAGf5L,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,wDAAuD,WACnDiP,EAAWtD,YAAW,OAD1B,uKAQR,CAEAnF,EAAYlJ,KAAI,MAAhBkJ,GAAW,QAlMa,SAAH,GAEoB,IADzCwC,EAAO,EAAPA,QAEIzN,EAA+C,GAOrD,OANAyN,EAAQvC,SAAQ,SAAAtB,GACd,GAAIgJ,GAAahJ,EAAG6B,EAAAA,GAAAA,WAAAA,WAAAA,MAAsC,CACxD,IAAMsI,EAAanK,EACnB5J,EAAM+B,KAAKgS,EACb,CACF,IACO/T,CACT,CAwLSgU,CAAoB,CAAEvG,QAAS4F,EAAMJ,oBAE1C,IAAMnH,EAlNmB,SAAH,GAEkB,IADxC2B,EAAO,EAAPA,QAEIzN,EAA8C,GAOpD,OANAyN,EAAQvC,SAAQ,SAAAtB,GACd,GAAIgJ,GAAahJ,EAAG6B,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CACvD,IAAMgE,EAAc7F,EACpB5J,EAAM+B,KAAK0N,EACb,CACF,IACOzP,CACT,CAuMyBiU,CAAqB,CACxCxG,QAAS4F,EAAMJ,kBAGXpI,EAAM,IAAInD,EAAAA,IAAAA,IAAY,CAC1B+L,SAAUA,EACVpT,KAAKC,EAAAA,EAAAA,KACL4T,WAAY,CACVC,YAAab,EAAgBc,IAC7BhB,aAAcA,EACdnI,YAAaA,EACba,aAAcA,KAGlBa,EAAK5K,KAAK8I,EACZ,IACO8B,CACT,EAEM0H,IAAiB,QAiBrB,WAAatB,IAAyC,oBAhB/CuB,wBAAkB,OAElBC,6BAAuB,OAEvBC,uBAAiB,OAEjBC,wBAAkB,OAElBC,iBAAW,OAEXC,wBAAkB,OAElBlN,yBAAmB,OAEnBmN,KAAsB,GAG3B,IAAI5U,EAAQyS,GAAuB,CACjChF,QAASsF,EAAOE,gBAChBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,mBAGQ,IAAjB3P,EAAMqH,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,qPAON,IAAMoQ,EACJ7U,EAAM,GAERH,KAAK6U,YAAcG,EAAgBT,IAUd,KARrBpU,EAAQyS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,2BAGHtI,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,4PAON,IAAMqQ,EACJ9U,EAAM,GAERH,KAAK8U,mBAAqBG,EAAejJ,UAUpB,KARrB7L,EAAQyS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,qCAGHtI,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,sQAON,IAAMsQ,EACJ/U,EAAM,GAYR,GAVAH,KAAK4H,oBAAsBsN,EAAgBlJ,UAUtB,KARrB7L,EAAQyS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,4BAGHtI,OAAc,CACtB,IAAM2N,EACJhV,EAAM,GAERH,KAAKyU,mBAAqBU,EAAeC,UAC3C,CAUA,GAAqB,KARrBjV,EAAQyS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,oCAGHtI,OAAc,CACtB,IAAM6N,EACJlV,EAAM,GAERH,KAAK0U,wBAA0BW,EAAoBrJ,SACrD,CAUA,IARA7L,EAAQyS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,2BAGHtI,OAAS,EAAG,CACpB,IAAM8N,EACJnV,EAAM,GAERH,KAAK2U,kBAAoBW,EAAcf,GACzC,CAUA,GAAqB,KARrBpU,EAAQyS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,4BAGHtI,OAAc,CACtB,IAAM+N,EACJpV,EAAM,GAERH,KAAK4U,mBAAqBW,EAAevJ,SAC3C,CAEAhM,KAAK+U,KAAO9B,GAAQC,EACtB,IA+EF,SApEY,qGAiET,OAjES,8BACV,WACE,IAAMA,EAAS,IAAIsB,GAAkBxU,KAAKC,MAAMuV,SAC1CC,EAAiB,CACrB,CACE9U,KAAM,KACNO,MAAOgS,EAAOtL,sBAGZ8N,EAAgB,CACpB,CACE/U,KAAM,KACNO,MAAOgS,EAAO4B,qBAGZa,EAAgB,CACpB,CACEhV,KAAM,OACNO,MAAOgS,EAAOuB,qBAGZmB,EAAc1C,EAAO6B,KAAK1U,KAC9B,SAAC2K,EAAKzK,GACJ,IAAMsV,EAAE,iBAAatV,EAAQ,GACvBuV,EAAgD,GAqBtD,OApBA9K,EAAII,YAAYC,SAAQ,SACtB/K,GAKIA,EAAKqL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAErBkK,EAAM5T,KAAK,CACTvB,KAAML,EAAKiL,wBAAwB,GAAGG,YACtCxK,MAAOZ,EAAKwL,oBAAoB,GAAGJ,cAE5BpL,EAAKqL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,MAE5BkK,EAAM5T,KAAK,CACTvB,KAAML,EAAKiL,wBAAwB,GAAGG,YACtCxK,MAAOZ,EAAK0L,WAGlB,KACO,SAAC,EAAW,CAAe3K,OAAQwU,EAAIzV,WAAY0V,GAAjC9K,EAAIxK,IAC/B,IAGF,OACE,4BACE,SAAC,KAAO,CAACuV,YAAY,OAAM,sBAC3B,SAAC,EAAO,CAAC/T,SAAUhC,KAAKC,MAAMuV,WAC9B,SAAC,KAAO,CAACO,YAAY,OAAM,mBAC3B,SAAC,EAAK,CAAC/T,SAAUhC,KAAKC,MAAMuV,WAC5B,SAAC,KAAO,CAACO,YAAY,OAAM,oBAC3B,SAAC,EAAW,CAAC3V,WAAYqV,KACzB,SAAC,KAAO,CAACM,YAAY,OAAM,uBAC3B,SAAC,EAAW,CAAC3V,WAAYsV,KACzB,SAAC,KAAO,CAACK,YAAY,OAAM,uBAC3B,SAAC,EAAW,CAAC3V,WAAYuV,KACzB,SAAC,KAAO,CAACI,YAAY,OAAM,yBAC1BH,IAGP,KAAC,EAjES,CAAS7T,EAAAA,W,eC3WrB,SAjCU,qGA8BP,OA9BO,8BACR,WACE,IAUIX,EAVA4U,EAAS,KAgBb,YAf0BjW,IAAtBC,KAAKC,MAAM+V,SACbA,EAAShW,KAAKC,MAAM+V,OAAO3V,KAAI,SAACC,EAAMC,GAAa,OACjD,SAAC,EAAW,CAEVc,OAAQf,EAAKK,KACbP,WAAYE,EAAKF,YAFZG,EAGL,KAKJa,OADsBrB,IAApBC,KAAKC,MAAM6E,KACR,UAAM9E,KAAKC,MAAM6E,KAAI,aAAK9E,KAAKC,MAAMiL,YAElClL,KAAKC,MAAMiL,YAGnB,UAAC,WAAS,YACR,SAAC,EAAW,CACV7J,OAAQD,EACRhB,WAAYJ,KAAKC,MAAMG,WACvBF,cAAeF,KAAKC,MAAMC,cAAc,SAEvC8V,IAEFhW,KAAKC,MAAM6B,WARE9B,KAAKC,MAAMO,IAW/B,KAAC,EA9BO,CAASuB,EAAAA,WCfL,IAAI6J,EAAAA,GAAAA,OAAAA,aAA6B,CAC3C1K,MAAO,WACP2O,iBAAkB,MAClBC,QAAS,wBAED,IAAIlE,EAAAA,GAAAA,OAAAA,aAA6B,CACzC1K,MAAO,YACP2O,iBAAkB,MAClBC,QAAS,gCAED,IAAIlE,EAAAA,GAAAA,OAAAA,aAA6B,CACzC1K,MAAO,YACP2O,iBAAkB,MAClBC,QAAS,sBAEC,IAAIlE,EAAAA,GAAAA,OAAAA,aAA6B,CAC3C1K,MAAO,UACP2O,iBAAkB,MAClBC,QAAS,wBArBN,IAyBMmG,GAET,CACFC,SAAU,IAAItK,EAAAA,GAAAA,OAAAA,aAA6B,CACzC1K,MAAO,YACP2O,iBAAkB,MAClBC,QAAS,oBAEXqG,iBAAkB,IAAIvK,EAAAA,GAAAA,OAAAA,aAA6B,CACjD1K,MAAO,YACP2O,iBAAkB,MAClBC,QAAS,sBAIAsG,IAEZ,QACCC,oBAAqB,IAAIzK,EAAAA,GAAAA,OAAAA,aAA6B,CACpD1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,wBAEXwG,2BAA4B,IAAI1K,EAAAA,GAAAA,OAAAA,aAA6B,CAC3D1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,+BAEXyG,gBAAiB,IAAI3K,EAAAA,GAAAA,OAAAA,aAA6B,CAChD1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,oBAEX0G,uBAAwB,IAAI5K,EAAAA,GAAAA,OAAAA,aAA6B,CACvD1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,2BAEX2G,4BAA6B,IAAI7K,EAAAA,GAAAA,OAAAA,aAA6B,CAC5D1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,gCAEX4G,kBAAmB,IAAI9K,EAAAA,GAAAA,OAAAA,aAA6B,CAClD1K,MAAO,WACP2O,iBAAkB,MAClBC,QAAS,wBAEX6G,gBAAiB,IAAI/K,EAAAA,GAAAA,OAAAA,aAA6B,CAChD1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,oBAEX8G,MAAO,IAAIhL,EAAAA,GAAAA,OAAAA,aAA6B,CACtC1K,MAAO,YACP2O,iBAAkB,MAClBC,QAAS,qBAERmG,ICwDL,SA3HkB,qGAwHf,OAxHe,8BAChB,WAA4B,IAAD,SACzB,QAA4BlW,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAET,IAAM6U,EAAsB7W,KAAKC,MAAM+B,SAAS8U,4BAC9C9W,KAAKC,MAAMM,OAEPH,EAA0B,GAOhC,QANqDL,IAAjD8W,EAAoBE,0BACtB3W,EAAW8B,KAAK,CACdvB,KAAM,cACNO,MAAO2V,EAAoBE,gCAG8BhX,IAAzD8W,EAAoBG,kCAClBH,EAAoBG,iCAAiCxP,OAAS,EAAG,CACnE,IAAMyP,EAAaJ,EAAoBG,iCACvC5W,EAAW8B,KAAK,CACdvB,KAAM,uBACNO,MAAO+V,EAAW5W,KAAI,SAAAC,GAAI,OAAIA,EAAKoL,WAAW,IAAEhJ,KAAK,OAEzD,EAK+C,QADS,EACxDmU,EAAoBK,mCAA2B,QAAI,IAEpC7L,SACf,SAACiG,EAAwC/Q,GACvC+Q,EAAK6F,2CAA2C9L,SAAQ,SACtD/K,EAOAC,GAEA,IAAMI,EAAO,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CAC5C1K,MAAOZ,EAAKiL,wBAAwB,GAAGC,UACvCqE,iBACEvP,EAAKiL,wBAAwB,GAAGsF,uBAClCf,QAASxP,EAAKiL,wBAAwB,GAAGG,cAE3C,GAAIpL,EAAKqL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAE1D,IAAM1K,EAAQ,IAAI0K,EAAAA,GAAAA,OAAAA,aAA6B,CAC7C1K,MAAOZ,EAAKwL,oBAAoB,GAAGN,UACnCqE,iBACEvP,EAAKwL,oBAAoB,GAAG+E,uBAC9Bf,QAASxP,EAAKwL,oBAAoB,GAAGJ,cAElC/K,EAAKyW,OAAOhB,GAA6BG,mBAE1C5V,EAAKyW,OAAOhB,GAA6BM,mBAEzCtW,EAAW8B,KAAK,CACdvB,KAAM,oBACNO,MAAOA,EAAMwK,cAGf/K,EAAKyW,OAAOhB,GAA6BF,UAEzC9V,EAAW8B,KAAK,CACdvB,KAAM,kBACNO,MAAOA,EAAMwK,cAGf/K,EAAKyW,OAAOhB,GAA6BD,kBAEzC/V,EAAW8B,KAAK,CACdvB,KAAM,0BACNO,MAAOA,EAAMwK,cAGf/K,EAAKyW,OAAOhB,GAA6BQ,QACzC,EAAK3W,MAAMoX,WAEXjX,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOA,EAAMwK,cAIrB,MAAWpL,EAAKqL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,OAG1BjL,EAAKyW,OAAOhB,GAA6BQ,QACzC,EAAK3W,MAAMoX,UAEXjX,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOZ,EAAK0L,YAGdrL,EAAKyW,OAAOhB,GAA6BE,6BAEzClW,EAAW8B,KAAK,CACdvB,KAAM,kBACNO,MAAOZ,EAAK0L,YAIpB,GACF,IAEF,IAAMxL,EAAMqW,EAAoBhC,YAC1B3J,EAAa2L,EAAoB/B,mBACvC,OACE,SAAC,GAAI,CACHtU,IAAKA,EAEL0K,WAAYA,EACZ9K,WAAYA,EACZF,eAAa,GAHRM,EAMX,KAAC,EAxHe,CAASuB,EAAAA,WC2B3B,SA/BkB,qGA4Bf,OA5Be,8BAChB,WAA4B,IAAD,SACzB,QAA4BhC,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAOT,IACM7B,GAD8D,QAAlD,EAAGH,KAAKC,MAAM+B,SAAS8U,mCAA2B,QAAI,IAC7CzW,KACzB,SAACC,EAAwCC,GACvC,OACE,SAAC,GAAY,CACXA,MAAOA,EAEPyB,SAAU,EAAK/B,MAAM+B,SACrBqV,UAAW,EAAKpX,MAAMoX,WAFjB/W,EAAKuU,YAKhB,IAEF,OACE,SAAC,MAAI,CAACrM,MAAO,CAAE8O,UAAW,QAAS,SAChCnX,GAGP,KAAC,EA5Be,CAAS4B,EAAAA,W,uKCitB3B,SAvpBqB,0CACnB,WAAa9B,GAA8B,IAAD,EAoBvC,OApBuC,gBACxC,cAAMA,IACDyK,uBAAyB,EAAKA,uBAAuBC,MAAK,WAC/D,EAAKmE,oBAAsB,EAAKA,oBAAoBnE,MAAK,WACzD,EAAK6G,kBAAoB,EAAKA,kBAAkB7G,MAAK,WACrD,EAAK4G,uBAAyB,EAAKA,uBAAuB5G,MAAK,WAC/D,EAAK8G,uBAAyB,EAAKA,uBAAuB9G,MAAK,WAC/D,EAAKoE,mBAAqB,EAAKA,mBAAmBpE,MAAK,WACvD,EAAKqE,mBAAqB,EAAKA,mBAAmBrE,MAAK,WACvD,EAAKsE,mBAAqB,EAAKA,mBAAmBtE,MAAK,WACvD,EAAK4M,cAAgB,EAAKA,cAAc5M,MAAK,WAC7C,EAAK6M,iBAAmB,EAAKA,iBAAiB7M,MAAK,WACnD,EAAK1D,MAAQ,CACXgE,UAAW,EAAKhL,MAAMgL,UACtBkE,aAAc,CACZC,QAAS,EAAKnP,MAAMoP,aAAaD,QACjClG,MAAO,EAAKjJ,MAAMoP,aAAanG,MAC/BuO,wBAAyB,EAAKxX,MAAMoP,aAAaoI,wBACjDjI,YAAa,EAAKvP,MAAMoP,aAAaG,cAExC,CACH,CA8nBC,OA9nBA,0CAED,SACEkI,EACAC,GAEI3X,KAAKC,MAAMoP,eAAiBqI,EAAcrI,cAC5CrP,KAAKqH,SAAS,CACZ8H,aAAcnP,KAAKC,MAAMoP,cAG/B,GAAC,oCAED,SACEzE,EACAC,GAEA,IAAMK,EAAalL,KAAKC,MAAM2X,YAAY1M,WAC1ClL,KAAKqH,SAAS,CACZ4D,UAAWL,IAEb5K,KAAKC,MAAM6K,mBAAmB,CAC5B+M,sBAAuB3M,EACvBD,UAAWL,GAEf,GAAC,iCAED,SACE1J,GAEA,GAAa,MAATA,EAAe,CACjB,IAAMgK,EAAalL,KAAKC,MAAM2X,YAAY1M,WAC1ClL,KAAKC,MAAMqP,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CAAEH,QAASlO,KAE3BlB,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtBkI,aAAc,CACZjG,MAAOjC,EAAMkI,aAAajG,MAC1BuO,wBAAyBxQ,EAAMkI,aAAasI,wBAC5CrI,QAASlO,EACTsO,YAAavI,EAAMkI,aAAaK,aAEnC,GACH,CACF,GAAC,gCAED,SACEtO,GAEA,IAAMgK,EAAalL,KAAKC,MAAM2X,YAAY1M,WAC1C,GAAa,MAAThK,QAAmDnB,IAAlCC,KAAKiH,MAAMkI,aAAajG,MAAqB,CAChE,IAAMA,EAAQ,CACZvD,MAAM8J,QAAQvO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BlJ,KAAKiH,MAAMkI,aAAajG,MAAM,IAEhClJ,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtBkI,aAAc,CACZjG,MAAOA,EACPuO,wBAAyBxQ,EAAMkI,aAAasI,wBAC5CrI,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAavI,EAAMkI,aAAaK,aAEnC,IACDxP,KAAKC,MAAMqP,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CAAErG,MAAOA,IAE3B,CACF,GAAC,gCAED,SACEhI,GAEA,IAAMgK,EAAalL,KAAKC,MAAM2X,YAAY1M,WAC1C,GAAa,MAAThK,QAAmDnB,IAAlCC,KAAKiH,MAAMkI,aAAajG,MAAqB,CAChE,IAAMA,EAAQ,CACZlJ,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BvD,MAAM8J,QAAQvO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAMkI,aAAajG,MAAM,IAEhClJ,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtBkI,aAAc,CACZjG,MAAOA,EACPuO,wBAAyBxQ,EAAMkI,aAAasI,wBAC5CrI,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAavI,EAAMkI,aAAaK,aAEnC,IACDxP,KAAKC,MAAMqP,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CAAErG,MAAOA,IAE3B,CACF,GAAC,gCAED,SACEhI,GAEA,IAAMgK,EAAalL,KAAKC,MAAM2X,YAAY1M,WAC1C,GAAa,MAAThK,QAAmDnB,IAAlCC,KAAKiH,MAAMkI,aAAajG,MAAqB,CAChE,IAAMA,EAAQ,CACZlJ,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BlJ,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BvD,MAAM8J,QAAQvO,GAASA,EAAM,GAAKA,GAEpClB,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtBkI,aAAc,CACZjG,MAAOA,EACPuO,wBAAyBxQ,EAAMkI,aAAasI,wBAC5CrI,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAavI,EAAMkI,aAAaK,aAEnC,IACDxP,KAAKC,MAAMqP,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CAAErG,MAAOA,IAE3B,CACF,GAAC,8BAED,WACE,IAAM4O,EAAU,SAACxK,GAIf,MAAO,KAAO,UAHJA,EAAO,IAGe,KAFtBA,EAAO,IAE2B,GADlCA,EAAO,IACmC/C,SAAS,IAAIlE,MAAM,EACzE,EAEA,OAAuD,MAAnDrG,KAAKC,MAAMoP,aAAaoI,wBACTzX,KAAKC,MAAMoP,aAAaoI,wBAAwBM,KACjD1X,KAAI,SAAAiN,GAAM,OAAIwK,EAAQxK,EAAO,IACH,MAAjCtN,KAAKiH,MAAMkI,aAAajG,MAC1B,CACL,UACA4O,EAAQ9X,KAAKiH,MAAMkI,aAAajG,QAG3B,CAAC,QAAS,QAErB,GAAC,oCAED,SACEhI,GAEA,IAAMgK,EAAalL,KAAKC,MAAM2X,YAAY1M,WAC7B,MAAThK,QAAyDnB,IAAxCC,KAAKiH,MAAMkI,aAAaK,cAC3CxP,KAAKqH,UAAS,SAAAJ,GACZ,YAAuClH,IAAnCkH,EAAMkI,aAAaK,YACd,CACLL,aAAc,CACZjG,MAAOjC,EAAMkI,aAAajG,MAC1BuO,wBAAyBxQ,EAAMkI,aAAasI,wBAC5CrI,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAa,CAACtO,EAAO+F,EAAMkI,aAAaK,YAAY,MAIjD,CACLL,aAAc,CACZjG,MAAOjC,EAAMkI,aAAajG,MAC1BuO,wBAAyBxQ,EAAMkI,aAAasI,wBAC5CrI,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAavI,EAAMkI,aAAaK,aAIxC,IACAxP,KAAKC,MAAMqP,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CACZC,YAAa,CACXtO,EACAlB,KAAKiH,MAAMkI,aAAaK,YAAY,OAK9C,GAAC,oCAED,SACEtO,GAEA,IAAMgK,EAAalL,KAAKC,MAAM2X,YAAY1M,WAC7B,MAAThK,QAAyDnB,IAAxCC,KAAKiH,MAAMkI,aAAaK,cAC3CxP,KAAKqH,UAAS,SAAAJ,GACZ,YAAuClH,IAAnCkH,EAAMkI,aAAaK,YACd,CACLL,aAAc,CACZjG,MAAOjC,EAAMkI,aAAajG,MAC1BuO,wBAAyBxQ,EAAMkI,aAAasI,wBAC5CrI,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAa,CAACvI,EAAMkI,aAAaK,YAAY,GAAItO,KAI9C,CACLiO,aAAc,CACZjG,MAAOjC,EAAMkI,aAAajG,MAC1BuO,wBAAyBxQ,EAAMkI,aAAasI,wBAC5CrI,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAavI,EAAMkI,aAAaK,aAIxC,IACAxP,KAAKC,MAAMqP,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CACZC,YAAa,CACXxP,KAAKiH,MAAMkI,aAAaK,YAAY,GACpCtO,MAKV,GAAC,+BAED,SACEoM,GAEA,IAAMpC,EAAalL,KAAKC,MAAM2X,YAAY1M,WAC1ClL,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtBkI,aAAc,CACZjG,MAAOjC,EAAMkI,aAAajG,MAC1BuO,wBAAyBxQ,EAAMkI,aAAasI,wBAC5CrI,QAASnI,EAAMkI,aAAaC,QAC5BI,YAAalC,GAEhB,IACDtN,KAAKC,MAAMqP,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CAAEC,YAAalC,IAEjC,GAAC,2BAED,WACE,IAAMpC,EAAalL,KAAKC,MAAM2X,YAAY1M,WAC1ClL,KAAKC,MAAM+X,UAAU9M,EACvB,GAAC,oBAED,WAA4B,IAAD,EACnBA,EAAalL,KAAKC,MAAM2X,YAAY1M,WACpCnE,EAAc/G,KAAKC,MAAM2X,YAAY7Q,YACrC3G,EAAqD,QACLL,IAAlDC,KAAKC,MAAM2X,YAAYK,wBACzB7X,EAAW8B,KACT,CACEvB,KAAM,0BACNO,MAAM,GAAD,OAAKlB,KAAKC,MAAM2X,YAAYK,uBAAsB,cAIZlY,IAA7CC,KAAKC,MAAM2X,YAAYM,mBACzB9X,EAAW8B,KACT,CACEvB,KAAM,qBACNO,MAAOlB,KAAKC,MAAM2X,YAAYM,kBAAkBxM,cAMtD,IAAMyM,EAC8C,QADU,EAC5DnY,KAAKC,MAAM+B,SAAS,GAAG8U,mCAA2B,QAAI,GAExD,IACEqB,EAAqB9M,SAAQ,SAAAtE,GAAgB,IAAD,GAED,QADyB,EAChEA,EAAYmQ,mCAA2B,QAAI,IACpB7L,SACvB,SAACiG,EAAwC/Q,GACvC+Q,EAAK6F,2CAA2C9L,SAAQ,SACtD/K,EAOAC,GAEA,IAAMI,EAAO,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CAC5C1K,MAAOZ,EAAKiL,wBAAwB,GAAGC,UACvCqE,iBACIvP,EAAKiL,wBAAwB,GAAGsF,uBACpCf,QAASxP,EAAKiL,wBAAwB,GAAGG,cAE3C,GAAIpL,EAAKqL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAE1D,IAAM1K,EAAQ,IAAI0K,EAAAA,GAAAA,OAAAA,aAA6B,CAC7C1K,MAAOZ,EAAKwL,oBAAoB,GAAGN,UACnCqE,iBACIvP,EAAKwL,oBAAoB,GAAG+E,uBAChCf,QAASxP,EAAKwL,oBAAoB,GAAGJ,cAElC/K,EAAKyW,OAAOhB,GAA6BG,kBACxC5V,EAAKyW,OAAOhB,GAA6BQ,QAC3CxW,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOA,EAAMwK,aAIrB,MAAWpL,EAAKqL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,OAEvBjL,EAAKyW,OAAOhB,GAA6BG,kBACxC5V,EAAKyW,OAAOhB,GAA6BQ,QAC3CxW,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOZ,EAAK0L,YAKtB,GACF,GAEJ,GASF,CARE,MAAOxF,GACP4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA4B,EAAMzB,SAGZ,CAEA,IAKI0I,EACAnN,EANE8X,EAAWC,KAAKC,IAAI,EAAGtY,KAAKC,MAAM+B,SAAS,GAAGuW,eAAiB,EAE/DnX,EACW,MAAf2F,EAAmB,UAAMmE,EAAU,aAAKnE,GAAgBmE,EAI1D,GAAIlL,KAAKC,MAAM2X,YAAYY,gBAAiB,CAE1C,IAAIzI,EAkGAC,EAhGFD,EADmC,MAAjC/P,KAAKiH,MAAMkI,aAAajG,OAExB,iCACE,SAAC,KAAO,CAAC8H,OAAK,sBAGd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,kBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAK+O,wBAGnB,SAAC,KAAG,CAAC9N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,IACL9P,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAK+O,2BAKrB,UAAC,KAAG,CAACkC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,oBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKgP,wBAGnB,SAAC,KAAG,CAAC/N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,IACL9P,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKgP,2BAKrB,UAAC,KAAG,CAACiC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,mBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKiP,wBAGnB,SAAC,KAAG,CAAChO,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,IACL9P,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKiP,8BAQvB,iCACE,SAAC,KAAO,CAAC+B,OAAK,qBAEJ,gHAQ2B,MAAvChR,KAAKiH,MAAMkI,aAAaK,cAC1BQ,GACE,iCACE,SAAC,KAAO,CAACgB,OAAK,mCAGd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAKrR,KAAKiH,MAAMkI,aAAaK,YAAY,GACzCjO,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAaK,YAAY,GAC3C9C,SAAU1M,KAAKuR,4BAGnB,SAAC,KAAG,CAACtQ,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAK,EACLC,IAAK,EACLC,IAAK+G,EACL9G,KAAM,EACNpQ,MAAO,CACLlB,KAAKiH,MAAMkI,aAAaK,YAAY,GACpCxP,KAAKiH,MAAMkI,aAAaK,YAAY,IAEtC9C,SAAU1M,KAAKwR,uBAGnB,SAAC,KAAG,CAACvQ,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAKpR,KAAKiH,MAAMkI,aAAaK,YAAY,GACzC6B,IAAK+G,EACL7W,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAaK,YAAY,GAC3C9C,SAAU1M,KAAKyR,kCAO3BhE,GACE,2BACGuC,EACAD,GACD,SAAC,KAAO,CAACiB,OAAK,KACd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,yBAGnB,SAAC,KAAG,CAAC7N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,EACL9P,KAAK,QACL+P,KAAM,GACN9I,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,8BAMzB,IAAM2J,EAASzY,KAAKwX,mBACpBlX,GACE,SAAC,KAAK,CACJ4N,OAAQ,EAAE,GAAI,IACdC,MAAO,IACP3F,MAAO,CACL4F,YAAa,QACbC,YAAa,MACbC,YAAa,OACbC,WAAYvO,KAAKiH,MAAMgE,UAAY,UAAY,SAC/CuD,gBAAgB,6BAAD,OAA+BiK,EAAOlO,WAAU,MAC/D,UAEF,SAAC,EAAW,CACVlJ,OAAQD,EACRhB,WAAYA,EACZqB,YAAU,EACVvB,eAAa,KAIrB,MAEEuN,GACE,0BACE,UAAC,KAAG,CAACwD,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,yBAGnB,SAAC,KAAG,CAAC7N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,EACL9P,KAAK,QACL+P,KAAM,GACN9I,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,6BAMzBxO,GACE,SAAC,EAAW,CACVe,OAAQD,EACRhB,WAAYA,EACZqB,YAAU,EACVvB,eAAa,IAKnB,IAAMwY,EAAU,GACZ1Y,KAAKC,MAAM0Y,aACbD,EAAQxW,MACN,SAAC,IAAO,CAACd,MAAM,sBAAqB,UAClC,SAAC,KAAM,CACL0D,KAAK,UACLgJ,MAAM,SACN3M,MAAM,SAACyX,GAAA,EAAc,IACrBrL,QAASvN,KAAKuX,mBAMtB,MAUIvX,KAAKC,MADJkL,GARS,EAAZkE,aACW,EAAXsJ,YACS,EAAT1N,UACQ,EAARjJ,SACkB,EAAlB8I,mBACa,EAAbwE,cACS,EAAT0I,UACW,EAAXJ,aACa,eAEf,OACE,SAAC,UAAS,gBACRpP,MAAO,CAAEC,OAAQ,OAAQgE,YAAa,QAElCtB,GAAU,cAEd,UAAC,KAAK,CAACqB,MAAM,QAAO,WAClB,gBAAKhE,MAAO,CAAEiE,YAAa,QAAS,UAClC,UAAC,KAAK,CAACiB,UAAU,WAAWlB,MAAM,MAAK,WACrC,SAAC,KAAM,CACLjL,KAAK,QACLqJ,QAAS5K,KAAKiH,MAAMgE,UACpByB,SAAU1M,KAAK0K,uBACfiC,iBAAiB,SAACkM,GAAA,EAAW,IAC7BjM,mBAAmB,SAACkM,GAAA,EAAoB,OAE1C,SAAC,KAAO,CACNnL,UAAU,OACVC,QAASH,EACTI,aAAc,CAAE3D,MAAO,SACvB9I,MAAM,mBAAkB,UAExB,SAAC,KAAM,CACL0D,KAAK,UACLgJ,MAAM,SACN3M,MAAM,SAAC4M,GAAA,EAAe,QAGzB2K,OAGJpY,OA5BEN,KAAKC,MAAM2X,YAAY1M,WAgClC,KAAC,EAppBkB,CAASnJ,EAAAA,WCjE9B,IAAQgX,GAAWC,GAAAA,EAAAA,OAsKnB,SA3HqB,0CAKnB,WAAa/Y,GAA8B,IAAD,EAIkC,OAJlC,gBACxC,cAAMA,IALRgH,MAAQ,CACNgS,mCAA+BlZ,GAK/B,EAAKmZ,mBAAqB,EAAKA,mBAAmBvO,MAAK,WACvD,EAAKwO,kBAAoB,EAAKA,kBAAkBxO,MAAK,WACrD,EAAKyO,0BAA4B,EAAKA,0BAA0BzO,MAAK,WAAK,CAC5E,CA8GC,OA5GD,yCAGA,SAAmBkN,GACjB7X,KAAKC,MAAMoZ,4BAA4B,CACrCxB,sBAAAA,EACAyB,UAAU,GAEd,GAEA,uCAGA,SACEpY,GAEAlB,KAAKqH,SAAS,CAAE4R,8BAA+B/X,GACjD,GAEA,gCAGA,WACE,IAAMgK,EAAalL,KAAKiH,MAAMgS,mCACXlZ,IAAfmL,IACFlL,KAAKC,MAAMoZ,4BAA4B,CACrCxB,sBAAuB3M,EACvBoO,UAAU,IAEZtZ,KAAKqH,SAAS,CAAE4R,mCAA+BlZ,IAEnD,GAAC,oBAED,WAA4B,IAAD,OACzB,QAA4BA,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAGT,IAwCIuX,EAxCEC,EAAexZ,KAAKC,MAAMwZ,aAAajS,OAAS,EAChDkS,EAAsC,GACtCC,EAAiC,GA8DvC,OA7DA3Z,KAAKC,MAAMwZ,aAAapO,SAAQ,SAAAuM,GAC9B,IAAMC,EAAwBD,EAAY1M,WACpC0O,EAAS,EAAK3Z,MAAM+B,SAAS6V,GAC7BjO,EAAoBgQ,EAAO,GAAGC,kBACpCD,EAAO,GAAGE,oBAAoBzO,SAAQ,SAAA0O,GACpC,IAkBQ3Y,EAlBFyU,EAAKkE,EAAgBC,sBACrBjT,EAAcgT,EAAgBE,uBAChCrC,EAAY1M,aAAe2K,IACzB,EAAK5V,MAAMia,6BAA6BhN,IAAI2I,GAC9C6D,EAAiBxX,MACf,SAAC,GAAe,CAEd0V,YAAaA,EACb5V,SAAU4X,EACV3O,UAAW,EAAKhL,MAAMka,8BAA8BjN,IAAI2I,GACxDxG,aAAc,EAAKpP,MAAMma,yBAAyBvE,GAClD/K,mBAAoB,EAAK7K,MAAMoa,8BAC/B/K,cAAe,EAAKrP,MAAMqa,yBAC1BtC,UAAW,EAAKmB,kBAChBR,YAAaa,GAAa,UARlB5P,EAAiB,YAAIiM,MAc/BzU,EADkB,KAAhB2F,EACG,UAAM8O,EAAE,cAAM9O,GAEd,UAAM8O,GAEb8D,EAAYzX,MACV,SAAC6W,GAAM,CAAU7X,MAAO2U,EAAG,SAAEzU,GAAhByU,KAIrB,GACF,IAGI2D,IACFD,GACE,UAAC,KAAK,CAAC/M,MAAM,SAASjL,KAAM,GAAIiH,MAAO,CAAE+R,QAAS,QAAS,WACzD,SAAC,KAAM,CACL5I,aAAa,GACbnJ,MAAO,CAAE0B,MAAO,KAChBwC,SAAU1M,KAAKoZ,0BACflY,MAAOlB,KAAKiH,MAAMgS,8BAClBuB,YAAU,WAETb,KAEH,SAAC,IAAO,CAACvY,MAAM,MAAK,UAClB,SAAC,KAAG,CACFD,MAAM,SAACsZ,GAAA,EAAmB,IAC1B3V,KAAK,UACLyI,QAASvN,KAAKkZ,4BAQtB,UAAC,IAAI,CAACzX,YAAY,EAAM,UACrBiY,EACAH,IAGP,KAAC,EAxHkB,CAASxX,EAAAA,W,8FCqI9B,SAxIiB,0CACf,WAAa9B,GAA0B,IAAD,EASnC,OATmC,gBACpC,cAAMA,IACDyK,uBAAyB,EAAKA,uBAAuBC,MAAK,WAC/D,EAAKmE,oBAAsB,EAAKA,oBAAoBnE,MAAK,WACzD,EAAK1D,MAAQ,CACXgE,UAAW,EAAKhL,MAAMgL,UACtBkE,aAAc,CACZC,QAAS,EAAKnP,MAAMoP,aAAaD,UAEpC,CACH,CA0HC,OA1HA,8CAED,SACExE,EACAC,GAEA7K,KAAKC,MAAM6K,mBAAmB,CAC5B4P,WAAY1a,KAAKC,MAAM0a,QAAQna,IAC/ByK,UAAWL,IAEb5K,KAAKqH,SAAS,CAAE4D,UAAWL,GAC7B,GAAC,iCAED,SAAqB1J,GACN,MAATA,IACFlB,KAAKC,MAAMqP,cAAc,CACvBoL,WAAY1a,KAAKC,MAAM0a,QAAQna,IAC/B+O,aAAc,CACZH,QAASlO,KAGblB,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtBkI,aAAc,CACZC,QAASlO,GAEZ,IAEL,GAAC,oBAED,WACE,IAAMd,EAAqD,CACzD,CACEO,KAAM,cACNO,MAAOlB,KAAKC,MAAM0a,QAAQ5T,cAIxB0G,GACJ,0BACE,UAAC,KAAG,CAACwD,QAAQ,SAASzE,MAAM,SAAQ,WAClC,SAAC,KAAG,CAACvL,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,yBAGnB,SAAC,KAAG,CAAC7N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,EACL9P,KAAK,QACL+P,KAAM,GACN9I,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,6BAWzB,EAQI9O,KAAKC,MADJkL,GANS,EAAZkE,aACS,EAATpE,UACO,EAAP0P,QACQ,EAAR3Y,SACkB,EAAlB8I,mBACa,EAAbwE,eACa,eAEf,OACE,SAAC,UAAS,gBACR9G,MAAO,CAAEC,OAAQ,OAAQgE,YAAa,QAElCtB,GAAU,cAEd,UAAC,KAAK,CAACqB,MAAM,QAAO,WAClB,gBAAKhE,MAAO,CAAEiE,YAAa,QAAS,UAClC,SAAC,KAAK,CAACiB,UAAU,WAAWlB,MAAM,MAAMjL,KAAM,IAAI,UAChD,UAAC,KAAK,CAACmM,UAAU,WAAWlB,MAAM,MAAK,WACrC,SAAC,KAAM,CACLjL,KAAK,QACLmL,SAAU1M,KAAK0K,uBACfE,QAAS5K,KAAKC,MAAMgL,UACpB0B,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,OAEhC,SAAC,KAAO,CACNe,UAAU,OACVC,QAASH,EACTI,aAAc,CAAE3D,MAAO,SACvB9I,MAAM,mBAAkB,UAExB,SAAC,KAAM,CACL0D,KAAK,UACLgJ,MAAM,SACN3M,MAAM,SAAC4M,GAAA,EAAe,gBAMhC,SAAC,EAAW,CACV1M,OAAQrB,KAAKC,MAAM0a,QAAQja,MAC3BN,WAAYA,EACZqB,YAAU,EACVvB,eAAa,SAjCZF,KAAKC,MAAM0a,QAAQna,IAsC9B,KAAC,EArIc,CAASuB,EAAAA,WCQ1B,SAzBiB,qGAsBd,OAtBc,8BACf,WAA4B,IAAD,OACnB5B,EAAQH,KAAKC,MAAM2a,SAASva,KAAI,SAACsa,EAASpa,GAC9C,IAAMC,EAAMma,EAAQna,IACpB,OACE,SAAC,GAAW,CAEVma,QAASA,EACT3Y,SAAU,EAAK/B,MAAM+B,SAASxB,GAC9ByK,UAAW,EAAKhL,MAAM4a,mBAAmB3N,IAAI1M,GAC7C6O,aAAc,EAAKpP,MAAM6a,qBAAqBta,GAC9CsK,mBAAoB,EAAK7K,MAAM8a,0BAC/BzL,cAAe,EAAKrP,MAAM+a,sBANrBL,EAAQna,IASnB,IAEA,OACE,SAAC,IAAI,CAACiB,YAAY,EAAM,SACrBtB,GAGP,KAAC,EAtBc,CAAS4B,EAAAA,W,8FCyJ1B,SAxIiB,0CACf,WAAa9B,GAA0B,IAAD,EAOnC,OAPmC,gBACpC,cAAMA,IACDyK,uBAAyB,EAAKA,uBAAuBC,MAAK,WAC/D,EAAKmE,oBAAsB,EAAKA,oBAAoBnE,MAAK,WACzD,EAAK1D,MAAQ,CACXgE,UAAW,EAAKhL,MAAMgL,UACtBkE,aAAc,CAAEC,QAAS,EAAKnP,MAAMoP,aAAaD,UAClD,CACH,CA4HC,OA5HA,8CAED,SACExE,EACAC,GAEA7K,KAAKC,MAAM6K,mBAAmB,CAC5BmQ,WAAYjb,KAAKC,MAAMib,QAAQ1a,IAC/ByK,UAAWL,IAEb5K,KAAKqH,SAAS,CAAE4D,UAAWL,GAC7B,GAAC,iCAED,SAAqB1J,GACN,MAATA,IACFlB,KAAKC,MAAMqP,cAAc,CACvB2L,WAAYjb,KAAKC,MAAMib,QAAQ1a,IAC/B+O,aAAc,CACZH,QAASlO,KAGblB,KAAKqH,SAAS,CAAE8H,aAAc,CAAEC,QAASlO,KAE7C,GAAC,oBAED,WACE,IAAMd,EAAqD,CACzD,CACEO,KAAM,gBACNO,MAAOlB,KAAKC,MAAMib,QAAQ7K,aAAa3E,aAEzC,CACE/K,KAAM,oBACNO,MAAOlB,KAAKC,MAAMib,QAAQ5K,iBAAiB5E,aAE7C,CACE/K,KAAM,iBACNO,MAAOlB,KAAKC,MAAMib,QAAQC,gBAIxB1N,GACJ,0BACE,UAAC,KAAG,CAACwD,QAAQ,SAASzE,MAAM,SAAQ,WAClC,SAAC,KAAG,CAACvL,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,yBAGnB,SAAC,KAAG,CAAC7N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,EACL9P,KAAK,QACL+P,KAAM,GACN9I,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,6BAWzB,EAQI9O,KAAKC,MADJkL,GANS,EAAZkE,aACS,EAATpE,UACO,EAAPiQ,QACQ,EAARlZ,SACkB,EAAlB8I,mBACa,EAAbwE,eACa,eAEf,OACE,SAAC,UAAS,gBACR9G,MAAO,CAAEC,OAAQ,OAAQgE,YAAa,QAElCtB,GAAU,cAEd,UAAC,KAAK,CAACqB,MAAM,QAAO,WAClB,gBAAKhE,MAAO,CAAEiE,YAAa,QAAS,UAClC,UAAC,KAAK,CAACiB,UAAU,WAAWlB,MAAM,MAAK,WACrC,SAAC,KAAM,CACLjL,KAAK,QACLmL,SAAU1M,KAAK0K,uBACfE,QAAS5K,KAAKC,MAAMgL,UACpB0B,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,OAEhC,SAAC,KAAO,CACNe,UAAU,OACVC,QAASH,EACTI,aAAc,CAAE3D,MAAO,SACvB9I,MAAM,mBAAkB,UAExB,SAAC,KAAM,CACL0D,KAAK,UACLgJ,MAAM,SACN3M,MAAM,SAAC4M,GAAA,EAAe,cAK9B,SAAC,EAAW,CACV1M,OAAQrB,KAAKC,MAAMib,QAAQxa,MAC3BN,WAAYA,EACZqB,YAAU,EACVvB,eAAa,SA/BZF,KAAKC,MAAMib,QAAQ1a,IAoC9B,KAAC,EArIc,CAASuB,EAAAA,WCU1B,SAzBiB,qGAsBd,OAtBc,8BACf,WAA4B,IAAD,OACnB5B,EAAQH,KAAKC,MAAMmb,SAAS/a,KAAI,SAAC6a,EAAS3a,GAC9C,IAAMC,EAAM0a,EAAQ1a,IACpB,OACE,SAAC,GAAW,CAEV0a,QAASA,EACTlZ,SAAU,EAAK/B,MAAM+B,SAASxB,GAC9ByK,UAAW,EAAKhL,MAAMob,mBAAmBnO,IAAI1M,GAC7C6O,aAAc,EAAKpP,MAAMqb,qBAAqB9a,GAC9CsK,mBAAoB,EAAK7K,MAAMsb,0BAC/BjM,cAAe,EAAKrP,MAAMub,sBANrBN,EAAQ1a,IASnB,IAEA,OACE,SAAC,IAAI,CAACiB,YAAY,EAAM,SACrBtB,GAGP,KAAC,EAtBc,CAAS4B,EAAAA,WChBnB,SAAS0Z,GAAeC,GAc7B,OAbA,SAAkCzb,GAChC,IAAM0b,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACf,OACE,SAACN,GAAS,kBACJzb,GAAK,IACT0b,SAAUA,EACVE,SAAUA,EACVE,OAAQA,IAGd,CAEF,C,eCuQA,SA9QuB,0CAIrB,WAAa9b,GAAgC,IAAD,EAazC,OAbyC,gBAC1C,cAAMA,IACD6O,oBAAsB,EAAKA,oBAAoBnE,MAAK,WACzD,EAAKoE,mBAAqB,EAAKA,mBAAmBpE,MAAK,WACvD,EAAKqE,mBAAqB,EAAKA,mBAAmBrE,MAAK,WACvD,EAAKsE,mBAAqB,EAAKA,mBAAmBtE,MAAK,WACvD,EAAKuE,gBAAkB,EAAKA,gBAAgBvE,MAAK,WACjD,EAAK1D,MAAQ,CACXkI,aAAc,CACZC,QAAS,EAAKnP,MAAMoP,aAAaD,QACjClG,MAAO,EAAKjJ,MAAMoP,aAAanG,MAC/B+S,YAAa,EAAKhc,MAAMoP,aAAa4M,cAExC,CACH,CAyPC,OAzPA,2CAED,SAAqB/a,GAA6B,IAAD,OAClC,MAATA,IACFlB,KAAKC,MAAMic,qBAAqB7Q,SAAQ,SAAC7K,GACvC,EAAKP,MAAMqP,cAAc,CACvB9O,IAAAA,EACA+O,aAAc,CACZrG,MAAO,EAAKjC,MAAMkI,aAAajG,MAC/BkG,QAASlO,EACT+a,YAAa,EAAKhV,MAAMkI,aAAa8M,cAG3C,IACAjc,KAAKmc,mBAAmB,CAAE/M,QAASlO,IAEvC,GAAC,gCAED,SAAoBA,GAAwC,IAAD,OACzD,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAMkI,aAAajG,MAAqB,CAChE,IAAMA,EAAQ,CACZvD,MAAM8J,QAAQvO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BlJ,KAAKiH,MAAMkI,aAAajG,MAAM,IAEhClJ,KAAKmc,mBAAmB,CAAEjT,MAAAA,IAC1BlJ,KAAKC,MAAMic,qBAAqB7Q,SAAQ,SAAC7K,GACvC,EAAKP,MAAMqP,cAAc,CACvB9O,IAAAA,EACA+O,aAAc,CACZrG,MAAOA,EACPkG,QAAS,EAAKnI,MAAMkI,aAAaC,QACjC6M,YAAa,EAAKhV,MAAMkI,aAAa8M,cAG3C,GACF,CACF,GAAC,gCAED,SAAoB/a,GAAwC,IAAD,OACzD,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAMkI,aAAajG,MAAqB,CAChE,IAAMA,EAAQ,CACZlJ,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BvD,MAAM8J,QAAQvO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAMkI,aAAajG,MAAM,IAEhClJ,KAAKmc,mBAAmB,CAAEjT,MAAAA,IAC1BlJ,KAAKC,MAAMic,qBAAqB7Q,SAAQ,SAAC7K,GACvC,EAAKP,MAAMqP,cAAc,CACvB9O,IAAAA,EACA+O,aAAc,CACZrG,MAAOA,EACPkG,QAAS,EAAKnI,MAAMkI,aAAaC,QACjC6M,YAAa,EAAKhV,MAAMkI,aAAa8M,cAG3C,GACF,CACF,GAAC,gCAED,SAAoB/a,GAAwC,IAAD,OACzD,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAMkI,aAAajG,MAAqB,CAChE,IAAMA,EAAQ,CACZlJ,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BlJ,KAAKiH,MAAMkI,aAAajG,MAAM,GAC9BvD,MAAM8J,QAAQvO,GAASA,EAAM,GAAKA,GAEpClB,KAAKmc,mBAAmB,CAAEjT,MAAAA,IAC1BlJ,KAAKC,MAAMic,qBAAqB7Q,SAAQ,SAAC7K,GACvC,EAAKP,MAAMqP,cAAc,CACvB9O,IAAAA,EACA+O,aAAc,CACZrG,MAAOA,EACPkG,QAAS,EAAKnI,MAAMkI,aAAaC,QACjC6M,YAAa,EAAKhV,MAAMkI,aAAa8M,cAG3C,GACF,CACF,GAAC,mCAED,SAAuB/a,GAAuB,IAAD,OAC3ClB,KAAKmc,mBAAmB,CAAEF,YAAa/a,IAEvClB,KAAKC,MAAMic,qBAAqB7Q,SAAQ,SAAC7K,GACvC,EAAKP,MAAMqP,cAAc,CACvB9O,IAAAA,EACA+O,aAAc,CACZrG,MAAO,EAAKjC,MAAMkI,aAAajG,MAC/BkG,QAAS,EAAKnI,MAAMkI,aAAaC,QACjC6M,YAAa/a,IAGnB,GACF,GAAC,6BAED,WACE,IAAiBoM,EAOjB,OAAqC,MAAjCtN,KAAKiH,MAAMkI,aAAajG,MAHnB,KAAO,WAJCoE,EAQAtN,KAAKiH,MAAMkI,aAAajG,OAPtB,IAGe,KAFtBoE,EAAO,IAE2B,GADlCA,EAAO,IACmC/C,SAAS,IAAIlE,MAAM,GAMhE,OAEX,GAAC,gCAED,YAQU,IAPR6C,EAAK,EAALA,MACAkG,EAAO,EAAPA,QACA6M,EAAW,EAAXA,YAMAjc,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxBkI,aAAc,CACZC,QAAgB,OAAPA,QAAO,IAAPA,EAAAA,EAAWnI,EAAMkI,aAAaC,QACvClG,MAAY,OAALA,QAAK,IAALA,EAAAA,EAASjC,EAAMkI,aAAajG,MACnC+S,YAAwB,OAAXA,QAAW,IAAXA,EAAAA,EAAehV,EAAMkI,aAAa8M,aAElD,GACH,GAAC,oBAED,WAA4B,IACtBlM,EADqB,OAkFzB,OAhFqC,MAAjC/P,KAAKiH,MAAMkI,aAAajG,QAC1B6G,GACE,iCACE,SAAC,KAAO,CAACiB,OAAK,sBACd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,kBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAK+O,wBAGnB,SAAC,KAAG,CAAC9N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,IACL9P,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAK+O,2BAKrB,UAAC,KAAG,CAACkC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,oBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKgP,wBAGnB,SAAC,KAAG,CAAC/N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,IACL9P,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKgP,2BAKrB,UAAC,KAAG,CAACiC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAACjQ,KAAM,EAAE,mBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKiP,wBAGnB,SAAC,KAAG,CAAChO,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,IACL9P,KAAK,QACLiH,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAajG,MAAM,GACrCwD,SAAU1M,KAAKiP,2BAIrB,SAAC,KAAO,CAAC+B,OAAK,SAMlB,2BACGjB,GACD,UAAC,KAAG,CAACkB,QAAQ,QAAQzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WACjD,SAAC,KAAG,CAACjQ,KAAM,EAAE,sBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLkQ,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACNpQ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,yBAGnB,SAAC,KAAG,CAAC7N,KAAM,EAAE,UACX,SAAC,KAAW,CACVmQ,IAAK,EACLC,IAAK,EACL9P,KAAK,QACL+P,KAAM,GACN9I,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOlB,KAAKiH,MAAMkI,aAAaC,QAC/B1C,SAAU1M,KAAK8O,4BAIrB,SAAC,KAAG,CAACmC,QAAQ,QAAQzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,UACjD,SAAC,KAAQ,CACPhQ,MAAOlB,KAAKiH,MAAMkI,aAAa8M,YAC/BvP,SAAU,SAAC7B,GAAK,OACd,EAAKuR,sBAAsBvR,EAAMwR,OAAOzR,QAAQ,EAAC,mCAO7D,KAAC,EA3QoB,CAAS7I,EAAAA,W,iGCiJhC,SAnK+B,SAAH,GAmBR,IAlBlBuD,EAAQ,EAARA,SACAoH,EAAQ,EAARA,SACA4P,EAAqB,EAArBA,sBACAhN,EAAa,EAAbA,cACAiN,EAAuB,EAAvBA,wBACGtc,GAAK,cAcAuc,EAAUlX,EAAVkX,MASFC,EAAWD,EAAME,OAAM,SAAC5X,GAAU,OACtCA,EAAK6X,KAAKD,OAAM,SAAClc,GAAW,OAAK8b,EAAsBpP,IAAI1M,EAAI,GAAC,IAE5Doc,GACHH,GACDD,EAAMK,MAAK,SAAC/X,GAAU,OACpBA,EAAK6X,KAAKE,MAAK,SAACrc,GAAW,OAAK8b,EAAsBpP,IAAI1M,EAAI,GAAC,IAG7Dsc,EAA0B,SAAH,GAMhB,IALXhY,EAAI,EAAJA,KACAmG,EAAS,EAATA,UAKAnG,EAAK6X,KAAKtR,SAAQ,SAAC7K,GACjBkM,EAAS,CAAE3B,OAAQvK,EAAKyK,UAAAA,GAC1B,GACF,EAEA,OACE,SAAC,UAAS,gBACRzC,MAAO,CAAEC,OAAQ,OAAQgE,YAAa,QAClCxM,GAAK,cAET,SAAC,KAAK,CAACuM,MAAM,QAAO,UAClB,iBAAKhE,MAAO,CAAEiE,YAAa,OAAQvD,MAAO,SAAU,WAClD,SAAC,KAAK,CAACwE,UAAU,WAAWlB,MAAM,MAAK,UACrC,UAAC,KAAQ,CACPoQ,cAAeA,EACfhS,QAAS6R,EACT/P,SAvCkB,SAACqQ,GAC7B,IAAM9R,EAAY8R,EAAEV,OAAOzR,QAC3B4R,EAAMnR,SAAQ,SAACvG,GACbgY,EAAwB,CAAEhY,KAAAA,EAAMmG,UAAAA,GAClC,GACF,EAkC4C,WAEhC,SAAC,IAAO,CACN7J,MAAK,UAAKkE,EAASkG,UAAS,YAAIlG,EAASuL,wBACzCmM,gBAAiB,EAAE,SAElB1X,EAASoG,eAEZ,SAAC,KAAO,CACNiC,UAAU,UACVE,aAAc,CAAE3D,MAAO,SACvB9I,MAAM,mBACNwM,QAAS,kBACP,SAAC,GAAiB,CAChBsO,qBAAsBM,EAAMS,QAC1B,SAACC,EAAepY,GACd,MAAM,GAAN,gBAAWoY,IAAG,QAAKpY,EAAK6X,MAC1B,GACA,IAEFrN,cAAeA,EACfD,aACEkN,EAAwBC,EAAM,GAAGG,KAAK,KAExC,EACF,UAEF,SAAC,KAAM,CACL7X,KAAK,UACLgJ,MAAM,SACNtF,MAAO,CAAE2U,WAAY,QACrBhc,MAAM,SAAC4M,GAAA,EAAe,aAK7ByO,EAAMnc,KAAI,SAACyE,GACV,IAAQ4G,EACN5G,EADM4G,YAAamF,EACnB/L,EADmB+L,uBAAwBrF,EAC3C1G,EAD2C0G,UAAWmR,EACtD7X,EADsD6X,KAElDS,EAAuB1R,EAAYrF,MAAM,EAAG,IAC5CgX,EAAqBD,IAAyB1R,EAAcA,EAAW,UAAM0R,EAAoB,OACjGE,EAAYX,EAAKD,OAAM,SAAClc,GAAW,OACvC8b,EAAsBpP,IAAI1M,EAAI,IAE1B+c,GACHD,GACDX,EAAKE,MAAK,SAACrc,GAAW,OAAK8b,EAAsBpP,IAAI1M,EAAI,IAC3D,OACE,iBAEEgI,MAAO,CACLiE,YAAa,OACbvC,MAAO,OACPpB,QAAS,OACT0U,cAAe,OACf,WAEF,SAAC,KAAQ,CACPZ,cAAeW,EACf3S,QAAS0S,EACT5Q,SAAU,SAACqQ,GAAM,OACfD,EAAwB,CACtBhY,KAAAA,EACAmG,UAAW8R,EAAEV,OAAOzR,SACpB,KAEN,iBAAKpC,MAAO,CAAEiE,YAAa,OAAQ,WACjC,SAAC,IAAO,CACNrL,MAAK,UAAKoK,EAAS,YAAIqF,GACvBmM,gBAAiB,EAAE,SAElBK,KAEH,SAAC,KAAO,CACN1P,UAAU,UACVE,aAAc,CAAE3D,MAAO,SACvB9I,MAAM,mBACNwM,QAAS,kBACP,SAAC,GAAiB,CAChBsO,qBAAsBpX,EAAK6X,KAC3BrN,cAAeA,EACfD,aAAckN,EAAwBzX,EAAK6X,KAAK,KAChD,EACF,UAEF,SAAC,KAAM,CACL7X,KAAK,UACLgJ,MAAM,SACNtF,MAAO,CAAE2U,WAAY,QACrBhc,MAAM,SAAC4M,GAAA,EAAe,aAGtB,UA3CEjJ,EAAK+L,uBAAsB,YAAI/L,EAAK4G,aA8ClD,WAKV,EC1DA,SAzC+B,SAAH,GAkBR,IAjBlBkK,EAAW,EAAXA,YACAlJ,EAAQ,EAARA,SACA4C,EAAa,EAAbA,cACAiN,EAAuB,EAAvBA,wBACAD,EAAqB,EAArBA,sBAcMmB,EAjEc,SAAC7H,GACrB,IAAM6H,EAAwB,OAAX7H,QAAW,IAAXA,OAAW,EAAXA,EAAaqH,QAC9B,SACES,EACAC,GACI,IAAD,IACKrY,EAAwBqY,EAAxBrY,SAAUR,EAAc6Y,EAAd7Y,KAAMtE,EAAQmd,EAARnd,IAClBod,EAActY,EAASoG,YACvBmS,EAAU/Y,EAAK4G,YAEfoS,EAAwC,QAA7B,EAAGJ,EAAcE,UAAY,2BACzCtY,GAAQ,IACXkX,MAAO,CAAC,IAEJuB,EAAoC,QAA7B,EAAGD,EAAYtB,MAAMqB,UAAQ,2BACrC/Y,GAAI,IACP6X,KAAM,KAGR,OAAO,kBACFe,GAAa,eACfE,GAAW,kBACPE,GAAW,IACdtB,OAAM,kBACDsB,EAAYtB,OAAK,eACnBqB,GAAO,kBAAQE,GAAO,IAAEpB,KAAK,GAAD,gBAAMoB,EAAQpB,MAAI,CAAEnc,WAIzD,GACA,CAAC,GAaH,OATAwd,OAAOC,KAAKR,GAAYpS,SAAQ,SAACuS,GAC/B,IACQpB,EADSiB,EAAWG,GACpBpB,MACF0B,EAAWF,OAAOC,KAAKzB,GAAOnc,KAClC,SAACwd,GAAe,OAAKrB,EAAMqB,EAAQ,IAErCJ,EAAWG,GAAapB,MAAQ0B,CAClC,IAEOT,CACT,CAqB+CU,CAAcvI,GAE3D,GAAuC,IAAnCoI,OAAOC,KAAKR,GAAYjW,OAC1B,OAAO,wBAGT,IAAMrH,EAAQ6d,OAAOC,KAAKR,GAAYpd,KAAI,SAACud,GACzC,IAAMtY,EAAWmY,EAAWG,GAC5B,OACE,SAAC,GAAsB,CAErBtY,SAAUA,EACVoH,SAAUA,EACV4C,cAAeA,EACfiN,wBAAyBA,EACzBD,sBAAuBA,GALO,KAAzBhX,EAASoG,YAAqBpG,EAASoG,YAAW,mBAAekS,GAQ5E,IAEA,OAAO,SAAC,IAAI,CAACnc,YAAY,EAAM,SAAEtB,GACnC,ECjEA,SA3C0B,SAAH,GAQH,IAPlBie,EAAS,EAATA,UACAC,EAAS,EAATA,UACAvR,EAAI,EAAJA,KAMA,OACE,gBACEtE,MAAO,CACLG,SAAU,QACVU,IAAI,GAAD,OAAKgV,EAAS,MACjBC,KAAK,GAAD,OAAKF,EAAS,MAClBG,gBAAiB,4BACjB7M,SAAU,QACV8M,UAAW,OACXjE,QAAS,OACTxZ,WAAY,OACZ0d,cAAe,QACf,SAED3R,EAAKzM,KAAI,SAAC2K,EAAKjB,GACd,IAAM3J,EAAa4K,EAAI5K,WACvB,OACE,4BACE,mCAAW4K,EAAIzK,SACdH,EAAWC,KAAI,SAACqe,GACf,OACE,2BACGA,EAAK/d,KAAI,MAAG,iBAAM6H,MAAO,CAAEzH,WAAY,KAAM,SAAE2d,EAAKxd,UAD7Cwd,EAAK/d,KAAOqK,EAAI2T,OAI9B,MARQ3T,EAAI2T,OAYlB,KAGN,ECrCO,IAAMC,GAAuB,SAAC5T,GACnC,IAAQxK,EAAqBwK,EAArBxK,IAAK4K,EAAgBJ,EAAhBI,YAEPyT,EAAS,CACbvZ,SAAU,CACRkG,UAAW,YACXE,YAAa,YACbmF,uBAAwB,aAE1B/L,KAAM,CACJ0G,UAAW,YACXE,YAAa,YACbmF,uBAAwB,cAuB5B,OAnBAzF,EAAYC,SAAQ,SAClB/K,GAKA,IAAMgL,EAAYhL,EAAKiL,wBAAwB,GAAGC,UAClD,GAAIlL,EAAKqL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAC1D,IACM1K,EADkBZ,EACMwL,oBAAoB,GAEhC,cAAdR,EACFuT,EAAOvZ,UAAQ,UAAQpE,GACA,WAAdoK,IACTuT,EAAO/Z,MAAI,UAAQ5D,GAEvB,CACF,KAEO,kBACF2d,GAAM,IACTre,IAAAA,GAEJ,ECgJA,SA3KuB,SAAH,GAYmE,IAAD,IAXpFsM,EAAI,EAAJA,KACA9K,EAAQ,EAARA,SACA8c,EAAI,EAAJA,KACAC,EAAG,EAAHA,IACAhS,EAAc,EAAdA,eAUMiS,EAAWhd,EAASA,EAASwF,OAAS,IAKK,QAA7C,EAAqC,QAArC,EAACwX,EAASlI,mCAA2B,aAApC,EAAsCtP,cAAM,QAAI,GAAK,GACxDY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,4DAIN,IAGIqa,EAEoB,IALlBC,EAAcF,EAASlI,4BAA4B,IAEzDhR,QAAQqZ,MAAM,mCAGDpf,IAAT+e,GACFG,EAAW,IAAIG,EAAAA,GAAAA,UAAAA,oCAAiD,CAC9Dze,KAAe,QAAX,EAAEme,EAAKne,YAAI,QAAI,YACnB0e,UAAqB,QAAZ,EAAEP,EAAKQ,aAAK,QAAI,MAG3BxZ,QAAQD,KAAK,iCACboZ,EAAW,IAAIG,EAAAA,GAAAA,UAAAA,oCAAiD,CAC9Dze,KAAM,eAIV,IAAM4e,EAAqB,IAAIH,EAAAA,GAAAA,UAAAA,mBAAgC,CAC7DI,sBAAuB,IAAIJ,EAAAA,GAAAA,UAAAA,gBAA6B,CACtD7L,aAAc,IAAI6L,EAAAA,GAAAA,OAAAA,aAAuB,CACvCle,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,WAEX2P,8BAA+BR,IAEjCS,sBAAuB,IAAIN,EAAAA,GAAAA,UAAAA,gBAA6B,CACtD7L,aAAc,IAAI6L,EAAAA,GAAAA,OAAAA,aAAuB,CACvCle,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,WAEX2P,8BAA+B,IAAIL,EAAAA,GAAAA,UAAAA,oCAAiD,CAClF5e,IAAKue,EAAIve,IACTmf,iBAAkB,8BAClBC,UAAWb,EAAIpe,SAGnBkf,eAAgB,IAAIT,EAAAA,GAAAA,UAAAA,eAA4B,CAC9CU,aAAc,IAAIV,EAAAA,GAAAA,OAAAA,aAAuB,CACvCle,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,aAEXiQ,4BAA6B,IAAIX,EAAAA,GAAAA,UAAAA,uBAAoC,CACnE5e,IAAK0e,EAAYrK,YACjB3J,WAAYgU,EAAYpK,mBACxBpM,oBAAqBsW,EAASpX,0BAKpC9B,QAAQqZ,MAAM,+BAEd,IADA,IAAMa,EAA4D,GACzDjW,EAAI,EAAGA,EAAI+C,EAAKtF,OAAQuC,IAAK,CAAC,IAAD,EAC9BiB,EAAM8B,EAAK/C,GACjB,GAAKgD,EAAeG,IAAIlC,EAAIxK,KAA5B,CAIA,IAAIyf,EAAcjV,EAAII,YAAYzE,MAAK,SAACrG,GACtC,MAAqD,WAA9CA,EAAKiL,wBAAwB,GAAGC,SACzC,SAEoBzL,IAAhBkgB,GACF7X,GAAAA,QACElD,EACA,IAAIL,EACFD,EAA+B,0CAAD,OACYiC,OAAOmE,EAAIxK,KAAI,OAO/D,IAAM0f,EAAqB,IAAId,EAAAA,GAAAA,UAAAA,mBAAgC,CAC7D5e,IAA+B,QAA5B,EAAEwK,EAAIqJ,WAAWC,mBAAW,QAAItJ,EAAIxK,IACvC0K,WAAW,QAAD,OAAUnB,EAAI,KAqBpBkC,EAlBQ,IAAImT,EAAAA,GAAAA,UAAAA,+CAA4D,CAC5Ec,mBAAAA,EACAC,iBAAkB,IAAIf,EAAAA,GAAAA,aAAAA,cAA8B,CAClDgB,YAAapV,EAAI4I,SAASwM,YAC1BC,YAAarV,EAAI4I,SAASyM,YAC1BvM,oBAAqB9I,EAAI4I,SAASE,sBAEpCmM,YAAa,IAAIb,EAAAA,GAAAA,OAAAA,aAAuB,CACtCle,MAAO+e,EAAYnU,oBAAoB,GAAGN,UAC1CqE,iBAAkBoQ,EAAYnU,oBAAoB,GAAG+E,uBACrDf,QAASmQ,EAAYnU,oBAAoB,GAAGJ,cAE9C4U,uBAAwBtV,EAAII,YAAYmV,QAAO,SAACjgB,GAC9C,MAAqD,WAA9CA,EAAKiL,wBAAwB,GAAGC,SACzC,IACAS,aAAcjB,EAAIiB,eAIpBA,EAAa,GAAGuU,wBAA0B,CACxC,CACEC,gBAAiB,OACjBC,mBAAoB,SAGxBV,EAAoB9d,KAAI,MAAxB8d,GAAmB,QAAS/T,GAhD5B,CAiDF,CAEAnG,QAAQqZ,MAAM,8CACd,IAAMwB,EAAoB,IAAIvB,EAAAA,GAAAA,UAAAA,kBAA+B,CAC3DwB,oCAAqC,IAAIxB,EAAAA,GAAAA,UAAAA,oCACvC,CAAC,GAEHG,mBAAAA,EACAsB,kBAAmB,IAAIzB,EAAAA,GAAAA,OAAAA,aAAuB,CAC5Cle,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,wBAEXkQ,oBAAAA,IAgBF,OAbAla,QAAQ6B,KAAK,uCAaN,CACLmZ,sBAAsB,EACtBC,gBAdc,IAAI3B,EAAAA,GAAAA,UAAAA,kBAA+B,CACjDxR,QAAS+S,EAAkB,GAC3BK,SAAU,CAAChC,GACXpV,kBAAmBmO,EAAAA,GAAAA,oBAAAA,MACnBkJ,aAAc,EACdC,kBAAmB,aACnBC,eAAgBpJ,EAAAA,GAAAA,oBAAAA,MAChBqJ,eAAgB,EAChBC,aAAc,8BACdC,sBAAkBvhB,IAOtB,ECjIA,IAAMwhB,GAAqC,CAAC,IAAK,IAAK,GAChDC,GAAmC,CAAC,IAAK,IAAK,EAAG,IAKjDC,GAAkC,CAAC,EAAG,EAAG,GACzCC,GAAmC,CACvC,CAAC,IAAK,EAAG,GACT,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,EAAG,KACP,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,EAAG,IASHC,GAAY,SAAC9O,GAMjB,IAAM+O,EAAe/O,EAAQhC,uBACvBgR,EAAYhP,EAAQrH,UAC1B,MAAM,GAAN,OAAUoW,EAAY,YAAIC,EAC5B,EAEMC,GAAa,SAAC9W,GAClB,IAAMmI,EAAUP,GAAuB,CACrChF,QAAS5C,EAAII,YACbzK,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP4O,QAAS,UACTD,iBAAkB,UAGtB,GAAuB,IAAnBsD,EAAQ3L,OAAZ,CAIA,IACMua,EADU5O,EAAQ,GACIrH,oBAAoB,GAChD,OAAO6V,GAAUI,EAHjB,CAFEjc,QAAQD,KAAK,4BAAD,OAA6BmF,EAAIxK,KAMjD,EAEMwhB,GAAgB,SAACC,EAAgBC,GACrC,GAAID,EAAErO,SAASwM,cAAgB8B,EAAEtO,SAASwM,YACxC,OAAO,EAET,GAAI6B,EAAErO,SAASE,sBAAwBoO,EAAEtO,SAASE,oBAChD,OAAO,EAET,GAAImO,EAAErO,SAASyM,YAAY7Y,SAAW0a,EAAEtO,SAASyM,YAAY7Y,OAC3D,OAAO,EAIT,IADA,IACSuC,EAAI,EAAGA,EAAIkY,EAAErO,SAASyM,YAAY7Y,SAAUuC,EACnD,GAA+B,UAA3BkY,EAAErO,SAASwM,YAAyB,CACtC,IAAM+B,EAAKF,EAAErO,SACPwO,EAAKF,EAAEtO,SAGb,GAFWuO,EAAG9B,YAAYtW,GAAGsC,YALhB,KAMF+V,EAAG/B,YAAYtW,GAAGsC,YANhB,GAQX,OAAO,CAEX,MAGE,IAFA,IAAM8V,EAAKF,EAAErO,SACPwO,EAAKF,EAAEtO,SACJyO,EAAI,EAAGA,EAAIF,EAAG9B,YAAYtW,GAAGvC,SAAU6a,EAAG,CAGjD,GAFWF,EAAG9B,YAAYtW,GAAGsY,GAAGhW,YAdrB,KAeA+V,EAAG/B,YAAYtW,GAAGsY,GAAGhW,YAfrB,GAiBT,OAAO,CAEX,CAGJ,OAAO,CACT,EAEMiW,GAAkB,SAAC9Z,GAUvB,IAAM+Z,EAAS,CACbrZ,MAAOqY,GACPrX,MAjGqC,GAmGnB,MAAhB1B,EAAM+Z,SACkB,MAAtB/Z,EAAM+Z,OAAOrZ,QACfqZ,EAAOrZ,MAAQV,EAAM+Z,OAAOrZ,OAEJ,MAAtBV,EAAM+Z,OAAOrY,QACfqY,EAAOrY,MAAQ1B,EAAM+Z,OAAOrY,QAGhC,IAAMsY,EAAO,CACXtZ,MAAOsY,IAOT,OALkB,MAAdhZ,EAAMga,MACgB,MAApBha,EAAMga,KAAKtZ,QACbsZ,EAAKtZ,MAAQV,EAAMga,KAAKtZ,OAGrB,CACLqZ,OAAAA,EACAC,KAAAA,EACAC,MAAO,CACLC,OAAQ,CACNC,OAAwB,MAAhBna,EAAMma,OACVna,EAAMma,OACNtK,KAAKhH,IAAI,EAAIkR,EAAOrY,MAAO,GAC/BqY,OAAAA,EACAC,KAAAA,IAIR,EAEMI,GAAoB,SAAH,GAOjB,IAPuB7a,EAAO,EAAPA,QAAST,EAAK,EAALA,MAAOub,EAAO,EAAPA,QAQ3C/c,QAAQ6B,KACN,iDAAgD,WAC5CL,EAAM8B,aAAa,GAAGxB,oBAAmB,MAE/C,IACE,IAaIkb,EAbEC,EAAe,IAAIlb,EAAAA,OAAAA,kBAA6B,CACpDmb,cAAejb,EACf/F,SAAUsF,EAAM8B,aAChB6Z,SAAU,CAAC,WAAY,YACvBJ,QAASA,EACT1a,iBAAkB,SAAC3B,GACjB4B,GAAAA,QACElD,EAAmCsB,EAEvC,IAwBF,OAtBAuc,EAAaG,0BAA0B,CAAC,GAGpC5b,EAAM6b,YAAY3b,OAAS,IAC7B1B,QAAQ6B,KACN,+CAA8C,WAC1CL,EAAM6b,YAAY,GAAGvb,oBAAmB,MAE9Ckb,EAAc,IAAIjb,EAAAA,OAAAA,iBAA4B,CAC5CC,OAAQC,EAAQ/D,EAAegE,iCAC/BhG,SAAUsF,EAAM6b,YAAY,GAC5Bjb,aAAc,EACd6N,YAAa,WACb5N,iBAAkB,SAAC3B,GACjB4B,GAAAA,QACElD,EACAsB,EAEJ,KAIG,CAAEuc,aAAAA,EAAcD,YAAAA,EAWzB,CAVE,MAAOtc,GASP,MAPA4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,iCAGE4B,CACR,CACF,EAMM4c,GAAqB,SACzBlQ,GAEA,IAAMmQ,EAAcnQ,EAAOsN,wBAC3B,GAAI6C,EAAY7b,OAAS,GAEX,SADA6b,EAAY,GAAG3C,mBAEzB,OAAO,EAGX,OAAO,CACT,EAMM4C,GAA4B,SAChCpQ,GAEA,IAAM/S,EAAQyS,GAAuB,CACnChF,QAASsF,EAAOE,gBAChBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,oBAGb,GAAqB,IAAjB3P,EAAMqH,OACR,OAAO,EAET,IACM+b,EADmBpjB,EAAM,GACY2L,oBAAoB,GACzD0X,EAAmB,IAAI5X,EAAAA,GAAAA,OAAAA,aAA6B,CACxD1K,MAAOqiB,EAAkB/X,UACzBsE,QAASyT,EAAkB7X,YAC3BmE,iBAAkB0T,EAAkB1S,yBAEhC4S,EAAkB,IAAI7X,EAAAA,GAAAA,OAAAA,aAA6B,CACvD1K,MAAO,SACP4O,QAAS,WACTD,iBAAkB,QAEpB,QAAI2T,EAAiBpM,OAAOqM,EAI9B,EAKMC,GAA0B,SAC9BxQ,GAEA,IAAMjH,EAAe2G,GAAuB,CAC1ChF,QAASsF,EAAOE,gBAChBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,2BAGb,GAA4B,IAAxB7D,EAAazE,OACf,OAAO,EAET,IAAMc,EAAY2D,EAAa,GACzB0X,EAAoB/Q,GAAuB,CAC/ChF,QAAStF,EAAU8K,gBACnBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,wBAIT8T,GAAc,EAkBlB,OAjBAD,EAAkBtY,SAAQ,SAACmI,GACzB,IACMqQ,EAAUjR,GAAuB,CACrChF,QAFgB4F,EAEGJ,gBACnBzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP2O,iBAAkB,MAClBC,QAAS,mBAGT+T,EAAQrc,OAAS,GACfqc,EAAQ,GAAGlY,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,WAC3BgY,GAAc,EAGpB,IAEOA,CACT,EA6FME,GAAW,0CA6Df,WAAa7jB,GAA0B,IAAD,mBACpC,cAAMA,IA7DS8jB,eAAiD,GAAE,EAEnDC,kBAA4D,CAAC,EAAC,EAE9D/X,aAA8B,GAAE,EAEhCgY,oBAAmD,CAAC,EAAC,EAErDC,uBAAiB,IAEjBC,sBAAgB,IAEzBpB,kBAAY,IAEZD,iBAAW,IAEXsB,YAAc,GAAE,EAEhBC,UAAY,CAAC,EAAG,GAAE,EAETC,SAAW,IAAIC,IAAa,EAE5BC,gBAA8C,CAC7DjC,OAAQ,CACNrZ,MAAOqY,GACPrX,MAxZmC,GA0ZrCsY,KAAM,CACJtZ,MAAOsY,IAETiB,MAAO,CACLC,OAAQ,CACNF,KAAM,CACJtZ,MAAOqY,IAEToB,OAja2B,KAoahC,EAEO8B,UAAyD,CAAC,EAAC,EAE3DlI,wBAEJ,CAAC,EAAC,EAEWmI,qBAAiC,CAAC,EAAG,IAAK,KAAI,EAC9CC,mBAA+B,CAAC,IAAK,IAAK,KAAI,EAE9CC,iBAA+C,CAC9DrC,OAAQ,CAAErZ,MAAM,GAAD,gBAAM,EAAKwb,sBAAoB,CAAE,IAAIxa,MAAO,GAC3DsY,KAAM,CAAEtZ,MAAM,GAAD,gBAAM,EAAKyb,oBAAkB,CAAE,MAC5ClC,MAAO,CACLC,OAAQ,CACNC,OAAQ,EACRH,KAAM,CAAEtZ,MAAM,GAAD,gBAAM,EAAKwb,sBAAoB,CAAE,QAGnD,EA4NDG,uBAAyB,WACvB/e,QAAQ6B,KAAK,2CACb,IAAMG,EAAS,EAAK7H,MAAM8H,QACxB/D,EAAe8gB,sCAEjBhd,EAAOid,mBAAmB,CACxBC,iBAAkB,EAAK/kB,MAAM+kB,iBAC7BC,YAAa,CACXC,SAAU,QAEXC,MAAK,SAACC,GACiB,MAApBA,IACFA,EAAmB,IAErBA,EAAiB/Z,SAAQ,SAACga,EAAa9kB,GACrC,IACM+kB,EADczd,EAAAA,SAAAA,eAA4Bwd,GAAxC7P,QAER1P,QAAQ6B,KAAK,yBAAD,OAA0B2d,EAASC,eAAc,MAC7Dzd,EAAO0d,iBAAiB,CACtBR,iBAAkB,EAAK/kB,MAAM+kB,iBAC7Bpb,kBAAmB0b,EAASzL,kBAC5BsH,eAAgBmE,EAASC,iBACxBJ,MAAK,SAACM,GACP,IAAM1N,EAAOnM,EAAAA,GAAAA,aAAAA,SAAiC6Z,GACtCjQ,EAAY3N,EAAAA,SAAAA,eAA4BkQ,EAAK2N,MAA7ClQ,QACR,GAAI,EAAKvV,MAAMqH,MAAMqe,0BAA2B,CAC9C,IAAMC,EACJpQ,EAIEqQ,GAAY,EAChBD,EAAkBE,yBAAyBza,SAAQ,SAAA0a,GACjDF,EAAY,EAAK5lB,MAAMqH,MAAMmC,mBAAmBvD,SAC9C6f,EAAalM,kBAEjB,IAEIgM,IACF/f,QAAQ6B,KACN,yDAAwD,WACpDie,EAAkBL,eAAc,OAG1B,IAAVhlB,GAC2C,MAA3C,EAAKN,MAAM+lB,8BAKTJ,EAAkBL,iBAClB,EAAKtlB,MAAM+lB,+BAJb,EAAKC,qBAAqBL,GAS5B,EAAKve,UAAS,SAAAJ,GACZ,IAAM0T,EAGF,CAAC,EAKL,OAJA1T,EAAMif,mBAAmB7a,SAAQ,SAAAia,GAC/B3K,EAAQ2K,EAASC,gBAAkBD,CACrC,IACA3K,EAAQiL,EAAkBL,gBAAkBK,EACrC,CAAEM,mBAAoBlI,OAAO1Q,OAAOqN,GAC7C,IAEJ,MACE7U,QAAQ6B,KACN,qCAA8B2d,EAASC,eAAc,OAArD,qFAKN,IAAGY,OAAM,SAAC3f,GAER4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,2CAGJkB,QAAQU,MACN,qCAAoC,2BAChB8e,EAASC,eAAc,MAAI,qBACjCD,EAASzL,kBAAiB,MAAI,oBAC/B,EAAK5Z,MAAM+kB,iBAAgB,OACxCxe,EAEJ,GACF,GACF,IAAG2f,OAAM,SAAC3f,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,0CAGN,GACF,EAAC,EAKDqhB,qBAAuB,SACrBL,GAEA,IAAMnM,EAAe,EAAKsJ,aAAaqD,qBACvCtgB,QAAQ6B,KAAK,sCAAD,OAC4Bie,EAAkBL,eAAc,MAExE,IAAMc,EAMF,CAAC,EACL5M,EAAapO,SAAQ,SAAAuM,GAEnB,IAAM1M,EAAa0M,EAAY1M,WAC/B,EAAK6X,aAAauD,gBAAgBpb,GAClC,EAAK6X,aAAawD,sBAAsBrb,GACxC,IAAM1C,EAAQ,EAAKua,aAAayD,2BAA2Btb,GAC3D,EAAK6X,aAAa0D,oBAAoBvb,EAAY1C,GAElDod,EAAkBE,yBAAyBza,SAAQ,SAAA0a,GAMjD,IAAIW,EAAmBX,EAAaY,gCACX5mB,IAArB2mB,IACFA,EAAmBX,EAAaa,8BAET7mB,IAArB2mB,GAGJA,EAAiBrb,SAAQ,SAAAwb,GAIvB,GAHqBjP,EAAYkP,gBAAgB5gB,SAC/C2gB,EAAUE,0BAEM,CAChB,IAAIC,EA4DAxX,EA3DJ,GAAoD,MAAhDuW,EAAakB,gCAAyC,CACxD,IAAMC,EAAYnB,EAAakB,gCAAgC,GAC/DD,EAAkB,IAAInf,EAAAA,MAAAA,wBAAkC,CACtDrH,IAC0C,MAAxC0mB,EAAUC,2BACND,EAAUC,2BACV,GAENC,cACEF,EAAUG,qCACZC,gBACEJ,EAAUK,uCACZC,eACEN,EAAUO,sCACZC,QAC+C,MAA5CR,EAAUS,+BACP,IAAIC,YACJV,EAAUS,qCAEV5nB,EAEN8nB,UACiD,MAA9CX,EAAUY,iCACP,IAAIF,YACJV,EAAUY,uCAEV/nB,EAENgoB,SACgD,MAA7Cb,EAAUc,gCACP,IAAIJ,YACJV,EAAUc,sCAEVjoB,EAENkoB,iBACwD,MAArDf,EAAUgB,wCACP,IAAIN,YACJV,EAAUgB,8CAEVnoB,EAENooB,mBAC0D,MAAvDjB,EAAUkB,0CACP,IAAIR,YACJV,EAAUkB,gDAEVroB,EAENsoB,kBACyD,MAAtDnB,EAAUoB,yCACP,IAAIV,YACJV,EAAUoB,+CAEVvoB,GAGV,CAGA,GAA2C,MAAvCgmB,EAAawC,uBAAgC,CAC/C,IAAMC,EAAazC,EAAawC,uBAAuB,GACjDE,EAAeD,EAAWE,aAC1BC,EAAcH,EAAWI,YAC/BpZ,EAAc,CACZiZ,EAA6B,GAAdE,EACfF,EAA6B,GAAdE,EAEnB,CAEAtC,EAAkBnb,GAAc,CAC9BkE,QAAS,EACTqI,wBAAyBuP,EACzBxX,YAAaA,EAEjB,CACF,GACF,GACF,IAEA,IAAMqZ,EAA8C,IAAItE,IACxDvG,OAAOC,KAAKoI,GAAmBhb,SAAQ,SAAAH,GACrC,IAAMqE,EAAe8W,EAAkBnb,GACnB,MAAhBqE,GACF,EAAKwT,aAAa0D,oBAAoBvb,EAAYqE,GAClD,EAAKwT,aAAa+F,oBAAoB5d,GACtC,EAAK6X,aAAagG,gBAAgB7d,GAClC2d,EAA+BG,IAAI9d,KAEnC,EAAK6X,aAAauD,gBAAgBpb,GAClC,EAAK6X,aAAawD,sBAAsBrb,GAE5C,IACA,IAAM+d,EAAe,IAAIC,gBAAgB,EAAKjpB,MAAM0b,SAASwN,QAC7DF,EAAaG,IAAI,QAASxD,EAAkBL,gBAC5C,EAAKtlB,MAAM4b,SACT,CACEwN,SAAU,EAAKppB,MAAM0b,SAAS0N,SAC9BF,OAAQF,EAAa1e,YAEvB,CAAE+e,SAAS,IAEb,EAAKjiB,UAAS,SAAAJ,GAAK,MAAK,CACtBiT,6BAA8B2O,EAC9B1O,8BAA+B0O,EAC/B7C,6BAA8BJ,EAAkBL,eACjD,GACH,EAAC,EAEDgE,YAAc,SAACnf,GACb,OAAW,MAAPA,EACK,EAAKoa,qBAEczkB,IAAxB,EAAK0kB,UAAUra,GACV,EAAKqa,UAAUra,GAEjB,EAAKoa,eACd,EAAC,EAEDgF,mBAAqB,SAACC,GACpB3jB,QAAQqZ,MAAM,2BAMd,GAL0B,kCAKrBsK,EAA2CC,YAC9B,EAAK3G,aAAa4G,aAC1Bte,SAAQ,SAACL,GACf,EAAK4e,iCAAiC,CAAE7e,OAAQC,EAAIxK,IAAKyK,WAAW,GACtE,IACAnF,QAAQqZ,MAAM,oCACT,GAVgC,kCAU3BsK,EAA2CC,YAAgD,CACzE,EAAK3G,aAAa8G,yBAC1Bxe,SAAQ,SAACqD,GAC3B,EAAKob,sCAAsC,CAAErb,mBAAoBC,EAAgBlO,IAAKyK,WAAW,GACnG,IACAnF,QAAQqZ,MAAM,4CAChB,MAAO,GAfc,iCAeTsK,EAA2CC,YAA8B,CAC/D,EAAK3G,aAAagH,iBAC1B1e,SAAQ,SAAC6P,GACnB,EAAK8O,8BAA8B,CAAE/O,WAAYC,EAAQ1a,IAAKyK,WAAW,GAC3E,IACAnF,QAAQqZ,MAAM,uBAChB,MAAO,GApBe,kCAoBVsK,EAA2CC,YAA+B,CACvD,EAAK3G,aAAakH,0BAC1B5e,SAAQ,SAAC6e,GAC5B,EAAKC,8BAA8B,CAAEzP,WAAYwP,EAAiB1pB,IAAKyK,WAAW,GACpF,IACAnF,QAAQqZ,MAAM,yBAChB,MAAO,GAzBa,kCAyBRsK,EAA2CC,YAA6B,CAC1D,EAAK3G,aAAaqD,qBAC1B/a,SAAQ,SAACuM,GACvB,EAAKwS,kCAAkC,CAAEvS,sBAAuBD,EAAY1M,WAAYD,WAAW,GACrG,IACAnF,QAAQqZ,MAAM,uBAChB,CACF,EAAC,EAmJDkL,qBAAmB,uBAAG,mGACP,IAAIC,SAAc,SAACC,EAASC,GACvC1kB,QAAQ6B,KAAK,2DACb,IAAMG,EAAS,EAAK7H,MAAM8H,QACxB/D,EAAeymB,mCAEjB3iB,EAAO4iB,gBAAgB,CACrB1F,iBAAkB,EAAK/kB,MAAM+kB,iBAC7BC,YAAa,CACXC,SAAU,SAEXC,MAAK,SAACwF,GACc,MAAjBA,IACFA,EAAgB,IAElBA,EAActf,SAAQ,SAAAzE,GACpB,IACMgkB,EADc/iB,EAAAA,SAAAA,eAA4BjB,GAAxC4O,QAER1N,EAAO+iB,uBAAuB,CAC5B7F,iBAAkB,EAAK/kB,MAAM+kB,iBAC7Bpb,kBAAmBghB,EAAO/Q,oBACzBsL,MAAK,SAAC2F,GAC6DA,EAAkBzqB,KAAI,SAAA2B,GACxF,OAAO,IAAI6F,EAAAA,SAAAA,gCAA6C,CACtD7F,SAAAA,GAEJ,IAQYqJ,SAAQ,SAAA0f,GAClB,IACE,EAAKhI,aAAasH,oBAAoBU,EAYxC,CAXE,MAAOvkB,GAEP4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,4DAIJkB,QAAQU,MAAM,mCAAoCA,EACpD,CACAukB,EAAI7a,wBAAwB7E,SAAQ,SAAA/K,GAClC,IAAMmO,EAAqBnO,EAAK8P,mBAC1B4a,EAAU1qB,EAAK2qB,mCAAmC,GAClD7gB,EAAMuX,GAAUqJ,GAChBxiB,EAAQ,EAAKic,UAAUra,GAEhB,MAAT5B,GAA+B,MAAdA,EAAMga,MACzB,EAAKO,aAAamI,wBAChBzc,EACA,CAAEvF,MAAOV,EAAMga,KAAKtZ,OAG1B,GACF,IAOA,EAAKiiB,cACLZ,GACF,IAAGpE,OAAM,SAAC3f,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,iFAIN,GACF,GACF,IAAGuhB,OAAM,SAAC3f,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,oEAGJ4lB,EAAOhkB,aAAiBjC,MAAQiC,EAAQ,IAAIjC,MAAMsC,OAAOL,IAC3D,GACF,IAAE,mFACH,EAOD4kB,kBAAgB,uBAAG,mGACJ,IAAId,SAAc,SAACC,EAASC,GACvC1kB,QAAQ6B,KAAK,qCACb,IAAMG,EAAS,EAAK7H,MAAM8H,QAAQ/D,EAAeqnB,cACjDvjB,EAAO4iB,gBAAgB,CACrB1F,iBAAkB,EAAK/kB,MAAM+kB,iBAC7BC,YAAa,CACXC,SAAU,SAEXC,MAAK,SAACwF,GACc,MAAjBA,IACFA,EAAgB,IAElBA,EAActf,SAAQ,SAACzE,EAAGmD,GACxB,IACM6gB,EADc/iB,EAAAA,SAAAA,eAA4BjB,GAAxC4O,QAER1N,EAAO+iB,uBAAuB,CAC5B7F,iBAAkB,EAAK/kB,MAAM+kB,iBAC7Bpb,kBAAmBghB,EAAO/Q,oBACzBsL,MAAK,SAAC2F,GACP,IAAMQ,EAA6C,GAWnD,GAVAR,EAAkBzf,SAAQ,SAAArJ,GACxB,IAAMupB,EAAM,IAAI1jB,EAAAA,SAAAA,aAA0B,CAAE7F,SAAAA,IACtCgd,EAAW,EAAK/e,MAAMqH,MAAM8B,aAAa,GAE7CmiB,EAAIC,sBAAwBxM,EAASwM,qBACrCD,EAAI3jB,sBAAwBoX,EAASpX,qBAErC0jB,EAAcppB,KAAKqpB,EAEvB,IACID,EAAc9jB,OAAS,EAAG,CAC5B,IACE,EAAKub,aAAa0I,YAAYH,EAWhC,CAVE,MAAO9kB,GAEP4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,sCAGJkB,QAAQU,MAAM,2BAA4BA,EAC5C,CAOA,EAAK2kB,aACP,CAEAZ,GACF,IAAGpE,OAAM,SAAC3f,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,2DAGN,GACF,GACF,IAAGuhB,OAAM,SAAC3f,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,8CAGJ4lB,EAAOhkB,aAAiBjC,MAAQiC,EAAQ,IAAIjC,MAAMsC,OAAOL,IAC3D,GACF,IAAE,mFACH,EAODklB,mBAAiB,uBAAG,mGACL,IAAIpB,SAAc,SAACC,EAASC,GACvC1kB,QAAQ6B,KAAK,uCACb,IAAMG,EAAS,EAAK7H,MAAM8H,QAAQ/D,EAAe2nB,gBACjD7jB,EAAO4iB,gBAAgB,CACrB1F,iBAAkB,EAAK/kB,MAAM+kB,iBAC7BC,YAAa,CACXC,SAAU,QAEXC,MAAK,SAACwF,GACc,MAAjBA,IACFA,EAAgB,IAElBA,EAActf,SAAQ,SAAAzE,GACpB,IACMgkB,EADc/iB,EAAAA,SAAAA,eAA4BjB,GAAxC4O,QAER1N,EAAO+iB,uBAAuB,CAC5B7F,iBAAkB,EAAK/kB,MAAM+kB,iBAC7Bpb,kBAAmBghB,EAAO/Q,oBACzBsL,MAAK,SAAC2F,GACP,IAAMc,EAA+C,GAerD,GAdAd,EAAkBzf,SAAQ,SAAArJ,GACxB,IAAM6pB,EAAK,IAAIhkB,EAAAA,SAAAA,cAA2B,CAAE7F,SAAAA,IACtCgd,EAAW,EAAK/e,MAAMqH,MAAM8B,aAAa,GAE7CyiB,EAAGL,sBAAwBxM,EAASwM,qBACpCK,EAAGjkB,sBAAwBoX,EAASpX,oBAEpCgkB,EAAe1pB,KAAK2pB,GAEpB/lB,QAAQD,KAAK,iCAAD,OACuBgmB,EAAGtG,eAAc,KAGxD,IACIqG,EAAepkB,OAAS,EAAG,CAC7B,IACE,EAAKub,aAAa+I,qBAAqBF,EAWzC,CAVE,MAAOplB,GAEP4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,uCAGJkB,QAAQU,MAAM,2BAA4BA,EAC5C,CAOA,EAAK2kB,aACP,CACAZ,GACF,IAAGpE,OAAM,SAAC3f,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,6DAGN,GACF,GACF,IAAGuhB,OAAM,SAAC3f,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,gDAGJ4lB,EAAOhkB,aAAiBjC,MAAQiC,EAAQ,IAAIjC,MAAMsC,OAAOL,IAC3D,GACF,IAAE,mFACH,EAKDulB,kBAAoB,WAClBjmB,QAAQ6B,KAAK,yBACb,EAAKN,SAAS,CACZH,WAAW,EACXgf,mBAAoB,KAGgB,MAAlC,EAAKhC,kBAAkBzc,SACzB,EAAKsb,aAAa1a,OAAO,CAAEC,UAAW,EAAK4b,kBAAkBzc,UAG5B,MAAjC,EAAK0c,iBAAiB1c,SACF,MAApB,EAAKqb,aAEL,EAAKA,YAAYza,OAAO,CAAEC,UAAW,EAAK6b,iBAAiB1c,UAI7D,EAAKJ,SAAS,CAAEH,WAAW,IAE3B,EAAK8kB,8BACL,EAAKnH,yBAGA,EAAKoH,iBACP9G,MAAK,WAC6B,MAA7B,EAAKllB,MAAMwpB,gBACb,EAAKD,mBAAmB,EAAKvpB,MAAMwpB,eAEvC,IACCtD,OAAM,SAAA3f,GACLV,QAAQU,MAAM,6BAA8BA,EAC9C,IAEG,EAAK6jB,sBACPlF,MAAK,WAC6B,MAA7B,EAAKllB,MAAMwpB,gBACb,EAAKD,mBAAmB,EAAKvpB,MAAMwpB,eAEvC,IACCtD,OAAM,SAAA3f,GACLV,QAAQU,MAAM,mCAAoCA,EACpD,IAEG,EAAK4kB,mBACPjG,MAAK,WAC6B,MAA7B,EAAKllB,MAAMwpB,gBACb,EAAKD,mBAAmB,EAAKvpB,MAAMwpB,eAEvC,IACCtD,OAAM,SAAA3f,GACLV,QAAQU,MAAM,+BAAgCA,EAChD,IAEG,EAAKklB,oBACPvG,MAAK,WAC6B,MAA7B,EAAKllB,MAAMwpB,gBACb,EAAKD,mBAAmB,EAAKvpB,MAAMwpB,eAEvC,IACCtD,OAAM,SAAA3f,GACLV,QAAQU,MAAM,iCAAkCA,EAClD,GACJ,EAAC,EAED0lB,cAAgB,SAACrhB,GAEf,EAAKxD,UAAS,SAAAJ,GAAK,MAAK,CACtB8F,eAAgB,IAAIwX,IAAItd,EAAM8F,gBAC/B,GACH,EAAC,EAEDof,eAAiB,SAACthB,GAChB/E,QAAQ6B,KAAK,oBACb,EAAKob,aAAaxa,SACM,MAApB,EAAKua,aACP,EAAKA,YAAYva,QAErB,EAAC,EAED6jB,WAAa,SAACvhB,GACZ,IAAMG,EAAMH,EAAMwhB,OAAO1nB,QACnB2nB,EAAkB,EAAKrlB,MAAMqlB,gBAC7BC,EAAsB,EAAKtlB,MAAMslB,oBACvC,QAAYxsB,IAARiL,QAAyCjL,IAApBusB,EAA+B,CACtDxmB,QAAQqZ,MAAM,YAAD,OAAanU,EAAIxK,IAAG,MACjC,IAAMgsB,EAAc,IAAI5gB,EAAAA,GAAAA,WAAAA,gBAAoC,CAC1DjL,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP4O,QAAS,UACTD,iBAAkB,QAEpB3O,MAAOorB,EACPG,iBAAkB,aAEpBzhB,EAAI0hB,cAAcF,GAClBD,EAAoBlhB,SAAQ,SAAC6I,GAC3B,IAAM5T,EAAO,IAAIsL,EAAAA,GAAAA,WAAAA,gBAAoC,CACnDjL,KAAMuT,EAAWvT,KACjBO,MAAOgT,EAAWhT,MAClBurB,iBAAkB,aAEpBzhB,EAAI0hB,cAAcpsB,EACpB,IACA,IAAM8J,EAAMuX,GAAU2K,GAChB9jB,EAAQ,EAAK+gB,YAAYnf,GAC/B,EAAK2Y,aAAa4J,OAAO3hB,EAAKxC,GAC9B,EAAKnB,UAAS,SAAAJ,GACZ,IAAM8F,EAAiB9F,EAAM8F,eAE7B,OADAA,EAAeic,IAAIhe,EAAIxK,KAChB,CAAEuM,eAAAA,EACX,GACF,MACEjH,QAAQqZ,MAAM,sBAAD,OAAuBnU,EAAIxK,IAAG,KAE/C,EAAC,EAEDosB,mBAAqB,SAAC/hB,GAED,MADCA,EAAMwhB,OAAO1nB,QAE/B,EAAK0C,SAAS,CACZwlB,2BAA2B,IAG7B,EAAKxlB,SAAS,CACZwlB,2BAA2B,GAGjC,EAAC,EAEDC,wBAA0B,SAAC1I,GACzB,IAAMtX,EAAO,EAAKiW,aAAa4G,aAC/B,GAAoB,IAAhB7c,EAAKtF,OAAT,CAKA,IAAMqX,EAASuF,EAAY/jB,KAAI,SAAC2K,GAAS,IAAD,EAChC5K,EAAqD,GA8C3D,OA7CoB4K,EAAII,YACZC,SAAQ,SAClB/K,GAKA,IAAMgL,EAAYhL,EAAKiL,wBAAwB,GAAGC,UAC5CC,EAAcnL,EAAKiL,wBAAwB,GAAGG,YAC9C/K,EAAI,UAAM8K,GAChB,GAAInL,EAAKqL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAC1D,IACMC,EADkBvL,EACawL,oBAAoB,GAAGJ,YAE1C,cAAdJ,EACFlL,EAAW8B,KAAK,CACdvB,KAAM,oBACNO,MAAM,GAAD,OAAK2K,KAEW,WAAdP,EACTlL,EAAW8B,KAAK,CACdvB,KAAM,gBACNO,MAAM,GAAD,OAAK2K,KAEW,WAAdP,EACTlL,EAAW8B,KAAK,CACdvB,KAAM,iBACNO,MAAM,GAAD,OAAK2K,KAGZzL,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAM,GAAD,OAAK2K,IAGhB,MAAO,GAAIvL,EAAKqL,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CACjE,IAAMG,EAAkBzL,EACxBF,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAO6K,EAAgBC,WAE3B,CACF,IAGO,CAAEzL,OAD8C,QAAzC,EAACuM,EAAKqD,WAAU,SAAC4c,GAAC,OAAKA,EAAEvsB,MAAQwK,EAAIxK,GAAG,WAAC,QAAI,GAAK,EAChDme,OAAQ3T,EAAIxK,IAAKJ,WAAAA,EACnC,GAAG,IAEH,EAAKiH,SAAS,CAAE2lB,qBAAsBnO,GApDtC,MAFE,EAAKxX,SAAS,CAAE2lB,qBAAsB,IAuD1C,EAAC,EAEDC,iBAAmB,WACjB,EAAK7I,YAAc,EACrB,EAAC,EAED8I,qBAAuB,SAACC,GACtB,GAAc,MAAVA,EACF,MAAO,GAET,IAAMC,EAAO,mBAAO,EAAKhJ,aAAW,CAAE+I,IAEtC,OADkBxnB,MAAMC,KAAK,IAAI2e,IAAI6I,EAAQ/sB,KAAI,SAAA2K,GAAG,OAAIA,EAAIxK,GAAG,MAC9CH,KAAI,SAAAwV,GAAE,OAAIuX,EAAQzmB,MAAK,SAAAqE,GAAG,OAAIA,EAAIxK,MAAQqV,CAAE,GAAC,IAC3D0K,QAAO,SAACvV,GAAG,YAAiCjL,IAARiL,CAAiB,GAC1D,EAAC,EAEDqiB,kBAAoB,SAACxiB,GACnB,OAAOA,EAAMyiB,UAAY,EAAKjJ,UAAU,IAAMxZ,EAAM0iB,UAAY,EAAKlJ,UAAU,EACjF,EAAC,EAEDmJ,cAAgB,SAAC3iB,GACf,MAA4CA,EAAMwhB,OAAO1nB,QAAxC8oB,EAAU,EAAnBC,QACFC,EADiC,EAAV9iB,MACH8iB,cAErB,EAAKN,kBAAkBM,KAC1B,EAAKtJ,UAAY,CAACsJ,EAAcL,QAASK,EAAcJ,SACvD,EAAKN,oBAGP,EAAK7I,YAAc,EAAK8I,qBAAqBO,GAEzC,EAAKrJ,YAAY5c,OAAS,GAC5B,EAAKslB,wBAAwB,EAAK1I,aAClC,EAAK/c,SAAS,CACZumB,4BAA4B,EAC5BC,mBAAoBF,EAAcL,QAClCQ,mBAAoBH,EAAcJ,WAGpC,EAAKlmB,SAAS,CACZumB,4BAA4B,GAGlC,EAAC,EAEDG,uBAAyB,SAACC,GACxB,IAAMC,EAAiBD,EACjBE,EAAiB,CACrB7gB,gBAAiB,IAAIkX,IACrB4J,iBAAapuB,GAGf,QAAuBA,IAAnBkuB,EACF,OAAOC,EAGT,IAAMC,EAAc,EAAKpL,aAAaqL,OAAOH,GAC7C,QAAoBluB,IAAhBouB,EACF,OAAOD,EAKT,GAFApoB,QAAQqZ,MAAM,iBAAD,OAAkBgP,EAAY3tB,IAAG,OAEzC,EAAK8jB,SAASpX,IAAI,SACrB,MAAO,CACLG,gBAAiB,IAAIkX,IAAI,CAAC4J,EAAY3tB,MACtC2tB,YAAAA,GAIJ,IAAME,EAAkB1oB,MAAMC,KAAK,EAAKqB,MAAMoG,iBAC9C,MAAO,CACLA,gBAAiB,IAAIkX,IAAI,GAAD,OAAK8J,EAAgB,CAACF,EAAY3tB,OAC1D2tB,YAAAA,EAEJ,EAAC,EAEDG,yBAA2B,SAACC,GAC1B,EAAKxL,aAAa4G,aAAate,SAAQ,SAAAL,GACrC,IAAMxK,EAAMwK,EAAIxK,IAEhB,IAAI+tB,EAAelhB,gBAAgBH,IAAI1M,IAAS,EAAKyG,MAAM8F,eAAeG,IAAI1M,GAA9E,CAIA,IAAM4J,EAAM0X,GAAW9W,GACjBxC,EAAQ,EAAK+gB,YAAYnf,GAC/B,EAAK2Y,aAAayL,YAAYhuB,EAAKgI,EAJnC,CAKF,GACF,EAAC,EAEDimB,aAAe,SAAC5jB,GAAkC,IAAD,MAG/C,GAA2B,KAFqB,QAA/B,EAAgB,QAAhB,EAAIA,EAAMwhB,cAAM,OAAS,QAAT,EAAZ,EAAc1nB,eAAO,WAAT,EAAZ,EAAuBmI,YAAI,QAAI,IAEpCtF,OAAhB,CAIA,IAAMknB,EAAsB,EAAKX,yBACjC,EAAK1mB,SAASqnB,GAGd,EAAK3L,aAAa4L,kBAElB,EAAKL,yBAAyBI,EAR9B,CASF,EAAC,EAEDE,cAAgB,SAAC/jB,GAAkC,IAAD,IAC1CojB,EAA6B,QAAf,EAAGpjB,EAAMwhB,cAAM,OAAS,QAAT,EAAZ,EAAc1nB,eAAO,WAAT,EAAZ,EAAuBnE,IACxCkuB,EAAsB,EAAKX,uBAAuBE,GACxD,EAAK5mB,SAASqnB,GAEd,EAAKJ,yBAAyBI,EAChC,EAAC,EAiCDG,iBAAmB,SAAChkB,GAClB,EAAKxD,SAAS,CAAEH,WAAW,GAC7B,EAAC,EAED4nB,eAAiB,SAACjkB,GAChB,EAAKxD,SAAS,CAAEH,WAAW,GAC7B,EAAC,EAED6nB,sBAAwB,SAAClkB,GACvB,IAAMmkB,EAOFnkB,EAAMwhB,OAAO1nB,QACXyF,EAAW,UAAM4kB,EAAU7N,eAAc,YAAI6N,EAAUC,aAC7D,EAAK5nB,UAAS,SAAAJ,GAEZ,OADAA,EAAMioB,cAAclG,IAAI5e,GACjBnD,CACT,GACF,EAAC,EAEDkoB,oBAAsB,SAACtkB,GACrB/E,QAAQU,MAAM,uBAChB,EAAC,EAED4oB,eAAiB,SAACvkB,GAAkC,IAAD,MAC3C9F,EAAyC,QAAlC,EAAgB,QAAhB,EAAI8F,EAAMwhB,cAAM,OAAS,QAAT,EAAZ,EAAc1nB,eAAO,WAAT,EAAZ,EAAuBI,eAAO,QAAI,sBACnDe,QAAQU,MAAMzB,GACdqD,GAAAA,QACElD,EACA,IAAIL,EACFD,EACAG,GAGN,EAAC,EAEDsqB,oBAAsB,SAACxkB,GACrB,IAAMmkB,EAQFnkB,EAAMwhB,OAAO1nB,QACXyF,EAAG,UAAM4kB,EAAU7N,eAAc,YAAI6N,EAAUC,aAYrD,GAXA,EAAK5nB,UAAS,SAAAJ,GACZA,EAAMioB,cAAcI,OAAOllB,GAC3B,IAAIlD,GAAqB,EAIzB,OAHID,EAAMioB,cAAc3tB,KAAO,IAC7B2F,GAAY,GAEP,CACLA,UAAAA,EACAgoB,cAAejoB,EAAMioB,cAEzB,IAEEF,EAAUO,cAAgBvrB,EAAegE,iCACzC,EAAK/H,MAAMqH,MAAMqe,0BACjB,CACA,IAAM9N,EAAwBmX,EAAUQ,kBACxC,KACI3X,KAAyB,EAAK5Q,MAAMwoB,sBACd,MAAxBT,EAAUU,WACV,CAUA,IALA,IAAMnuB,EAAI,SAAG,EAAK,IACZouB,EAAStX,KAAKuX,KAAKZ,EAAUU,WAAWloB,OAASjG,GACnD2M,EAAS,EACP2hB,EAAsB,GACtBC,EAAsB,GACnB/lB,EAAI,EAAGA,EAAI4lB,EAAQ5lB,IAAK,CAC/BmE,EAASnE,EAAIxI,EACb,IAAMwuB,EAASf,EAAUU,WAAWrpB,MAAM6H,EAAQA,EAAS3M,GAC3DsuB,EAAU3tB,KAAKmW,KAAKjH,IAAG,MAARiH,MAAI,QAAQ0X,KAC3BD,EAAU5tB,KAAKmW,KAAKhH,IAAG,MAARgH,MAAI,QAAQ0X,IAC7B,CACA,IAAM3e,EAAMiH,KAAKjH,IAAG,MAARiH,KAAYwX,GAClBxe,EAAMgH,KAAKhH,IAAG,MAARgH,KAAYyX,GACxB,EAAKzoB,UAAS,SAAAJ,GACZ,IAAM+oB,EAAQ/oB,EAAMwoB,oBAcpB,GAboC,MAAhCO,EAAMnY,GACRmY,EAAMnY,GAAyB,CAC7BzG,IAAKiH,KAAKjH,IAAI4e,EAAMnY,GAAuBzG,IAAKA,GAChDC,IAAKgH,KAAKhH,IAAI2e,EAAMnY,GAAuBxG,IAAKA,GAChD4e,iBAAkBD,EAAMnY,GAAuBoY,iBAAmB,GAGpED,EAAMnY,GAAyB,CAC7BzG,IAAKA,EACLC,IAAKA,EACL4e,iBAAkB,GAGoB,MAAtChpB,EAAM+e,6BAAsC,CAC9C,IAAMxd,GAAK,UACN,EAAKua,aAAamN,oBAAoBrY,IAE3CrP,EAAMgH,YAAc,CAClBwgB,EAAMnY,GAAuBzG,IAC7B4e,EAAMnY,GAAuBxG,KAE/B,EAAK0R,aAAa0D,oBAAoB5O,EAAuBrP,EAC/D,CACA,OAAOvB,CACT,GACF,CACF,CACF,EAAC,EAEDkpB,aAAe,SAACtlB,GACd,IAAMG,EAAMH,EAAMwhB,OAAO1nB,QACzBmB,QAAQqZ,MAAM,gBAAD,OAAiBnU,EAAIxK,IAAG,KACvC,EAAC,EAuED4vB,UAAY,SAACvlB,GACX,EAAKyZ,SAAS0E,IAAIne,EAAMT,IAC1B,EAAC,EAEDimB,QAAU,SAACxlB,GACT,EAAKyZ,SAASgL,OAAOzkB,EAAMT,KACT,WAAdS,EAAMT,KACJ,EAAKnD,MAAMqpB,oBACbxqB,QAAQ6B,KAAK,8BACb,EAAKob,aAAawN,4BAClB,EAAKxN,aAAaG,0BAA0B,CAAC,IACpC,EAAKjc,MAAMupB,yBACpB1qB,QAAQ6B,KAAK,mCACb,EAAKob,aAAa0N,8BAClB,EAAK1N,aAAaG,0BAA0B,CAAC,IACpC,EAAKjc,MAAMypB,yBACpB5qB,QAAQ6B,KAAK,mCACb,EAAKob,aAAa4N,iCAClB,EAAK5N,aAAaG,0BAA0B,CAAC,IAE/C,EAAK7b,SAAS,CACZupB,0BAA0B,EAC1B/D,2BAA2B,EAC3B6D,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,EACzBK,oBAAoB,KAEbhmB,EAAMimB,SACI,SAAfjmB,EAAMkmB,KACR,EAAKC,mBACmB,SAAfnmB,EAAMkmB,KACf,EAAKE,wBACmB,SAAfpmB,EAAMkmB,KACf,EAAKG,uBACmB,SAAfrmB,EAAMkmB,KACf,EAAKI,mBACmB,SAAftmB,EAAMkmB,KACf,EAAKK,4BACmB,SAAfvmB,EAAMkmB,KACf,EAAKM,yBACmB,SAAfxmB,EAAMkmB,MACf,EAAKO,aAGX,EAAC,EA0jCD3iB,2BAA6B,SAACF,GAC5B,EAAKsU,aAAawO,UAAU9iB,EAC9B,EAAC,EAMD+iB,wBAA0B,SAAC3mB,GACzB,IAAMD,EAAUC,EAAMwR,OAAOzR,QAC7B,EAAKvD,SAAS,CAAEoqB,qBAAsB7mB,IACtC,EAAKmY,aAAa2O,mBACpB,EAAC,EAEDC,iBAAmB,SAAChU,GAA+D,IAAD,EAC1E3S,EAAM,EAAK+X,aAAaqL,OAAOzQ,EAAWnd,KAC1C4J,EAAM0X,GAAW9W,GACjB9B,OAAgCnJ,IAAxB,EAAK0kB,UAAUra,GACC,QADiB,EAC3C,EAAKqa,UAAUra,GAAKmY,cAAM,aAA1B,EAA4BrZ,MAAM7C,MAAM,EAAG,GAC3Cqb,GACA1D,OAAOC,KAAK,EAAKwG,WAAWjd,OAASka,GAAiCla,QAE1E,EAAK+U,wBAAwBoB,EAAWnd,KAAO,CAC7C0I,MAAOA,EACPkG,QA7/F6B,GA8/F7B6M,aAAa,GAGf,EAAKwI,UAAUra,GAAO,EAAKwnB,iBACzB,EAAKrV,wBAAwBoB,EAAWnd,KAE5C,EA1kFEsF,QAAQ6B,KAAK,eAAD,OACK,EAAK1H,MAAMqH,MAAMoB,oBAAmB,OACnD,EAAKzI,MAAMqH,OAEb,IAAM2c,EAAsB,CAC1B,QACA,SACA,MACA,UACA,OACA,kBACA,gBAEFhkB,EAAM2V,YAAYvK,SAAQ,SAACsS,GACzB,IAAMqN,EAAU,IAAIpf,EAAAA,GAAAA,OAAAA,aAA6B+R,EAAWqN,SAC5D,EAAKjH,eAAe7hB,KAAK8oB,GACzB,IAAM5gB,EAAMuX,GAAUqJ,QACWjrB,IAA7B4d,EAAWkU,cACb,EAAK5N,oBAAoB7Z,GAAOuT,EAAWkU,cAE3C,EAAK5N,oBAAoB7Z,GAAO6Z,EAElC,EAAKD,kBAAkB5Z,GAAO,QACCrK,IAA3B4d,EAAWvS,aACbuS,EAAWvS,YAAYC,SAAQ,SAAA6I,GAC7B,EAAK8P,kBAAkB5Z,GAAKlI,KAAK,CAC/BvB,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6BsI,EAAWvT,MAClD2M,OAAQ4G,EAAW5G,OAAOjN,KAAI,SAAAa,GAC5B,OAAO,IAAI0K,EAAAA,GAAAA,OAAAA,aAA6B1K,EAC1C,KAEJ,SAE8BnB,IAA5B4d,EAAW1R,cACb0R,EAAW1R,aAAaZ,SAAQ,SAAAuE,GAC9B,EAAK3D,aAAa/J,KAAK,CACrBvB,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6BgE,EAAYjP,MACnDO,WAAOnB,EACPuM,KAAM,IAAIV,EAAAA,GAAAA,OAAAA,aAA6BgE,EAAYtD,OAEvD,IAEsB,MAApBqR,EAAWnV,MACb,EAAKic,UAAUra,GAAOkY,GAAgB3E,EAAWnV,OAEjD,EAAKic,UAAUra,GAAO,EAAKoa,eAE/B,IAEA,EAAKsN,eAAiB,EAAKA,eAAennB,MAAK,WAC/C,EAAKonB,iBAAmB,EAAKA,iBAAiBpnB,MAAK,WACnD,EAAKwhB,eAAiB,EAAKA,eAAexhB,MAAK,WAC/C,EAAKqmB,iBAAmB,EAAKA,iBAAiBrmB,MAAK,WACnD,EAAKumB,qBAAuB,EAAKA,qBAAqBvmB,MAAK,WAC3D,EAAKsmB,sBAAwB,EAAKA,sBAAsBtmB,MAAK,WAC7D,EAAKymB,0BAA4B,EAAKA,0BAA0BzmB,MAAK,WACrE,EAAKwmB,iBAAmB,EAAKA,iBAAiBxmB,MAAK,WACnD,EAAKqnB,+BAAiC,EAAKA,+BAA+BrnB,MAAK,WAC/E,EAAKsnB,0CAA4C,EAAKA,0CAA0CtnB,MAAK,WACrG,EAAKunB,sCAAwC,EAAKA,sCAAsCvnB,MAAK,WAC7F,EAAKwnB,sCAAwC,EAAKA,sCAAsCxnB,MAAK,WAC7F,EAAKynB,iCAAmC,EAAKA,iCAAiCznB,MAAK,WACnF,EAAK0nB,oCAAsC,EAAKA,oCAAoC1nB,MAAK,WACzF,EAAK2nB,oCAAsC,EAAKA,oCAAoC3nB,MAAK,WACzF,EAAK4nB,wCAA0C,EAAKA,wCAAwC5nB,MAAK,WACjG,EAAKif,iCAAmC,EAAKA,iCAAiCjf,MAAK,WACnF,EAAKmf,sCAAwC,EAAKA,sCAAsCnf,MAAK,WAC7F,EAAK6nB,iCAAmC,EAAKA,iCAAiC7nB,MAAK,WACnF,EAAK8nB,qBAAuB,EAAKA,qBAAqB9nB,MAAK,WAC3D,EAAK2mB,WAAa,EAAKA,WAAW3mB,MAAK,WACvC,EAAK+nB,2BAA6B,EAAKA,2BAA2B/nB,MAAK,WACvE,EAAKgoB,2BAA6B,EAAKA,2BAA2BhoB,MAAK,WACvE,EAAKioB,6BAA+B,EAAKA,6BAA6BjoB,MAAK,WAC3E,EAAKkoB,6BAA+B,EAAKA,6BAA6BloB,MAAK,WAC3E,EAAKmoB,yCAA2C,EAAKA,yCAAyCnoB,MAAK,WACnG,EAAK0mB,uBAAyB,EAAKA,uBAAuB1mB,MAAK,WAC/D,EAAKooB,yBAA2B,EAAKA,yBAAyBpoB,MAAK,WACnE,EAAKqoB,yBAA2B,EAAKA,yBAAyBroB,MAAK,WACnE,EAAKqf,8BAAgC,EAAKA,8BAA8Brf,MAAK,WAC7E,EAAKsoB,yBAA2B,EAAKA,yBAAyBtoB,MAAK,WACnE,EAAKwf,8BAAgC,EAAKA,8BAA8Bxf,MAAK,WAC7E,EAAKuoB,yBAA2B,EAAKA,yBAAyBvoB,MAAK,WACnE,EAAKyf,kCAAoC,EAAKA,kCAAkCzf,MAAK,WACrF,EAAKwoB,6BAA+B,EAAKA,6BAA6BxoB,MAAK,WAC3E,EAAKyoB,gCAAkC,EAAKA,gCAAgCzoB,MAAK,WACjF,EAAK0oB,iCAAmC,EAAKA,iCAAiC1oB,MAAK,WACnF,EAAK2oB,6BAA+B,EAAKA,6BAA6B3oB,MAAK,WAC3E,EAAK6mB,wBAA0B,EAAKA,wBAAwB7mB,MAAK,WACjE,EAAK4oB,0BAA4B,EAAKA,0BAA0B5oB,MAAK,WAErE,MAAsCiY,GAAkB,CACtD7a,QAAS,EAAK9H,MAAM8H,QACpBT,MAAO,EAAKrH,MAAMqH,MAClBub,QAAS,EAAK5iB,MAAM4iB,UAHdE,EAAY,EAAZA,aAAcD,EAAW,EAAXA,YAKtB,EAAKC,aAAeA,EACpB,EAAKD,YAAcA,EACnB,EAAKoB,kBAAoBniB,EAAAA,YACzB,EAAKoiB,iBAAmBpiB,EAAAA,YAMxB,EAAKghB,aAAaqD,qBAAqB/a,SAAQ,SAAAuM,GAC7C,EAAKmL,aAAawD,sBAAsB3O,EAAY1M,WACtD,IAEA,cAAuB,EAAK6X,aAAayQ,YAAW,GAA7CtlB,EAAM,KAAE3M,EAAI,KAuClB,OArCD,EAAK0F,MAAQ,CACXoG,gBAAiB,IAAIkX,IACrBxX,eAAgB,IAAIwX,IACpBlJ,mBAAoB,IAAIkJ,IACxB1J,mBAAoB,IAAI0J,IACxBzS,2BAA4B,IAAIyS,IAChCpK,8BAA+B,IAAIoK,IACnCrK,6BAA8B,IAAIqK,IAClC2B,mBAAoB,GACpBoG,qBAAiBvsB,EACjBwsB,oBAAqB,GACrBxL,qBAAiBhhB,EACjBmH,WAAW,EACX0pB,0BAA0B,EAC1B/D,2BAA2B,EAC3Be,4BAA4B,EAC5BC,mBAAoB,EACpBC,mBAAoB,EACpBd,qBAAsB,GACtByG,8BAA8B,EAC9B3S,sBAAsB,EACtBwP,oBAAoB,EACpBI,wBAAwB,EACxBF,yBAAyB,EACzBK,oBAAoB,EACpB6C,4BAA4B,EAC5BC,4BAA4B,EAC5BC,yBAAqB7zB,EACrB8zB,sBAAuB,CAAC3lB,EAAO,GAAIA,EAAO,GAAK3M,EAAK,IACpDuyB,yBAAqB/zB,EACrBg0B,sBAAuB,CAAC7lB,EAAO,GAAIA,EAAO,GAAK3M,EAAK,IACpDyyB,2BAAuBj0B,EACvBk0B,eAAe,EACfxE,oBAAqB,CAAC,EACtBzJ,6BAA8B,EAAK/lB,MAAM+lB,6BACzCkJ,cAAe,IAAI3K,IACnBkN,sBAAsB,GACvB,CACH,CAwsGC,OAxsGA,0CAED,SACE/Z,EACAC,GACO,IAAD,OAIN,GACE3X,KAAKC,MAAM0b,SAAS0N,WAAa3R,EAAciE,SAAS0N,UACxDrpB,KAAKC,MAAM+kB,mBAAqBtN,EAAcsN,kBAC9ChlB,KAAKC,MAAM2J,oBAAsB8N,EAAc9N,mBAC/C5J,KAAKC,MAAMqH,QAAUoQ,EAAcpQ,OACnCtH,KAAKC,MAAM8H,UAAY2P,EAAc3P,QACrC,CACsC,MAAlC/H,KAAKkkB,kBAAkBzc,UACzBzH,KAAKkkB,kBAAkBzc,QAAQC,UAAY,IAE7C1H,KAAK+iB,aAAamR,UACM,MAApBl0B,KAAK8iB,cAC8B,MAAjC9iB,KAAKmkB,iBAAiB1c,UACxBzH,KAAKmkB,iBAAiB1c,QAAQC,UAAY,IAE5C1H,KAAK8iB,YAAYoR,WAEnB,MAAsCtR,GAAkB,CACtD7a,QAAS/H,KAAKC,MAAM8H,QACpBT,MAAOtH,KAAKC,MAAMqH,MAClBub,QAAS7iB,KAAKC,MAAM4iB,UAHdE,EAAY,EAAZA,aAAcD,EAAW,EAAXA,YAKtB9iB,KAAK+iB,aAAeA,EACpB/iB,KAAK8iB,YAAcA,EAEnB,IAAM5I,EAA4C,IAAIqK,IAChDpK,EAA6C,IAAIoK,IACvDvkB,KAAK+iB,aAAaqD,qBAAqB/a,SAAQ,SAAAuM,GAC7C,IAAM1M,EAAa0M,EAAY1M,WAC3B,EAAK6X,aAAaoR,qBAAqBjpB,IACzCiP,EAA8B6O,IAAI9d,GAEhC,EAAK6X,aAAaqR,oBAAoBlpB,IACxCgP,EAA6B8O,IAAI9d,EAErC,IAEA,cAAuBlL,KAAK+iB,aAAayQ,YAAW,GAA7CtlB,EAAM,KAAE3M,EAAI,KAEnBvB,KAAKqH,SAAS,CACZ0F,eAAgB,IAAIwX,IACpBlJ,mBAAoB,IAAIkJ,IACxB1J,mBAAoB,IAAI0J,IACxBzS,2BAA4B,IAAIyS,IAChCpK,8BAAAA,EACAD,6BAAAA,EACAgM,mBAAoB,GACpBgJ,cAAe,IAAI3K,IACnBsP,sBAAuB,CAAC3lB,EAAO,GAAIA,EAAO,GAAK3M,EAAK,IACpDwyB,sBAAuB,CAAC7lB,EAAO,GAAIA,EAAO,GAAK3M,EAAK,MAEtDvB,KAAK+rB,mBACP,CACF,GAgHA,4BA2MA,yCAKA,8GACe,IAAIzB,SAAc,SAACC,EAASC,GACvC1kB,QAAQ6B,KAAK,4CACb,IAAMG,EAAS,EAAK7H,MAAM8H,QAAQ/D,EAAeqwB,qBACjDvsB,EAAOid,mBAAmB,CACxBC,iBAAkB,EAAK/kB,MAAM+kB,iBAC7BC,YAAa,CACXC,SAAU,QAEXC,MAAK,SAACC,GACiB,MAApBA,IACFA,EAAmB,IAErBA,EAAiB/Z,SAAQ,SAAAtB,GACvB,IACMub,EADczd,EAAAA,SAAAA,eAA4BkC,GAAxCyL,QAEJ8P,EAASoE,cAAgB1lB,EAAeqwB,sBAC1CvuB,QAAQ6B,KAAK,yBAAD,OAA0B2d,EAASC,eAAc,MAC7Dzd,EAAO0d,iBAAiB,CACtBR,iBAAkB,EAAK/kB,MAAM+kB,iBAC7Bpb,kBAAmB0b,EAASzL,kBAC5BsH,eAAgBmE,EAASC,iBACxBJ,MAAK,SAACM,GACP,IAAM1N,EAAOnM,EAAAA,GAAAA,aAAAA,SAAiC6Z,GAExCvS,EADcrL,EAAAA,SAAAA,eAA4BkQ,EAAK2N,MAA7ClQ,QAMH4N,GAAmBlQ,GAQnBoQ,GAA0BpQ,GAO1BwQ,GAAwBxQ,IAQb,IAAIsB,GAAkBtB,GAC9B6B,KAAK1J,SAAQ,SAAAL,GACnBlF,QAAQ6B,KAAK,YAAD,OAAaqD,EAAIxK,IAAG,MAChC,IAAMoT,EAAW5I,EAAI4I,SACf6O,EAAQ,EAAKxiB,MAAMqH,MAAM8B,aAAa,GAC5C,GAAIwK,EAASE,sBAAwB2O,EAAM+I,oBAezC,GALqB,EAAKzI,aAAa4G,aAAa9M,MAClD,SAACyX,GACC,OAAOtS,GAAcsS,EAAUtpB,EACjC,IAYAlF,QAAQqZ,MAAM,8BAAD,OAA+BnU,EAAIxK,IAAG,WATnD,IAEE,EAAKuiB,aAAa4J,OAAO3hB,EAAK,CAAC,GAC/B,IAAMupB,EAAkB3V,GAAqB5T,GAC7C,EAAK2mB,iBAAiB4C,EAGxB,CAFE,SACAzuB,QAAQU,MAAM,sBAAD,OAAuBwE,EAAIxK,IAAG,KAC7C,MAKFsF,QAAQqZ,MACN,oBAAanU,EAAIxK,IAAG,gCACD0S,EAAOqS,eAAc,KACxC,sDAGN,IAEAgF,KAhDEzkB,QAAQqZ,MACN,8BAAuBjM,EAAOqS,eAAc,MAC5C,4DATFzf,QAAQqZ,MACN,8BAAuBjM,EAAOqS,eAAc,MAC5C,mDAVFzf,QAAQqZ,MACN,8BAAuBjM,EAAOqS,eAAc,MAA5C,kFA+DN,IAAGY,OAAM,SAAC3f,GAER4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,oCAGJkB,QAAQU,MACN,uBAAsB,2BACF8e,EAASC,eAAc,MAAI,qBACjCD,EAASzL,kBAAiB,MAAI,oBAC/B,EAAK5Z,MAAM+kB,iBAAgB,OACxCxe,EAEJ,IAMA,EAAK2kB,cAET,GACF,IAAGhF,OAAM,SAAC3f,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,oCAGJ4lB,EAAOhkB,aAAiBjC,MAAQiC,EAAQ,IAAIjC,MAAMsC,OAAOL,IAC3D,GACF,IAAE,mFACH,kDA1ID,IAqaA,uCAkTA,SAA2BhG,GAAoB,IAAD,OAE5CR,KAAK+iB,aAAa4L,kBAElB,IAAMD,EAAsB1uB,KAAK+tB,uBAAuBvtB,GACxDR,KAAKqH,SAASqnB,GACd1uB,KAAK+iB,aAAa4G,aAAate,SAAQ,SAACL,GACtC,IAAIxC,EAAQ,CAAC,EACb,GAAIkmB,EAAoBrhB,gBAAgBH,IAAIlC,EAAIxK,KAC9CgI,EAAQ,EAAKoc,iBACb,EAAKvd,UAAS,SAAAJ,GACZ,IAAM8F,EAAiB9F,EAAM8F,eAE7B,OADAA,EAAeic,IAAIhe,EAAIxK,KAChB,CAAEuM,eAAAA,EACX,SAEA,GAAI,EAAK9F,MAAM8F,eAAeG,IAAIlC,EAAIxK,KAAM,CAC1C,IAAM4J,EAAM0X,GAAW9W,GACvBxC,EAAQ,EAAK+gB,YAAYnf,EAC3B,CAEF,EAAK2Y,aAAayL,YAAYxjB,EAAIxK,IAAKgI,EACzC,GACF,GAAC,4CAED,WACExI,KAAKqH,SAAS,CACZwlB,2BAA2B,GAE/B,GAAC,8BA8HD,WACE2H,SAASC,KAAKC,oBACZ,kCACA10B,KAAKosB,YAEPoI,SAASC,KAAKC,oBACZ,yCACA10B,KAAKyuB,cAEP+F,SAASC,KAAKC,oBACZ,qCACA10B,KAAK4uB,eAEP4F,SAASC,KAAKC,oBACZ,2CACA10B,KAAK4sB,oBAEP4H,SAASC,KAAKC,oBACZ,qCACA10B,KAAKwtB,eAEPgH,SAASC,KAAKC,oBACZ,oCACA10B,KAAKmwB,cAEPqE,SAASC,KAAKC,oBACZ,qCACA10B,KAAKksB,eAEPsI,SAASC,KAAKC,oBACZ,wCACA10B,KAAK6uB,kBAEP2F,SAASC,KAAKC,oBACZ,sCACA10B,KAAK8uB,gBAEP0F,SAASC,KAAKC,oBACZ,8CACA10B,KAAK+uB,uBAEPyF,SAASC,KAAKC,oBACZ,4CACA10B,KAAKqvB,qBAEPmF,SAASC,KAAKC,oBACZ,QACA10B,KAAKqwB,SAEPmE,SAASC,KAAKC,oBACZ,QACA10B,KAAKowB,WAEPuE,OAAOD,oBAAoB,SAAU10B,KAAKmsB,gBAE1CnsB,KAAK+iB,aAAamR,UACM,MAApBl0B,KAAK8iB,aACP9iB,KAAK8iB,YAAYoR,SAUrB,GAAC,kCAiDD,WACEl0B,KAAK+iB,aAAamR,UACM,MAApBl0B,KAAK8iB,aACP9iB,KAAK8iB,YAAYoR,UAEnBS,OAAOD,oBAAoB,eAAgB10B,KAAK+xB,iBAClD,GAAC,4BAED,WACEyC,SAASC,KAAKG,iBACZ,kCACA50B,KAAKosB,YAEPoI,SAASC,KAAKG,iBACZ,qCACA50B,KAAK4uB,eAEP4F,SAASC,KAAKG,iBACZ,yCACA50B,KAAKyuB,cAEP+F,SAASC,KAAKG,iBACZ,2CACA50B,KAAK4sB,oBAEP4H,SAASC,KAAKG,iBACZ,qCACA50B,KAAKwtB,eAEPgH,SAASC,KAAKG,iBACZ,oCACA50B,KAAKmwB,cAEPqE,SAASC,KAAKG,iBACZ,qCACA50B,KAAKksB,eAEPsI,SAASC,KAAKG,iBACZ,wCACA50B,KAAK6uB,kBAEP2F,SAASC,KAAKG,iBACZ,sCACA50B,KAAK8uB,gBAEP0F,SAASC,KAAKG,iBACZ,sCACA50B,KAAKovB,gBAEPoF,SAASC,KAAKG,iBACZ,8CACA50B,KAAK+uB,uBAEPyF,SAASC,KAAKG,iBACZ,4CACA50B,KAAKqvB,qBAEPmF,SAASC,KAAKG,iBACZ,4CACA50B,KAAKmvB,qBAEPqF,SAASC,KAAKG,iBACZ,QACA50B,KAAKqwB,SAEPmE,SAASC,KAAKG,iBACZ,UACA50B,KAAKowB,WAEPuE,OAAOC,iBAAiB,eAAgB50B,KAAK+xB,kBAC7C4C,OAAOC,iBAAiB,SAAU50B,KAAKmsB,eACzC,GAAC,+BAED,WAIE,GAHAnsB,KAAK8xB,iBACL9xB,KAAK+rB,qBAEA/rB,KAAKC,MAAMqH,MAAMqe,0BAA2B,CAC/C,IAAIkP,GAAgB,EACdpS,EAAQziB,KAAKC,MAAMqH,MAAM8B,aAAa,GAE5C,GAA+B,MADVqZ,EAAM3I,oBAAoB,GAC9Bgb,YACf,GAAI,wBAAyBrS,EAAMsS,mBAG7B,eADiBtS,EAAMsS,mBAAmBjb,oBAAoB,KAEhE+a,GAAgB,QAIpBA,GAAgB,EAEbA,GAEH9vB,EAAAA,GAAAA,QAAgB,4CAEpB,CACF,GAEA,8CAMA,SACE7D,EACAwO,GACO,IAAD,OACN1P,KAAK+jB,eAAe1Y,SAAQ,SAAA2f,GACtBA,EAAQxf,YAActK,IACxB4E,QAAQ6B,KAAK,qBAAD,OAAsBqjB,EAAQtf,YAAW,MACrD,EAAKrE,SAAS,CACZilB,gBAAiBtB,EACjBuB,oBAAqB,KAG3B,GACF,GAEA,mDAOA,SAAuCrrB,EAAewO,GACpD1P,KAAKqH,SAAS,CAAE2tB,qBAAsB9zB,GACxC,GAEA,mDAIA,SAAuC2J,GACbA,EAAMwR,OAAOzR,QAEnC5K,KAAKqH,SAAS,CAAE4tB,eAAgB,gBAEhCj1B,KAAKqH,SAAS,CAAE4tB,oBAAgBl1B,GAEpC,GAEA,iDAOA,SACEmB,EACAwO,GACO,IAAD,OACA4c,EAAkBtsB,KAAKiH,MAAMqlB,gBACnC,QAAwBvsB,IAApBusB,EAA+B,CACjC,IAAMliB,EAAMuX,GAAU2K,GAChB3rB,EAAO+O,EAAOhP,MACpBV,KAAKgkB,kBAAkB5Z,GAAKiB,SAAQ,SAAA6I,GAEhCA,EAAWvT,KAAK6K,YAAc7K,EAAK6K,WACnC0I,EAAWvT,KAAKkQ,yBAA2BlQ,EAAKkQ,wBAEhDqD,EAAW5G,OAAOjC,SAAQ,SAAA0lB,GACxB,GAAIA,EAAKvlB,YAActK,EAAO,CAC5B,IAAMg0B,EAAsB,EAAKjuB,MAAMslB,oBAAoBhM,QACzD,SAACjgB,GAAgB,OAAKA,EAAKK,OAASuT,EAAWvT,IAAI,IAErD,EAAK0G,SAAS,CACZklB,oBAAoB,GAAD,gBACd2I,GAAmB,CACtB,CAAEv0B,KAAMA,EAAMO,MAAO6vB,MAG3B,CACF,GAEJ,GACF,CACF,GAEA,iDAIA,WACE/wB,KAAKqH,SAAS,CACZklB,oBAAqB,IAEzB,GAAC,wCAED,SAA4BrrB,GAC1B,GAAa,MAATA,EAAe,CACjB,IAAMi0B,EAAIC,OAAOl0B,GACXm0B,EAAQr1B,KAAKiH,MAAM4sB,sBAAsB,GACzCyB,EAAMt1B,KAAKiH,MAAM4sB,sBAAsB,GAC7C,GAAIsB,GAAKE,GAASF,GAAKG,EAKrB,YAJAt1B,KAAKqH,SAAS,CACZusB,oBAAqBuB,EACrBzB,4BAA4B,GAIlC,CACA1zB,KAAKqH,SAAS,CACZusB,yBAAqB7zB,EACrB2zB,4BAA4B,GAEhC,GAAC,wCAED,SAA4BxyB,GAC1B,GAAa,MAATA,EAAe,CACjB,IAAMq0B,EAAIH,OAAOl0B,GACXm0B,EAAQr1B,KAAKiH,MAAM8sB,sBAAsB,GACzCuB,EAAMt1B,KAAKiH,MAAM8sB,sBAAsB,GAC7C,GAAIwB,GAAKF,GAASE,GAAKD,EAKrB,YAJAt1B,KAAKqH,SAAS,CACZysB,oBAAqByB,EACrB5B,4BAA4B,GAIlC,CACA3zB,KAAKqH,SAAS,CACZysB,yBAAqB/zB,EACrB4zB,4BAA4B,GAEhC,GAAC,0CAED,SAA8BzyB,GACf,MAATA,GACEA,EAAQ,GAAKA,GAAS,GACxBlB,KAAKqH,SAAS,CACZ2sB,sBAAuBoB,OAAOl0B,GAC9BuyB,8BAA8B,IAKpCzzB,KAAKqH,SAAS,CACZ2sB,2BAAuBj0B,EACvB0zB,8BAA8B,GAElC,GAEA,0CAIA,WACE,GACEzzB,KAAKiH,MAAMysB,4BACX1zB,KAAKiH,MAAM0sB,4BACX3zB,KAAKiH,MAAMwsB,8BACuB,MAAlCzzB,KAAKiH,MAAM2sB,qBACuB,MAAlC5zB,KAAKiH,MAAM6sB,qBACyB,MAApC9zB,KAAKiH,MAAM+sB,sBACX,CACAluB,QAAQ6B,KACN,yBAAwB,WACpB3H,KAAKiH,MAAM2sB,oBAAmB,MAAI,UACnC5zB,KAAKiH,MAAM6sB,oBAAmB,MAAI,aAC/B9zB,KAAKiH,MAAM+sB,sBAAqB,oBAWxC,IARA,IAMMwB,EAAqB,IANZx1B,KAAKiH,MAAM+sB,sBAOpByB,EAAQ,GACL1rB,EAAI,EAAGA,EAAI/J,KAAK+iB,aAAa2S,UAAW3rB,IAAK,CACpD,IAAM4rB,EAAqB31B,KAAK+iB,aAAa6S,gBAAgB7rB,GAAG,GAChE0rB,EAAMvzB,KAAKmW,KAAKwd,IAAIL,EAAqBG,GAC3C,CACA,IAAMG,EAAQL,EAAMM,QAAQ1d,KAAKjH,IAAG,MAARiH,KAAYod,IACxCz1B,KAAK+iB,aAAalH,SAAS,CACzBlT,SAAU,CACR3I,KAAKiH,MAAM2sB,oBACX5zB,KAAKiH,MAAM6sB,qBAEbgC,MAAOA,IAET,IAAME,EAAQ,IAAInuB,EAAAA,SAAAA,MAAmB,CACnCmM,YAAa,CACXhU,KAAKiH,MAAM2sB,oBACX5zB,KAAKiH,MAAM6sB,oBACX,GAEFhgB,oBAAqB9T,KAAK+iB,aAAajP,sBAEnC9I,EAAM,IAAInD,EAAAA,IAAAA,IAAY,CAAE+L,SAAUoiB,IACxCh2B,KAAK+iB,aAAa4J,OAAO3hB,EAAKhL,KAAKwkB,iBACnCxkB,KAAKqH,UAAS,SAAAJ,GACZ,IAAM8F,EAAiB9F,EAAM8F,eAE7B,OADAA,EAAeic,IAAIhe,EAAIxK,KAChB,CACLuM,eAAAA,EACA8jB,oBAAoB,EAExB,GACF,CACF,GAEA,sDAIA,WACE/qB,QAAQmwB,IAAI,mCACZj2B,KAAKqH,SAAS,CACZwpB,oBAAoB,EACpB6C,4BAA4B,EAC5BC,4BAA4B,EAC5BF,8BAA8B,EAC9BG,yBAAqB7zB,EACrB+zB,yBAAqB/zB,EACrBi0B,2BAAuBj0B,GAE3B,GAEA,qDAGA,WACE+F,QAAQqZ,MAAM,qCACd,IAAM6L,EAAUhrB,KAAKiH,MAAMqlB,gBACrB4J,EAAel2B,KAAKiH,MAAM+tB,qBAC1BmB,EAASn2B,KAAKiH,MAAMguB,oBACLl1B,IAAjBm2B,QAA0Cn2B,IAAZirB,GAChChrB,KAAK+iB,aAAaqT,wBAAwB,CAAEF,aAAAA,EAAcC,OAAAA,IAC1Dn2B,KAAKqH,SAAS,CACZupB,0BAA0B,EAC1BN,oBAAoB,KAGtBloB,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,+CAIR,GAEA,uDAGA,WACEkB,QAAQqZ,MAAM,mCACdnf,KAAKqH,SAAS,CACZupB,0BAA0B,EAC1BN,oBAAoB,GAExB,GAEA,oCAIA,WAAiC,IAAD,OAC9BxqB,QAAQ6B,KAAK,aACb,IAAMmF,EAAO9M,KAAK+iB,aAAa4G,aACzBlQ,EAAezZ,KAAK+iB,aAAaqD,qBACjCpkB,EAAWhC,KAAK+iB,aAAasT,uBACjC5c,EAAa,GAAGvO,YAElBlL,KAAKqH,UAAS,SAACivB,GACb,IAAMpjB,EAASqjB,GAAe,CAC5BzpB,KAAAA,EACA9K,SAAAA,EACA8c,KAAM,EAAK7e,MAAM6e,KACjBC,IAAK,EAAK9e,MAAM8e,IAChBhS,eAAgBupB,EAAUvpB,iBAE5B,MAAO,CACL+T,qBAAsB5N,EAAO4N,qBAC7BC,gBAAiB7N,EAAO6N,gBAE5B,GACF,GAEA,sCAKA,WACEjb,QAAQ6B,KAAK,kBAEb,IAAMuL,EAASlT,KAAKiH,MAAM8Z,gBAC1B,QAAehhB,IAAXmT,EAAsB,CACxB,IAAMsC,EAAUtC,EAChBpN,QAAQqZ,MAAM,gCACd,IAAMqX,EAAkC,IAAIC,WAAW,GACvDD,EAAgC,GAAK,EACrC,IAAME,EAAW,CAEf,WAAY,CACVC,MAAO,CAACH,EAAgCI,QACxCC,GAAI,MAGN,WAAY,CACVF,MAAO,CAACnhB,EAAQkU,aAChBmN,GAAI,MAGN,WAAY,CACVF,MAAO,CAACnhB,EAAQ+P,gBAChBsR,GAAI,MAGN,WAAY,CACVF,MAAO,CAAC,uBACRE,GAAI,MAGN,WAAY,CACVF,MAAO,CAAC32B,KAAKC,MAAM8e,IAAIve,KACvBq2B,GAAI,OAIR/wB,QAAQ6B,KAAK,sCACb,IAAMmvB,EAAS,IAAIlrB,EAAAA,GAAAA,UAAqB8qB,GACxCI,EAAOpR,KAAO9Z,EAAAA,GAAAA,oBAAAA,oBAAmD4J,GACjE,IAAMohB,EAASE,EAAOC,QACP/2B,KAAKC,MAAM8H,QAAQ/D,EAAeqwB,qBAC1C2C,eAAe,CAAEC,SAAU,CAACL,KAAWzR,MAC5C,SAAC+R,GAAa,OAAKnyB,EAAAA,GAAAA,KAAa,0BAA0B,IAC1DohB,OAAM,SAAC3f,GACPV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,kCAGN,GACF,CACA5E,KAAKqH,SAAS,CACZyZ,sBAAsB,EACtBC,qBAAiBhhB,GAErB,GAEA,sCAGA,WACEC,KAAKqH,SAAS,CACZyZ,sBAAsB,EACtBC,qBAAiBhhB,GAErB,GAEA,8CAIA,YAGU,IAH0BgL,EAAM,EAANA,OAIlC,GAJmD,EAATE,UAI3B,CACbnF,QAAQ6B,KAAK,YAAD,OAAaoD,IACzB,IAAMC,EAAMhL,KAAK+iB,aAAaqL,OAAOrjB,GAC/BX,EAAM0X,GAAW9W,GACjBxC,EAAQxI,KAAKupB,YAAYnf,GAC/BpK,KAAK+iB,aAAayL,YAAYxjB,EAAIxK,IAAKgI,GACvCxI,KAAKqH,UAAS,SAAAJ,GACZ,IAAM8F,EAAiB9F,EAAM8F,eAE7B,OADAA,EAAeic,IAAIhe,EAAIxK,KAChB,CAAEuM,eAAAA,EACX,GACF,MACEjH,QAAQ6B,KAAK,YAAD,OAAaoD,IACzB/K,KAAKqH,UAAS,SAAAJ,GACZ,IAAMoG,EAAkBpG,EAAMoG,gBAC9BA,EAAgBiiB,OAAOvkB,GACvB,IAAMgC,EAAiB9F,EAAM8F,eAE7B,OADAA,EAAeuiB,OAAOvkB,GACf,CAAEgC,eAAAA,EAAgBM,gBAAAA,EAC3B,IACArN,KAAK+iB,aAAayL,YAAYzjB,EAAQ,CAAC,EAE3C,GAEA,mDAIA,YAGU,IAH+B0D,EAAkB,EAAlBA,mBAAoBxD,EAAS,EAATA,UAK3D,GADAnF,QAAQmwB,IAAI,yCAAD,OAA0CxnB,IACjDxD,EAAW,CACbnF,QAAQ6B,KAAK,yBAAD,OAA0B8G,IACtC,IACEzO,KAAK+iB,aAAaoU,oBAAoB1oB,EAWxC,CAVE,MAAOjI,GASP,MAPA4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,qCAGE4B,CACR,CACAxG,KAAKqH,UAAS,SAAAJ,GACZ,IAAM6K,EAA6B,IAAIyS,IACrCtd,EAAM6K,4BAGR,OADAA,EAA2BkX,IAAIva,GACxB,CAAEqD,2BAAAA,EACX,GACF,MACEhM,QAAQ6B,KAAK,yBAAD,OAA0B8G,IACtCzO,KAAK+iB,aAAaqU,oBAAoB3oB,GACtCzO,KAAKqH,UAAS,SAAAJ,GACZ,IAAM6K,EAA6B,IAAIyS,IACrCtd,EAAM6K,4BAGR,OADAA,EAA2Bwd,OAAO7gB,GAC3B,CAAEqD,2BAAAA,EACX,GAEJ,GAEA,8CAGA,YAOU,IAP0BtR,EAAG,EAAHA,IAAK+O,EAAY,EAAZA,aAQvCzJ,QAAQmwB,IAAI,oCAAD,OAAqCz1B,IAChD,IACER,KAAK+iB,aAAamI,wBAChB1qB,EACA+O,EAYJ,CAVE,MAAO/I,GASP,MAPA4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,gDAGE4B,CACR,CACF,GAAC,8BAED,SACE+I,GAAyD,IAAD,MAClDH,EAA8B,QAAvB,EAAGG,EAAaH,eAAO,QAx+EL,GAy+EzBioB,EAAgC,QAArB,EAAG9nB,EAAarG,aAAK,QAAIuY,GACpC6V,EAAY/nB,EAAa0M,YAAc,CAAC,EAAG,EAAG,EAAG,GAAKob,EAAYh3B,KAAI,SAACk3B,GAAC,OAAKlf,KAAKjH,IAAImmB,EAAI,GAAI,IAAI,IAMxG,OALcjV,GAAgB,CAC5BE,KAAM,CAAEtZ,MAAM,GAAD,gBAAMouB,GAAS,CAAEloB,KAC9BmT,OAAQ,CAAErZ,MAAM,GAAD,gBAAMmuB,GAAW,CAAEjoB,KAClCuT,OAAmC,QAA7B,EAAE3iB,KAAKwkB,gBAAgBjC,cAAM,aAA3B,EAA6BrY,OAGzC,GAAC,kCAED,YAGU,IAHc1J,EAAG,EAAHA,IAAK+O,EAAY,EAAZA,aAI3BzJ,QAAQmwB,IAAI,uBAAD,OAAwBz1B,IACnC,IACER,KAAKuc,wBAAwB/b,GAAO+O,EACpC,IAAM/G,EAAQxI,KAAK4xB,iBAAiBriB,GAE9BvE,EAAMhL,KAAK+iB,aAAaqL,OAAO5tB,GAC/B4J,EAAM0X,GAAW9W,GACvBhL,KAAKykB,UAAUra,GAAO5B,EACtBxI,KAAK+iB,aAAayL,YAAYhuB,EAAKgI,GACnCxI,KAAKiH,MAAM8F,eAAeic,IAAIxoB,EAWhC,CAVE,MAAOgG,GASP,MAPA4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,mCAGE4B,CACR,CACF,GAEA,2CAIA,YAGU,IAHuByU,EAAU,EAAVA,WAAYhQ,EAAS,EAATA,UAI3CnF,QAAQmwB,IAAI,gCAAD,OAAiChb,IACxChQ,GACFnF,QAAQ6B,KAAK,gBAAD,OAAiBsT,IAC7Bjb,KAAK+iB,aAAayU,YAAYvc,GAC9Bjb,KAAKqH,UAAS,SAAAJ,GACZ,IAAMoU,EAAqB,IAAIkJ,IAAItd,EAAMoU,oBAEzC,OADAA,EAAmB2N,IAAI/N,GAChB,CAAEI,mBAAAA,EACX,MAEAvV,QAAQ6B,KAAK,gBAAD,OAAiBsT,IAC7Bjb,KAAK+iB,aAAa0U,YAAYxc,GAC9Bjb,KAAKqH,UAAS,SAAAJ,GACZ,IAAMoU,EAAqB,IAAIkJ,IAAItd,EAAMoU,oBAEzC,OADAA,EAAmBiU,OAAOrU,GACnB,CAAEI,mBAAAA,EACX,IAEJ,GAEA,sCAGA,YAKU,IALkBJ,EAAU,EAAVA,WAAY1L,EAAY,EAAZA,aAMtCzJ,QAAQmwB,IAAI,2BAAD,OAA4Bhb,IACvCjb,KAAK+iB,aAAa2U,gBAAgBzc,EAAY1L,EAChD,GAEA,2CAIA,YAGU,IAHuBmL,EAAU,EAAVA,WAAYzP,EAAS,EAATA,UAI3CnF,QAAQmwB,IAAI,gCAAD,OAAiCvb,IACxCzP,GACFnF,QAAQ6B,KAAK,gBAAD,OAAiB+S,IAC7B1a,KAAK+iB,aAAa4U,qBAAqBjd,GACvC1a,KAAKqH,UAAS,SAAAJ,GACZ,IAAM4T,EAAqB,IAAI0J,IAAItd,EAAM4T,oBAEzC,OADAA,EAAmBmO,IAAItO,GAChB,CAAEG,mBAAAA,EACX,MAEA/U,QAAQ6B,KAAK,gBAAD,OAAiB+S,IAC7B1a,KAAK+iB,aAAa6U,qBAAqBld,GACvC1a,KAAKqH,UAAS,SAAAJ,GACZ,IAAM4T,EAAqB,IAAI0J,IAAItd,EAAM4T,oBAEzC,OADAA,EAAmByU,OAAO5U,GACnB,CAAEG,mBAAAA,EACX,IAEJ,GAEA,sCAGA,YAKU,IALkBH,EAAU,EAAVA,WAAYnL,EAAY,EAAZA,aAMtCzJ,QAAQmwB,IAAI,2BAAD,OAA4Bvb,IACvC1a,KAAK+iB,aAAa8U,yBAAyBnd,EAAYnL,EACzD,GAEA,+CAIA,YAGU,IAH2BsI,EAAqB,EAArBA,sBAAuB5M,EAAS,EAATA,UAI1DnF,QAAQmwB,IAAI,qCAAD,OAAsCpe,IAC7C5M,GACFnF,QAAQ6B,KAAK,qBAAD,OAAsBkQ,IAClC7X,KAAK+iB,aAAagG,gBAAgBlR,GAClC7X,KAAKqH,UAAS,SAAAJ,GACZ,IAAMkT,EAAgC,IAAIoK,IACxCtd,EAAMkT,+BAGR,OADAA,EAA8B6O,IAAInR,GAC3B,CAAEsC,8BAAAA,EACX,MAEArU,QAAQ6B,KAAK,qBAAD,OAAsBkQ,IAClC7X,KAAK+iB,aAAauD,gBAAgBzO,GAClC7X,KAAKqH,UAAS,SAAAJ,GACZ,IAAMkT,EAAgC,IAAIoK,IACxCtd,EAAMkT,+BAGR,OADAA,EAA8BmV,OAAOzX,GAC9B,CAAEsC,8BAAAA,EACX,IAEJ,GAEA,0CAGA,YAOU,IAPsBtC,EAAqB,EAArBA,sBAAuBtI,EAAY,EAAZA,aAQrDzJ,QAAQmwB,IAAI,gCAAD,OAAiCpe,IAC5C7X,KAAK+iB,aAAa0D,oBAAoB5O,EAAuBtI,EAC/D,GAEA,6CAIA,YAGU,IAHyBsI,EAAqB,EAArBA,sBAAuByB,EAAQ,EAARA,SAIxDxT,QAAQmwB,IAAI,mCAAD,OAAoCpe,IAC3CyB,GACFxT,QAAQ6B,KAAK,yBAAD,OAA0BkQ,IACtC7X,KAAK+iB,aAAa+F,oBAAoBjR,GACtC7X,KAAKqH,UAAS,SAAAJ,GACZ,IAAMiT,EAA+B,IAAIqK,IACvCtd,EAAMiT,8BAGR,OADAA,EAA6B8O,IAAInR,GAC1B,CAAEqC,6BAAAA,EACX,MAEApU,QAAQ6B,KAAK,2BAAD,OAA4BkQ,IACxC7X,KAAK+iB,aAAawD,sBAAsB1O,GACxC7X,KAAKqH,UAAS,SAAAJ,GACZ,IAAMiT,EAA+B,IAAIqK,IACvCtd,EAAMiT,8BAGR,OADAA,EAA6BoV,OAAOzX,GAC7B,CAAEqC,6BAAAA,EACX,IAEJ,GAEA,yCAIA,WAAsC,IAAD,OAC7BC,EAA6C,IAAIoK,IACjD9K,EAAezZ,KAAK+iB,aAAaqD,qBAkCvC,GAjCA3M,EAAaqe,MAAK,SAAC7V,EAAGC,GACpB,OAAiD,IAA7CD,EAAE/W,WAAW6sB,cAAc7V,EAAEhX,YACxB,EAC+C,IAA7CgX,EAAEhX,WAAW6sB,cAAc9V,EAAE/W,aAC9B,EAEH,CACT,IACAuO,EAAapO,SAAQ,SAAC/K,GACpB,IAAM4K,EAAa5K,EAAK4K,WAClB1C,EAAQ,EAAKua,aAAayD,2BAA2Btb,GAC3D,EAAK6X,aAAa0D,oBAAoBvb,EAAY1C,GAClD,EAAKua,aAAauD,gBAAgBpb,GAClC,EAAK6X,aAAawD,sBAAsBrb,GACpC5K,EAAKkY,gBAKgC,MAAnClY,EAAK03B,4BACP7d,EAA8B6O,IAAI9d,GAIpCiP,EAA8B6O,IAAI9d,EAEtC,IAO2C,IAAvCiP,EAA8B5Y,KAAY,CAC5C,IAAM02B,EAAgB,CACpB,CAAC,IAAK,IAAK,MAEbxe,EAAapO,SAAQ,SAAC/K,GACpB,IAAM4K,EAAa5K,EAAK4K,WACxB,GAAI5K,EAAKkY,gBAAiB,CACxB,IAAM0f,EAAa/d,EAA8B5Y,KACjD,GAAI22B,EAAaD,EAAczwB,OAAQ,CACrC,IAAMgB,GAAK,UACN,EAAKua,aAAamN,oBAAoBhlB,IAErC3K,EAAQ23B,EACd1vB,EAAMU,MAAQ+uB,EAAc13B,GAC5B,IAAMyvB,EAAQ,EAAK/oB,MAAMwoB,oBAAoBnvB,EAAK4K,YACrC,MAAT8kB,IACFxnB,EAAMgH,YAAc,CAACwgB,EAAM5e,IAAK4e,EAAM3e,MAExC,EAAK0R,aAAa0D,oBAAoBnmB,EAAK4K,WAAY1C,GACvD2R,EAA8B6O,IAAI1oB,EAAK4K,WACzC,CACF,CACF,GACF,CAEApF,QAAQ6B,KACN,qBAAcwS,EAA8B5Y,KAAI,mBAChD,qBAEF4Y,EAA8B9O,SAAQ,SAAAH,GACpC,EAAK6X,aAAagG,gBAAgB7d,EACpC,IACAlL,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtBiT,6BAA8B,IAAIqK,IAAIpK,GACtCA,8BAA+B,IAAIoK,IAAIpK,GACxC,GACH,GAEA,0CAIA,WACEna,KAAKqH,SAAS,CAAE2e,kCAA8BjmB,IAC9C,IAAMo4B,EAAUn4B,KAAKC,MAAM0b,SAAS0N,SACpCrpB,KAAKC,MAAM4b,SAASsc,GACpBn4B,KAAKgsB,6BACP,GAEA,8CAIA,SACE9qB,EACAwO,GAIE,IAAIkW,EAFN,GAAa,MAAT1kB,EAQF,GAPA4E,QAAQ6B,KAAK,uCAAD,OAAwCzG,EAAK,MAEzDlB,KAAKiH,MAAMif,mBAAmB7a,SAAQ,SAAAia,GAChCA,EAASC,iBAAmBrkB,IAC9B0kB,EAAoBN,EAExB,IACyB,MAArBM,EAA2B,CAC7B,IAAIuS,EAAUn4B,KAAKC,MAAM0b,SAAS0N,SAClC8O,GAAO,iBAAcj3B,GACrBlB,KAAKC,MAAM4b,SAASsc,GACpBn4B,KAAKimB,qBAAqBL,EAC5B,MAEExd,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,0CAGJkB,QAAQmwB,IACN,mDAAkD,mCACtB/0B,EAAK,WAIrClB,KAAKszB,+BAEPtzB,KAAKqH,SAAS,CAAE2e,6BAA8B9kB,GAChD,GAEA,8BAIA,WACMlB,KAAKiH,MAAMqpB,oBACbxqB,QAAQ6B,KAAK,8BACb3H,KAAK+iB,aAAawN,4BAClBvwB,KAAK+iB,aAAaG,0BAA0B,CAAC,GAC7CljB,KAAKqH,SAAS,CACZupB,0BAA0B,EAC1B/D,2BAA2B,EAC3B6D,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,EACzBK,oBAAoB,MAGtB/qB,QAAQ6B,KAAK,4BACb3H,KAAKqH,SAAS,CACZupB,0BAA0B,EAC1B/D,2BAA2B,EAC3ByD,oBAAoB,EACpBE,yBAAyB,EACzBE,wBAAwB,EACxBG,oBAAoB,IAEtB7wB,KAAK+iB,aAAaqV,8BAClBp4B,KAAK+iB,aAAasV,4BAClBr4B,KAAK+iB,aAAa4N,iCAClB3wB,KAAK+iB,aAAa0N,8BAEtB,GAEA,mCAIA,WACE3qB,QAAQ6B,KAAK,+BACT3H,KAAK+iB,aAAauV,2BACpBt4B,KAAK+iB,aAAa0N,8BAClBzwB,KAAK+iB,aAAasV,4BAClBr4B,KAAK+iB,aAAaG,0BAA0B,CAAC,GAC7CljB,KAAKqH,SAAS,CACZqpB,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,MAG3BxwB,KAAKqH,SAAS,CACZmpB,yBAAyB,EACzBF,oBAAoB,EACpBI,wBAAwB,IAE1B1wB,KAAK+iB,aAAawN,4BAClBvwB,KAAK+iB,aAAa4N,iCAClB3wB,KAAK+iB,aAAaqV,8BAClBp4B,KAAK+iB,aAAawV,wBAAwB,CAAC,GAC3Cv4B,KAAK+iB,aAAayV,0BAA0B,CAAC,GAEjD,GAEA,kCAIA,WACE1yB,QAAQ6B,KAAK,8BACT3H,KAAK+iB,aAAa0V,8BACpBz4B,KAAK+iB,aAAa4N,iCAClB3wB,KAAKqH,SAAS,CACZqpB,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,MAG3BxwB,KAAKqH,SAAS,CACZqpB,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,IAE3BxwB,KAAK+iB,aAAa0N,8BAClBzwB,KAAK+iB,aAAasV,4BAClBr4B,KAAK+iB,aAAawN,4BAClBvwB,KAAK+iB,aAAaqV,8BAClBp4B,KAAK+iB,aAAa2V,6BAA6B,CAAC,GAEpD,GAAC,wBAED,WACE14B,KAAK+iB,aAAawN,4BAClBvwB,KAAK+iB,aAAa0N,8BAClBzwB,KAAK+iB,aAAasV,4BAClBr4B,KAAK+iB,aAAa4N,iCAClB3wB,KAAK+iB,aAAaqV,8BAClBp4B,KAAKqH,SAAS,CACZwpB,oBAAoB,EACpBD,0BAA0B,EAC1B/D,2BAA2B,EAC3B/L,sBAAsB,EACtB4P,wBAAwB,EACxBF,yBAAyB,EACzBF,oBAAoB,GAExB,GAEA,8BAIA,WAA2B,IAAD,OACxBtwB,KAAK+iB,aAAawN,4BAClBvwB,KAAK+iB,aAAasV,4BAClBr4B,KAAK+iB,aAAa4N,iCAClB3wB,KAAK+iB,aAAa0N,8BACdzwB,KAAKiH,MAAMoG,gBAAgB9L,KAAO,GACpCvB,KAAKiH,MAAMoG,gBAAgBhC,SAAQ,SAAA7K,QACrBT,IAARS,GAKJsF,QAAQ6B,KAAK,eAAD,OAAgBnH,EAAG,MAC/B,EAAKuiB,aAAa4V,UAAUn4B,GAE5BuE,EAAAA,GAAAA,KAAa,2BANXA,EAAAA,GAAAA,QAAgB,yCAOpB,IACA/E,KAAKqH,SAAS,CACZgG,gBAAiB,IAAIkX,IACrBmM,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,MAG3BxwB,KAAKiH,MAAM8F,eAAe1B,SAAQ,SAAA7K,GAChCsF,QAAQ6B,KAAK,eAAD,OAAgBnH,EAAG,MAC/B,EAAKuiB,aAAa4V,UAAUn4B,EAC9B,IACAR,KAAKqH,SAAS,CACZ0F,eAAgB,IAAIwX,IACpBmM,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,KAG7BxwB,KAAK+iB,aAAaG,0BAA0B,CAAC,EAC/C,GAEA,uCAIA,WAAoC,IAAD,OACjCpd,QAAQ6B,KAAK,6BACR3H,KAAKiH,MAAMgtB,eAcdj0B,KAAK+iB,aAAa6V,WAClB54B,KAAK+iB,aAAaG,0BAA0B,CAAC,GAC7CljB,KAAKiH,MAAMoG,gBAAgBhC,SAAQ,SAAA7K,QACrBT,IAARS,GACF,EAAKuiB,aAAayL,YAAYhuB,EAAK,EAAKokB,iBAE5C,IACA5kB,KAAKqH,SAAS,CAAE4sB,eAAe,MApB/Bj0B,KAAK+iB,aAAawN,4BAClBvwB,KAAK+iB,aAAasV,4BAClBr4B,KAAK+iB,aAAa4N,iCAClB3wB,KAAK+iB,aAAaqV,8BAClBp4B,KAAK+iB,aAAa0N,8BAClBzwB,KAAK+iB,aAAa8V,WAClB74B,KAAKqH,SAAS,CACZ4sB,eAAe,EACf3D,oBAAoB,EACpBE,yBAAyB,EACzBE,wBAAwB,IAY9B,GAMA,oBA6BA,WAA4B,IAAD,SACnB5jB,EAAsB,GACtBsO,EAAkC,GAClCR,EAA2C,GAC3ChJ,EAAqD,GAC3D9E,EAAK5K,KAAI,MAAT4K,GAAI,QAAS9M,KAAK+iB,aAAa4G,eAC/BvO,EAASlZ,KAAI,MAAbkZ,GAAQ,QAASpb,KAAK+iB,aAAagH,mBACnCnP,EAAS1Y,KAAI,MAAb0Y,GAAQ,QAAS5a,KAAK+iB,aAAakH,4BACnC,IAAM6O,EAAsB94B,KAAK+iB,aAAa8G,yBACxCkP,EAA8C,OAAnBD,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBvY,QAAO,SAAC7R,GAAe,OAC3EA,EAAgBsqB,8BAAgC,EAAK/4B,MAAM2J,iBAAiB,IAE9EgI,EAAiB1P,KAAI,MAArB0P,GAAgB,QAASmnB,IAEzB,IAMI7lB,EAMA+lB,EAZErjB,EAAc9I,EAAKzM,KAAI,SAAA2K,GAAG,OAAI4T,GAAqB5T,EAAI,IAEvDkuB,EAAmB,CACvB,YAAa,gBAAiB,cAAe,uBAIzC1jB,EAAUxV,KAAKiH,MAAM8Z,qBACXhhB,IAAZyV,IACFtC,GAAS,SAAC,GAAM,CAACsC,QAASA,KAIxB1I,EAAKtF,OAAS,IAChByxB,GACE,SAAC,GAAc,CACbnsB,KAAMA,EACNO,gBAAiBrN,KAAKiH,MAAMoG,gBAC5BN,eAAgB/M,KAAKiH,MAAM8F,eAC3BE,YAAajN,KAAKuzB,0BAClBzoB,mBAAoB9K,KAAK4pB,oCAK/B,IAAM7F,EAAiB/jB,KAAK+jB,eAAe1jB,KAAI,SAAC2qB,EAASzqB,GACvD,OACE,SAAC,YAAa,CAEZW,MAAO8pB,EAAQxf,UAAU,SAExBwf,EAAQtf,kBAHmB3L,IAAtBirB,EAAQxf,WAAiD,KAAtBwf,EAAQxf,UAAoBwf,EAAQxf,UAAS,kBAAcjL,GAM1G,IAEM44B,EAAiE,CACrEnD,OAAO,SAAC,YAAa,CAAa90B,MAAM,QAAO,kBAArB,SAC1BwhB,QAAQ,SAAC,YAAa,CAAcxhB,MAAM,SAAQ,mBAAvB,UAC3Bk4B,KAAK,SAAC,YAAa,CAAWl4B,MAAM,MAAK,gBAAjB,OACxBm4B,SAAS,SAAC,YAAa,CAAen4B,MAAM,UAAS,oBAAzB,WAC5Bo4B,MAAM,SAAC,YAAa,CAAYp4B,MAAM,OAAM,iBAAnB,QACzBq4B,iBACE,SAAC,YAAa,CAAuBr4B,MAAM,kBAAiB,+BAAzC,mBAIrBs4B,cACE,SAAC,YAAa,CAAoBt4B,MAAM,eAAc,4BAAnC,iBAMjBu4B,EAA8C,EAEhD,SAAC,KAAM,CACLjxB,MAAO,CAAEkJ,SAAU,KACnBvH,SAAUnK,KAAKoyB,iCAEfsH,0BAAwB,EACxBC,YAAY,iBAAgB,SAE3B5V,GAJG,uBAQJuI,EAAkBtsB,KAAKiH,MAAMqlB,gBACnC,QAAwBvsB,IAApBusB,EAA+B,CACjC,IAAMliB,EAAMuX,GAAU2K,GACtBtsB,KAAKgkB,kBAAkB5Z,GAAKiB,SAAQ,SAAC6I,EAAY3T,GAC/C,IAAMyjB,EAAoB9P,EAAW5G,OAAOjN,KAAI,SAAA0wB,GAC9C,OACE,SAAC,YAAa,CAEZ7vB,MAAO6vB,EAAKvlB,UACZ9K,MAAOwT,EAAWvT,KAAK,SAEtBowB,EAAKrlB,kBAJmB3L,IAAnBgxB,EAAKvlB,WAA8C,KAAnBulB,EAAKvlB,UAAoBulB,EAAKvlB,UAAS,qBAAiBjL,GAOpG,IACAk5B,EAAyBv3B,MACvB,gCACGgS,EAAWvT,KAAK+K,aACjB,SAAC,KAAM,CACLlD,MAAO,CAAEkJ,SAAU,KACnBvH,SAAU,EAAKkoB,oCACf7X,YAAU,EACVof,QAAS,EAAKtH,oCACdoH,0BAA0B,EAAM,SAE/B1V,OAIT,IACA,IAAMC,EAAsBjkB,KAAKikB,oBAAoB7Z,GAAK/J,KAAI,SAAAM,GAC5D,OAAOw4B,EAA2Bx4B,EACpC,IACA84B,EAAyBv3B,MACvB,qDAEE,SAAC,KAAM,CACLsG,MAAO,CAAEkJ,SAAU,KACnBvH,SAAUnK,KAAKkyB,sCAEfyH,YAAY,uBAAsB,SAEjC1V,GAHG,gCAOVwV,EAAyBv3B,MACvB,SAAC,KAAQ,CACPwK,SAAU1M,KAAKmyB,sCAAsC,oBACjD,0BAKV,CAEA,IAAM0H,GACJ,SAAC,YAAY,CAAiBz4B,MAAM,YAAW,UAC7C,SAAC,GAAY,CACXY,SAAUhC,KAAKC,MAAMqH,MAAM8B,aAAa,GACxCiO,WAAW,KAHG,aAQdyiB,GACJ,SAAC,YAAY,CAAiB14B,MAAM,YAAW,UAC7C,SAAC,GAAS,CAACY,SAAUhC,KAAKC,MAAMqH,MAAM8B,aAAa,MADnC,aAKdqQ,EAAezZ,KAAK+iB,aAAaqD,qBACvC3M,EAAaqe,MAAK,SAAC7V,EAAGC,GACpB,OAAiD,IAA7CD,EAAE/W,WAAW6sB,cAAc7V,EAAEhX,YACxB,EAC+C,IAA7CgX,EAAEhX,WAAW6sB,cAAc9V,EAAE/W,aAC9B,EAEH,CACT,IACA,IAAMmb,EAOF,CAAC,EACC0T,EAEF,CAAC,EACLtgB,EAAapO,SAAQ,SAAAuM,GACnB,IAAM1M,EAAa0M,EAAY1M,WACzBlJ,EAAW,EAAK+gB,aAAasT,uBAAuBnrB,GAC1D6uB,EAAoB7uB,GAAclJ,EAClC,IAAMwG,GAAK,UACN,EAAKua,aAAamN,oBAAoBhlB,IAE3Cmb,EAAkBnb,GAAc1C,CAClC,IACA,IAgBIwxB,EAgDAC,EAkCAC,EAiCAC,EAwCAC,EA3KEC,GACJ,SAAC,YAAY,CAAqBj5B,MAAM,gBAAe,UACrD,SAAC,GAAe,CACdY,SAAU+3B,EACVtgB,aAAcA,EACdW,yBAA0BiM,EAC1BlM,8BAA+Bna,KAAKiH,MAAMkT,8BAC1CD,6BAA8Bla,KAAKiH,MAAMiT,6BACzCG,8BAA+Bra,KAAKoqB,kCACpC9P,yBAA0Bta,KAAKmzB,6BAC/B9Z,4BAA6BrZ,KAAKozB,gCAClCpN,6BAA8BhmB,KAAKiH,MAAM+e,gCAV3B,iBAgBpB,GAAIhmB,KAAKiH,MAAMif,mBAAmB1e,OAAS,EAAG,CAC5C,IAAM8yB,EAA2B,GACjCt6B,KAAKiH,MAAMif,mBAAmB7a,SAAQ,SAACia,EAAU/kB,GAC/C+5B,EAAyBp4B,MACvB,SAAC,YAAa,CAEZhB,MAAOokB,EAASC,eAChBzU,0BAA0B,EAC1BvP,KAAK,QAAO,cAEqBxB,IAAhCulB,EAASiV,oBAAoE,KAAhCjV,EAASiV,mBAA4BjV,EAASiV,mBAAqB,iBAL/Ex6B,IAA5BulB,EAASC,gBAA4D,KAA5BD,EAASC,eAAyBD,EAASC,eAAc,6BAAyBhlB,IAQvI,IACA+5B,EAAyBp4B,MACvB,SAAC,YAAa,CAEZhB,WAAOnB,EACP+Q,0BAA0B,EAC1BvP,KAAK,QAAO,UAEZ,yBALI,+BAQRy4B,GACE,SAAC,YAAY,CAA2B54B,MAAM,sBAAqB,UACjE,UAAC,KAAK,CAACoL,MAAM,SAASjL,KAAM,GAAIiH,MAAO,CAAE+R,QAAS,QAAS,WACzD,SAAC,KAAM,CACL/R,MAAO,CAAEkJ,SAAU,IAAK8oB,SAAU,KAClCrwB,SAAUnK,KAAKqzB,iCAEfnyB,MAAOlB,KAAKiH,MAAM+e,6BAA6B,SAE9CsU,GAHG,wBAKN,SAAC,IAAO,CAACl5B,MAAM,QAAO,UACpB,SAAC,KAAG,CACFD,MAAM,SAACs5B,GAAA,EAAY,IACnB31B,KAAK,UACLyI,QAASvN,KAAKszB,qCAdJ,sBAoBtB,CAGA,GAAIlY,EAAS5T,OAAS,EAAG,CACvB,IAAM8T,EAIF,CAAC,EACCof,EAEF,CAAC,EACCtf,EAAWpb,KAAK+iB,aAAagH,iBACnC3O,EAAS/P,SAAQ,SAAA6P,GACfI,EAAqBJ,EAAQ1a,KAAO,EAAKuiB,aAAa4X,gBACpDzf,EAAQ1a,KAEVk6B,EAAgBxf,EAAQ1a,KAAO,EAAKuiB,aAAa6X,mBAC/C1f,EAAQ1a,IAEZ,IACAy5B,GACE,SAAC,YAAY,CAAqB74B,MAAM,gBAAe,UACrD,SAAC,GAAW,CACVga,SAAUA,EACVpZ,SAAU04B,EACVpf,qBAAsBA,EACtBD,mBAAoBrb,KAAKiH,MAAMoU,mBAC/BE,0BAA2Bvb,KAAKgqB,8BAChCxO,qBAAsBxb,KAAKizB,4BAPb,iBAWpBiG,EAAiBh3B,KAAK,gBACxB,CAGA,GAAI0Y,EAASpT,OAAS,EAAG,CACvB,IAAMsT,EAIF,CAAC,EACC+f,EAEF,CAAC,EACLjgB,EAASvP,SAAQ,SAAAsP,GACfG,EAAqBH,EAAQna,KAAO,EAAKuiB,aAAa+X,yBACpDngB,EAAQna,KAEVq6B,EAAgBlgB,EAAQna,KAAO,EAAKuiB,aAAagY,4BAC/CpgB,EAAQna,IAEZ,IACA05B,GACE,SAAC,YAAY,CAAsB94B,MAAM,kBAAiB,UACxD,SAAC,GAAW,CACVwZ,SAAUA,EACV5Y,SAAU64B,EACV/f,qBAAsBA,EACtBD,mBAAoB7a,KAAKiH,MAAM4T,mBAC/BE,0BAA2B/a,KAAKmqB,8BAChCnP,qBAAsBhb,KAAKkzB,4BAPb,kBAWpBgG,EAAiBh3B,KAAK,kBACxB,CAMA,GAFW,OAAX0T,QAAW,IAAXA,GAAoB,QAAT,EAAXA,EAAavK,eAAO,OAApB,OAAAuK,EAAuB5V,KAAK2xB,iBAAiBhnB,KAAK3K,OAE9C4R,EAAiBpK,OAAS,EAAG,CAC/B,IAAMwzB,EAEF,CAAC,EACCjpB,EAKF,CAAC,EACLH,EAAiBvG,SAAQ,SAAAqD,GACvBqD,EAA6BrD,EAAgBlO,KAAO,EAAKuiB,aAAakY,wBACpEvsB,EAAgBlO,KAElBw6B,EAAwBtsB,EAAgBlO,KAAO,EAAKuiB,aAAamY,2BAC/DxsB,EAAgBlO,IAEpB,IACA25B,GACE,SAAC,YAAY,CAAyB/4B,MAAM,oBAAmB,UAC7D,SAAC,GAAmB,CAClBwQ,iBAAkBA,EAClB5P,SAAUg5B,EACVpsB,uBAAwB5O,KAAK2O,2BAG7BoD,6BAA8BA,EAC9BD,2BAA4B9R,KAAKiH,MAAM6K,2BACvCD,kCAAmC7R,KAAK8pB,sCACxC9X,6BAA8BhS,KAAKwyB,oCAVrB,qBAcpB0G,EAAiBh3B,KAAK,mBACxB,CAGA,IAAIi5B,EAAgB,MACdC,EAAkB,EACtB,SAAC,GAAM,CACL9oB,QAAQ,mBACRnR,KAAMk6B,EAAAA,IACN9tB,QAASvN,KAAKgxB,iBACd3e,WAAYrS,KAAKiH,MAAMqpB,oBACnB,oBAEN,SAAC,GAAM,CACLhe,QAAQ,sBACRnR,KAAMm6B,EAAAA,IACN/tB,QAASvN,KAAKixB,sBACd5e,WAAYrS,KAAKiH,MAAMupB,yBACnB,sBAEN,SAAC,GAAM,CACLle,QAAQ,yBACRnR,KAAMo6B,EAAAA,IACNhuB,QAASvN,KAAKkxB,qBACd7e,WAAYrS,KAAKiH,MAAMypB,wBACnB,yBAEN,SAAC,GAAM,CACLpe,QAAQ,8BACR/E,QAASvN,KAAKmxB,iBACdhwB,KAAMq6B,EAAAA,KACF,sBAEN,SAAC,GAAM,CACLlpB,QAAQ,yBACRnR,KAAMnB,KAAKiH,MAAMgtB,cAAgBwH,EAAAA,IAAQC,EAAAA,IACzCnuB,QAASvN,KAAKoxB,0BACd/e,WAAYrS,KAAKiH,MAAMgtB,eACnB,iCAEN,SAAC,GAAM,CACL3hB,QAAQ,oBACRnR,KAAMw6B,EAAAA,IACNpuB,QAASvN,KAAKqxB,wBACV,2BAGFuK,EAAe,EACnB,SAAC,GAAM,CACLtpB,QAAQ,gBACRnR,KAAM06B,EAAAA,GACNtuB,QAASvN,KAAKsxB,YACV,gCAGJtxB,KAAKC,MAAM67B,wBACb1B,GACE,UAAC,KAAG,CAACnpB,QAAQ,QAAO,UACjBmqB,EAAgB/6B,KAAI,SAACC,EAAMyJ,GAC1B,OAAO,SAAC,WAAc,UAAUzJ,GAAJyJ,EAC9B,IACC6xB,EAAav7B,KAAI,SAACC,EAAMyJ,GACvB,OAAO,SAAC,WAAc,UAAUzJ,GAAJyJ,EAC9B,OAGJoxB,EAAgB,QAGlB,IAKIY,EALAC,EAAS,UAMb,GALIh8B,KAAKiH,MAAMC,YACb80B,EAAS,YAImB,MAA1Bh8B,KAAKiH,MAAMknB,YAAqB,CAClC,IAAM8N,EAID,CACH,CACEt7B,KAAM,MACNO,MAAOlB,KAAKiH,MAAMknB,YAAY3tB,MAG5B07B,EAGD,CACH,CACEv7B,KAAM,eACNO,MAAOlB,KAAKiH,MAAMknB,YAAYva,SAASwM,cAGrC+b,GAGD,GACLn8B,KAAKiH,MAAMknB,YAAY/iB,YAAYC,SAAQ,SAAA/K,GACzC,GAAuB,SAAnBA,EAAKqL,UAAsB,CAC7B,IAAMywB,EAAW97B,EACjB67B,GAAwBj6B,KAAK,CAC3BvB,KAAMy7B,EAAS7wB,wBAAwB,GAAGG,YAC1CxK,MAAOk7B,EAAStwB,oBAAoB,GAAGJ,aAE3C,KAAO,CACL,IAAM2wB,EAAW/7B,EACjB67B,GAAwBj6B,KAAK,CAC3BvB,KAAM07B,EAAS9wB,wBAAwB,GAAGG,YAC1CxK,MAAOm7B,EAASrwB,WAEpB,CACF,IACA,IAAMswB,GAMF,CAAC,EACLt8B,KAAKiH,MAAMknB,YAAYliB,aAAaZ,SAAQ,SAAA/K,GAC1C,IAAI4K,EAAa,UACjB,GAA4B,MAAxB5K,EAAK8S,gBAAyB,CAChC,IAAMmpB,EAAW3pB,GAAuB,CACtChF,QAAStN,EAAK8S,gBACdzS,KAAM,IAAIiL,EAAAA,GAAAA,OAAAA,aAA6B,CACrC1K,MAAO,SACP4O,QAAS,wBACTD,iBAAkB,UAGlB0sB,EAAS/0B,OAAS,IACpB0D,EACEqxB,EAAS,GAENC,sBAAsB,GACtBC,gCAGT,CACMvxB,KAAcoxB,KAClBA,GAAsCpxB,GAAc,IAEtD,IAAMwxB,EAAoBp8B,EAAK6L,sBAAsB,GACrDmwB,GAAsCpxB,GAAYhJ,KAAK,CACrDvB,KAAML,EAAKiL,wBAAwB,GAAGG,YACtCxK,MAAOw7B,EAAkBtwB,aAAa7B,WACtC+B,KAAMowB,EAAkBnwB,6BAA6B,GAAGb,aAE5D,IACA,IAAMixB,GAAuB,SAC3Bv8B,GAEA,OAAOA,EAAWC,KAAI,SAAAC,GACpB,IAAIY,EAMJ,OAJEA,EADe,MAAbZ,EAAKgM,KACF,UAAMhM,EAAKY,MAAK,aAAKZ,EAAKgM,KAAI,KAE3BhM,EAAKY,OAGb,SAAC,SAAiB,CAEhBR,MAAOJ,EAAKK,KAAK,SAEhBO,GAHIZ,EAAKK,KAMhB,GACF,EACMi8B,GAAkBD,GAAqBV,GACvCY,GAAwBF,GAC5BT,GAEIY,GAA4BH,GAChCR,IAEIY,GAA6B,GACnC,IAAK,IAAM7xB,MAAcoxB,GAAuC,CAC9D,IAAMU,GAAeL,GACnBL,GAAsCpxB,KAErB,YAAfA,GACF6xB,GAA2B76B,KAAK86B,IAEhCD,GAA2B76B,MACzB,iCACE,SAAC,KAAO,CAAC6T,YAAY,OAAOknB,kBAAmB,EAAGC,QAAM,EAAClsB,OAAK,WAC3D9F,KAEF8xB,MAIT,CACAjB,GACE,iCACE,SAAC,IAAY,CAACl8B,OAAO,aAAagC,OAAQ,EAAE,SACzC+6B,MAEH,SAAC,KAAO,CAAC7mB,YAAY,OAAOknB,kBAAmB,EAAE,kCAGjD,SAAC,IAAY,CAACp9B,OAAO,aAAagC,OAAQ,EAAE,SACzCg7B,MAEH,SAAC,KAAO,CAAC9mB,YAAY,OAAOknB,kBAAmB,EAAE,0BAGjD,SAAC,IAAY,CAACp9B,OAAO,aAAagC,OAAQ,EAAE,SACzCi7B,MAEH,SAAC,KAAO,CAAC/mB,YAAY,OAAOknB,kBAAmB,EAAE,2BAGjD,SAAC,IAAY,CAACp9B,OAAO,aAAagC,OAAQ,EAAE,SACzCk7B,OAIT,CAEA,IAAMI,GAAkBn9B,KAAK+iB,aAAaqa,iBAAiB51B,OAAS,IAClE,gBAAKgB,MAAO,CAAE60B,OAAQ,UAAW,UAC/B,SAAC,KAAQ,CACPzyB,QAAS5K,KAAKiH,MAAMwqB,qBACpB/kB,SAAU1M,KAAKwxB,wBAAwB,4BAO7C,OACE,UAAC,IAAM,CAAChpB,MAAO,CAAEC,OAAQ,QAAU60B,UAAQ,aACzC,UAAC,YAAc,CAAC90B,MAAO,CAAEC,OAAQ,QAAS,UACvC2xB,GAED,gBACE5xB,MAAO,CACLC,OAAO,eAAD,OAAiB0yB,EAAa,KACpCoC,SAAU,SACVvB,OAAQA,GAEVpzB,IAAK5I,KAAKkkB,qBAGZ,SAAC,KAAK,CACJsZ,KAAMx9B,KAAKiH,MAAM2pB,yBACjBxvB,MAAM,wBACNq8B,KAAMz9B,KAAKuyB,wCACXmL,cAAe,CAAE3sB,gBAA2ChR,IAA/BC,KAAKiH,MAAMqlB,sBAAqEvsB,IAApCC,KAAKiH,MAAM+tB,uBACpF2I,SAAU39B,KAAKiyB,0CACf2L,OAAO,SAAQ,UAEf,SAAC,KAAK,CAACpxB,MAAM,QAAQkB,UAAU,WAAU,SACtC+rB,OAIL,SAAC,KAAK,CACJ+D,KAAMx9B,KAAKiH,MAAM4lB,0BACjBzrB,MAAM,eACNu8B,SAAU39B,KAAKgyB,+BACf6L,cAAY,EACZC,OAAQ,KAAK,UAEb,SAAC,KAAK,CAACtxB,MAAM,QAAQkB,UAAU,WAAU,SACtCquB,OAIL,SAAC,KAAK,CACJyB,KAAMx9B,KAAKiH,MAAM4pB,mBACjBzvB,MAAM,uBACNq8B,KAAMz9B,KAAK6yB,6BACX8K,SAAU39B,KAAK8yB,yCACf8K,OAAO,SAAQ,UAEf,UAAC,KAAK,CAACpxB,MAAM,QAAQkB,UAAU,WAAU,WACvC,SAAC,KAAW,CACVisB,YACE,IAAG,UACA35B,KAAKiH,MAAM4sB,sBAAsB,IACpC,KAAI,UACD7zB,KAAKiH,MAAM4sB,sBAAsB,IACpC,IAEFkK,OAAO,oBACPrxB,SAAU1M,KAAK0yB,2BACfsL,aAAch+B,KAAK0yB,2BACnBzP,UAAU,EACVgb,WACEj+B,KAAKiH,MAAMysB,4BAEP,SAACwK,GAAA,EAAa,CAAC11B,MAAO,CAAEU,MAAO,sBAG/B,SAACi1B,GAAA,EAAY,CAAC31B,MAAO,CAAEU,MAAO,wBAItC,SAAC,KAAW,CACVywB,YACE,IAAG,UACA35B,KAAKiH,MAAM8sB,sBAAsB,IACpC,KAAI,UACD/zB,KAAKiH,MAAM8sB,sBAAsB,IACpC,IAEFgK,OAAO,oBACPrxB,SAAU1M,KAAK2yB,2BACfqL,aAAch+B,KAAK2yB,2BACnB1P,UAAU,EACVgb,WACEj+B,KAAKiH,MAAM0sB,4BAEP,SAACuK,GAAA,EAAa,CAAC11B,MAAO,CAAEU,MAAO,sBAG/B,SAACi1B,GAAA,EAAY,CAAC31B,MAAO,CAAEU,MAAO,wBAItC,SAAC,KAAW,CACVywB,YAAY,WACZoE,OAAO,gBACPrxB,SAAU1M,KAAK4yB,6BACfoL,aAAch+B,KAAK4yB,6BACnB3P,UAAU,EACVgb,WACEj+B,KAAKiH,MAAMwsB,8BAEP,SAACyK,GAAA,EAAa,CAAC11B,MAAO,CAAEU,MAAO,sBAG/B,SAACi1B,GAAA,EAAY,CAAC31B,MAAO,CAAEU,MAAO,6BAO1C,SAAC,KAAK,CACJs0B,KAAMx9B,KAAKiH,MAAM6Z,qBACjB1f,MAAM,yBACNq8B,KAAMz9B,KAAK+yB,yBACX4K,SAAU39B,KAAKgzB,yBACf4K,OAAO,OAAM,SAEZ1qB,QAIL,SAAC,UAAY,CACXhJ,MAAO,IACPk0B,cAAY,EACZ51B,MAAO,CACL61B,WAAY,QACZC,gBAAiB,IACjBf,SAAU,SACVgB,WAAY,QACZ,UAEF,UAAC,IAAI,CACH/zB,KAAK,SACLg0B,gBAAiBtF,EACjB1wB,MAAO,CAAEC,OAAQ,QACjBgC,aAAc,GACdg0B,oBAAkB,EAClBC,aAAc,WAEZC,YAAW,WACe,MAApB,EAAK7b,aACP,EAAKA,YAAYva,QAErB,GAAG,IACL,EAAE,UAEgC,MAAjCvI,KAAKmkB,iBAAiB1c,UACrB,SAAC,YAAY,CAAarG,MAAM,cAAa,UAC3C,SAAC,SAAS,CAACoH,MAAO,CAAEC,OAAQ,QAAS,UACnC,gBACED,MAAO,CAAEC,OAAQ,SACjBG,IAAK5I,KAAKmkB,oBAH4B,UAD1B,SASnB0V,EACAsD,GACArD,EACAO,EACAL,GACD,SAAC,YAAY,CAAmB54B,MAAM,cAAa,SAChD63B,GADe,eAGjBkB,EACuB,IAAvBvkB,EAAYpO,QAET,yBAGA,SAAC,YAAY,CAEXpG,MAAM,wBAAuB,UAE7B,SAAC,GAAsB,CACrBwU,YAAaA,EACblJ,SAAU1M,KAAK4pB,iCACftN,sBAAuBtc,KAAKiH,MAAM8F,eAClCuC,cAAetP,KAAKyyB,qBACpBlW,wBAAyBvc,KAAKuc,2BAR5B,yBAYT0d,EACAC,OAGJl6B,KAAKiH,MAAM2mB,4BACZ5tB,KAAKiH,MAAM+lB,qBAAqBxlB,OAAS,GAErC,SAAC,GAAiB,CAChB4W,UAAWpe,KAAKiH,MAAM4mB,mBACtBxP,UAAWre,KAAKiH,MAAM6mB,mBACtBhhB,KAAM9M,KAAKiH,MAAM+lB,wBAInB,0BAIV,KAAC,EA35Gc,CAASjrB,EAAAA,WA85G1B,SAAe0Z,GAAWqI,ICl1HiB,IAEtC8a,IAAY,SAAZA,GAAAA,EAAY,gBAAZA,EAAY,cAAZA,EAAY,oBAAZA,EAAY,uBAAZA,KAAAA,GAAY,KAOjB,IAAMC,GAAiB,SACrBpc,EACAqc,GAEA,OAAOrc,EAAMsc,UAAU,KAAOD,CAChC,EAEME,GAAqB,SACzBvc,EACAzD,GAEA,OAA4B,MAAxByD,EAAMwc,gBACDxc,EAAMwc,iBAAmBjgB,EAASigB,cAG7C,EAoBMC,IAAK,QAkBT,WACEC,GACC,IAAD,4BAnBOp4B,iBAAW,OACXq4B,oBAAc,OACdtrB,yBAAmB,OACnBpL,yBAAmB,OACnBe,wBAAkB,OAClB41B,4BAAsB,OACtBC,YAAwB,GAAE,KAC1B3Z,+BAAyB,OACzBvc,kBAAY,OACZ+Z,iBAAW,OACX5b,oBAAc,EAUS,IAA1B43B,EAAQvlB,OAAOpS,QACjBY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,wDAKN,IAAM6E,EAAqB,IAAI8a,IAAI,IAC7Bgb,EAAkB,IAAIhb,IAAI,IAC1B8a,EAAyB,IAAI9a,IAAI,IACjCib,EAAuB,IAAIjb,IAAI,IAC/Bkb,EAAuB,CAC3BC,OAAQ,IAAInb,IAAI,IAChBob,MAAO,IAAIpb,IAAI,IACfqb,SAAU,IAAIrb,IAAI,KAEd+a,EAEF,CACFI,OAAQ,CAAC,GAELt2B,EAA2D,GAC3D+Z,EAA0D,GAC1D5b,EAA6D,GA2BnE,GA1BA43B,EAAQvlB,OAAOvO,SAAQ,SAACoX,GAStB,GARA+c,EAAqBxW,IAAIvG,EAAM7a,qBAC/B6B,EAAmBuf,IAAIvG,EAAM5I,mBAC7B4I,EAAM3I,oBAAoBzO,SAAQ,SAAA/K,GAChC++B,EAAuBrW,IAAI1oB,EAAK0Z,sBAClC,IAC4B,MAAxByI,EAAMwc,gBACRM,EAAgBvW,IAAIvG,EAAMwc,gBAExBJ,GAAepc,EAAOmc,GAAac,SAAWb,GAAepc,EAAOmc,GAAaiB,WAAY,CAE/F,GADAJ,EAAqBC,OAAO1W,IAAIvG,EAAM+I,qBACb,OAArB/I,EAAMqd,iBAA4C//B,IAArB0iB,EAAMqd,WACrC,cAAyB9hB,OAAOC,KAAKohB,GAAuB,eAAE,CAAzD,IAAMn0B,EAAU,KACnBo0B,EAAYI,OAAOx0B,GAAY8d,IAAIvG,EAAMqd,WAC3C,CAEF12B,EAAalH,KAAKugB,EACpB,MAAWoc,GAAepc,EAAOmc,GAAae,QAC5CF,EAAqBE,MAAM3W,IAAIvG,EAAM+I,qBACrCrI,EAAYjhB,KAAKugB,IACRoc,GAAepc,EAAOmc,GAAagB,YAC5CH,EAAqBG,SAAS5W,IAAIvG,EAAM+I,qBACxCjkB,EAAerF,KAAKugB,GAExB,IAE4B,IAAxBrZ,EAAa5B,OACfY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,gEAGC,CACD26B,EAAgBh+B,KAAO,GACzB6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,iFAMN,IAAMm7B,EAAkB,IAAIxb,IAAI,IAChCnb,EAAaiC,SAAQ,SAACoX,GACpBsd,EAAgB/W,IAAIvG,EAAMud,gBAC5B,IACID,EAAgBx+B,KAAO,GACzB6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,iFAMiBwE,EAAamX,QAAO,SAAAkC,GACzC,MAA8B,cAAvBA,EAAMsc,UAAU,EACzB,IACmBv3B,OAAS63B,EAAuB99B,MACjDuE,QAAQD,KACN,oHAIN,CAEA7F,KAAKoJ,aAAeA,EACpBpJ,KAAKmjB,YAAcA,EACnBnjB,KAAKuH,eAAiBA,EAEtBvH,KAAKyJ,oBAAkB,QAAOA,GAC9BzJ,KAAKq/B,wBAAsB,QAAOA,GAEA,IAA9BG,EAAqBj+B,MACvB6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,mEAIN5E,KAAK0I,qBAAsB,QAAI82B,GAAsB,GAEZ,IAArCC,EAAqBC,OAAOn+B,MAC9B6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,4EAKN5E,KAAK8T,qBAAsB,QAAI2rB,EAAqBC,QAAQ,GAE5D,IAAIO,GAAoB,EACpBjiB,OAAOC,KAAKqhB,EAAYI,QAAQl4B,OAAS,IAC3Cy4B,GAAoB,GAEtBjgC,KAAKq/B,uBAAuBh0B,SAAQ,SAAAH,GACI,MAAlCo0B,EAAYI,OAAOx0B,GACjBo0B,EAAYI,OAAOx0B,GAAY3J,KAAO,EACxC6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,8CAAuCsG,EAAU,KACjD,uDAG6C,IAAxCo0B,EAAYI,OAAOx0B,GAAY3J,KACxC,EAAK+9B,YAAYp9B,MAAK,QAAIo9B,EAAYI,OAAOx0B,IAAa,IAE1D9C,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,8CAAuCsG,EAAU,MAAjD,+EAOF+0B,GACF73B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,8CAAuCsG,EAAU,MAAjD,8EAOV,IAEIq0B,EAAgBh+B,KAAO,EACzB6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,0GAI8B,IAAzB26B,EAAgBh+B,KACzBvB,KAAKo/B,gBAAiB,QAAIG,GAAiB,GAE3Cv/B,KAAKo/B,eAAiB,KAGxBp/B,KAAK2lB,0BACsC,IAAzC3lB,KAAKoJ,aAAa,GAAG42B,iBAC8B,gBAAnDhgC,KAAKoJ,aAAa,GAAG82B,0BAGvBlgC,KAAK+G,iBACqBhH,IAAxBo/B,EAAQp4B,YAA4Bo4B,EAAQp4B,YAAc,EAE9D,IAUIo5B,GAAe,SACnBvmB,GAEA,IAAMwmB,EAAwC,GAC9CxmB,EAAOvO,SAAQ,SAACuf,GACd,GAAIA,EAAOpjB,OAAS,EAAG,CACrB,IAAM4B,EAAewhB,EAAOrK,QAC1B,SAACkC,GAAK,OACJoc,GAAepc,EAAOmc,GAAac,SACnCb,GAAepc,EAAOmc,GAAaiB,UAAU,IAEjD,GAAIz2B,EAAa5B,OAAS,EAAG,CAC3B,IAWI64B,EAXErhB,EAAW5V,EAAa,GACxBk3B,EAAuBl3B,EAAamX,QAAO,SAACkC,GAChD,OAAOzD,EAASghB,kBAAoBvd,EAAMud,eAC5C,IACMO,EAAqBH,EAAcjwB,WAAU,SAAC7I,GAClD,OA4EV,SACEA,EACAmb,GAEA,GACEnb,EAAMwM,sBAAwB2O,EAAM+I,qBACpClkB,EAAMoB,sBAAwB+Z,EAAM7a,qBACpCN,EAAM83B,iBAAmB3c,EAAMwc,eAE/B,OAAO,EAET,OAAO,CACT,CAxFiBuB,CAAwBl5B,EAAO0X,EACxC,IAEMmE,EAAcyH,EAAOrK,QAAO,SAACkC,GACjC,OAAOoc,GAAepc,EAAOmc,GAAae,MAC5C,IAGEU,EADEld,EAAY3b,OAAS,EACD2b,EAAY5C,QAAO,SAACkC,GACxC,OAAOuc,GAAmBvc,EAAOzD,EACnC,IAEsBmE,EAExB,IAGIsd,EAHEl5B,EAAiBqjB,EAAOrK,QAAO,SAACkC,GACpC,OAAOoc,GAAepc,EAAOmc,GAAagB,SAC5C,IAUA,GAPEa,EADEl5B,EAAeC,OAAS,EACDD,EAAegZ,QAAO,SAACkC,GAC9C,OAAOuc,GAAmBvc,EAAOzD,EACnC,IAEyBzX,GAGC,IAAxBg5B,EAA2B,CAC7B,IAAMG,EAA0C,CAC9CtB,eAAgBpgB,EAASigB,eACzBnrB,oBAAqBkL,EAASwM,oBAC9B9iB,oBAAqBsW,EAASpX,oBAC9BwB,aAAck3B,EACdnd,YAAakd,EACb94B,eAAgBk5B,GAElBL,EAAcl+B,KAAKw+B,EACrB,KAAO,CAAC,IAAD,MACCA,EAAoBN,EAAcG,IACxC,EAAAG,EAAkBt3B,cAAalH,KAAI,iBAAIo+B,KACvC,EAAAI,EAAkBvd,aAAYjhB,KAAI,iBAAIm+B,KACtC,EAAAK,EAAkBn5B,gBAAerF,KAAI,iBAAIu+B,GAC3C,CACF,CACF,CACF,IAEA,IAAIE,EAAkBP,EAAc//B,KAAI,SAACC,GACvC,OAAO,IAAI4+B,GAAM,CACftlB,OAAO,GAAD,gBACDtZ,EAAK8I,eAAY,QACjB9I,EAAK6iB,cAAW,QAChB7iB,EAAKiH,kBAGd,IAWA,OAVAo5B,EAASA,EAAO7I,MAAK,SAAC7V,EAAGC,GACvB,IAAM0e,EAAO3e,EAAE7Y,aAAa,GACtBy3B,EAAO3e,EAAE9Y,aAAa,GAC5B,OAAgC,MAA5Bw3B,EAAKh5B,qBAA2D,MAA5Bi5B,EAAKj5B,oBACpCwtB,OAAOwL,EAAKh5B,qBAAuBwtB,OAAOyL,EAAKj5B,qBAE/C,CAEX,GAGF,ECpVO,IAAMk5B,GAAkB,yCAAG,0GAUwC,OATxE/4B,EAAO,EAAPA,QACAid,EAAgB,EAAhBA,iBACA+b,EAAS,EAATA,UACAC,EAAO,EAAPA,QAAO,SAGCpnB,EAAuD,GAC7D9T,QAAQ6B,KAAK,+BAAD,OAAgCqd,EAAgB,SAEtDld,EAASC,EAAQ/D,EAAegE,iCAAgC,SAC1CF,EAAO4iB,gBAAgB,CACjDzF,YAAa,CACXC,SAAU,KACV+b,iBAAkBjc,KAEpB,OALiB,OAAb2F,EAAa,iBAObL,QAAQ4W,IACZvW,EAActqB,IAAG,yCAAC,WAAOuG,GAAC,oFAKvB,OALuB,EACJiB,EAAAA,SAAAA,eAA4BjB,GAAxC4O,EAAO,EAAPA,QACF2rB,EAAgB3rB,EACtB1P,QAAQ6B,KAAK,gCAAD,OACsBw5B,EAActnB,kBAAiB,MAChE,SAC+B/R,EAAO+iB,uBAAuB,CAC5D7F,iBAAkBA,EAClBpb,kBAAmBu3B,EAActnB,oBACjC,OAHIiR,EAAiB,OAKjBsW,EAA2D,GACjEtW,EAAkBzf,SAAQ,SAAC/K,GAAU,IAAD,IAClC,IACkB,QAAhB,EAAAA,EAAK,mBAAW,OAAO,QAAP,EAAhB,EAAkBq2B,aAAK,WAAP,EAAhB,EAA0B,MAC1B3yB,EAAegE,gCACf,CACA,IAAMya,EAAQ,IAAI5a,EAAAA,SAAAA,4BAAyC,CACzD7F,SAAU1B,IAEZ8gC,EAAal/B,KAAKugB,EACpB,CACF,IAEI2e,EAAa55B,OAAS,GACxBoS,EAAO1X,KAAKk/B,GACb,2CACF,mDA3BgB,KA4BlB,QACKC,EAAYlB,GAAavmB,GAC/BmnB,EAAUM,GAAU,kDAEpBv7B,QAAQU,MAAM,EAAD,IACP86B,EAAc,IAAIz8B,EACtBD,EACA,qDAEFo8B,EAAQM,GACRl5B,GAAAA,QACElD,EACAo8B,GACD,0DAEJ,gBA9D8B,sCCAzBC,GAAc,IAAIC,IAClBC,GAAkB,IAAID,IASfE,GAAY,SAAH,GAAwE,IAAlE35B,EAAO,EAAPA,QAASid,EAAgB,EAAhBA,iBACnC,GAA4B2c,EAAAA,EAAAA,UAAkB,IAAG,eAA1ChB,EAAM,KAAEiB,EAAS,KACxB,GAAkCD,EAAAA,EAAAA,WAAkB,GAAM,eAAnDz6B,EAAS,KAAE26B,EAAY,KAC9B,GAA0BF,EAAAA,EAAAA,UAAuB,MAAK,eAA/Cn7B,EAAK,KAAEs7B,EAAQ,KA0DtB,OAxDAC,EAAAA,EAAAA,YAAU,WACR,QAAyBhiC,IAArBilB,EAGF,OAFA4c,EAAU,SACVC,GAAa,GAIf,IAAMG,EAAaT,GAAYU,IAAIjd,GACnC,QAAmBjlB,IAAfiiC,EAGF,OAFAJ,EAAUI,QACVH,GAAa,GAIfA,GAAa,GAEb,IAAMK,EAAW,yCAAG,2FAsBjB,YAlBsBniC,KAFnBoiC,EAAiBV,GAAgBQ,IAAIjd,MAIvCmd,EAAiB,IAAI7X,SAAQ,SAACC,EAASC,GACrCsW,GAAmB,CACjB/4B,QAAAA,EACAid,iBAAAA,EACA+b,UAAW,SAACM,GACVE,GAAYnY,IAAIpE,EAAkBqc,GAClC9W,EAAQ8W,EACV,EACAL,QAAS,SAACoB,GACR5X,EAAO4X,EACT,IACCjc,OAAM,SAACic,GACR5X,EAAO4X,EACT,GACF,IACAX,GAAgBrY,IAAIpE,EAAkBmd,IACvC,kBAGyBA,EAAc,OAAhCd,EAAS,OACfO,EAAUP,GACVS,EAAS,MAAK,kDAEdA,EAAS,EAAD,IACRF,EAAU,IAAG,QAGM,OAHN,UAEbH,GAAgBnS,OAAOtK,GACvB6c,GAAa,GAAM,6EAEtB,kBAnCgB,mCAqCZK,GACP,GAAG,CAACn6B,EAASid,IAEN,CAAE2b,OAAAA,EAAQz5B,UAAAA,EAAWV,MAAAA,EAC9B,ECtEQ67B,GAAsBz2B,EAAAA,GAAAA,oBAAAA,kBA2BxB02B,GAAkB,SAAC3B,EAAiB/2B,GACxC,OAAO+2B,EAAOh6B,MAAK,SAACW,GAClB,OAAOA,EAAMmC,mBAAmB9C,MAAK,SAACnG,GACpC,OAAOA,IAAQoJ,CACjB,GACF,GACF,EAEA,SAAS24B,GAAuB,GAqBR,IApBtBx6B,EAAO,EAAPA,QACA44B,EAAM,EAANA,OACA7hB,EAAI,EAAJA,KACAC,EAAG,EAAHA,IACA8D,EAAO,EAAPA,QACAiZ,EAAqB,EAArBA,sBACAlmB,EAAW,EAAXA,YAeA,GAA0DoG,EAAAA,EAAAA,MAAoE,IAAtHgJ,iBAAAA,OAAgB,MAAG,GAAE,MAAEpb,kBAAAA,OAAiB,MAAG,GAAE,EAC/C+R,GAAWC,EAAAA,EAAAA,MAEjB,GAA0C+lB,EAAAA,EAAAA,UAASW,GAAgB3B,EAAQ/2B,IAAmB,eAAvF44B,EAAa,KAAEC,EAAgB,KACtC,GAA4Cd,EAAAA,EAAAA,UAAqC,MAAK,eAA/ElY,EAAc,KAAEiZ,EAAiB,MAExCX,EAAAA,EAAAA,YAAU,WACR,IAAMY,EAAcL,GAAgB3B,EAAQ/2B,GACxB,OAAhB+4B,GACFF,EAAiBE,EAErB,GAAG,CAAC/4B,EAAmB+2B,KAEvBoB,EAAAA,EAAAA,YAAU,WACR,IAAMa,EAAmB,yCAAG,8FAAqD,OAA5C76B,EAAO,EAAPA,QAASid,EAAgB,EAAhBA,iBAAkBpb,EAAiB,EAAjBA,kBAAiB,SAI9B,IAAI0gB,SAAsC,SAACC,EAASC,GACrG,IACE,IAAMqY,EAAa7kB,OAAO1Q,OAAOtJ,GAAgB3D,KAAI,SAACyiC,GAAY,OAAK/6B,EAAQ+6B,EAAa,IAC5FxY,QAAQ4W,IAAI2B,EAAWxiC,IAAG,yCAAC,WAAOyH,GAAM,wHACTA,EAAO+iB,uBAAuB,CACzD7F,iBAAkBA,EAClBpb,kBAAmBA,IACnB,OAHIm5B,EAAc,SAIgBA,EAAe1iC,KAAI,SAAC2B,GAAQ,OAAKqgC,GAAkBrgC,EAAS,IAAC,eAEvC,OAFnDghC,EAAyB,MAEFC,2BACtBjK,EAA8BgK,EAA0BC,yBAAyB,GAAGppB,kBACpFqpB,EAAkBvC,EAAOh6B,MAAK,SAACW,GACnC,OAAOA,EAAMmC,mBAAmB9C,MAAK,SAACnG,GACpC,OAAOA,IAAQw4B,CACjB,GACF,IACAzO,EAAQ,CAAEjjB,MAAO47B,EAAiBlhC,SAAUghC,KAGN,SAIsD,OAA7E,QAHXG,EAAwD,QAA5C,EAAGH,EAA0B5vB,uBAAe,aAAzC,EAA2CzM,MAC9D,SAAAy8B,GAAW,MAF2B,WAEvBA,EAAY73B,wBAAwB,GAAGC,SAA6C,WAEpF,IAAZ23B,GAA6B,QAAjB,EAAZA,EAAc/vB,uBAAe,OAAK,QAAL,EAA7B,EAAgC,UAAE,OAAiB,QAAjB,EAAlC,EAAoCA,uBAAe,OAAK,QAAL,EAAnD,EAAsD,UAAE,OAAuB,QAAvB,EAAxD,EAA0DopB,6BAAqB,WAAnE,EAAZ,EAAkF,MAC/E6G,EAA2BF,EAAa/vB,gBAAgB,GAAGA,gBAAgB,GAAGopB,sBAAsB,GAAGzV,yBACvGmc,EAAkBvC,EAAOh6B,MAAK,SAACW,GACnC,OAAOA,EAAM8B,aAAazC,MAAK,SAAC8b,GAC9B,OAAOA,EAAM8C,iBAAmB8d,CAClC,GACF,IACA9Y,EAAQ,CAAEjjB,MAAO47B,EAAiBlhC,SAAUghC,KAC7C,2CACF,mDA9ByB,KA8BtB7c,MAAMqE,EAGZ,CAFE,MAAOhkB,GACPgkB,EAAOhkB,EACT,CACF,IAAE,mGAzCuB,sCA2CH,OAAlBg8B,QAA4CziC,IAAlByiC,GACvBI,EAAoB,CAAE76B,QAAAA,EAASid,iBAAAA,EAAkBpb,kBAAAA,IAAqBub,MAAK,SAACtG,GAChE,OAAXA,IACF4jB,EAAiB5jB,EAAOvX,OACxBo7B,EAAkB7jB,EAAO7c,UAE7B,IAAGmkB,OAAM,SAAA3f,GACPV,QAAQU,MAAM,kCAAmCA,EACnD,GAEJ,GAAG,CAACm6B,EAAQ54B,EAASy6B,EAAexd,EAAkBpb,IAEtD,IACI05B,EADEra,EAAe,IAAIC,gBAAgBvN,EAASwN,QAE7CF,EAAa/b,IAAI,iBAES,QAD7Bo2B,EAAuBra,EAAagZ,IAAI,YAEtCqB,OAAuBvjC,GAI3B,IAAIwjC,EAAS,KAkBb,OAjBqB,MAAjBf,IACFe,GACE,SAAC,GAAW,CACVx7B,QAASA,EACTid,iBAAkBA,EAClBpb,kBAAmBA,EACnBoc,6BAA8Bsd,EAC9Bh8B,MAAOk7B,EACP3f,QAASA,EACTjN,YAAaA,EACbkmB,sBAAuBA,EACvB/c,IAAKA,EACLD,KAAMA,EACN2K,eAAgBA,KAIf8Z,CACT,CA8IA,SAAe9nB,IA1Hf,SAAiBxb,GACf,IAAQ8H,EAAkD9H,EAAlD8H,QAASid,EAAyC/kB,EAAzC+kB,iBAAkBrJ,EAAuB1b,EAAvB0b,SAAUE,EAAa5b,EAAb4b,SAC7C,EAA8B6lB,GAAU,CAAE35B,QAAAA,EAASid,iBAAAA,IAA3C2b,EAAM,EAANA,OA4BR,GA5ByB,EAATz5B,UA6Bd,OAAO,KAGT,GAAsB,IAAlBy5B,EAAOn5B,OACT,OAAO,KAGT,IACMg8B,EADa7C,EAAO,GACSv3B,aACnC,GAA+B,IAA3Bo6B,EAAgBh8B,OAClB,OAAO,KAET,IAMIkC,EAQA+5B,EAdEzkB,EAAWwkB,EAAgB,GAOjC,GAAI7nB,EAAS0N,SAASnjB,SAAS,WAAY,CACzC,IAAMw9B,EAAiB/nB,EAAS0N,SAAS5mB,MAAM,WAAW,GAC1DiH,EAA4Bg6B,EAAex9B,SAAS,KAAOw9B,EAAejhC,MAAM,KAAK,GAAKihC,CAC5F,MACEh6B,EAA4B85B,EAAgB,GAAG3pB,kBAYjD,OARyC,MAArCmF,EAAS/c,2BACXwhC,GACE,SAAC,YAAY,CAAsBriC,MAAM,iBAAgB,UACvD,SAAC,EAAa,CAACY,SAAUgd,KADT,oBAOpB,UAAC,IAAM,CAACxW,MAAO,CAAEC,OAAQ,QAAU60B,UAAQ,aACzC,SAAC,UAAY,CACXpzB,MAAO,IACP1B,MAAO,CACLC,OAAQ,OACRk7B,YAAa,QACbC,iBAAkB,IAClBrG,SAAU,SACVgB,WAAY,QACZ,UAEF,UAAC,IAAI,CACH/zB,KAAK,SACLg0B,gBAAiB,CAAC,UAAW,QAAS,iBAAkB,UACxDh2B,MAAO,CAAEC,OAAQ,QACjBgC,aAAc,GAAG,WAEjB,SAAC,YAAY,CAAerJ,MAAM,UAAS,UACzC,SAAC,EAAO,CAACY,SAAUgd,KADH,YAGlB,SAAC,YAAY,CAAa5d,MAAM,QAAO,UACrC,SAAC,EAAK,CAACY,SAAUgd,KADD,SAGjBykB,GACD,SAAC,YAAY,CAAcriC,MAAM,SAAQ,UACvC,SAAC,GAAS,CACR2G,QAAS9H,EAAM8H,QACf/F,SAAU2+B,EACVj3B,0BAA2BA,EAC3BC,kBA5FkB,SAAH,GAAoE,IAA9DC,EAAiB,EAAjBA,kBAC/B9D,QAAQ6B,KAAK,qBAAD,OAAsBiC,EAAiB,MACnD,IAAIuuB,EACF,mBAAYnT,GAAgB,kBACjBpb,GAGT+R,EAAS0N,SAASnjB,SAAS,gBAC7BiyB,EAAUxc,EAAS0N,SACd1N,EAAS0N,SAASnjB,SAAS,YAG9BiyB,EAAUA,EAAQ7O,QAAQ,kBAAkB,WAAD,OAAa1f,IAFxDuuB,GAAO,kBAAevuB,IAOxB+R,EAAS0N,SAASnjB,SAAS,aACR,MAAnByV,EAASwN,SAETgP,GAAWxc,EAASwN,QAGtBtN,EAASsc,EAAS,CAAE7O,SAAS,GAC/B,KA+D0B,gBAWtB,SAAC,KAAM,WACL,SAAC,KAAK,CACJua,KAAK,6BACLC,SACE,SAACvB,GAAuB,CACtBx6B,QAAS9H,EAAM8H,QACf44B,OAAQA,EACR9d,QAAS5iB,EAAM4iB,QACfjN,YAAa3V,EAAM2V,YACnBkmB,sBAAuB77B,EAAM67B,sBAC7B/c,IAAK9e,EAAM8e,IACXD,KAAM7e,EAAM6e,aAO1B,I,+ICvTQilB,GAAwBn4B,EAAAA,GAAAA,KAAAA,oBAkB1Bo4B,GAAc,SAACC,GACnB,MAAmB,kBAARA,GAA4B,OAARA,EACtBl+B,KAAKC,UAAUi+B,GAEjBp9B,OAAOo9B,EAChB,EAkBO,SAASC,GAASliC,GAAsD,IAAvBmiC,EAAK,uDAAG,EAC9D,QAAiBpkC,IAAbiC,GAAuC,OAAbA,EAAmB,MAAO,GACxD,IAAMoiC,EAAWpmB,OAAOC,KAAKjc,GAAUue,QAAO,SAAAnW,GAAG,MAAY,WAARA,CAAgB,IAErE,OAAOg6B,EAASC,SAAQ,SAAAC,GAAY,IAAD,IAE3BC,EAAUR,GAAoBS,QAAQF,GACxCpjC,EAAQc,EAASsiC,GAGrB,QAAgBvkC,IAAZwkC,EAAuB,CAAC,IAAD,IAEzB,OAA4B,MAAxBD,EAAQG,MADE,mBAC2B,GAElC,CAAC,CACNC,IAAI,IAAD,OAAMJ,EAAQzhC,UAAU,EAAG,GAAE,YAAIyhC,EAAQzhC,UAAU,EAAG,GAAE,KAC3Dg0B,GAAI,GACJyN,QAAS,cACTpjC,MAAwB,QAAnB,EAAO,QAAP,EAAEA,SAAK,aAAL,EAAOqJ,kBAAU,QAAI,GAC5BurB,MAAOqO,GAEX,CAGA,GAAmB,OAAfI,EAAQ1N,SAAyB92B,IAAVmB,EAAqB,CAC9C,IAAMyjC,EAAgBh/B,MAAM8J,QAAQvO,GAASA,EAAQ,CAACA,GAGhD0jC,EAAwB,CAC5BF,IAAKH,EAAQG,IACb7N,GAAI0N,EAAQ1N,GACZyN,QAAAA,EACApjC,MAAM,iBAAD,OAAmByjC,EAAcn9B,OAAM,YAC5CsuB,MAAOqO,EACPriC,SAAU,IAgBZ,OAZA8iC,EAAa9iC,SAAW6iC,EAActkC,KAAI,SAACC,EAAMC,GAS/C,MAR0B,CACxBmkC,IAAI,GAAD,OAAKH,EAAQG,IAAG,YAAInkC,EAAQ,GAC/Bs2B,GAAI,OACJyN,QAAQ,QAAD,OAAU/jC,EAAQ,GACzBW,MAAM,iBAAD,OAAmBX,EAAQ,GAChCu1B,MAAOqO,EAAQ,EACfriC,SAAUoiC,GAAQ5jC,EAAM6jC,EAAQ,GAGpC,IAEO,CAACS,EACV,CASA,OANIj/B,MAAM8J,QAAQvO,GAChBA,EAAQA,EAAMb,IAAI2jC,IAAathC,KAAK,MACV,kBAAVxB,GAAgC,OAAVA,IACtCA,EAAQ8iC,GAAY9iC,IAGf,CAAC,CACNwjC,IAAKH,EAAQG,IACb7N,GAAI0N,EAAQ1N,GACZyN,QAASA,EAAQhb,QAAQ,WAAY,IACrCpoB,MAAwB,QAAnB,EAAO,QAAP,EAAEA,SAAK,aAAL,EAAOqJ,kBAAU,QAAI,GAC5BurB,MAAOqO,GAEX,GACF,CAOO,SAASU,GAAe7iC,GAE7B,OADgBkiC,GAAQliC,GACT81B,MAAK,SAAC7V,EAAGC,GAAC,OAAKD,EAAEyiB,IAAI3M,cAAc7V,EAAEwiB,IAAI,GAC1D,CChHO,I,WCKP,SAPwB,CACtBI,UAAAA,GACAC,gBAAAA,GACAC,aAAAA,GACAC,cAAAA,IAYF,SAASH,GAAgCzgC,EAAmBC,GAAiD,IAAD,OAC1G,GAAItE,KAAKilC,cAAc5gC,GAAY,CACjC,IAAM6gC,GAAazkC,EAAAA,EAAAA,KACb0kC,EAAe,CAAEtvB,GAAIqvB,EAAY5gC,SAAAA,GASvC,OANIqB,MAAM8J,QAAQzP,KAAKolC,UAAU/gC,IAC/BrE,KAAKolC,UAAU/gC,GAAWnC,KAAKijC,GAE/BnlC,KAAKolC,UAAU/gC,GAAa,CAAC8gC,GAGxB,CACLE,YAAa,kBAAM,EAAKL,aAAa3gC,EAAW6gC,EAAW,EAE/D,CACE,MAAM,IAAI3gC,MAAM,SAAD,OAAUF,EAAS,mBAEtC,CASA,SAAS2gC,GAAmC3gC,EAAmB6gC,GAC7D,QAAkCnlC,IAA9BC,KAAKolC,UAAU/gC,GAAnB,CAIA,IAAM+gC,EAAYplC,KAAKolC,UAAU/gC,GAC7BsB,MAAM8J,QAAQ21B,GAChBplC,KAAKolC,UAAU/gC,GAAa+gC,EAAU7kB,QAAO,YAAK,SAAF1K,KAAgBqvB,CAAU,IAE1EllC,KAAKolC,UAAU/gC,GAAa,EAN9B,CAQF,CAQA,SAAS4gC,GAAoC5gC,GAC3C,OAAO2Z,OAAO1Q,OAAOtN,KAAKslC,QAAQp/B,SAAS7B,EAC7C,CASA,SAAS0gC,GAAsC1gC,EAAmBkhC,GAChE,IAAMC,EAAexnB,OAAOC,KAAKje,KAAKolC,WAAW59B,OAAS,EACpDi+B,EAAe9/B,MAAM8J,QAAQzP,KAAKolC,UAAU/gC,IAE9CmhC,GAAgBC,GAClBzlC,KAAKolC,UAAU/gC,GAAWgH,SAAQ,SAACq6B,GACjCA,EAASphC,SAASihC,EACpB,GAEJ,CCvDA,SAhCA,SAA+B1rB,EAA2B8rB,GACxD,IAAMC,EAAwB,GACxBC,EAAe,IAAIrE,IAEzB,OAAO,gBACL3nB,kBAAAA,EACAqL,SAAU,GACV4gB,aAAc,EACdC,kBAAmB,GACnBC,WAAY,GACZC,WAAY,IACO,OAAhBN,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAmB,IAAE,IACxBC,UAAAA,EACAM,YAAa,SAAUC,GACrBnmC,KAAKomC,aAAa,CAACD,GACrB,EACAC,aAAc,SAAUC,GACtB,IAAK,IAAIt8B,EAAI,EAAGu8B,EAAMD,EAAa7+B,OAAQuC,EAAIu8B,EAAKv8B,IAAK,CACvD,IAAMub,EAAW+gB,EAAat8B,GAEzB87B,EAAa34B,IAAIoY,EAASC,kBAC7BsgB,EAAazc,IAAI9D,EAASC,eAAgBD,GAC1CsgB,EAAU1jC,KAAKojB,GAEnB,CACF,EACAihB,YAAa,SAAUhhB,GACrB,OAAOsgB,EAAa5D,IAAI1c,EAC1B,GAEJ,ECgCA,SA5DA,SAA8B0b,GAC5B,MAAO,CACLA,iBAAAA,EACAuF,iBAAkB,GAClBhjC,UAAW,GACXC,YAAa,GACbK,UAAW,GACXF,gBAAiB,GACjB6iC,aAAc,EACdC,kBAAmB,GACnBC,UAAU,EACV/b,OAAQ,GAIRgc,oBAAqB,SAAUthB,GAC7BtlB,KAAK6mC,qBAAqB,CAACvhB,GAC7B,EAMAuhB,qBAAsB,SAAUjB,GAC9B,IAAQ/rB,EAAsB+rB,EAAU,GAAhC/rB,kBAEsB,KAA1B7Z,KAAKwmC,uBAAqDzmC,IAA1BC,KAAKwmC,mBACvCxmC,KAAKwmC,iBAAmBZ,EAAU,GAAGY,kBAGvC,IAAI5b,EAAS5qB,KAAK4qB,OAAOjkB,MACvB,SAACC,GAAC,OAAKA,EAAEiT,oBAAsBA,CAAiB,IAGpC,MAAV+Q,IACFA,EAASkc,GAAqBjtB,EAAmB+rB,GACjD5lC,KAAK4qB,OAAO1oB,KAAK0oB,IAGnBA,EAAOwb,aAAaR,EACtB,EAEAmB,kBAAmB,SACjBltB,EACAkpB,GAEA,IAAIiE,EAAiBhnC,KAAK4qB,OAAOjkB,MAC/B,SAACC,GAAC,OAAKA,EAAEiT,oBAAsBA,CAAiB,IAGlD,GAAsB,MAAlBmtB,EACFA,EAAiBhpB,OAAOipB,OAAOD,EAAgBjE,OAC1C,CACL,IAAMnY,EAASkc,GAAqBjtB,GACpC7Z,KAAK4qB,OAAO1oB,KAAK8b,OAAOipB,OAAOrc,EAAQmY,GACzC,CACF,EAEJ,ECzDO,IAAMuC,GAAS,CACpB4B,YAAa,uCACbC,gBAAiB,2CACjBC,aAAc,wCACdC,eAAgB,2CAiDZC,GAAgB,CACpBC,QAAS,IAOX,SAASC,GAAWvG,GAClB,OAAOqG,GAAOC,QAAQ5gC,MACpB,SAAC8gC,GAAM,OAAKA,EAAOxG,mBAAqBA,CAAgB,GAE5D,CAEA,SAASyG,GAAYzG,EAA0BpnB,GAC7C,IAAM8tB,EAAQH,GAAUvG,GAExB,GAAa,MAAT0G,EAIJ,OAAOA,EAAM/c,OAAOjkB,MAClB,SAACihC,GAAO,OAAKA,EAAQ/tB,oBAAsBA,CAAiB,GAEhE,CAmFA,IAAMguB,GAA6C,CACjDvC,OAAAA,GACAF,UAAW,CAAC,EACZc,YAAW,SAAE4B,GACX,IAAIC,EAaAC,EAVAF,aAA4CG,YAK9CF,EAJkBn8B,EAAAA,GAAAA,KAAAA,aAAAA,SAChBk8B,GAG2BpiB,KAE7BqiB,EAAmBD,EAYrB,IAAQ7G,GAHN+G,EAJI,sBAAuBD,EAINA,EAFnBn8B,EAAAA,GAAAA,KAAAA,oBAAAA,kBAAiDm8B,IAK7C9G,iBAEJ0G,EAAQL,GAAOC,QAAQ5gC,MACzB,SAACghC,GAAK,OAAKA,EAAM1G,mBAAqBA,CAAgB,IAG3C,MAAT0G,IACFL,GAAOC,QAAQrlC,KAAKgmC,GAAoBjH,IACxC0G,EAAQL,GAAOC,QAAQD,GAAOC,QAAQ//B,OAAS,IAGjDmgC,EAAMf,oBAAoBoB,EAC5B,EACA5B,aAAY,SAAER,GAAkC,IAAvBuC,EAAY,wDACnC,EAAgDvC,EAAU,GAAlD3E,EAAgB,EAAhBA,iBAAkBpnB,EAAiB,EAAjBA,kBAEtB8tB,EAAQL,GAAOC,QAAQ5gC,MACzB,SAACghC,GAAK,OAAKA,EAAM1G,mBAAqBA,CAAgB,IAG3C,MAAT0G,IACFL,GAAOC,QAAQrlC,KAAKgmC,GAAoBjH,IACxC0G,EAAQL,GAAOC,QAAQD,GAAOC,QAAQ//B,OAAS,IAGjDmgC,EAAMd,qBAAqBjB,GAM3B5lC,KAAK+kC,gBAAgBO,GAAO6B,gBAAiB,CAC3ClG,iBAAAA,EACApnB,kBAAAA,EACAsuB,aAAAA,GAEJ,EACAC,qBAAoB,SAAErF,GACpB,IAAQ9B,EAAwC8B,EAAxC9B,iBAAkBpnB,EAAsBkpB,EAAtBlpB,kBAE1B,GAAc,MADC6tB,GAAWzG,EAAkBpnB,GAC5C,CAIA,IAAM8tB,EAAQH,GAAUvG,GACX,MAAT0G,GACFA,EAAMZ,kBAAkBltB,EAAmBkpB,EAJ7C,CAMF,EACAsF,kBAAiB,SAAEC,GAA8C,IAAvBH,EAAY,wDACpD,QAC4BpoC,IAA1BuoC,GACiC,IAAjCA,EAAsB9gC,aACOzH,IAA7BuoC,EAAsB,GAHxB,CAQA,IAAQrH,EAAqBqH,EAAsB,GAA3CrH,iBACJ0G,EAAQH,GAAUvG,GACT,MAAT0G,KACFA,EAAQO,GAAoBjH,IAEtBuF,iBAAmB8B,EAAsB,GAAG9B,iBAC7B,OAArB8B,QAAqB,IAArBA,GAAAA,EAAuBj9B,SAAQ,SAAC/K,GAAU,IAAD,EACuC,OAAhEP,IAAV4nC,GAA+C,QAAxB,EAACA,EAAMjB,yBAAiB,OAAvB,EAAyBxgC,SAAS5F,EAAK4kB,YAC1C,QAAvB,EAAAyiB,EAAMjB,yBAAiB,OAAvB,EAAyBxkC,KAAK5B,EAAK4kB,UAEvC,IACAyiB,EAAMY,2BAA6BD,EAAsB9gC,OACzD8/B,GAAOC,QAAQrlC,KAAKylC,IAGtBW,EAAsBj9B,SAAQ,SAACuf,GAAY,IAAD,EAChC/Q,EAAsB+Q,EAAtB/Q,kBACH,QAAL,EAAA8tB,SAAK,OAAL,EAAOZ,kBAAkBltB,EAAmB+Q,EAC9C,IAEA5qB,KAAK+kC,gBAAgBO,GAAO8B,aAAc,CACxCnG,iBAAAA,EACAqH,sBAAAA,EACAH,aAAAA,GAzBF,CA2BF,EACAK,SAAQ,SAAEb,GACR,IAAQ1G,EAAqB0G,EAArB1G,iBAEFwH,EAAgBnB,GAAOC,QAAQ5gC,MACnC,SAACghC,GAAK,OAAKA,EAAM1G,mBAAqBA,CAAgB,IAGxD,GAAqB,MAAjBwH,EAAuB,CACzB,IAAMC,EAAWR,GAAoBjH,GAErCyH,EAASllC,UAAYmkC,EAAMnkC,UAC3BklC,EAASjlC,YAAckkC,EAAMlkC,YAC7BilC,EAAS5kC,UAAY6jC,EAAM7jC,UAC3B4kC,EAAShC,kBAAoBiB,EAAMjB,kBACnCgC,EAASlC,iBAAmBmB,EAAMnB,iBAClCkC,EAAS9kC,gBAAkB+jC,EAAM/jC,gBACjC8kC,EAASjC,aAAekB,EAAMlB,aAE9Ba,GAAOC,QAAQrlC,KAAKwmC,EACtB,CACF,EACAC,qBA1OF,WACE,OAAOrB,GAAOC,QAAQlnC,KAAI,SAAConC,GAAM,OAAKA,EAAOxG,gBAAgB,GAC/D,EAyOE2H,SAAUpB,GACVqB,UAAWnB,GACXnB,YAvNF,SACEtF,EACApnB,EACA0L,GAEA,IAAMqF,EAAS8c,GAAWzG,EAAkBpnB,GAE5C,GAAc,MAAV+Q,EAIJ,OAAOA,EAAO2b,YAAYhhB,EAC5B,EA4MEujB,qBA1MF,SAAgCC,GAAwC,IACpC,EADmC,WACjDzB,GAAOC,SAAO,IAAlC,2BAAoC,CAAC,IACF,EADxBI,EAAK,mBACOA,EAAM/c,QAAM,IAAjC,2BAAmC,CAAC,IACK,EAD9BA,EAAM,mBACQA,EAAOgb,WAAS,IAAvC,2BAAyC,CAAC,IAA/BtgB,EAAQ,QACjB,GAAIA,EAASyjB,UAAYA,EACvB,OAAOzjB,CAEX,CAAC,+BACH,CAAC,+BACH,CAAC,+BACH,EAiME0jB,wBAxLF,SACE/H,EACApnB,EACA7X,GAEA,IAAM2lC,EAAQH,GAAUvG,GAExB,GAAa,MAAT0G,EAAJ,CAIA,IAAM/c,EAAS+c,EAAM/c,OAAOjkB,MAC1B,SAACihC,GAAO,OAAKA,EAAQ/tB,oBAAsBA,CAAiB,IAG9D,GAAc,MAAV+Q,EAIkBA,EAAdgb,UACEv6B,SAAQ,SAACia,GACjBtH,OAAOC,KAAKjc,GAAUqJ,SAAQ,SAACjB,GACA,kBAAlBpI,EAASoI,GAClBkb,EAASlb,IAAI,kBAAQkb,EAASlb,IAASpI,EAASoI,IAEhDkb,EAASlb,GAAOpI,EAASoI,EAE7B,GACF,GAnBA,CAoBF,EA4JE26B,gBAAe,SAAE1gC,EAAmB0T,GACpC,GAeF,SAP2BiG,OAAOipB,OAChC,CAAC,EACDY,GACAoB,IChTK,ICEClwB,GAAWC,GAAAA,EAAAA,OA0YnB,SAhXwB,SAAH,GAA0E,IAAD,IAAnEjR,EAAO,EAAPA,QAASid,EAAgB,EAAhBA,iBAClC,EAA8B0c,GAAU,CAAE35B,QAAAA,EAASid,iBAAAA,IAA3C2b,EAAM,EAANA,OAAQz5B,EAAS,EAATA,UAChB,GAA0By6B,EAAAA,EAAAA,eAA4B5hC,GAAU,eAAzD4nC,EAAK,KAAEuB,EAAQ,KAEtB,GAAsCvH,EAAAA,EAAAA,UAAuB,IAAG,eAAzDwH,EAAW,KAAEC,EAAc,KAClC,GAA0EzH,EAAAA,EAAAA,UAAS,GAAE,eAA9E0H,EAA6B,KAAEC,EAAgC,KACtE,GAA4C3H,EAAAA,EAAAA,UAAS,GAAE,eAAhDvgB,EAAc,KAAEmoB,EAAiB,KACxC,GAAsC5H,EAAAA,EAAAA,UAAS,IAAG,eAA3C6H,EAAW,KAAEC,EAAc,KAClC,GAAwC9H,EAAAA,EAAAA,UAAmB,IAAG,eAAvD+H,EAAY,KAAEC,EAAe,KACpC,GAAsChI,EAAAA,EAAAA,UAAS,IAAG,eAA3CiI,EAAW,KAAEC,EAAc,KAE5BC,EDvCmB,SAAK5oC,EAAU6oC,GACxC,OAA4CpI,EAAAA,EAAAA,UAAYzgC,GAAM,eAAvD8oC,EAAc,KAAEC,EAAiB,KAYxC,OAVAlI,EAAAA,EAAAA,YAAU,WACR,IAAMmI,EAAQvL,YAAW,WACvBsL,EAAkB/oC,EACpB,GAAG6oC,GAEH,OAAO,WACLI,aAAaD,EACf,CACF,GAAG,CAAChpC,EAAO6oC,IAEJC,CACT,CCyB+BI,CAAYR,EAAa,MAEtD7H,EAAAA,EAAAA,YAAU,WACqB,KAAzB+H,GACFL,EAAe,IACfE,EAAgB,KAEhBF,EAAeK,EAEnB,GAAG,CAACA,KAEJ/H,EAAAA,EAAAA,YAAU,WACR,IAAMsI,EAAU,SAACx/B,GACf,IAAM88B,EAA2B3pB,OAAOipB,OAAO,CAAC,EAAGqD,GAAAA,SAA4BtlB,IAC/EkkB,EAASvB,EACX,EACM4C,EAA0BD,GAAAA,UAA6BA,GAAAA,OAAAA,aAAwCD,GAC/FG,EAA6BF,GAAAA,UAA6BA,GAAAA,OAAAA,gBAA2CD,GAErG1C,EAAQ3pB,OAAOipB,OAAO,CAAC,EAAGqD,GAAAA,SAA4BtlB,IAG5D,OAFAkkB,EAASvB,GAEF,WACL4C,EAAwBlF,cACxBmF,EAA2BnF,aAC7B,CACF,GAAG,CAACrgB,KAEJ+c,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACVoH,EAA4B,GAC5BsB,EAAmC,GACjCC,EAA4B,GAC9BnqC,EAAQ,EAERogC,EAAOn5B,OAAS,IAClB2hC,EAAcxI,EACXtgC,KAAI,SAACiH,GACJ,IAAQ8B,EAAiB9B,EAAjB8B,aACR,QAA0BrJ,KAAV,OAAZqJ,QAAY,IAAZA,OAAY,EAAZA,EAAe,IAAkB,OAAO,KAE5C,MAOIA,EAAa,GANf48B,EAAU,EAAVA,WACAC,EAAU,EAAVA,WACAH,EAAY,EAAZA,aACAjsB,EAAiB,EAAjBA,kBACAksB,EAAiB,EAAjBA,kBACA7gB,EAAQ,EAARA,SAGFwlB,EAAgBxoC,KAAK2X,GAErB,IAAM8wB,EAAiB,CACrBC,sBAAuBrqC,EACvBylC,WAAAA,EACAC,WAAAA,EACApsB,kBAAAA,EAEAisB,aAAAA,EACAC,kBAAAA,EACA7gB,SAAAA,EACAtL,OAAQxQ,GAGV,OADA7I,IACOoqC,CACT,IACCpqB,QAAO,SAAC6I,GAAG,OAAgC,OAARA,CAAY,UAGtCrpB,IAAV4nC,IAAmC,QAAZ,EAAAA,EAAM/c,cAAM,aAAZ,EAAcpjB,QAAS,IAChDijC,EAAqB9C,EAAM/c,OAAOrK,QAAO,SAAA3Z,GAAC,OAAK8jC,EAAgBxkC,SAASU,EAAEiT,kBAAkB,IACzFxZ,KAAI,SAACuqB,GAAgC,IAAD,EAC7B+f,EAAiB,CACrBC,sBAAuBrqC,EACvBylC,WAAYpb,EAAOob,WACnBC,WAAYrb,EAAOqb,WAEnBH,aAAclb,EAAOkb,aACrBC,kBAAmBnb,EAAOmb,kBAC1BlsB,kBAAmB+Q,EAAO/Q,kBAC1BqL,SAAU0F,EAAO1F,SACjBtL,QAAc,OAANgR,QAAM,IAANA,GAAiB,QAAX,EAANA,EAAQgb,iBAAS,WAAX,EAAN,EAAmBp+B,QAAS,EAAIojB,EAAOgb,UAAY,CAAChb,IAG9D,OADArqB,IACOoqC,CACT,KAGJvB,EAAe,GAAD,gBAAKD,IAAW,QAAKsB,IACrC,GAAG,CAAC9J,EAAQgH,IAEZ,IAAMkD,GAAiBC,EAAAA,EAAAA,UAAQ,WAE7B,OADA3B,EAAYrR,MAAK,SAAC7V,EAAGC,GAAC,OAAKkT,OAAOnT,EAAE6jB,cAAgB1Q,OAAOlT,EAAE4jB,aAAa,IACnEqD,EAAY9oC,KAAI,SAAC0qC,EAAYxqC,GAClC,MAMIwqC,EALF/E,WAAAA,OAAU,MAAG,GAAE,IAKb+E,EAJF9E,WAAAA,OAAU,MAAG,GAAE,IAIb8E,EAHFjF,aAAAA,OAAY,MAAG,GAAE,IAGfiF,EAFFhF,kBAAAA,OAAiB,MAAG,GAAE,IAEpBgF,EADF7lB,SAAAA,OAAQ,MAAG,GAAE,EAIT8lB,EN9ImB,SAACC,GAE9B,IAAMxG,EAAQwG,EAAQxG,MAAM,gDAC5B,GAAa,MAATA,EAAe,OAAOwG,EAE1B,cAAmDxG,EAAK,GAA/C7hC,EAAI,KAAEE,EAAK,KAAEC,EAAG,KAAEmoC,EAAI,KAAEC,EAAM,KAAEC,EAAM,KAGzCC,EAAWC,SAASxoC,GACpByoC,EAASD,SAASvoC,GACxB,GAAIsoC,EAAW,GAAKA,EAAW,IAAME,EAAS,GAAKA,EAAS,GAC1D,OAAON,EAGT,IAAMO,EAAO,IAAIC,KACfH,SAAS1oC,GACTyoC,EAAW,EACXE,EACAD,SAASJ,GACTI,SAASH,GACTG,SAASF,IAKX,GACEI,EAAKE,aAAeL,EAAW,GAC/BG,EAAKG,YAAcJ,EAEnB,OAAON,EAIT,IAAMW,EAAUJ,EAAKK,mBAAmB,QAAS,CAAED,QAAS,UACtDE,EAAYN,EAAKK,mBAAmB,QAAS,CAAE/oC,MAAO,UACtDipC,EAAeP,EAAKG,UACpBK,EAAUR,EAAKS,cAErB,MAAM,GAAN,OAAUL,EAAO,aAAKE,EAAS,YAAIC,EAAY,YAAIC,EACrD,CMuG0BE,CADJ,UAAGlG,EAAU,YAAIC,GAAaxjC,MAAM,KAAK,IAGzD,MAAO,CACLvB,MAAOX,EACPG,MAAM,GAAD,OAAKolC,EAAY,aAAK5gB,EAAQ,cAAM6gB,GACzCh/B,YAAaikC,EAEjB,GACF,GAAG,CAAC7B,IAEEgD,GACsC,QAA1C,EAAAhD,EAAYE,UAA8B,aAA1C,EAA4CzvB,OAAOpS,QAAS,EAExD4kC,GAAsBtB,EAAAA,EAAAA,UAAQ,WAAO,IAAD,EACxC,QAAmD/qC,IAA/CopC,EAAYE,GAA8C,MAAO,CAAC,EACtE,IAAMgD,EAAiBlD,EAAYE,GAA+BzvB,OAAOpS,OASzE,OANmC,GACjC,EAAG,MAAG,UACL6Q,KAAKuX,KAAKyc,EAAiB,GAAKxlC,OAAOwR,KAAKuX,KAAKyc,EAAiB,MAAG,UACrEA,EAAiBxlC,OAAOwlC,IAAe,CAI5C,GAAG,CAAChD,EAA+BF,IA6B7BmD,GAAYxB,EAAAA,EAAAA,UAAQ,WAAO,IAAD,EAuB9B,QAAmD/qC,IAA/CopC,EAAYE,GAA8C,MAAO,GACrE,IAAMzvB,EAAmD,QAA7C,EAAGuvB,EAAYE,UAA8B,aAA1C,EAA4CzvB,OAW3D,OAlCiC,SAA3B2yB,EAA4BC,GAAkD,IAArCC,EAAS,uDAAG,GACzD,OAAOD,EAAKnsC,KAAI,SAACqkC,EAAKnkC,GAEpB,IAAMmsC,EAA8B,KAAZhI,EAAIA,IAAaA,EAAIA,IAAIpb,QAAQ,SAAU,IAAM/oB,EAAMgK,WACzEoiC,EAAmC,KAAdF,EAAgB,UAAMA,EAAS,YAAIC,GAAYA,EAEpEpsC,EAAsB,CAC1B8J,IAAKuiC,EACLjI,IAAKA,EAAIA,IACT7N,GAAI6N,EAAI7N,GACRyN,QAASI,EAAIJ,QACbpjC,MAAOwjC,EAAIxjC,OAOb,YAJqBnB,IAAjB2kC,EAAI5iC,UAA0B4iC,EAAI5iC,SAAS0F,OAAS,IACtDlH,EAAKwB,SAAWyqC,EAAyB7H,EAAI5iC,SAAU6qC,IAGlDrsC,CACT,GACF,CAcOisC,CADM1H,IATUl/B,MAAM8J,QAAQmK,IACjC,QAAIA,GAAQke,MAAK,SAAC7V,EAAGC,GACnB,YAAyBniB,IAArBkiB,EAAE2qB,qBAAqD7sC,IAArBmiB,EAAE0qB,eAC/BxX,OAAOnT,EAAE2qB,gBAAkBxX,OAAOlT,EAAE0qB,gBAEtC,CACT,IACA,IAC4BxrB,EAAiB,IAGnD,GAAG,CAACA,EAAgBioB,EAA+BF,IAE7C0D,GAAe/B,EAAAA,EAAAA,UAAQ,WAC3B,QAAoB/qC,IAAhBypC,GAA6C,KAAhBA,EAAoB,OAAO8C,EAE5D,IAAMQ,EAActD,EAAYuD,cAC1BC,EAAc,IAAIzoB,IAElB0oB,EAAc,SAACC,GAAkC,IAAD,gBACpD,OAC0B,QAAxB,EAAS,QAAT,EAACA,EAAKxI,WAAG,aAAR,EAAUqI,qBAAa,QAAI,IAAI7mC,SAAS4mC,KAClB,QAAvB,EAAQ,QAAR,EAACI,EAAKrW,UAAE,aAAP,EAASkW,qBAAa,QAAI,IAAI7mC,SAAS4mC,KACZ,QAA5B,EAAa,QAAb,EAACI,EAAK5I,eAAO,aAAZ,EAAcyI,qBAAa,QAAI,IAAI7mC,SAAS4mC,KACR,QAArC,EAAW,QAAX,EAACI,EAAKhsC,aAAK,aAAV,EAAYqJ,WAAWwiC,qBAAa,QAAI,IAAI7mC,SAAS4mC,EAE1D,EAGMK,EAAoB,SAApBA,EACJD,GAEuB,IADvBE,EAA2B,uDAAG,GAExBC,EAAW,mBAAOD,GAAU,CAAEF,IAChCI,EAAmC,GAavC,OAXIL,EAAYC,IACdI,EAAcprC,KAAKmrC,GAGA,MAAjBH,EAAKprC,UACPorC,EAAKprC,SAASuJ,SAAQ,SAAAkiC,GACpB,IAAMC,EAAaL,EAAkBI,EAAOF,GAC5CC,EAAa,mBAAOA,IAAa,QAAKE,GACxC,IAGKF,CACT,EAuCMG,EAjCkB,SAAlBC,EACJC,GAEqB,IADrB7X,EAAK,uDAAG,EAER,GAAqB,IAAjB6X,EAAMnmC,QAAgBsuB,GAAS6X,EAAM,GAAGnmC,OAAQ,MAAO,GAE3D,IAAMomC,EAAe,IAAIpM,IAoBzB,OAfAmM,EAAMtiC,SAAQ,SAAAw4B,GACZ,GAAI/N,EAAQ+N,EAAKr8B,OAAQ,CACvB,IAO6B,EAPvB0lC,EAAOrJ,EAAK/N,GAOlB,GANK8X,EAAa1gC,IAAIggC,EAAK9iC,MACzBwjC,EAAaxkB,IAAI8jB,EAAK9iC,IAAK,CACzB8iC,MAAK,UAAMA,GACXM,WAAY,KAGZ1X,EAAQ,EAAI+N,EAAKr8B,OACO,QAA1B,EAAAomC,EAAa3L,IAAIiL,EAAK9iC,YAAI,OAA1B,EAA4BojC,WAAWtrC,KAAK2hC,EAEhD,CACF,IAEOl+B,MAAMC,KAAKgoC,EAAatgC,UAAUjN,KAAI,YAA2B,IAAxB6sC,EAAI,EAAJA,KAAMM,EAAU,EAAVA,WACpDR,EAAYhkB,IAAIkkB,EAAK9iC,KACrB,IAAMtI,EAAW4rC,EAAgBF,EAAY1X,EAAQ,GACrD,OAAOh0B,EAAS0F,OAAS,GAAC,kBAAQ0lC,GAAI,IAAEprC,SAAAA,IAAaorC,CACvD,GACF,CAEiBQ,CApCKpB,EAAUjI,SAAQ,SAAA6I,GAAI,OAAIC,EAAkBD,EAAK,KAuCvE,OAFAvD,EAAgBhkC,MAAMC,KAAKonC,IAEpBS,CACT,GAAG,CAACnB,EAAW9C,IAEf,OAAItiC,GACK,yCAIP,gBAAK2mC,UAAU,oBAAmB,UAChC,iBACErlC,MAAO,CACL0B,MAAO,OACPqQ,QAAS,kBACT,WAEF,iBAAK/R,MAAO,CAAEM,QAAS,OAAQglC,IAAK,OAAQC,aAAc,QAAS,WACjE,iBAAKvlC,MAAO,CAAEwlC,KAAM,GAAI,WACtB,SAAC,UAAe,CAACC,QAAM,EAACzlC,MAAO,CAAEM,QAAS,QAASilC,aAAc,OAAQ,qBACzE,SAAC,KAAM,CACLvlC,MAAO,CAAE0B,MAAO,QAChBhJ,MAAOmoC,EACP38B,SAAU,SAACxL,GACTooC,EAAiCpoC,GACjCqoC,EAAkB,EACpB,EACA2E,gBAAgB,QAChBC,iBAAiB,QAAO,SAEvBtD,EAAexqC,KAAI,SAACC,GAAI,OACvB,SAAC,GAAM,CAAkBY,MAAOZ,EAAKY,MAAOR,MAAOJ,EAAKI,MAAM,UAC5D,4BACE,yBAAMJ,EAAKI,SACX,gBACE8H,MAAO,CAAES,SAAU,OAAQC,MAAO,uBAAwB,SAEzD5I,EAAKyG,kBANCzG,EAAKY,MAST,SAKdirC,IACC,iBAAK3jC,MAAO,CAAEwlC,KAAM,GAAI,WACtB,UAAC,UAAe,CAACC,QAAM,EAACzlC,MAAO,CAAEM,QAAS,QAASilC,aAAc,OAAQ,8BACrD3sB,MAEpB,SAAC,KAAM,CACLhQ,IAAK,EACLC,IAA+C,QAA5C,EAAE83B,EAAYE,UAA8B,aAA1C,EAA4CzvB,OAAOpS,OACxDtG,MAAOkgB,EACP1U,SAAU,SAACxL,GAAK,OAAKqoC,EAAkBroC,EAAM,EAC7CktC,MAAOhC,EACP95B,QAAS,CACP+7B,UAAW,SAACntC,GAAyB,YAAenB,IAAVmB,EAAmB,mBAAeA,GAAU,EAAE,YAOlG,SAAC,KAAK,CACJsH,MAAO,CAAEulC,aAAc,QACvBpU,YAAY,uBACZoE,QAAQ,SAACuQ,GAAA,EAAc,IACvB5hC,SAAU,SAACqQ,GAAC,OAAK8sB,EAAe9sB,EAAEV,OAAOnb,MAAM,EAC/CA,MAAO0oC,KAGT,SAAC,KAAK,CACJ2E,QArNQ,CACd,CACEntC,MAAO,MACPotC,UAAW,MACXpkC,IAAK,MACLF,MAAO,OAET,CACE9I,MAAO,KACPotC,UAAW,KACXpkC,IAAK,KACLF,MAAO,MAET,CACE9I,MAAO,UACPotC,UAAW,UACXpkC,IAAK,UACLF,MAAO,OAET,CACE9I,MAAO,QACPotC,UAAW,QACXpkC,IAAK,QACLF,MAAO,QA+LHukC,WAAY5B,EACZ6B,YAAY,EACZC,WAAY,CACVC,gBAAiBlF,EACjBmF,qBAAsB,SAAC5wB,GAAI,OAAK0rB,EAAgB1rB,EAAiB,GAEnE1c,KAAK,QACLutC,OAAQ,CAAEvZ,EAAG,WAKvB,ECyIA,SAAe9Z,GApdH,0CACV,WAAaxb,GAAqB,IAAD,mBAC/B,cAAMA,IAuDR8uC,iBAAmB,SAACC,GAClB,GAAW,MAAPA,GAAuB,KAARA,EACjB,OAAO,EAET,IACE,IAAMC,EAAS,IAAIC,IAAIF,GACvB,OAAOC,EAAOE,SAASC,WAAW,SAAWH,EAAO5lB,SAAS7hB,OAAS,CAGxE,CAFE,MAAO6nC,GACP,OAAO,CACT,CACF,EAAC,EAEDC,sBAAwB,WACtB,IAAMC,GAAUC,EAAAA,GAAAA,MACVC,EAQF,CACFF,QAAS,CAAC,EACVG,GAAI,CAAC,GAEQ,MAAXH,IACFE,EAAYF,QAAU,CACpB5uC,KAAsB,MAAhB4uC,EAAQ5uC,KAAe4uC,EAAQ5uC,UAAOZ,EAC5C4vC,QAA4B,MAAnBJ,EAAQI,QAAkBJ,EAAQI,aAAU5vC,GAEvD0vC,EAAYC,GAAK,CACf/uC,KAAoB,MAAd4uC,EAAQG,GAAaH,EAAQG,QAAK3vC,IAI5C6vC,GAAAA,EAAAA,KAAW,CACTxuC,MAAO,QACP8I,MAAO,IACP0D,SACE,iCACE,UAAC,IAAY,CAACxM,MAAM,cAAcS,OAAQ,EAAE,WAC1C,SAAC,SAAiB,CAACnB,MAAM,OAAM,SAC5B,EAAKT,MAAM8e,IAAIpe,QAElB,SAAC,SAAiB,CAACD,MAAM,UAAS,SAC/B,EAAKT,MAAM8e,IAAI4wB,WAElB,SAAC,SAAiB,CAACjvC,MAAM,WAAU,SAChC,EAAKT,MAAM8e,IAAI8wB,eAGpB,UAAC,IAAY,CAACzuC,MAAM,UAAUS,OAAQ,EAAE,WACtC,SAAC,SAAiB,CAACnB,MAAM,OAAM,SAC5B+uC,EAAYF,QAAQ5uC,QAEvB,SAAC,SAAiB,CAACD,MAAM,UAAS,SAC/B+uC,EAAYF,QAAQI,cAGzB,SAAC,IAAY,CAACvuC,MAAM,mBAAmBS,OAAQ,EAAE,UAC/C,SAAC,SAAiB,CAACnB,MAAM,OAAM,SAC5B+uC,EAAYC,GAAG/uC,YAKxB88B,KAAI,WAAW,GAEnB,EAAC,EAEDqS,iCAAmC,WAAa,IAAD,IACvC5lC,EAAQyqB,OAAOob,WAAa,IAClCH,GAAAA,EAAAA,KAAW,CACTxuC,MAAO,oBACP8I,MAAAA,EACA0D,SAAS,SAAC,GAAe,CACvB7F,QAA2B,QAApB,EAAE,EAAK9H,MAAM8H,eAAO,QAAI,CAAC,EAChCid,iBAAoD,QAApC,EAAE,EAAK/kB,MAAM8b,OAAOiJ,wBAAgB,QAAI,KAE1DyY,KAAI,WAAW,GAEnB,EAAC,EAEDuS,uBAAyB,WACvB,IAAMC,EAKF,CACFC,eAAgB,GAChBC,cAAe,GACfC,iBAAkB,GAClBC,cAAe,IAIXC,EAAW,EAAKrpC,MAAMspC,SAAS/oC,OAErC,GAAI8oC,EAAW,EACb,IAAK,IAAIvmC,EAAI,EAAGA,EAAIumC,EAAUvmC,IAAK,CAEjCkmC,EADiB,EAAKhpC,MAAMP,cAAcqD,IACtB7H,KAAK,GAAD,OAAI,EAAK+E,MAAMspC,SAASxmC,GAAGhF,QAAO,qBAAuB,EAAKkC,MAAMspC,SAASxmC,GAAGxD,OAAM,KAChH,CAGF,IAM0BiqC,EANlBC,EAAUC,GAAAA,EAAAA,MAEZC,EAAiB,SAACC,GAAgB,OACtC,SAAC,KAAK,CAACziC,MAAOyiC,GAAY,EAO5BhB,GAAAA,EAAAA,KAAW,CACTxuC,MAAO,2DACP8I,MAAO,IACP0D,SACE,UAAC,KAAQ,YACP,SAAC6iC,EAAK,CACJpvC,OAAO,sBAEPC,MAAOqvC,EAAeV,EAAUE,cAAc3oC,QAAQ,UAEtD,wBACGyoC,EAAUE,cAAc9vC,KAAI,SAAA0c,GAAC,OAC5B,wBAAoBA,IAAX8zB,EAAAA,EAAAA,KAAkB,OAL3B,uBASN,SAACJ,EAAK,CACJpvC,OAAO,+BAEPC,MAAOqvC,EAAeV,EAAUG,iBAAiB5oC,QAAQ,UAEzD,wBACGyoC,EAAUG,iBAAiB/vC,KAAI,SAAA0c,GAAC,OAC/B,wBAAoBA,IAAX8zB,EAAAA,EAAAA,KAAkB,OAL3B,sBASN,SAACJ,EAAK,CACJpvC,OAAO,sBAEPC,MAAOqvC,EAAeV,EAAUI,cAAc7oC,QAAQ,UAEtD,wBACGyoC,EAAUI,cAAchwC,KAAI,SAAA0c,GAAC,OAC5B,wBAAoBA,IAAX8zB,EAAAA,EAAAA,KAAkB,OAL3B,uBASN,SAACJ,EAAK,CACJpvC,OAAO,uBAEPC,MAAOqvC,EAAeV,EAAUC,eAAe1oC,QAAQ,UAEvD,wBACGyoC,EAAUC,eAAe7vC,KAAI,SAAA0c,GAAC,OAC7B,wBAAoBA,IAAX8zB,EAAAA,EAAAA,KAAkB,OAL3B,cASN,SAACJ,EAAK,CACJpvC,OAAO,UAEPC,OAxDkBkvC,EAwDM,EAAKvpC,MAAM6pC,SAAStpC,QAvDlD,SAAC,KAAK,CAAC0B,MAAM,QAAQiF,MAAOqiC,KAuD8B,UAEpD,wBACG,EAAKvpC,MAAM6pC,SAASzwC,KAAI,SAAA0wC,GAAO,OAC9B,wBAAoBA,IAAXF,EAAAA,EAAAA,KAAwB,OALjC,cAWVpT,KAAI,WAAW,GAEnB,EAAC,EAEDuT,iCAAmC,WACjC,EAAK3pC,SAAS,CAAE4pC,+BAA+B,GACjD,EAAC,EAEDC,2BAA6B,SAC3BrmC,GAEA,IAAM3J,EAAQ2J,EAAMsmC,cAAcjwC,MAClC,EAAKmG,SAAS,CACZ+pC,kBAAmBlwC,EACnBmwC,2BAA4B,EAAKtC,iBAAiB7tC,IAEtD,EAAC,EAEDowC,kCAAoC,WAClC,IAAMC,EAAkB5c,OAAO6c,aAAaC,QAAQ,wBACpD,EAAKpqC,SAAS,CACZqqC,oBAAyC,OAApBH,GAAgD,KAApBA,EAAyB,SAAW,UACrFH,kBAAkC,OAAfG,QAAe,IAAfA,EAAAA,OAAmBxxC,EACtCkxC,+BAA+B,EAC/BI,2BAA4B,EAAKtC,iBAAiBwC,IAEtD,EAAC,EAEDI,gCAAkC,SAAC50B,GACjC,IAAMvS,EAAOuS,EAAEV,OAAOnb,MACtB,EAAKmG,SAAS,CAAEqqC,oBAAqBlnC,GACvC,EAAC,EAEDonC,sBAAwB,WAGtB,GAFAjd,OAAO6c,aAAaK,QAAQ,6BAA8B,EAAK5qC,MAAMyqC,qBAE9B,YAAnC,EAAKzqC,MAAMyqC,oBAMb,OALA,EAAKzxC,MAAM6xC,kBAAkB,CAAE9C,IAAK,UACpC,EAAK3nC,SAAS,CACZ4pC,+BAA+B,EAC/BI,2BAA2B,IAK/B,IAAMrC,EAAM,EAAK/nC,MAAMmqC,kBACnBW,GAAa,EACN,MAAP/C,GAAuB,KAARA,IACbA,EAAII,WAAW,YAAcJ,EAAII,WAAW,eAC9C,EAAKnvC,MAAM6xC,kBAAkB,CAAE9C,IAAAA,IAC/B+C,GAAa,GAGjB,EAAK1qC,SAAS,CACZ4pC,+BAAgCc,EAChCV,2BAA4BU,GAEhC,EAlSE,IAAMR,EAAkB5c,OAAO6c,aAAaC,QAAQ,wBAC9CO,EAAard,OAAO6c,aAAaC,QAAQ,8BAE/C,EAAKxqC,MAAQ,CACXspC,SAAU,GACV7pC,cAAe,GACfoqC,SAAU,GACVM,kBAAkC,OAAfG,QAAe,IAAfA,EAAAA,EAAmB,GACtCN,+BAA+B,EAC/BI,2BAA4B,EAAKtC,iBAAiBwC,GAClDG,oBAAoC,WAAfM,GAA+C,OAApBT,GAAgD,KAApBA,EAAyB,SAAW,WA6BjH,OARDnpC,GAAAA,UACEnD,GAnBqB,SAAH,GAGP,IAHasB,EAAM,EAANA,OAAQC,EAAK,EAALA,MAIhC,EAAKa,UAAS,SAAAJ,GAAK,yBACdA,GAAK,IACRspC,SAAS,GAAD,gBAAMtpC,EAAMspC,UAAQ,oBAAO/pC,GAAK,IAAED,OAAAA,MAC1CG,cAAc,GAAD,gBAAMO,EAAMP,eAAa,CAAEF,EAAM1B,QAAK,GAEvD,IAcAsD,GAAAA,UACEnD,GAbuB,SAAC8rC,GACxB,EAAK1pC,UAAS,SAAAJ,GAAK,yBACdA,GAAK,IACR6pC,SAAS,GAAD,gBAAM7pC,EAAM6pC,UAAQ,CAAEC,KAAQ,GAE1C,IAUC,CACH,CAsaC,OAtaA,0CAED,SAAoBkB,EAAkC3b,IAC9CA,EAAUwa,SAAStpC,OAAS,GAAO8uB,EAAUia,SAAS/oC,OAAS,IAAOxH,KAAKC,MAAM0b,SAAS0N,WAAa4oB,EAAUt2B,SAAS0N,UAC9HrpB,KAAKqH,SAAS,CACZ4pC,+BAA+B,EAC/BI,2BAA2B,EAC3Bd,SAAU,GACV7pC,cAAe,GACfoqC,SAAU,IAGhB,GAAC,oBAgPD,WAA4B,IAAD,UA6BrBoB,EA7BqB,OACrBpzB,EAAO,KACX,QAAwB/e,IAApBC,KAAKC,MAAM6e,KAAoB,CACjC,IAAMqzB,EAAgB,QACUpyC,IAA5BC,KAAKC,MAAMmyC,cACbD,EAAcjwC,KACZ,CACExB,MAAO,SACP0J,IAAK,cACLmD,QAAS,gBACyBxN,IAA5B,EAAKE,MAAMmyC,cACb,EAAKnyC,MAAMmyC,cAEf,IAIN,IAAMC,EAAW,CAAElyC,MAAOgyC,GAC1BrzB,GACE,SAAC,KAAQ,CAACwzB,KAAMD,EAAUE,QAAS,CAAC,SAAS,UAC3C,SAAC,GAAM,CACLpxC,KAAMqxC,GAAAA,EACNjlC,QAAS,SAAAwP,GAAC,OAAIA,EAAE01B,gBAAgB,EAChC/xC,MAAK,UAAKV,KAAKC,MAAM6e,KAAKne,KAAI,aAAKX,KAAKC,MAAM6e,KAAKQ,MAAK,QAIhE,CAGItf,KAAKC,MAAMyyC,qBACbR,GACE,SAAC,KAAO,CAACS,GAAG,IAAG,UACb,SAAC,GAAM,CAACxxC,KAAMyxC,GAAAA,EAAuBtgC,QAAQ,sBAKnD,IAgCIugC,EAhCEC,GACJ,SAAC,GAAM,CACL3xC,KAAM4xC,GAAAA,EACNzgC,QAAQ,eACR/E,QAASvN,KAAKsvC,wBAIZ0D,GACJ,SAAC,KAAK,CAAC7kC,MAAOnO,KAAKiH,MAAMspC,SAAS/oC,OAAQgB,MAAO,CAAEe,OAAQ,KAAO,UAChE,SAAC,KAAK,CAACL,MAAM,QAAQiF,MAAOnO,KAAKiH,MAAM6pC,SAAStpC,OAAQgB,MAAO,CAAEe,OAAQ,MAAO,UAC9E,SAAC,GAAM,CACLpI,KAAM4M,GAAAA,EACNuE,QAAQ,aACR/E,QAASvN,KAAKgwC,6BAQhBiD,EAFsBjzC,KAAKC,MAAM0b,SAAS0N,SAASnjB,SAAS,cAI9D,SAAC,GAAM,CACL/E,KAAM+xC,GAAAA,EACN5gC,QAAQ,oBACR/E,QAASvN,KAAK8vC,mCAGhB,KAGA9vC,KAAKC,MAAMkzC,4BACbN,GACE,SAAC,GAAM,CACL1xC,KAAMiyC,GAAAA,EACN9gC,QAAQ,gBACR/E,QAASvN,KAAKgxC,oCAKpB,IAEMI,EAAuD,WAAnCpxC,KAAKiH,MAAMyqC,oBACjC1xC,KAAKiH,MAAMmqC,kBACyB,QADR,EACV,QADU,EAC5BpxC,KAAKC,MAAM8H,eAAO,OAAS,QAAT,EAAlB,EAAoBsrC,eAAO,WAAT,EAAlB,EAA6BC,eAAO,QAA6B,QAA7B,EAAItzC,KAAKC,MAAMszC,sBAAc,OAAS,QAAT,EAAzB,EAA2BF,eAAO,WAAT,EAAzB,EAAoCC,QAE1EE,EAA+B,MAArBpC,GAAmD,KAAtBA,GAEzC,SAAC,IAAO,CAAChwC,MAAOgwC,EAAkB,UAChC,gBACE5oC,MAAO,CACL+0B,SAAU,SACVkW,aAAc,WACdzyC,WAAY,SACZ0yC,aAAc,OACdjnC,YAAa,QAEfrL,MAAOgwC,EAAkB,SAExBA,MAIL,KAEJ,OACE,iCACE,SAAC,WAAa,CAAC5oC,MAAO,CAAE0B,MAAO,OAAQqQ,QAAS,UAAW,UACzD,UAAC,KAAG,CAAC/R,MAAO,CAAEmrC,SAAU,UAAW,WACjC,SAAC,KAAG,CAACnrC,MAAO,CAAEorC,WAAY,GAAI,UAC5B,SAAC,KAAK,CAACpnC,MAAM,SAASkB,UAAU,aAAY,UAC1C,gBACEmmC,IAhCEC,qDAiCFC,IAAI,GACJvrC,MAAO,CAAEC,OAAQ,OAAQ40B,OAAQ,gBAIvC,SAAC,KAAG,CAAC2Q,KAAK,OAAOxlC,MAAO,CAAEkJ,SAAU,EAAG6rB,SAAU,UAAW,UAC1D,gBAAK/0B,MAAO,CAAE0B,MAAO,OAAQqzB,SAAU,UAAW,SAC/Cv9B,KAAKC,MAAMkzC,0BAA4BK,EAAU,QAGtD,SAAC,KAAG,CAAChrC,MAAO,CAAEorC,WAAY,GAAI,UAC5B,UAAC,KAAK,CAAClmC,UAAU,aAAY,UAC1BwkC,EACAY,EACAE,EACAC,EACAJ,EACA/zB,aAMT,UAAC,KAAK,CACJ0e,KAAMx9B,KAAKiH,MAAMgqC,8BACjB7vC,MAAM,yBACNq8B,KAAMz9B,KAAK4xC,sBACXjU,SAAU39B,KAAKsxC,kCAAkC,WAEjD,UAAC,YAAW,CACVpwC,MAAOlB,KAAKiH,MAAMyqC,oBAClBhlC,SAAU1M,KAAK2xC,gCACfnpC,MAAO,CAAEulC,aAAc,QAAS,WAEhC,SAAC,MAAK,CAAC7sC,MAAM,UAAS,iCACtB,SAAC,MAAK,CAACA,MAAM,SAAQ,kCAGa,WAAnClB,KAAKiH,MAAMyqC,sBACV,SAAC,IAAO,CAACtwC,MAAOpB,KAAKiH,MAAMmqC,kBAAkB,UAC3C,SAAC,KAAK,CACJzX,YAAY,2CACZz4B,MAAOlB,KAAKiH,MAAMmqC,kBAClB1kC,SAAU1M,KAAKkxC,2BACflT,aAAch+B,KAAK4xC,sBACnB3T,WACAj+B,KAAKiH,MAAMoqC,2BACP,SAAClT,GAAA,EAAY,CAAC31B,MAAO,CAAEU,MAAO,sBAC9B,SAACg1B,GAAA,EAAa,CAAC11B,MAAO,CAAEU,MAAO,8BAQjD,KAAC,EAjdS,CAASnH,EAAAA,Y,eC/CrB,SAjBiB,SAAH,GAAwD,IAAlDX,EAAK,EAALA,MAAO2D,EAAO,EAAPA,QACzB,OACE,gBAAKyD,MAAO,CACVC,OAAQ,QACRK,QAAS,OACTC,WAAY,SACZC,eAAgB,UAChB,UAEA,SAAC,MAAM,CACL5H,MAAOA,EACP4yC,SAAUjvC,KAIlB,ECiSA,SAAe0W,GA7RD,0CAGZ,WAAaxb,GAAuB,IAAD,EAUhC,OAVgC,gBACjC,cAAMA,IAHSg0C,gBAAkB,GAAE,EAiIrCC,aAAe,SACbjqC,EACAkqC,EACA3F,GAEA2F,GACF,EAAC,EAEDC,YAAc,SAACC,GACbA,GACF,EAAC,EAoGDC,qBAAuB,SAAC9F,GAAiB,MAAc,CACrD+F,eAAgB,gBAAGC,EAAe,EAAfA,gBAAiBvqC,EAAY,EAAZA,aAAckqC,EAAO,EAAPA,QAASE,EAAY,EAAZA,aAAY,OAMrE,iBAAK7rC,MAAO,CAAE+R,QAAS,GAAI,WACzB,SAAC,KAAK,CACJof,YAAY,SACZz4B,MAAO+I,EAAa,GACpByC,SAAU,SAAAqQ,GAAC,OAAIy3B,OACMz0C,IAAnBgd,EAAEV,OAAOnb,MAAsB,CAAC6b,EAAEV,OAAOnb,OAAS,GACnD,EACD88B,aAAc,kBAAM,EAAKkW,aAAajqC,EAAckqC,EAAS3F,EAAU,EACvEhmC,MAAO,CAAE0B,MAAO,IAAK6jC,aAAc,EAAGjlC,QAAS,YAEjD,UAAC,KAAK,YACJ,SAAC,KAAM,CACLhE,KAAK,UACLyI,QAAS,kBAAM,EAAK2mC,aAAajqC,EAAckqC,EAAS3F,EAAU,EAClErtC,MAAM,SAACmtC,GAAA,EAAc,IACrB/sC,KAAK,QACLiH,MAAO,CAAE0B,MAAO,IAAK,qBAIvB,SAAC,KAAM,CACLqD,QAAS,kBAAM,EAAK6mC,YAAYC,EAAa,EAC7C9yC,KAAK,QACLiH,MAAO,CAAE0B,MAAO,IAAK,wBAKrB,EAERuqC,WAAY,SAAChH,GAAiB,OAC5B,SAACa,GAAA,EAAc,CACb9lC,MAAO,CAAEU,MAAOukC,EAAW,eAAY1tC,IACvC,EAEL,EArRC,EAAK20C,UAAY,EAAKA,UAAU/pC,MAAK,WACrC,EAAKsH,YAAc,EAAKA,YAAYtH,MAAK,WACzC,EAAKgqC,aAAe,EAAKA,aAAahqC,MAAK,WAC3C,EAAK1D,MAAQ,CACXsgC,QAAS,GACTrgC,WAAW,EACX0tC,WAAY,EACZC,SAAU,EAAKZ,iBAChB,CACH,CAgOC,OAhOA,wCAED,WAA2B,IAAD,OAElBa,EAAgB,CAAE7vB,YADoB,CAAEyhB,kBAAmB,OAGlD1mC,KAAKC,MAAM8H,QACxB/D,EAAegE,iCAEV+sC,iBAAiBD,GAAe3vB,MAAK,SAACoiB,GAC3C,EAAKlgC,SAAS,CACZutC,WAAYrN,EAAQ//B,OACpB+/B,QAASA,EAAQlhC,MAAM,EAAG,EAAKY,MAAM4tC,UAAUx0C,KAAI,SAAAsnC,GAEjD,OADoB9/B,EAAAA,SAAAA,eAA4B8/B,GAAxCnyB,OAEV,KAEJ,IACG2Q,OAAM,SAAC3f,GACNV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,gDAGN,GACJ,GAAC,+BAED,WACE5E,KAAK+0C,kBACP,GAAC,gCAED,SAAoBr9B,GACd1X,KAAKC,MAAM8H,UAAY2P,EAAc3P,SACvC/H,KAAK+0C,kBAET,GAAC,yBAED,SAAalqC,EAA6B88B,GACxC3nC,KAAKC,MAAM4b,SAAS,YAAD,OAAa8rB,EAAM1G,kBACxC,GAAC,uBAED,YAIU,IAAD,OAJI/yB,EAAM,EAANA,OAAQ8mC,EAAK,EAALA,MAAOC,EAAc,EAAdA,eAKpBhwB,EAAsC,CAC1CyhB,kBAAmB,KACnBx4B,OAAQA,EACR8mC,MAAOA,GAET,QAAuBj1C,IAAnBk1C,EAA8B,CAChC,IAAK,IAAM7qC,KAAO6qC,EAAgB,CAChC,IAAM/zC,EAAQ+zC,EAAe7qC,GAE3B6a,EAAY7a,GADF,eAARA,EACc,WAAOlJ,EAAK,KAETA,CAEvB,CACA+jB,EAAYiwB,cAAgB,MAC9B,CACA,IAAMJ,EAAgB,CAAE7vB,YAAAA,GACTjlB,KAAKC,MAAM8H,QACxB/D,EAAegE,iCAEV+sC,iBAAiBD,GAAe3vB,MAAK,SAACoiB,GAC3C,EAAKlgC,SAAS,CACZkgC,QAASA,EAAQlnC,KAAI,SAAAsnC,GAEnB,OADoB9/B,EAAAA,SAAAA,eAA4B8/B,GAAxCnyB,OAEV,KAEJ,IACG2Q,OAAM,SAAC3f,GACNV,QAAQU,MAAMA,GACd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,yCAGN,GACJ,GAAC,0BAED,SACE8pC,EACAyG,GAEAn1C,KAAKqH,SAAS,CAAEH,WAAW,IAC3B,IAAI3G,EAAQmuC,EAAWjnC,aACT1H,IAAVQ,IACFA,EAAQ,GAEV,IAAIs0C,EAAWnG,EAAWmG,cACT90C,IAAb80C,IACFA,EAAW70C,KAAKiH,MAAM4tC,UAExB,IAAM3mC,EAAS2mC,GAAYt0C,EAAQ,GAC7By0C,EAAQH,EACd/uC,QAAQqZ,MAAM,+BAAD,OAAgC5e,EAAK,QAClD,IAAM00C,EAAkD,CAAC,EACzD,IAAK,IAAMzG,KAAa2G,EACK,OAAvBA,EAAQ3G,KACVyG,EAAezG,GAAa2G,EAAQ3G,GAAW,GAAGjkC,YAGtDvK,KAAK00C,UAAU,CAAExmC,OAAAA,EAAQ8mC,MAAAA,EAAOC,eAAAA,IAChCj1C,KAAKqH,SAAS,CAAEH,WAAW,EAAO2tC,SAAUA,GAC9C,GAAC,oBAcD,WAA4B,IAAD,OACnBtG,EAA2C,EAAC,QAE9CntC,MAAO,mBACPotC,UAAW,mBACRxuC,KAAKs0C,qBAAqB,qBAAkB,QAG/ClzC,MAAO,WACPotC,UAAW,WACRxuC,KAAKs0C,qBAAqB,YAE/B,CACElzC,MAAO,aACPotC,UAAW,YACXnmC,OAAQ,SAACnH,GAAa,OAAayB,EAAUzB,EAAM,GAErD,CACEE,MAAO,aACPotC,UAAW,YACXnmC,OAAQ,SAACnH,GAAa,OAAa8B,EAAU9B,EAAM,IACnD,QAEAE,MAAO,aACPotC,UAAW,aACRxuC,KAAKs0C,qBAAqB,eAAY,QAGzClzC,MAAO,iBACPotC,UAAW,cACXnmC,OAAQ,SAACnH,GAA8B,OAAaqB,EAAUrB,EAAM,GACjElB,KAAKs0C,qBAAqB,gBAE/B,CACElzC,MAAO,gBACPotC,UAAW,aACXnmC,OAAQ,SAACnH,GAAa,OAAakC,EAASlC,EAAM,GAEpD,CACEE,MAAO,sBACPotC,UAAW,mBACXnmC,OAAQ,SAACnH,GAAa,OAAayB,EAAUzB,EAAM,GAErD,CACEE,MAAO,6BACPotC,UAAW,yBACXnmC,OAAQ,SAACnH,GAA8B,OAAaqB,EAAUrB,EAAM,GAEtE,CACEE,MAAO,sBACPotC,UAAW,oBACXnmC,OAAQ,SAACnH,GACP,YAAcnB,IAAVmB,EAKK,GAEA2F,OAAO3F,EAElB,IAIEwtC,EAAa,CACjBuF,gBAAiBj0C,KAAKi0C,gBACtBY,SAAU70C,KAAKiH,MAAM4tC,SACrBO,kBAAkB,EAClBC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAW,SAACC,EAAerkC,GACzB,MAAM,GAAN,OAAUA,EAAM,GAAE,YAAIA,EAAM,GAAE,eAAOqkC,EAAK,WAC5C,EACAA,MAAOx1C,KAAKiH,MAAM2tC,YAGpB,OACE,SAAC,KAAK,CACJpsC,MAAO,CAAEwzB,OAAQ,WACjBuS,QAASA,EACTkH,OAAQ,SAAAC,GAAM,OAAIA,EAAOzU,gBAAgB,EACzCwN,WAAYzuC,KAAKiH,MAAMsgC,QACvBmH,WAAYA,EACZiH,MAAO,SAACD,GACN,MAAO,CACLnoC,QAAS,SAAC1C,GACR,OAAO,EAAKoH,YAAYpH,EAAO6qC,EACjC,EAEJ,EACAhpC,SAAU1M,KAAK20C,aACfpzC,KAAK,QACLq0C,QAAS51C,KAAKiH,MAAMC,WAG1B,KAAC,EA9OW,CAASnF,EAAAA,Y,eCtBV8zC,GAAU,SAAChS,EAAciS,GACpC,IAAIC,EAAUD,EAKd,OAJKC,EAAQC,SAAS,OACpBD,GAAW,KAED,IAAI7G,IAAIrL,EAAMkS,GACfxrC,UACb,EAQa0rC,GAA2B,SAACt6B,GAGzB,IAAD,UACPsN,EAAe,IAAIC,gBAAgBvN,EAASwN,QAC5C+sB,EAAa,IAAIhtB,gBAAgBvN,EAASw6B,KAAK7sB,QAAQ,IAAK,MAElE,OAAO8sB,QAKqB,QALd,EAIU,QAJV,EAGqB,QAHrB,EAEgB,QAFhB,EACY,QADZ,EACZntB,EAAagZ,IAAI,eAAO,QACxBhZ,EAAagZ,IAAI,mBAAW,QAC5BhZ,EAAagZ,IAAI,wBAAgB,QACjCiU,EAAWjU,IAAI,eAAO,QACtBiU,EAAWjU,IAAI,mBAAW,QAC1BiU,EAAWjU,IAAI,iBAEnB,EC3BMoU,GAAa,SAACC,GAClB,IAAIC,EAKJ,GAJiB,OAAbD,IACFC,EAAUD,EAASC,cAGLx2C,IAAZw2C,EAAuB,CACzB,QAAqBx2C,IAAjBw2C,EAAQ51C,WAAwCZ,IAAlBw2C,EAAQj3B,MASxC,MAAO,CACL3e,KAAM41C,EAAQ51C,KACd2e,MAAOi3B,EAAQj3B,OAVjBlX,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,6CASR,MACEwD,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,mCAIN,MAAO,CACLjE,UAAMZ,EACNuf,WAAOvf,EAEX,EAEqBy2C,IAAW,QAG9B,WAAaT,EAAiBtoC,GAAyB,IAAD,4BAF9CgpC,WAAK,OA0DbC,OAAM,yCAAG,gGAYN,GAZeC,EAAQ,EAARA,SAGVC,EAAe,SAACN,GACpB,IAAMx3B,EAAOu3B,GAAWC,GAClBO,EAAa,UAAMP,EAASQ,WAAU,YAAIR,EAASS,cACzC,MAAZJ,GACF7wC,QAAQ6B,KAAK,qDACbgvC,EAAS,CAAE73B,KAAMA,EAAM+3B,cAAeA,KAEtC/wC,QAAQD,KAAK,sDAEjB,GAEIowC,GAAyBthB,OAAOhZ,UAAU,CAAD,gBAKJ,OAAvC7V,QAAQ6B,KAAK,2BAA0B,SAChB,EAAK8uC,MAAMO,iBAAgB,OAClC,OADVV,EAAQ,UAEZxwC,QAAQ6B,KAAK,uBAAwB2uC,GACrCM,EAAaN,IACd,yCAMsB,EAAKG,MAAMQ,UAAS,QAA7B,GACG,QADXX,EAAQ,UACWA,EAASY,QAAO,iBACJ,OAAnCpxC,QAAQ6B,KAAK,uBAAsB,UAC7B,EAAK8uC,MAAMU,iBAAgB,gCAEjCrxC,QAAQ6B,KAAK,uCACbivC,EAAaN,GAAS,4CAG3B,mDAvCK,GAuCL,KAKDc,SAAO,uBAAG,mFACkD,OAA1DtxC,QAAQmwB,IAAI,+CAA8C,SAC7C,EAAKwgB,MAAMY,kBAAiB,mFAC1C,KAKDC,kBAAgB,uBAAG,mGACJ,EAAKb,MAAMQ,UAAU9xB,MAAK,SAACmxB,GACtC,GAAiB,OAAbA,EACF,OAAOA,EAASS,aAEhB3uC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,kCAIR,IAAE,mFACH,KAKDqyC,SAAO,uBAAG,mGACK,EAAKR,MAAMQ,UAAU9xB,MAAK,SAACmxB,GAUtC,OATiB,OAAbA,GACFluC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,uCAICyxC,GAAWC,EACpB,IAAE,mFA1IF,IAAIiB,EAAe,YACQx3C,IAAvB0N,EAAS+pC,WACgB,aAAvB/pC,EAAS+pC,YACXD,EAAe,kBAGnBv3C,KAAKy2C,MAAQ,IAAIgB,GAAAA,YAAY,CAC3BC,UAAWjqC,EAASiqC,UACpBC,UAAWlqC,EAASmqC,SACpBC,aAAc9B,EACd+B,MAAOrqC,EAASqqC,MAChBC,cAAeR,EACfS,cAAc,EACdC,sBAAsB,EACtBC,4BAA4B,EAC5BC,yBAAyB,GAAD,OAAKpC,EAAO,aAEH,MAA/BtoC,EAAS2qC,oBAUXp4C,KAAKy2C,MAAM4B,gBAAgBC,cAAcnzB,MAAK,SAAAnjB,GACT,MAA/ByL,EAAS2qC,qBACXp2C,EAASu2C,qBAAuB9qC,EAAS2qC,mBACzC,EAAK3B,MAAQ,IAAIgB,GAAAA,YAAY,CAC3BC,UAAWjqC,EAASiqC,UACpBC,UAAWlqC,EAASmqC,SACpBC,aAAc9B,EACd+B,MAAOrqC,EAASqqC,MAChBC,cAAeR,EACfS,cAAc,EACdC,sBAAsB,EACtBC,4BAA4B,EAC5BC,yBAAyB,GAAD,OAAKpC,EAAO,WACpC/zC,SAAAA,IAGN,IAAGmkB,OAAM,SAAC3f,GACRV,QAAQU,MACN,qDACAA,EAEJ,GAEJ,I,sBCqBF,SAxF+B,WAOX,IAPY24B,EAA6B,uDAAG,CAC9DqZ,QAAS,EACTC,OAAQ,EACRC,WAAY,IACZC,WAAY,IACZC,WAAW,EACXC,qBAAsB,CAAC,IAAK,MAEtBC,EAAe3Z,EAEE,MAAnBA,EAAQqZ,UACVM,EAAaN,QAAUrZ,EAAQqZ,SAGX,MAAlBrZ,EAAQsZ,SACVK,EAAaL,OAAStZ,EAAQsZ,QAGN,MAAtBtZ,EAAQuZ,aACVI,EAAaJ,WAAavZ,EAAQuZ,YAGV,MAAtBvZ,EAAQwZ,aACVG,EAAaH,WAAaxZ,EAAQwZ,YAGX,MAArBxZ,EAAQyZ,YACVE,EAAaF,UAAYzZ,EAAQyZ,WAGC,MAAhCzZ,EAAQ0Z,uBACVC,EAAaD,qBAAuB1Z,EAAQ0Z,sBAY9C,IAAME,EAAe,SACnBC,EACAh3C,GAEA,IAAQgtC,EAAgBhtC,EAAhBgtC,IAAKiK,EAAWj3C,EAAXi3C,OAgCb,IAAMC,EAAsBF,EAAQG,KAGpC,OAFAH,EAAQG,KA/BR,WACE,IAAMC,EAAYC,GAAMD,UAAUN,GAElCM,EAAUE,SAAQ,SAA2BC,GAC3C,IAAMC,EAA6BR,EAAQS,mBAG3CT,EAAQS,mBAAqB,WAC3B,GAAkC,MAA9BD,EAAoC,CAAC,IAAD,uBADmB/zC,EAAI,yBAAJA,EAAI,gBAE7D+zC,EAA2BrzC,MAAM6yC,EAASvzC,EAC5C,CAEA,GAAIqzC,EAAaD,qBAAqB3yC,SAAS8yC,EAAQU,QAAS,CAC9D,IAAMC,EAAY,6BAAyB3K,EAAG,YACxC4K,EAAqB,IAAIr1C,MAAMo1C,GACrCP,EAAUC,MAAMO,EAClB,CACF,EAGIL,EAAiB,IACnBzzC,QAAQD,KAAK,cAAD,OAAempC,EAAG,yBAAiBuK,EAAc,MAC7DP,EAAQxb,KAAKyb,EAAQjK,GAAK,GAE9B,IAAE,2BAxBkCvpC,EAAI,yBAAJA,EAAI,gBA0BxCyzC,EAAoB/yC,MAAM6yC,EAASvzC,EACrC,EAMOuzC,CACT,EAEA,OAAOD,CACT,ECzGA,IAAQ1W,GAAsBz2B,EAAAA,GAAAA,oBAAAA,kBASTiuC,GAAe,WAKlC,cAII,IAAD,OAJY9D,EAAO,EAAPA,QAAStoC,EAAQ,EAARA,SAAUuzB,EAAO,EAAPA,SAAO,oBAJxB8Y,OAAkB,GAAE,KAEpBC,iBAAW,OAsG5BC,cAAgB,SAACC,GACf,IAAK,IAAMC,KAAKD,EACd,EAAKH,OAAO,GAAGhyC,OAAOqyC,QAAQD,GAAKD,EAAOC,EAE9C,EAAC,KAMDljB,eAAc,yCAAG,WACfmI,GAAsC,0EAElC,EAAK2a,OAAO,GAAG/iB,MAAM,CAAD,+BACT,EAAK+iB,OAAO,GAAGhyC,OAAOkvB,eAAemI,GAAQ,OAIzD,wCAJyD,uBAE7C7U,QAAQE,OACnB,IAAIjmB,MAAM,2BACX,2CAEJ,mDAVa,GAUb,KAEDwwC,iBAAgB,yCAAG,WACjB5V,GAAwC,sFAE3B,EAAK2a,OAAO,GAAGhyC,OAAOitC,iBAAiB5V,GAAQ,mFAC7D,mDAJe,GAIf,KAEDzU,gBAAe,yCAAG,WAChByU,GAAuC,sFAE1B,EAAK2a,OAAO,GAAGhyC,OAAO4iB,gBAAgByU,GAAQ,mFAC5D,mDAJc,GAId,KAEDpa,mBAAkB,yCAAG,WACnBoa,GAA0C,sFAE7B,EAAK2a,OAAO,GAAGhyC,OAAOid,mBAAmBoa,GAAQ,mFAC/D,mDAJiB,GAIjB,KAEDib,sBAAqB,yCAAG,WACtBjb,GAA6C,8FAEV,EAAK2a,OAAO,GAAGhyC,OAAOsyC,sBAAsBjb,GAAQ,OAE/C,OAFlCkb,EAAoB,OACpBC,EAAcjY,GAAkBgY,GACtC/P,GAAAA,SAA4BgQ,GAAY,kBACjCD,GAAoB,2CAC5B,mDAPoB,GAOpB,KAEDxvB,uBAAsB,yCAAG,WACvBsU,GAA8C,8FAEV,EAAK2a,OAAO,GAAGhyC,OAAO+iB,uBAAuBsU,GAAQ,OAElC,OAFjDmJ,EAAqB,OACrBgS,EAAchS,EAAsBjoC,IAAIgiC,IAC9CiI,GAAAA,kBAAqCgQ,GAAa,GAAK,kBAChDhS,GAAqB,2CAC7B,mDAPqB,GAOrB,KAEDiS,yBAAwB,yCAAG,WACzBpb,GAAgD,sFAEnC,EAAK2a,OAAO,GAAGhyC,OAAOyyC,yBAAyBpb,GAAQ,mFACrE,mDAJuB,GAIvB,KAED3Z,iBAAgB,yCAAG,WACjB2Z,GAAwC,kGAEjB,EAAK2a,OAAO,GAAGhyC,OAAO0d,iBAAiB2Z,GAAQ,OAGhB,OAHhD7Z,EAAQ,OACRvN,EAAOnM,EAAAA,GAAAA,aAAAA,SAAiC0Z,GAAS,EACnCzd,EAAAA,SAAAA,eAA4BkQ,EAAK2N,MAA7ClQ,EAAO,EAAPA,QACR80B,GAAAA,aAAgC,CAAC90B,IAAqB,kBAC/C8P,GAAQ,2CAChB,mDARe,GAQf,KAEDk1B,uBAAsB,yCAAG,WACvBrb,GAA8C,sFAEjC,EAAK2a,OAAO,GAAGhyC,OAAO0yC,uBAAuBrb,GAAQ,mFACnE,mDAJqB,GAIrB,KAEDsb,yBAAwB,yCAAG,WACzBtb,GAAgD,sFAEnC,EAAK2a,OAAO,GAAGhyC,OAAO2yC,yBAAyBtb,GAAQ,mFACrE,mDAJuB,GAIvB,KAEDub,+BAA8B,yCAAG,WAC/Bvb,GAAsD,sFAEzC,EAAK2a,OAAO,GAAGhyC,OAAO4yC,+BAA+Bvb,GAAQ,mFAC3E,mDAJ6B,GAI7B,KAEDwb,iBAAgB,yCAAG,WACjBxb,GAAwC,sFAE3B,EAAK2a,OAAO,GAAGhyC,OAAO6yC,iBAAiBxb,GAAQ,mFAC7D,mDAJe,GA1LZn/B,KAAK+5C,YADQ,MAAX/Y,EACiBA,EAEA,SAACx6B,EAAOo0C,GACzB90C,QAAQU,MAAMA,EAAOo0C,EACvB,EAGFntC,EAASpC,SAAQ,SAAAuvC,GAAmB,IAAD,IAW7BC,OAVmB96C,IAAnB66C,GACFxyC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,qDAMqB7E,IAAvB66C,EAAe5L,IACjB6L,EAAaD,EAAe5L,SACKjvC,IAAxB66C,EAAe/W,KACxBgX,EAAahF,GAAQ+E,EAAe/W,KAAMkS,GAE1C3tC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,+DAKN,IAEMk2C,EAAgD,CACpD9L,IAAK6L,GAGDE,GAAmE,IAA3CH,EAAeI,yBAAoC,CAC/EH,EACAD,EAAeK,eACfL,EAAeM,eACfN,EAAeO,gBACft+B,MAXkB,SAACmyB,GAAY,aAAsC,QAAtC,EAAiB,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKI,WAAW,gBAAQ,QAAS,SAa1CrvC,IAAlC66C,EAAeK,iBACjBH,EAAeM,cAAgBR,EAAeK,qBAEVl7C,IAAlC66C,EAAeM,iBACjBJ,EAAeO,cAAgBT,EAAeM,qBAEVn7C,IAAlC66C,EAAeO,iBACjBL,EAAeQ,cAAgBV,EAAeO,gBAG5CJ,IACFD,EAAeX,SAAO,kBACjBW,EAAeX,SAAO,IACzB,0BAA2B,oCAIFp6C,IAAzB66C,EAAevB,QACjByB,EAAeS,aAAe,CAACC,GAAgBZ,EAAevB,SAGhEyB,EAAe3yC,iBAAmB,SAAC3B,GACjC,EAAKuzC,YAAYvzC,EAAOo0C,EAC1B,EAEA,EAAKd,OAAO53C,KAAK,CACf2T,GAAI+kC,EAAe/kC,GACnBkhB,MAA2B,QAAtB,EAAE6jB,EAAe7jB,aAAK,SAC3B0kB,KAAyB,QAArB,EAAEb,EAAea,YAAI,SACzB3zC,OAAQ,IAAI4zC,GAAAA,GAAAA,eAAuBZ,IAEvC,IAEI96C,KAAK85C,OAAOtyC,OAAS,GACvBY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,wCAIR,CAcC,OAdA,6BAED,WACE,OAAO5E,KAAK85C,OAAO,GAAGhyC,OAAOwrC,OAC/B,GAAC,mBAQD,WACE,OAAOtzC,KAAK85C,OAAO,GAAGhyC,OAAOqyC,OAC/B,KAAC,EAjHiC,GCMpC,SAASwB,GAAsB,GAUd,IAAD,IAVmB5zC,EAAO,EAAPA,QAAS+W,EAAI,EAAJA,KAAMC,EAAG,EAAHA,IAAK68B,EAAM,EAANA,OAW7C52B,GAAqBhJ,EAAAA,EAAAA,MAArBgJ,iBAEF8W,IAAuD,QAA/B,EAAE8f,EAAOC,8BAAsB,UACvDh5B,EAAwB,QAAjB,EAAG+4B,EAAO/4B,eAAO,SAC9B,OACE,SAACi5B,GAAU,CACT/zC,QAASA,EACT+W,KAAMA,EACNlJ,YAAagmC,EAAOhmC,YACpBiN,QAASA,EACT9D,IAAKA,EACL+c,sBAAuBA,EACvB9W,iBAAkBA,GAGxB,CAohBA,SAlaS,0CAgDP,WAAa/kB,GAAkB,IAAD,qBAC5B,cAAMA,IAhDS87C,UAAI,IAEJC,oBAAsB,SACrCx1C,EACAo0C,GAEqB,MAAjBp0C,EAAMkzC,OACR,EAAKhD,SACqB,MAAjBlwC,EAAMkzC,QAEftxC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,yDAIN,IAAMq3C,EAAiB,WAErB7zC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,uCAGN,OAEqC7E,IAAjC66C,EAAesB,cACjBtB,EAAesB,cAAc7wC,SAAQ,SAAC8wC,GAChC31C,EAAMkzC,SAAWyC,EAAQzC,OAC3B,EAAKryC,SAAS,CACZb,MAAO,CACLkzC,OAAQlzC,EAAMkzC,OACd30C,QAASo3C,EAAQp3C,WAGK,MAAjByB,EAAMkzC,QACfuC,GAEJ,IAC0B,MAAjBz1C,EAAMkzC,QACfuC,GAEJ,EAAC,EAyHDrF,aAAe,YAGF,IAHK93B,EAAI,EAAJA,KAAM+3B,EAAa,EAAbA,cAItB,IAAK,IAAMzsC,KAAO,EAAKnD,MAAMc,QAAS,CACrB,EAAKd,MAAMc,QAAQqC,GAC3B4vC,cAAc,CAAEoC,cAAevF,GACxC,CACA,IAAMwF,EAAa1nB,OAAO6c,aAAaC,QAAQ,aACzC6K,EAAe3nB,OAAO6c,aAAaC,QAAQ,eACjD,GAAmB,OAAf4K,GAAsC,KAAfA,GAErBA,IADgB1nB,OAAOhZ,SAAS0N,SACJ,CAC9B,IAAIwa,EAAOwY,EACU,OAAjBC,GAA0C,KAAjBA,IAC3BzY,GAAQyY,GAEV3nB,OAAOhZ,SAAS4gC,KAAO1Y,CACzB,CAEFlP,OAAO6c,aAAagL,WAAW,aAC/B7nB,OAAO6c,aAAagL,WAAW,eAC/B,EAAKn1C,SAAS,CAAEyX,KAAMA,GACxB,EA3IEhZ,QAAQ6B,KAAK,kBACb7B,QAAQ6B,KAAK,sBAAD,OAAuB1H,EAAM27C,OAAO/X,KAAI,MACpD,MAA2BlP,OAAOhZ,SAA1BwzB,EAAQ,EAARA,SAAUsN,EAAI,EAAJA,KACZ1G,EAAO,UAAM5G,EAAQ,aAAKsN,GAC1BC,EAAS7G,GAAQ51C,EAAM27C,OAAO/X,KAAMkS,GAEpC4G,EAAe18C,EAAM27C,OAAOgB,UACb78C,IAAjB48C,IACF72C,QAAQ6B,KACN,8CACA1H,EAAM27C,OAAOgB,MAEf,EAAKb,KAAO,IAAIvF,GAAYkG,EAAQC,IAGF,IAAhC18C,EAAM27C,OAAOiB,QAAQr1C,QACvBY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,uCAGNkB,QAAQ6B,KACN,yDACA1H,EAAM27C,OAAOiB,SAGf,EAAKjL,sBAAwB,EAAKA,sBAAsBjnC,MAAK,WAE7D5F,EAAAA,GAAAA,OAAe,CAAEiC,SAAU,IAC3B,EAAK81C,gCAAgC78C,EAAM27C,QAE3C,IAAMrI,EApMV,SAA6B,GAQmB,IARfwC,EAAO,EAAPA,QAASgH,EAAU,EAAVA,WAAYtvC,EAAQ,EAARA,SAAUuzB,EAAO,EAAPA,QASxDgc,EAAiD,CAAE3J,QAAS,GAC5DrwB,EAA4D,CAAC,EA6CnE,IAAK,IAAM5Y,KA3CXqD,EAASpC,SAAQ,SAAAuvC,GACf,GAAqC,MAAjCA,EAAeqC,eACjBrC,EAAeqC,eAAe5xC,SAAQ,SAAAkkB,GAChCvR,OAAO1Q,OAAetJ,GAAgBkC,SAASqpB,GAC7CA,KAAeytB,EACjBA,EAAoBztB,IAAgB,EAEpCytB,EAAoBztB,GAAe,EAGrCzpB,QAAQD,KACN,iCAA0B0pB,EAAW,iDACXqrB,EAAe/kC,GAAE,KAGjD,QACK,CACL,GAAI8e,OAAOhZ,SAAS0N,SAASnjB,SAAS,cAAe,CACnD,IAAMmjB,EAAWsL,OAAOhZ,SAAS0N,SAAS5mB,MAAM,WAAW,GACrDy6C,EAAO,UAAMH,GAAU,OAAG1zB,EAAQ,aACxCuxB,EAAe5L,IAAMkO,CACvB,CAEAF,EAAoB3J,SAAW,EAC/BrwB,EAAcqwB,QAAU,IAAIwG,GAAgB,CAC1C9D,QAAAA,EACAtoC,SAAU,CAACmtC,GACX5Z,QAAAA,GAEJ,CACF,IAEIgc,EAAoB3J,QAAU,GAChCjrC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,wFAMYo4C,EACJ,YAAR5yC,GAGA4yC,EAAoB5yC,GAAO,GAC7BhC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,iEAAgE,yBAC9CwF,EAAG,oCACrB,+BA0BR,OApBI4T,OAAOC,KAAK++B,GAAqBx1C,OAAS,GAC5CiG,EAASpC,SAAQ,SAAA8xC,GACf,IAAMr1C,EAAS,IAAI+xC,GAAgB,CACjC9D,QAAAA,EACAtoC,SAAU,CAAC0vC,GACXnc,QAAAA,IAE2B,MAAzBmc,EAAOF,gBACTE,EAAOF,eAAe5xC,SAAQ,SAAAkkB,GAC5BvM,EAAcuM,GAAeznB,CAC/B,GAEJ,IAGFkW,OAAO1Q,OAAOtJ,GAAgBqH,SAAQ,SAAAkkB,GAC9BA,KAAevM,IACnBA,EAAcuM,GAAevM,EAAcqwB,QAE/C,IACOrwB,CACT,CAuG2Bo6B,CAAqB,CAC1CrH,QAAAA,EACAgH,WAAmC,QAAzB,EAAE98C,EAAM27C,OAAOmB,kBAAU,QAAI,uCACvCtvC,SAAUxN,EAAM27C,OAAOiB,QACvB7b,QAAS,EAAKgb,sBAQf,OALD,EAAK/0C,MAAQ,CACXc,QAASwrC,EACTA,eAAAA,EACArsC,WAAW,EACXm2C,mBAAmB,GACpB,CACH,CA8TC,OA9TA,uDAED,SAAiCzB,GAC/B,IAAM0B,EAAW,kCAEXtO,EADY,IAAI9lB,gBAAgByL,OAAOhZ,SAASwN,QAChC8Y,IAAI,YAIWliC,IAHA67C,EAAOiB,QAAQl2C,MAClD,SAACw2C,GAAM,OAAKA,EAAOtnC,KAAOynC,CAAQ,KAE6B,kBAARtO,GACvD4M,EAAOiB,QAAQ36C,KAAK,CAClB2T,GAAIynC,EACJvmB,OAAO,EACPiY,IAAAA,EACAiO,eAAgB,CACdj5C,EAAeu5C,iBACfv5C,EAAeqwB,oBACfrwB,EAAeqnB,aACfrnB,EAAeymB,kCACfzmB,EAAe2nB,eACf3nB,EAAe8gB,qCACf9gB,EAAew5C,kCACfx5C,EAAey5C,sCACfz5C,EAAe05C,0CAIvB,GAAC,mCAED,YAAwD,IAA/B1O,EAAG,EAAHA,IAEvB,GADAlpC,QAAQ6B,KAAK,2BAA4BqnC,GAC7B,KAARA,GAA4E,YAA9Dra,OAAO6c,aAAaC,QAAQ,8BAA9C,CAIA9c,OAAO6c,aAAaK,QAAQ,uBAAwB7C,GACpD,IAAM2O,EAAY,IAAI9D,GAAgB,CACpC9D,QAAS,GACTtoC,SAAU,CAAC,CACToI,GAAI,MACJm5B,IAAAA,EACAyM,MAAM,EACN1kB,OAAO,IAETiK,QAAShhC,KAAKg8C,sBAEhB2B,EAAU3D,cAAch6C,KAAKiH,MAAMc,QAAQsrC,QAAQ8G,SAMnDn6C,KAAKqH,UAAS,SAAAJ,GACZ,IAAMc,EAA8C,CAAC,EACrD,IAAK,IAAMqC,KAAOnD,EAAMc,QACtBA,EAAQqC,GAAOuzC,EAEjB,MAAO,CAAE51C,QAAAA,EACX,GAxBA,MAFE/H,KAAKqH,SAAS,CAAEU,QAAS/H,KAAKiH,MAAMssC,gBA2BxC,GAEA,oBAkCA,WAAiB,IAAD,YACIxzC,IAAdC,KAAK+7C,MACPj2C,QAAQ6B,KAAK,uBACb3H,KAAK+7C,KAAKrF,OAAO,CAAEC,SAAU32C,KAAK42C,eAAgBzxB,MAAK,WACrDrf,QAAQ6B,KAAK,0BACb,EAAKN,SAAS,CACZH,WAAW,EACXm2C,mBAAmB,GAEvB,IAAGl3B,OAAM,SAAC3f,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,4BAEJ,EAAKyC,SAAS,CACZH,WAAW,EACX02C,gBAAY79C,EACZs9C,mBAAmB,GAEvB,KAEAr9C,KAAKqH,SAAS,CACZH,WAAW,EACX02C,gBAAY79C,EACZs9C,mBAAmB,GAGzB,GAAC,+BAED,WACE,IAAMxZ,EAAOlP,OAAO6c,aAAaC,QAAQ,aAC5B,OAAT5N,GAA0B,KAATA,IACnBlP,OAAO6c,aAAaK,QAAQ,YAAald,OAAOhZ,SAAS0N,UACzDsL,OAAO6c,aAAaK,QAAQ,cAAeld,OAAOhZ,SAASwN,SAI7D,IAAMooB,EAAkB5c,OAAO6c,aAAaC,QAAQ,wBAC5B,OAApBF,GAAgD,KAApBA,GAC9BvxC,KAAK4xC,sBAAsB,CAAE5C,IAAKuC,IAGpCvxC,KAAK02C,QACP,GAAC,oBAED,WAA4B,IAAD,IAgBrBmH,EAhBqB,OACnBC,EAAU,CACdn9C,KAAMX,KAAKC,MAAMU,KACjBgvC,QAAS3vC,KAAKC,MAAM0vC,QACpBE,SAAU7vC,KAAKC,MAAM4vC,SACrBrvC,IAAK,iCACLu9C,aAAc/9C,KAAKC,MAAM27C,OAAOmC,cAG5BC,IAC6B,QADZ,EACrBh+C,KAAKC,MAAM27C,OAAOqC,uBAAe,UAE7BC,EACmC,QADd,EACzBl+C,KAAKC,MAAM27C,OAAOsC,6BAAqB,SAKvCL,EADEG,GACS,SAAC,GAAQ,CAACj2C,QAAS/H,KAAKiH,MAAMc,WAE9B,yDAGb,IACIo2C,EADAC,GAAmB,EAIK,MAA1Bp+C,KAAKC,MAAM27C,OAAOgB,MAC2B,MAA7C58C,KAAKC,MAAM27C,OAAOgB,KAAKxE,oBAEvB+F,EAAW,WACQ,MAAb,EAAKpC,MAEP,EAAKA,KAAK3E,SAEd,EACAgH,GAAmB,IAEnBD,EAAW,WAAO,EAClBC,GAAmB,GAGrB,IAAMC,EAAc,CAAE51C,OAAQ,SACxB61C,EAAqB,CAAE71C,OAAQ,QAErC,YAA8B1I,IAA1BC,KAAKiH,MAAM22C,YAEX,SAAC,KAAa,CAACW,SAAUv+C,KAAKC,MAAM27C,OAAO/X,KAAK,UAC9C,SAAC,KAAQ,CAAC8O,GAAI3yC,KAAKiH,MAAM22C,WAAYt0B,SAAO,MAGvCtpB,KAAKiH,MAAMC,WAElB,SAAC,KAAa,CAACq3C,SAAUv+C,KAAKC,MAAM27C,OAAO/X,KAAK,UAC9C,UAAC,IAAM,CAACr7B,MAAO61C,EAAY,WACzB,SAAC,GAAM,CACLt/B,IAAK++B,EACLh/B,KAAM9e,KAAKiH,MAAM6X,KACjB4zB,oBAAoB,EACpBZ,kBAAmB9xC,KAAK4xC,sBACxBuB,2BAA2B,EAC3BprC,QAAS/H,KAAKiH,MAAMc,QACpBwrC,eAAgBvzC,KAAKiH,MAAMssC,kBAE7B,SAAC,YAAc,CAAC/qC,MAAO81C,EAAmB,UACxC,SAAC,MAAS,WAKRt+C,KAAKiH,MAAMo2C,kBAIQ,MAApBr9C,KAAKiH,MAAMT,OAElB,SAAC,GAAQ,CAAC1B,KAAK,QAAQC,QAAS/E,KAAKiH,MAAMT,MAAMzB,WAIjD,SAAC,KAAa,CAACw5C,SAAUv+C,KAAKC,MAAM27C,OAAO/X,KAAK,UAC9C,UAAC,KAAM,YACL,SAAC,KAAK,CACJA,KAAK,IACLC,SACE,UAAC,IAAM,CAACt7B,MAAO61C,EAAY,WACzB,SAAC,GAAM,CACLt/B,IAAK++B,EACLh/B,KAAM9e,KAAKiH,MAAM6X,KACjB4zB,oBAAoB,EACpBZ,kBAAmB9xC,KAAK4xC,sBACxBQ,aAAcgM,EAAmBD,OAAWp+C,EAC5CozC,0BAA2B+K,EAC3Bn2C,QAAS/H,KAAKiH,MAAMc,QACpBwrC,eAAgBvzC,KAAKiH,MAAMssC,kBAE7B,SAAC,YAAc,CAAC/qC,MAAO81C,EAAmB,SACvCT,UAKT,SAAC,KAAK,CACJha,KAAK,+BACLC,SACE,UAAC,IAAM,CAACt7B,MAAO61C,EAAY,WACzB,SAAC,GAAM,CACLt/B,IAAK++B,EACLh/B,KAAM9e,KAAKiH,MAAM6X,KACjB4zB,mBAAoBsL,EACpBlM,kBAAmB9xC,KAAK4xC,sBACxBQ,aAAcgM,EAAmBD,OAAWp+C,EAC5CozC,0BAA2B+K,EAC3Bn2C,QAAS/H,KAAKiH,MAAMc,QACpBwrC,eAAgBvzC,KAAKiH,MAAMssC,kBAE7B,SAAC,YAAc,CAAC/qC,MAAO81C,EAAmB,UACxC,SAAC3C,GAAsB,CACrB5zC,QAAS/H,KAAKiH,MAAMc,QACpB+W,KAAM9e,KAAKiH,MAAM6X,KACjB88B,OAAQ57C,KAAKC,MAAM27C,OACnB78B,IAAK++B,YAMf,SAAC,KAAK,CACJja,KAAK,6GACLC,SACE,UAAC,IAAM,CAACt7B,MAAO61C,EAAY,WACzB,SAAC,GAAM,CACLt/B,IAAK++B,EACLh/B,KAAM9e,KAAKiH,MAAM6X,KACjB4zB,mBAAoBsL,EACpBlM,kBAAmB9xC,KAAK4xC,sBACxBQ,aAAcgM,EAAmBD,OAAWp+C,EAC5CozC,0BAA2B+K,EAC3Bn2C,QAAS/H,KAAKiH,MAAMc,QACpBwrC,eAAgBvzC,KAAKiH,MAAMssC,kBAE7B,SAAC,YAAc,CAAC/qC,MAAO81C,EAAmB,UACxC,SAAC3C,GAAsB,CACrB5zC,QAAS/H,KAAKiH,MAAMc,QACpB+W,KAAM9e,KAAKiH,MAAM6X,KACjB88B,OAAQ57C,KAAKC,MAAM27C,OACnB78B,IAAK++B,YAMf,SAAC,KAAK,CACJja,KAAK,UACLC,SACE,UAAC,IAAM,CAACt7B,MAAO61C,EAAY,WACzB,SAAC,GAAM,CACLt/B,IAAK++B,EACLh/B,KAAM9e,KAAKiH,MAAM6X,KACjB4zB,oBAAoB,EACpBZ,kBAAmB9xC,KAAK4xC,sBACxBQ,aAAcgM,EAAmBD,OAAWp+C,EAC5CozC,0BAA2B+K,EAC3Bn2C,QAAS/H,KAAKiH,MAAMc,QACpBwrC,eAAgBvzC,KAAKiH,MAAMssC,iBAC3B,wBA7FZ,SAAC,GAAQ,CAACzuC,KAAK,QAAQC,QAAQ,mBAsGrC,KAAC,EA/ZM,CAAShD,EAAAA,U","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","utils/PubSub.js","utils/CustomError.js","services/NotificationMiddleware.js","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","utils/router.tsx","components/ColorSettingsMenu.tsx","components/AnnotationCategoryItem.tsx","components/AnnotationCategoryList.tsx","components/HoveredRoiTooltip.tsx","services/RoiToAnnotationAdapter.ts","utils/generateReport.ts","components/SlideViewer.tsx","data/slides.tsx","services/fetchImageMetadata.ts","hooks/useSlides.ts","components/CaseViewer.tsx","components/DicomTagBrowser/dicomTagUtils.ts","utils/formatDicomDate.ts","utils/pubSubServiceInterface.ts","utils/createSeriesMetadata.ts","utils/createStudyMetadata.ts","services/DICOMMetadataStore.ts","hooks/useDebounce.ts","components/DicomTagBrowser/DicomTagBrowser.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Sex',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","// Use symbols to prevent exposing private attributes\nconst _subscriptions = Symbol('subscriptions')\nconst _lastSubscriptionId = Symbol('lastSubscriptionId')\n\n/**\n * Class to enable implementation of publish/subscribe pattern\n * @class\n * @classdesc Enables publishing/subscribing\n */\nexport default class PubSub {\n  constructor () {\n    this[_subscriptions] = {}\n    this[_lastSubscriptionId] = 0\n  }\n\n  /**\n   * Adds a subscription callback to the provided event name\n   * @param {string} eventName Event name that will trigger the callback\n   * @param {Function} callback Function to be executed when event is published\n   * @returns {void}\n   */\n  subscribe (eventName, callback) {\n    if (eventName === undefined) {\n      throw new Error('Trying to subscribe to an inexistent event')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('The provided callback must be a function')\n    }\n\n    if (!this[_subscriptions].hasOwnProperty(eventName)) {\n      this[_subscriptions][eventName] = {}\n    }\n\n    const subscriptionId = `sub${this[_lastSubscriptionId]++}`\n    this[_subscriptions][eventName][subscriptionId] = callback\n  }\n\n  /**\n   * Removes a subscription callback for the provided event name\n   * @param {string} eventName Event name for the registerd callback\n   * @param {Function} [callback] Function to have its subscription removed\n   * @returns {void}\n   */\n  unsubscribe (eventName, callback) {\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      if (!callback) {\n        delete callbacks[subscriptionId]\n      } else if (callbacks[subscriptionId] === callback) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n\n  /**\n   * Trigger all registered subscription callbacks for a specific event name\n   * @param {String} eventName Event name to trigger subscriptions from\n   * @param {any} [payload] Payload that will be passed to the callback fuction\n   * @returns {void}\n   */\n  publish (eventName, ...payload) {\n    if (eventName === undefined) {\n      throw new Error('Trying to publish an inexistent event')\n    }\n\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      callbacks[subscriptionId](...payload)\n    }\n  }\n\n  /**\n   * Cleares all subscriptions for current instance\n   * @returns {void}\n   */\n  unsubscribeFromAll () {\n    for (const eventName in this[_subscriptions]) {\n      const callbacks = this[_subscriptions][eventName]\n      for (const subscriptionId in callbacks) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n}\n","const errorTypes = {\n  AUTHENTICATION: 'Authentication',\n  COMMUNICATION: 'Communication',\n  ENCODINGANDDECODING: 'EncodingDecoding',\n  VISUALIZATION: 'Visualization'\n}\n\nclass CustomError extends Error {\n  constructor (type, message) {\n    super()\n    this.message = message\n    this.stack = new Error().stack\n    this.type = type\n  }\n}\n\nexport { errorTypes, CustomError }\n","import PubSub from '../utils/PubSub'\nimport { notification } from 'antd'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nexport const NotificationMiddlewareEvents = {\n  OnError: 'onError',\n  OnWarning: 'onWarning'\n}\n\nexport const NotificationMiddlewareContext = {\n  DICOMWEB: 'dicomweb-client',\n  DMV: 'dicom-microscopy-viewer',\n  DCMJS: 'dcmjs',\n  SLIM: 'slim',\n  AUTH: 'authentication'\n}\n\nconst NotificationType = {\n  TOAST: 'toast',\n  CONSOLE: 'console'\n}\n\n/* Sources of Error:\n  1. 'dicomweb-client': Error while requesting/fetching data, tagged as 'Communication'\n  2. 'slim' and 'dicom-microscopy-viewer' library: Error related to dicom data encoding/decoding,\n  could directly/indirectly impact image-related visualization, tagged as 'Visualization' or\n  'Encoding/Decoding' accordingly\n  3. 'dcmjs' library: Data parsing error, tagged as 'DICOMError'\n  4. 'authentication': Error during user authentication, tagged as 'Authentication'\n  */\nconst NotificationSourceDefinition = {\n  sources: [\n    {\n      category: errorTypes.AUTHENTICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.COMMUNICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.VISUALIZATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.ENCODINGANDDECODING,\n      notificationType: NotificationType.CONSOLE\n    },\n    {\n      category: 'Warning',\n      notificationType: NotificationType.TOAST\n    }\n  ]\n}\n\nclass NotificationMiddleware extends PubSub {\n  constructor () {\n    super()\n\n    const outerContext = (args) => {\n      this.publish(NotificationMiddlewareEvents.OnWarning, Array.from(args).join(' '))\n    }\n\n    (function () {\n      const warn = console.warn\n      console.warn = function () {\n        if (!JSON.stringify(arguments).includes('request')) {\n          outerContext(arguments)\n        }\n        warn.apply(this, Array.prototype.slice.call(arguments))\n      }\n    }())\n  }\n\n  /**\n   * Error handling middleware function\n   *\n   * @param source - source of error - dicomweb-client, dmv, dcmjs or slim itself\n   * @param error - error object\n   */\n  onError (source, error) {\n    const errorCategory = error.type\n    const sourceConfig = NotificationSourceDefinition.sources.find(\n      s => s.category === errorCategory\n    )\n\n    const { notificationType } = sourceConfig\n\n    this.publish(NotificationMiddlewareEvents.OnError, {\n      source,\n      error\n    })\n\n    let notificationMsg\n    if (error instanceof CustomError) {\n      notificationMsg = error.message\n    } else {\n      notificationMsg = String(error)\n    }\n\n    switch (notificationType) {\n      case NotificationType.TOAST:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        return notification.error({\n          message: `${errorCategory} error`,\n          description: notificationMsg,\n          duration: 3\n        })\n\n      case NotificationType.CONSOLE:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        break\n\n      default:\n    }\n  }\n}\n\nexport default new NotificationMiddleware()\n","import React from 'react'\nimport { FaSpinner, FaExclamationTriangle } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Tooltip } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          disableInteractions: true,\n          metadata,\n          resizeFactor: 1,\n          errorInterceptor: (error: CustomError) => {\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.DMV,\n              error\n            )\n          }\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n\n    const attributes = []\n    const description = this.props.slide.description\n    if (description !== null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ position: 'relative', height: '100px' }}>\n            {this.props.slide.overviewImages.length > 0\n              ? (\n                <div ref={this.overviewViewportRef} style={{ height: '100%' }} />\n                )\n              : (\n                <div style={{\n                  height: '100%',\n                  textAlign: 'center',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  fontSize: '1.5rem',\n                  fontWeight: 300,\n                  color: '#8F9BA8',\n                  letterSpacing: '0.1em'\n                }}\n                >\n                  SM\n                </div>\n                )}\n            {this.props.slide.volumeImages.length <= 1 && (\n              <Tooltip title='This slide is missing a multi-resolution pyramid. Display and performance may be degraded.'>\n                <FaExclamationTriangle style={{\n                  position: 'absolute',\n                  top: 4,\n                  right: 4,\n                  color: '#e69500', // slightly darker for more pop\n                  fontSize: '1.3em',\n                  zIndex: 2,\n                  textShadow: '0 2px 6px rgba(0,0,0,0.25), 0 0px 2px #fff'\n                }}\n                />\n              </Tooltip>\n            )}\n          </div>\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: (uid: string) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection(object.key)\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\n// Helper function components\nfunction AnnotationGroupControls ({\n  isVisible,\n  onVisibilityChange,\n  settings\n}: {\n  isVisible: boolean\n  onVisibilityChange: (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => void\n  settings: React.ReactNode\n}): React.ReactElement {\n  return (\n    <Space direction='vertical' align='end'>\n      <Switch\n        size='small'\n        onChange={onVisibilityChange}\n        checked={isVisible}\n        checkedChildren={<FaEye />}\n        unCheckedChildren={<FaEyeSlash />}\n      />\n      <Popover\n        placement='left'\n        content={settings}\n        overlayStyle={{ width: '350px' }}\n        title='Display Settings'\n      >\n        <Button type='primary' shape='circle' icon={<SettingOutlined />} />\n      </Popover>\n    </Space>\n  )\n}\n\nfunction AnnotationGroupBadgeDescription ({\n  isBadgeVisible,\n  color,\n  label,\n  attributes\n}: {\n  isBadgeVisible: boolean\n  color: string\n  label: string\n  attributes: Array<{ name: string, value: string }>\n}): React.ReactElement {\n  return (\n    <Badge\n      offset={[-20, 20]}\n      count={' '}\n      style={{\n        borderStyle: 'solid',\n        borderWidth: '1px',\n        borderColor: 'gray',\n        visibility: isBadgeVisible ? 'visible' : 'hidden',\n        backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n      }}\n    >\n      <Description\n        header={label}\n        attributes={attributes}\n        selectable\n        hasLongValues\n      />\n    </Badge>\n  )\n}\n\n// Interfaces\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onAnnotationGroupClick: (annotationGroupUID: string) => void\n  onVisibilityChange: ({\n    annotationGroupUID,\n    isVisible\n  }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({\n    uid,\n    styleOptions\n  }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n// Class\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<\nAnnotationGroupItemProps,\nAnnotationGroupItemState\n> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleMeasurementSelection =\n      this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange = (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color,\n          limitValues: this.state.currentStyle.limitValues\n        }\n      })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange (value: number | null): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState((state) => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [value, this.state.currentStyle.limitValues[1]]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (value: number | null): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState((state) => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [this.state.currentStyle.limitValues[0], value]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (values: number[]): void {\n    this.setState((state) => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      uid: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleAnnotationGroupClick = (): void => {\n    this.props.onAnnotationGroupClick(this.props.annotationGroup.uid)\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value != null && option.children != null) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState((state) => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState((state) => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      (item) => item.AnnotationGroupUID === this.props.annotationGroup.uid\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      },\n      {\n        name: 'Annotation coordinate type',\n        value: this.props.metadata.AnnotationCoordinateType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const measurementOptions = measurementsSequence.map(\n      (measurementItem) => {\n        const name = measurementItem.ConceptNameCodeSequence[0]\n        const key = `${name.CodingSchemeDesignator}-${name.CodeValue}`\n        return (\n          <Select.Option\n            key={key}\n            value={key}\n            dropdownMatchSelectWidth={false}\n            size='small'\n            disabled={!this.props.isVisible}\n          >\n            {name.CodeMeaning}\n          </Select.Option>\n        )\n      }\n    )\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        <></>\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues != null) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>Values of interest</Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>Exploration</Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>Measurement</Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible =\n      this.state.isVisible && this.state.currentStyle.measurement == null\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        onClick={this.handleAnnotationGroupClick}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <AnnotationGroupControls\n              isVisible={this.props.isVisible}\n              onVisibilityChange={this.handleVisibilityChange}\n              settings={settings}\n            />\n          </div>\n          <AnnotationGroupBadgeDescription\n            isBadgeVisible={isBadgeVisible}\n            color={color}\n            label={this.props.annotationGroup.label}\n            attributes={attributes}\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu, Switch } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupClick: (annotationGroupUID: string) => void\n  onAnnotationGroupVisibilityChange: ({\n    annotationGroupUID,\n    isVisible\n  }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({\n    uid,\n    styleOptions\n  }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<\nAnnotationGroupListProps,\nunknown\n> {\n  handleVisibilityChange = (checked: boolean): void => {\n    if (checked) {\n      this.props.annotationGroups.forEach((annotationGroup) => {\n        this.props.onAnnotationGroupVisibilityChange({\n          annotationGroupUID: annotationGroup.uid,\n          isVisible: checked\n        })\n      })\n      return\n    }\n\n    this.props.visibleAnnotationGroupUIDs.forEach((annotationGroupUID) => {\n      this.props.onAnnotationGroupVisibilityChange({\n        annotationGroupUID,\n        isVisible: checked\n      })\n    })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          onAnnotationGroupClick={this.props.onAnnotationGroupClick}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <>\n        <div\n          style={{\n            paddingLeft: '14px',\n            paddingTop: '7px',\n            paddingBottom: '7px'\n          }}\n        >\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleAnnotationGroupUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu selectable={false}>{items}</Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.ENCODINGANDDECODING,\n        'Content item \"Imaging Measurements\" not found.' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\".'\n      )\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Tracking Unique Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Finding\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Image Region\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: any\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Content item \"Image Region\" has unknown graphic type ' +\n            `\"${regionItem.GraphicType}\". ` +\n            'Content of Comprehensive 3D SR document is not structured ' +\n            'based on TID 1500 \"Measurement Report\" -> ' +\n            'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n          )\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen UID\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Container Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number | null\n  ): void {\n    if (value != null) {\n      const identifier = this.props.opticalPath.identifier\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { opacity: value }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          color: state.currentStyle.color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: value,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    try {\n      specimenDescriptions.forEach(description => {\n        const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] =\n          description.SpecimenPreparationSequence ?? []\n        specimenPreparationSteps.forEach(\n          (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n            step.SpecimenPreparationStepContentItemSequence.forEach((\n              item: (\n                dcmjs.sr.valueTypes.CodeContentItem |\n                dcmjs.sr.valueTypes.TextContentItem |\n                dcmjs.sr.valueTypes.UIDRefContentItem |\n                dcmjs.sr.valueTypes.PNameContentItem |\n                dcmjs.sr.valueTypes.DateTimeContentItem\n              ),\n              index: number\n            ) => {\n              const name = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptNameCodeSequence[0].CodeValue,\n                schemeDesignator:\n                    item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n              })\n              if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n                item = item as dcmjs.sr.valueTypes.CodeContentItem\n                const value = new dcmjs.sr.coding.CodedConcept({\n                  value: item.ConceptCodeSequence[0].CodeValue,\n                  schemeDesignator:\n                      item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                  meaning: item.ConceptCodeSequence[0].CodeMeaning\n                })\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: value.CodeMeaning\n                    })\n                  }\n                }\n              } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n                item = item as dcmjs.sr.valueTypes.TextContentItem\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: item.TextValue\n                    })\n                  }\n                }\n              }\n            })\n          }\n        )\n      })\n    } catch (error: any) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DCMJS,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          error.message\n        )\n      )\n    }\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        mappingUID: this.props.mapping.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: value\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({ currentStyle: { opacity: value } })\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","import React from 'react'\nimport { Checkbox, Col, Divider, InputNumber, Row, Slider } from 'antd'\n\ninterface ColorSettingsMenuProps {\n  annotationGroupsUIDs: string[]\n  defaultStyle: {\n    opacity: number\n    color: number[]\n    contourOnly: boolean\n  }\n  onStyleChange: Function\n}\n\ninterface ColorSettingsMenuState {\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    contourOnly: boolean\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass ColorSettingsMenu extends React.Component<\nColorSettingsMenuProps,\nColorSettingsMenuState\n> {\n  constructor (props: ColorSettingsMenuProps) {\n    super(props)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        contourOnly: this.props.defaultStyle.contourOnly\n      }\n    }\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: this.state.currentStyle.color,\n            opacity: value,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n      this.updateCurrentStyle({ opacity: value })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleShowOutlineOnly (value: boolean): void {\n    this.updateCurrentStyle({ contourOnly: value })\n\n    this.props.annotationGroupsUIDs.forEach((uid) => {\n      this.props.onStyleChange({\n        uid,\n        styleOptions: {\n          color: this.state.currentStyle.color,\n          opacity: this.state.currentStyle.opacity,\n          contourOnly: value\n        }\n      })\n    })\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  updateCurrentStyle ({\n    color,\n    opacity,\n    contourOnly\n  }: {\n    color?: number[]\n    opacity?: number\n    contourOnly?: boolean\n  }): void {\n    this.setState((state) => ({\n      currentStyle: {\n        opacity: opacity ?? state.currentStyle.opacity,\n        color: color ?? state.currentStyle.color,\n        contourOnly: contourOnly ?? state.currentStyle.contourOnly\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    return (\n      <div>\n        {colorSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Checkbox\n            value={this.state.currentStyle.contourOnly}\n            onChange={(event) =>\n              this.handleShowOutlineOnly(event.target.checked)}\n          >\n            Show outline only\n          </Checkbox>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default ColorSettingsMenu\n","import React from 'react'\nimport { Menu, Space, Checkbox, Tooltip, Popover, Button } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { Category, Type } from './AnnotationCategoryList'\nimport ColorSettingsMenu from './ColorSettingsMenu'\n\nconst AnnotationCategoryItem = ({\n  category,\n  onChange,\n  checkedAnnotationUids,\n  onStyleChange,\n  defaultAnnotationStyles,\n  ...props\n}: {\n  category: Category\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const { types } = category\n\n  const onCheckCategoryChange = (e: any): void => {\n    const isVisible = e.target.checked\n    types.forEach((type: Type) => {\n      handleChangeCheckedType({ type, isVisible })\n    })\n  }\n\n  const checkAll = types.every((type: Type) =>\n    type.uids.every((uid: string) => checkedAnnotationUids.has(uid))\n  )\n  const indeterminate =\n    !checkAll &&\n    types.some((type: Type) =>\n      type.uids.some((uid: string) => checkedAnnotationUids.has(uid))\n    )\n\n  const handleChangeCheckedType = ({\n    type,\n    isVisible\n  }: {\n    type: Type\n    isVisible: boolean\n  }): void => {\n    type.uids.forEach((uid: string) => {\n      onChange({ roiUID: uid, isVisible })\n    })\n  }\n\n  return (\n    <Menu.Item\n      style={{ height: '100%', paddingLeft: '3px' }}\n      {...props}\n    >\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px', color: 'black' }}>\n          <Space direction='vertical' align='end'>\n            <Checkbox\n              indeterminate={indeterminate}\n              checked={checkAll}\n              onChange={onCheckCategoryChange}\n            >\n              <Tooltip\n                title={`${category.CodeValue}:${category.CodingSchemeDesignator}`}\n                mouseEnterDelay={1}\n              >\n                {category.CodeMeaning}\n              </Tooltip>\n              <Popover\n                placement='topLeft'\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n                content={() => (\n                  <ColorSettingsMenu\n                    annotationGroupsUIDs={types.reduce(\n                      (acc: string[], type) => {\n                        return [...acc, ...type.uids]\n                      },\n                      []\n                    )}\n                    onStyleChange={onStyleChange}\n                    defaultStyle={\n                      defaultAnnotationStyles[types[0].uids[0]]\n                    }\n                  />\n                )}\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  style={{ marginLeft: '10px' }}\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Checkbox>\n          </Space>\n          {types.map((type: Type) => {\n            const { CodeMeaning, CodingSchemeDesignator, CodeValue, uids } =\n              type\n            const shortenedCodeMeaning = CodeMeaning.slice(0, 22)\n            const displayCodeMeaning = shortenedCodeMeaning === CodeMeaning ? CodeMeaning : `${shortenedCodeMeaning}...`\n            const isChecked = uids.every((uid: string) =>\n              checkedAnnotationUids.has(uid)\n            )\n            const indeterminateType =\n              !isChecked &&\n              uids.some((uid: string) => checkedAnnotationUids.has(uid))\n            return (\n              <div\n                key={`${type.CodingSchemeDesignator}:${type.CodeMeaning}`}\n                style={{\n                  paddingLeft: '25px',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'row'\n                }}\n              >\n                <Checkbox\n                  indeterminate={indeterminateType}\n                  checked={isChecked}\n                  onChange={(e: any) =>\n                    handleChangeCheckedType({\n                      type,\n                      isVisible: e.target.checked\n                    })}\n                />\n                <div style={{ paddingLeft: '5px' }}>\n                  <Tooltip\n                    title={`${CodeValue}:${CodingSchemeDesignator}`}\n                    mouseEnterDelay={1}\n                  >\n                    {displayCodeMeaning}\n                  </Tooltip>\n                  <Popover\n                    placement='topLeft'\n                    overlayStyle={{ width: '350px' }}\n                    title='Display Settings'\n                    content={() => (\n                      <ColorSettingsMenu\n                        annotationGroupsUIDs={type.uids}\n                        onStyleChange={onStyleChange}\n                        defaultStyle={defaultAnnotationStyles[type.uids[0]]}\n                      />\n                    )}\n                  >\n                    <Button\n                      type='primary'\n                      shape='circle'\n                      style={{ marginLeft: '10px' }}\n                      icon={<SettingOutlined />}\n                    />\n                  </Popover>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </Space>\n    </Menu.Item>\n  )\n}\n\nexport default AnnotationCategoryItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport AnnotationCategoryItem from './AnnotationCategoryItem'\n\nexport interface AnnotationCategoryAndType {\n  uid: string\n  type: Omit<Type, 'uids'>\n  category: Omit<Category, 'types'>\n}\nexport interface Type {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  uids: string[]\n}\nexport interface Category {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  types: Type[]\n}\n\nconst getCategories = (annotations: any): Record<string, Category> => {\n  const categories = annotations?.reduce(\n    (\n      categoriesAcc: Record<string, Category & { types: Record<string, Type> }>,\n      annotation: AnnotationCategoryAndType\n    ) => {\n      const { category, type, uid } = annotation\n      const categoryKey = category.CodeMeaning\n      const typeKey = type.CodeMeaning\n\n      const oldCategory = categoriesAcc[categoryKey] ?? {\n        ...category,\n        types: {}\n      }\n      const oldType = oldCategory.types[typeKey] ?? {\n        ...type,\n        uids: []\n      }\n\n      return {\n        ...categoriesAcc,\n        [categoryKey]: {\n          ...oldCategory,\n          types: {\n            ...oldCategory.types,\n            [typeKey]: { ...oldType, uids: [...oldType.uids, uid] }\n          }\n        }\n      }\n    },\n    {}\n  )\n\n  // Normalizing types so that it's an array instead of an object:\n  Object.keys(categories).forEach((categoryKey: string) => {\n    const category = categories[categoryKey]\n    const { types } = category\n    const typesArr = Object.keys(types).map(\n      (typeKey: string) => types[typeKey]\n    )\n    categories[categoryKey].types = typesArr\n  })\n\n  return categories\n}\n\nconst AnnotationCategoryList = ({\n  annotations,\n  onChange,\n  onStyleChange,\n  defaultAnnotationStyles,\n  checkedAnnotationUids\n}: {\n  annotations: AnnotationCategoryAndType[]\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const categories: Record<string, Category> = getCategories(annotations)\n\n  if (Object.keys(categories).length === 0) {\n    return <></>\n  }\n\n  const items = Object.keys(categories).map((categoryKey: string) => {\n    const category = categories[categoryKey]\n    return (\n      <AnnotationCategoryItem\n        key={category.CodeMeaning !== '' ? category.CodeMeaning : `category-${categoryKey}`}\n        category={category}\n        onChange={onChange}\n        onStyleChange={onStyleChange}\n        defaultAnnotationStyles={defaultAnnotationStyles}\n        checkedAnnotationUids={checkedAnnotationUids}\n      />\n    )\n  })\n\n  return <Menu selectable={false}>{items}</Menu>\n}\nexport default AnnotationCategoryList\n","const HoveredRoiTooltip = ({\n  xPosition,\n  yPosition,\n  rois\n}: {\n  xPosition: number\n  yPosition: number\n  rois: Array<{ index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n}): JSX.Element => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: `${yPosition}px`,\n        left: `${xPosition}px`,\n        backgroundColor: 'rgba(230, 230, 230, 0.65)',\n        minWidth: '150px',\n        minHeight: '60px',\n        padding: '20px',\n        fontWeight: 'bold',\n        pointerEvents: 'none'\n      }}\n    >\n      {rois.map((roi, i) => {\n        const attributes = roi.attributes\n        return (\n          <div key={roi.roiUid}>\n            <span>ROI {roi.index}</span>\n            {attributes.map((attr) => {\n              return (\n                <div key={attr.name + roi.roiUid}>\n                  {attr.name}: <span style={{ fontWeight: 500 }}>{attr.value}</span>\n                </div>\n              )\n            })}\n          </div>\n\n        )\n      })}\n    </div>\n  )\n}\n\nexport default HoveredRoiTooltip\n","import * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { AnnotationCategoryAndType } from '../components/AnnotationCategoryList'\n\nexport const adaptRoiToAnnotation = (roi: dmv.roi.ROI): AnnotationCategoryAndType => {\n  const { uid, evaluations } = roi\n\n  const result = {\n    category: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    },\n    type: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    }\n  }\n\n  evaluations.forEach((\n    item: (\n      dcmjs.sr.valueTypes.TextContentItem |\n      dcmjs.sr.valueTypes.CodeContentItem\n    )\n  ) => {\n    const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n    if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n      const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n      const value = codeContentItem.ConceptCodeSequence[0]\n      // For consistency with Segment and Annotation Group\n      if (nameValue === '276214006') {\n        result.category = { ...value }\n      } else if (nameValue === '121071') {\n        result.type = { ...value }\n      }\n    }\n  })\n\n  return {\n    ...result,\n    uid\n  }\n}\n","import { roi, metadata } from 'dicom-microscopy-viewer'\nimport { sr, data } from 'dcmjs'\n\nimport { CustomError, errorTypes } from './CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { User } from '../auth'\n\ninterface AppInfo {\n  name: string\n  version: string\n  uid: string\n  organization?: string\n}\n\nconst generateReport = ({\n  rois,\n  metadata,\n  user,\n  app,\n  visibleRoiUIDs\n}: {\n  rois: roi.ROI[]\n  metadata: metadata.VLWholeSlideMicroscopyImage[]\n  user: User | undefined\n  app: AppInfo\n  visibleRoiUIDs: Set<string>\n}): { isReportModalVisible: boolean, generatedReport: metadata.Comprehensive3DSR } => {\n  // Metadata should be sorted such that the image with the highest\n  // resolution is the last item in the array.\n  const refImage = metadata[metadata.length - 1]\n  // We assume that there is only one specimen (tissue section) per\n  // ontainer (slide). Only the tissue section is tracked with a unique\n  // identifier, even if the section may be composed of different biological\n  // samples.\n  if ((refImage.SpecimenDescriptionSequence?.length ?? 0) > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'More than one specimen has been described for the slide'\n      )\n    )\n  }\n  const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n  console.debug('create Observation Context')\n  let observer\n\n  if (user !== undefined) {\n    observer = new sr.templates.PersonObserverIdentifyingAttributes({\n      name: user.name ?? 'ANONYMOUS',\n      loginName: user.email ?? ''\n    })\n  } else {\n    console.warn('no user information available')\n    observer = new sr.templates.PersonObserverIdentifyingAttributes({\n      name: 'ANONYMOUS'\n    })\n  }\n\n  const observationContext = new sr.templates.ObservationContext({\n    observerPersonContext: new sr.templates.ObserverContext({\n      observerType: new sr.coding.CodedConcept({\n        value: '121006',\n        schemeDesignator: 'DCM',\n        meaning: 'Person'\n      }),\n      observerIdentifyingAttributes: observer\n    }),\n    observerDeviceContext: new sr.templates.ObserverContext({\n      observerType: new sr.coding.CodedConcept({\n        value: '121007',\n        schemeDesignator: 'DCM',\n        meaning: 'Device'\n      }),\n      observerIdentifyingAttributes: new sr.templates.DeviceObserverIdentifyingAttributes({\n        uid: app.uid,\n        manufacturerName: 'MGH Computational Pathology',\n        modelName: app.name\n      })\n    }),\n    subjectContext: new sr.templates.SubjectContext({\n      subjectClass: new sr.coding.CodedConcept({\n        value: '121027',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen'\n      }),\n      subjectClassSpecificContext: new sr.templates.SubjectContextSpecimen({\n        uid: refSpecimen.SpecimenUID,\n        identifier: refSpecimen.SpecimenIdentifier,\n        containerIdentifier: refImage.ContainerIdentifier\n      })\n    })\n  })\n\n  console.debug('encode Imaging Measurements')\n  const imagingMeasurements: sr.valueTypes.ContainerContentItem[] = []\n  for (let i = 0; i < rois.length; i++) {\n    const roi = rois[i]\n    if (!visibleRoiUIDs.has(roi.uid)) {\n      continue\n    }\n\n    let findingType = roi.evaluations.find((item: sr.valueTypes.ContentItem) => {\n      return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n    })\n\n    if (findingType === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          `No finding type was specified for ROI \"${String(roi.uid)}\"`\n        )\n      )\n    }\n\n    findingType = findingType as sr.valueTypes.CodeContentItem\n\n    const trackingIdentifier = new sr.templates.TrackingIdentifier({\n      uid: roi.properties.trackingUID ?? roi.uid,\n      identifier: `ROI #${i + 1}`\n    })\n\n    const group = new sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n      trackingIdentifier,\n      referencedRegion: new sr.contentItems.ImageRegion3D({\n        graphicType: roi.scoord3d.graphicType,\n        graphicData: roi.scoord3d.graphicData,\n        frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n      }),\n      findingType: new sr.coding.CodedConcept({\n        value: findingType.ConceptCodeSequence[0].CodeValue,\n        schemeDesignator: findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n        meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n      }),\n      qualitativeEvaluations: roi.evaluations.filter((item: sr.valueTypes.ContentItem) => {\n        return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n      }),\n      measurements: roi.measurements\n    })\n\n    const measurements = group as sr.valueTypes.ContainerContentItem[]\n    measurements[0].ContentTemplateSequence = [\n      {\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }\n    ]\n    imagingMeasurements.push(...measurements)\n  }\n\n  console.debug('create Measurement Report document content')\n  const measurementReport = new sr.templates.MeasurementReport({\n    languageOfContentItemAndDescendants: new sr.templates.LanguageOfContentItemAndDescendants(\n      {}\n    ),\n    observationContext,\n    procedureReported: new sr.coding.CodedConcept({\n      value: '112703',\n      schemeDesignator: 'DCM',\n      meaning: 'Whole Slide Imaging'\n    }),\n    imagingMeasurements\n  })\n\n  console.info('create Comprehensive 3D SR document')\n  const dataset = new sr.documents.Comprehensive3DSR({\n    content: measurementReport[0],\n    evidence: [refImage],\n    seriesInstanceUID: data.DicomMetaDictionary.uid(),\n    seriesNumber: 1,\n    seriesDescription: 'Annotation',\n    sopInstanceUID: data.DicomMetaDictionary.uid(),\n    instanceNumber: 1,\n    manufacturer: 'MGH Computational Pathology',\n    previousVersions: undefined // TODO\n  })\n\n  return {\n    isReportModalVisible: true,\n    generatedReport: dataset as metadata.Comprehensive3DSR\n  }\n}\n\nexport default generateReport\n","import React from 'react'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  Descriptions,\n  Divider,\n  InputNumber,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space,\n  Tooltip\n} from 'antd'\nimport { UndoOutlined, CheckOutlined, StopOutlined } from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Equipment from './Equipment'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { findContentItemsByName } from '../utils/sr'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport AnnotationCategoryList, { AnnotationCategoryAndType } from './AnnotationCategoryList'\nimport HoveredRoiTooltip from './HoveredRoiTooltip'\nimport { adaptRoiToAnnotation } from '../services/RoiToAnnotationAdapter'\nimport generateReport from '../utils/generateReport'\n\nconst DEFAULT_ROI_STROKE_COLOR: number[] = [255, 234, 0] // [0, 126, 163]\nconst DEFAULT_ROI_FILL_COLOR: number[] = [255, 234, 0, 0.2] // [0, 126, 163, 0.2]\nconst DEFAULT_ROI_STROKE_WIDTH: number = 2\nconst DEFAULT_ROI_RADIUS: number = 5\n\nconst DEFAULT_ANNOTATION_OPACITY = 0.4\nconst DEFAULT_ANNOTATION_STROKE_COLOR = [0, 0, 0]\nconst DEFAULT_ANNOTATION_COLOR_PALETTE = [\n  [255, 0, 0],\n  [0, 255, 0],\n  [0, 0, 255],\n  [255, 255, 0],\n  [0, 255, 255],\n  [0, 0, 0]\n]\n\ninterface StyleOptions {\n  opacity: number\n  color: number[]\n  contourOnly: boolean\n}\n\nconst _buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    console.warn(`no finding found for ROI ${roi.uid}`)\n    return\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: DEFAULT_ROI_STROKE_COLOR,\n    width: DEFAULT_ROI_STROKE_WIDTH\n  }\n  if (style.stroke != null) {\n    if (style.stroke.color != null) {\n      stroke.color = style.stroke.color\n    }\n    if (style.stroke.width != null) {\n      stroke.width = style.stroke.width\n    }\n  }\n  const fill = {\n    color: DEFAULT_ROI_FILL_COLOR\n  }\n  if (style.fill != null) {\n    if (style.fill.color != null) {\n      fill.color = style.fill.color\n    }\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius != null\n          ? style.radius\n          : Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n\nconst _constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      preload: preload,\n      errorInterceptor: (error: CustomError) => {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DMV, error\n        )\n      }\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical',\n        errorInterceptor: (error: CustomError) => {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.DMV,\n            error\n          )\n        }\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'Failed to instantiate viewer'\n      )\n    )\n    throw error\n  }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface Measurement {\n  name: dcmjs.sr.coding.CodedConcept\n  value?: number\n  unit: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n  derivedDataset?: dmv.metadata.Dataset // Add this line\n}\n\ninterface SlideViewerState {\n  visibleRoiUIDs: Set<string>\n  visibleSegmentUIDs: Set<string>\n  visibleMappingUIDs: Set<string>\n  visibleAnnotationGroupUIDs: Set<string>\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  selectedRoi?: dmv.roi.ROI\n  selectedRoiUIDs: Set<string>\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isSelectedRoiModalVisible: boolean\n  isHoveredRoiTooltipVisible: boolean\n  hoveredRoiAttributes: Array<{index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n  hoveredRoiTooltipX: number\n  hoveredRoiTooltipY: number\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  isGoToModalVisible: boolean\n  isSelectedMagnificationValid: boolean\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  selectedXCoordinate?: number\n  validXCoordinateRange: number[]\n  selectedYCoordinate?: number\n  validYCoordinateRange: number[]\n  selectedMagnification?: number\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n  loadingFrames: Set<string>\n  isICCProfilesEnabled: boolean\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private hoveredRois = [] as dmv.roi.ROI[]\n\n  private lastPixel = [0, 0] as [number, number]\n\n  private readonly keysDown = new Set<string>()\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private defaultAnnotationStyles: {\n    [annotationUID: string]: StyleOptions\n  } = {}\n\n  private readonly selectionStrokeColor: number[] = [0, 153, 255]\n  private readonly selectionFillColor: number[] = [255, 255, 255]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionStrokeColor, 1], width: 3 },\n    fill: { color: [...this.selectionFillColor, 0.5] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionStrokeColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = _formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n    this.onWindowResize = this.onWindowResize.bind(this)\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleRoiSelectionCancellation = this.handleRoiSelectionCancellation.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleRoiStyleChange = this.handleRoiStyleChange.bind(this)\n    this.handleGoTo = this.handleGoTo.bind(this)\n    this.handleXCoordinateSelection = this.handleXCoordinateSelection.bind(this)\n    this.handleYCoordinateSelection = this.handleYCoordinateSelection.bind(this)\n    this.handleMagnificationSelection = this.handleMagnificationSelection.bind(this)\n    this.handleSlidePositionSelection = this.handleSlidePositionSelection.bind(this)\n    this.handleSlidePositionSelectionCancellation = this.handleSlidePositionSelectionCancellation.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n    this.handleICCProfilesToggle = this.handleICCProfilesToggle.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n\n    const { volumeViewer, labelViewer } = _constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isHoveredRoiTooltipVisible: false,\n      hoveredRoiTooltipX: 0,\n      hoveredRoiTooltipY: 0,\n      hoveredRoiAttributes: [],\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set(),\n      isICCProfilesEnabled: true\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current != null) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        if (this.labelViewportRef.current != null) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance, index) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                this.props.selectedPresentationStateUID == null\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Presentation State could not be loaded'\n            )\n          )\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Presentation State could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID != null\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key == null) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  loadDerivedDataset = (derivedDataset: dmv.metadata.Dataset): void => {\n    console.debug('Loading derived dataset')\n    const Comprehensive3DSR = '1.2.840.10008.5.1.4.1.1.88.34'\n    const MicroscopyBulkSimpleAnnotation = '1.2.840.10008.5.1.4.1.1.88.24'\n    const Segmentation = '1.2.840.10008.5.1.4.1.1.66.4'\n    const ParametricMap = '1.2.840.10008.5.1.4.1.1.88.22'\n    const OpticalPath = '1.2.840.10008.5.1.4.1.1.88.21'\n    if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Comprehensive3DSR) {\n      const allRois = this.volumeViewer.getAllROIs()\n      allRois.forEach((roi) => {\n        this.handleAnnotationVisibilityChange({ roiUID: roi.uid, isVisible: true })\n      })\n      console.debug('Loading Comprehensive 3D SR')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === MicroscopyBulkSimpleAnnotation) {\n      const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      allAnnotationGroups.forEach((annotationGroup) => {\n        this.handleAnnotationGroupVisibilityChange({ annotationGroupUID: annotationGroup.uid, isVisible: true })\n      })\n      console.debug('Loading Microscopy Bulk Simple Annotation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Segmentation) {\n      const allSegments = this.volumeViewer.getAllSegments()\n      allSegments.forEach((segment) => {\n        this.handleSegmentVisibilityChange({ segmentUID: segment.uid, isVisible: true })\n      })\n      console.debug('Loading Segmentation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === ParametricMap) {\n      const allParameterMappings = this.volumeViewer.getAllParameterMappings()\n      allParameterMappings.forEach((parameterMapping) => {\n        this.handleMappingVisibilityChange({ mappingUID: parameterMapping.uid, isVisible: true })\n      })\n      console.debug('Loading Parametric Map')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === OpticalPath) {\n      const allOpticalPaths = this.volumeViewer.getAllOpticalPaths()\n      allOpticalPaths.forEach((opticalPath) => {\n        this.handleOpticalPathVisibilityChange({ opticalPathIdentifier: opticalPath.identifier, isVisible: true })\n      })\n      console.debug('Loading Optical Path')\n    }\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  async addAnnotations (): Promise<void> {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Comprehensive 3D SR instances')\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.searchForInstances({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SR'\n        }\n      }).then((matchedInstances): void => {\n        if (matchedInstances == null) {\n          matchedInstances = []\n        }\n        matchedInstances.forEach(i => {\n          const { dataset } = dmv.metadata.formatMetadata(i)\n          const instance = dataset as dmv.metadata.Instance\n          if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n            console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n            client.retrieveInstance({\n              studyInstanceUID: this.props.studyInstanceUID,\n              seriesInstanceUID: instance.SeriesInstanceUID,\n              sopInstanceUID: instance.SOPInstanceUID\n            }).then((retrievedInstance): void => {\n              const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n              const { dataset } = dmv.metadata.formatMetadata(data.dict)\n              const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n              /*\n              * Perform a couple of checks to ensure the document content of the\n              * report fullfils the requirements of the application.\n              */\n              if (!_implementsTID1500(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it is not structured according to template ' +\n                  'TID 1500 \"MeasurementReport\"'\n                )\n                return\n              }\n              if (!_describesSpecimenSubject(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not describe a specimen subject'\n                )\n                return\n              }\n              if (!_containsROIAnnotations(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not contain any suitable ROI annotations'\n                )\n                return\n              }\n\n              const content = new MeasurementReport(report)\n              content.ROIs.forEach(roi => {\n                console.info(`add ROI \"${roi.uid}\"`)\n                const scoord3d = roi.scoord3d\n                const image = this.props.slide.volumeImages[0]\n                if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                  /*\n                  * ROIs may get assigned new UIDs upon re-rendering of the\n                  * page and we need to ensure that we don't add them twice.\n                  * The same ROI may be stored in multiple SR documents and\n                  * we don't want them to show up twice.\n                  * TODO: We should probably either \"merge\" measurements and\n                  * quantitative evaluations or pick the ROI from the \"best\"\n                  * available report (COMPLETE and VERIFIED).\n                  */\n                  const doesROIExist = this.volumeViewer.getAllROIs().some(\n                    (otherROI: dmv.roi.ROI): boolean => {\n                      return _areROIsEqual(otherROI, roi)\n                    }\n                  )\n                  if (!doesROIExist) {\n                    try {\n                      // Add ROI without style such that it won't be visible.\n                      this.volumeViewer.addROI(roi, {})\n                      const roiAsAnnotation = adaptRoiToAnnotation(roi)\n                      this.formatAnnotation(roiAsAnnotation)\n                    } catch {\n                      console.error(`could not add ROI \"${roi.uid}\"`)\n                    }\n                  } else {\n                    console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(\n                    `skip ROI \"${roi.uid}\" ` +\n                    `of SR document \"${report.SOPInstanceUID}\"` +\n                    'because it is defined in another frame of reference'\n                  )\n                }\n              })\n\n              resolve()\n            }).catch((error) => {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Annotations could not be loaded'\n                )\n              )\n              console.error(\n                'failed to load ROIs ' +\n                `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n                `of series \"${instance.SeriesInstanceUID}\" ` +\n                `of study \"${this.props.studyInstanceUID}\": `,\n                error\n              )\n            })\n            /*\n            * React is not aware of the fact that ROIs have been added via the\n            * viewer (the viewport is a ref object) and won't show the\n            * annotations in the user interface unless an update is forced.\n            */\n            this.forceUpdate()\n          }\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Annotations could not be loaded'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Microscopy Bulk Simple Annotations instances')\n      const client = this.props.clients[\n        StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n      ]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'ANN'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[] = retrievedMetadata.map(metadata => {\n              return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n                metadata\n              })\n            })\n            // annotations = annotations.filter(ann => {\n            //   const refImage = this.props.slide.volumeImages[0]\n            //   return (\n            //     ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n            //     ann.ContainerIdentifier === refImage.ContainerIdentifier\n            //   )\n            // })\n            annotations.forEach(ann => {\n              try {\n                this.volumeViewer.addAnnotationGroups(ann)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Microscopy Bulk Simple Annotations cannot be displayed.'\n                  )\n                )\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                console.error('failed to add annotation groups:', error)\n              }\n              ann.AnnotationGroupSequence.forEach(item => {\n                const annotationGroupUID = item.AnnotationGroupUID\n                const finding = item.AnnotationPropertyTypeCodeSequence[0]\n                const key = _buildKey(finding)\n                const style = this.roiStyles[key]\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                if (style != null && style.fill != null) {\n                  this.volumeViewer.setAnnotationGroupStyle(\n                    annotationGroupUID,\n                    { color: style.fill.color }\n                  )\n                }\n              })\n            })\n            /*\n            * React is not aware of the fact that annotation groups have been\n            * added via the viewer (the underlying HTML viewport element is a\n            * ref object) and won't show the annotation groups in the user\n            * interface unless an update is forced.\n            */\n            this.forceUpdate()\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n                'instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Microscopy Bulk Simple Annotations instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Segmentation instances')\n      const client = this.props.clients[StorageClasses.SEGMENTATION]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SEG'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach((s, i) => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const segmentations: dmv.metadata.Segmentation[] = []\n            retrievedMetadata.forEach(metadata => {\n              const seg = new dmv.metadata.Segmentation({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                seg.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                segmentations.push(seg)\n              }\n            })\n            if (segmentations.length > 0) {\n              try {\n                this.volumeViewer.addSegments(segmentations)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Segmentations cannot be displayed'\n                  )\n                )\n                console.error('failed to add segments: ', error)\n              }\n              /*\n              * React is not aware of the fact that segments have been added via\n              * the viewer (the underlying HTML viewport element is a ref object)\n              * and won't show the segments in the user interface unless an update\n              * is forced.\n              */\n              this.forceUpdate()\n            }\n\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Segmentation instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Segmentation instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Parametric Map instances')\n      const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'OT'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const parametricMaps: dmv.metadata.ParametricMap[] = []\n            retrievedMetadata.forEach(metadata => {\n              const pm = new dmv.metadata.ParametricMap({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                pm.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                parametricMaps.push(pm)\n              } else {\n                console.warn(\n                  `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n                )\n              }\n            })\n            if (parametricMaps.length > 0) {\n              try {\n                this.volumeViewer.addParameterMappings(parametricMaps)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Parametric Map cannot be displayed'\n                  )\n                )\n                console.error('failed to add mappings: ', error)\n              }\n              /*\n               * React is not aware of the fact that mappings have been added via\n               * the viewer (the underlying HTML viewport element is a ref object)\n               * and won't show the mappings in the user interface unless an update\n               * is forced.\n               */\n              this.forceUpdate()\n            }\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Parametric Map instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Parametric Map instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    // Handle promises properly with catch blocks\n    void this.addAnnotations()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotations:', error)\n      })\n\n    void this.addAnnotationGroups()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotation groups:', error)\n      })\n\n    void this.addSegmentations()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add segmentations:', error)\n      })\n\n    void this.addParametricMaps()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add parametric maps:', error)\n      })\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer != null) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiDoubleClicked = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi != null) {\n      this.setState({\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  setHoveredRoiAttributes = (hoveredRois: dmv.roi.ROI[]): void => {\n    const rois = this.volumeViewer.getAllROIs()\n    if (rois.length === 0) {\n      this.setState({ hoveredRoiAttributes: [] })\n      return\n    }\n\n    const result = hoveredRois.map((roi) => {\n      const attributes: Array<{ name: string, value: string }> = []\n      const evaluations = roi.evaluations\n      evaluations.forEach((\n        item: (\n          dcmjs.sr.valueTypes.TextContentItem |\n          dcmjs.sr.valueTypes.CodeContentItem\n        )\n      ) => {\n        const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n        const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n        const name = `${nameMeaning}`\n        if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n          const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n          // For consistency with Segment and Annotation Group\n          if (nameValue === '276214006') {\n            attributes.push({\n              name: 'Property category',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '121071') {\n            attributes.push({\n              name: 'Property type',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '111001') {\n            attributes.push({\n              name: 'Algorithm Name',\n              value: `${valueMeaning}`\n            })\n          } else {\n            attributes.push({\n              name: name,\n              value: `${valueMeaning}`\n            })\n          }\n        } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n          const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n          attributes.push({\n            name: name,\n            value: textContentItem.TextValue\n          })\n        }\n      })\n\n      const index = (rois.findIndex((r) => r.uid === roi.uid) ?? 0) + 1\n      return { index, roiUid: roi.uid, attributes }\n    }, [] as Array<dcmjs.sr.valueTypes.CodeContentItem | dcmjs.sr.valueTypes.TextContentItem>)\n\n    this.setState({ hoveredRoiAttributes: result })\n  }\n\n  clearHoveredRois = (): void => {\n    this.hoveredRois = [] as any\n  }\n\n  getUniqueHoveredRois = (newRoi: dmv.roi.ROI | null): dmv.roi.ROI[] => {\n    if (newRoi == null) {\n      return []\n    }\n    const allRois = [...this.hoveredRois, newRoi]\n    const uniqueIds = Array.from(new Set(allRois.map(roi => roi.uid)))\n    return uniqueIds.map(id => allRois.find(roi => roi.uid === id))\n      .filter((roi): roi is dmv.roi.ROI => roi !== undefined)\n  }\n\n  isSamePixelAsLast = (event: any): boolean => {\n    return event.clientX === this.lastPixel[0] && event.clientY === this.lastPixel[1]\n  }\n\n  onPointerMove = (event: CustomEventInit): void => {\n    const { feature: hoveredRoi, event: evt } = event.detail.payload\n    const originalEvent = evt.originalEvent\n\n    if (!this.isSamePixelAsLast(originalEvent)) {\n      this.lastPixel = [originalEvent.clientX, originalEvent.clientY]\n      this.clearHoveredRois()\n    }\n\n    this.hoveredRois = this.getUniqueHoveredRois(hoveredRoi)\n\n    if (this.hoveredRois.length > 0) {\n      this.setHoveredRoiAttributes(this.hoveredRois)\n      this.setState({\n        isHoveredRoiTooltipVisible: true,\n        hoveredRoiTooltipX: originalEvent.clientX,\n        hoveredRoiTooltipY: originalEvent.clientY\n      })\n    } else {\n      this.setState({\n        isHoveredRoiTooltipVisible: false\n      })\n    }\n  }\n\n  getUpdatedSelectedRois = (newSelectedRoiUid?: string): { selectedRoiUIDs: Set<string>, selectedRoi?: dmv.roi.ROI} => {\n    const selectedRoiUid = newSelectedRoiUid\n    const emptySelection = {\n      selectedRoiUIDs: new Set<string>(),\n      selectedRoi: undefined\n    }\n\n    if (selectedRoiUid === undefined) {\n      return emptySelection\n    }\n\n    const selectedRoi = this.volumeViewer.getROI(selectedRoiUid)\n    if (selectedRoi === undefined) {\n      return emptySelection\n    }\n\n    console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n\n    if (!this.keysDown.has('Shift')) {\n      return {\n        selectedRoiUIDs: new Set([selectedRoi.uid]),\n        selectedRoi\n      }\n    }\n\n    const oldSelectedRois = Array.from(this.state.selectedRoiUIDs)\n    return {\n      selectedRoiUIDs: new Set([...oldSelectedRois, selectedRoi.uid]),\n      selectedRoi\n    }\n  }\n\n  resetUnselectedRoiStyles = (selectionState: { selectedRoiUIDs: Set<string> }): void => {\n    this.volumeViewer.getAllROIs().forEach(roi => {\n      const uid = roi.uid\n\n      if (selectionState.selectedRoiUIDs.has(uid) || !this.state.visibleRoiUIDs.has(uid)) {\n        return\n      }\n\n      const key = _getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(uid, style)\n    })\n  }\n\n  onMapClicked = (event: CustomEventInit): void => {\n    const roisClicked = (event.detail?.payload?.rois ?? []) as dmv.roi.ROI[]\n\n    if (roisClicked.length !== 0) {\n      return\n    }\n\n    const updatedSelectedRois = this.getUpdatedSelectedRois()\n    this.setState(updatedSelectedRois)\n\n    // @ts-expect-error\n    this.volumeViewer.clearSelections()\n\n    this.resetUnselectedRoiStyles(updatedSelectedRois)\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoiUid = event.detail?.payload?.uid as string\n    const updatedSelectedRois = this.getUpdatedSelectedRois(selectedRoiUid)\n    this.setState(updatedSelectedRois)\n\n    this.resetUnselectedRoiStyles(updatedSelectedRois)\n  }\n\n  handleAnnotationSelection (uid: string): void {\n    // @ts-expect-error\n    this.volumeViewer.clearSelections()\n\n    const updatedSelectedRois = this.getUpdatedSelectedRois(uid)\n    this.setState(updatedSelectedRois)\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (updatedSelectedRois.selectedRoiUIDs.has(roi.uid)) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  handleRoiSelectionCancellation (): void {\n    this.setState({\n      isSelectedRoiModalVisible: false\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load frame')\n  }\n\n  onLoadingError = (event: CustomEventInit): void => {\n    const message = (event.detail?.payload?.message ?? 'Failed to load data') as string\n    console.error(message)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        message\n      ) as any\n    )\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray != null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID == null) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_viewport_clicked',\n      this.onMapClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyDown\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyDown = (event: KeyboardEvent): void => {\n    this.keysDown.add(event.key)\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    this.keysDown.delete(event.key)\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount (): void {\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_viewport_clicked',\n      this.onMapClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_error',\n      this.onLoadingError\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_error',\n      this.onFrameLoadingError\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    document.body.addEventListener(\n      'keydown',\n      this.onKeyDown\n    )\n    window.addEventListener('beforeunload', this.componentCleanup)\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount (): void {\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection (value: any): void {\n    if (value != null) {\n      const x = Number(value)\n      const start = this.state.validXCoordinateRange[0]\n      const end = this.state.validXCoordinateRange[1]\n      if (x >= start && x <= end) {\n        this.setState({\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedXCoordinate: undefined,\n      isSelectedXCoordinateValid: false\n    })\n  }\n\n  handleYCoordinateSelection (value: any): void {\n    if (value != null) {\n      const y = Number(value)\n      const start = this.state.validYCoordinateRange[0]\n      const end = this.state.validYCoordinateRange[1]\n      if (y >= start && y <= end) {\n        this.setState({\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedYCoordinate: undefined,\n      isSelectedYCoordinateValid: false\n    })\n  }\n\n  handleMagnificationSelection (value: any): void {\n    if (value != null) {\n      if (value > 0 && value <= 40) {\n        this.setState({\n          selectedMagnification: Number(value),\n          isSelectedMagnificationValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedMagnification: undefined,\n      isSelectedMagnificationValid: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection (): void {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n      this.state.selectedXCoordinate != null &&\n      this.state.selectedYCoordinate != null &&\n      this.state.selectedMagnification != null\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation (): void {\n    console.log('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      isSelectedMagnificationValid: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Could not complete annotation configuration'\n        )\n      )\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    this.setState((prevState) => {\n      const report = generateReport({\n        rois,\n        metadata,\n        user: this.props.user,\n        app: this.props.app,\n        visibleRoiUIDs: prevState.visibleRoiUIDs\n      })\n      return {\n        isReportModalVisible: report.isReportModalVisible,\n        generatedReport: report.generatedReport\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Annotations could not be saved'\n          )\n        )\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(roi.uid, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Failed to show annotation group.'\n          )\n        )\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void {\n    console.log(`change style of annotation group ${uid}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        uid,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of annotation group.'\n        )\n      )\n      throw error\n    }\n  }\n\n  generateRoiStyle (\n    styleOptions: StyleOptions): dmv.viewer.ROIStyleOptions {\n    const opacity = styleOptions.opacity ?? DEFAULT_ANNOTATION_OPACITY\n    const strokeColor = styleOptions.color ?? DEFAULT_ANNOTATION_STROKE_COLOR\n    const fillColor = styleOptions.contourOnly ? [0, 0, 0, 0] : strokeColor.map((c) => Math.min(c + 25, 255))\n    const style = _formatRoiStyle({\n      fill: { color: [...fillColor, opacity] },\n      stroke: { color: [...strokeColor, opacity] },\n      radius: this.defaultRoiStyle.stroke?.width\n    })\n    return style\n  }\n\n  handleRoiStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: StyleOptions\n  }): void {\n    console.log(`change style of ROI ${uid}`)\n    try {\n      this.defaultAnnotationStyles[uid] = styleOptions\n      const style = this.generateRoiStyle(styleOptions)\n\n      const roi = this.volumeViewer.getROI(uid)\n      const key = _getRoiKey(roi) as string\n      this.roiStyles[key] = style\n      this.volumeViewer.setROIStyle(uid, style)\n      this.state.visibleRoiUIDs.add(uid)\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of ROI.'\n        )\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState (): void {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState != null) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Presentation State could not be found'\n          )\n        )\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (!this.state.areRoisHidden) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  handleAnnotationGroupClick = (annotationGroupUID: string): void => {\n    this.volumeViewer.zoomToROI(annotationGroupUID)\n  }\n\n  /**\n   * Handler that will toggle the ICC profile color management, i.e., either\n   * enable or disable it, depending on its current state.\n   */\n  handleICCProfilesToggle = (event: CheckboxChangeEvent): void => {\n    const checked = event.target.checked\n    this.setState({ isICCProfilesEnabled: checked })\n    this.volumeViewer.toggleICCProfiles()\n  }\n\n  formatAnnotation = (annotation: AnnotationCategoryAndType | dmv.roi.ROI): void => {\n    const roi = this.volumeViewer.getROI(annotation.uid)\n    const key = _getRoiKey(roi) as string\n    const color = this.roiStyles[key] !== undefined\n      ? this.roiStyles[key].stroke?.color.slice(0, 3)\n      : DEFAULT_ANNOTATION_COLOR_PALETTE[\n        Object.keys(this.roiStyles).length % DEFAULT_ANNOTATION_COLOR_PALETTE.length\n      ]\n    this.defaultAnnotationStyles[annotation.uid] = {\n      color: color as number[],\n      opacity: DEFAULT_ANNOTATION_OPACITY,\n      contourOnly: false\n    }\n\n    this.roiStyles[key] = this.generateRoiStyle(\n      this.defaultAnnotationStyles[annotation.uid]\n    )\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const filteredAnnotationGroups = allAnnotationGroups?.filter((annotationGroup) =>\n      annotationGroup.referencedSeriesInstanceUID === this.props.seriesInstanceUID\n    )\n    annotationGroups.push(...filteredAnnotationGroups)\n\n    const annotations = rois.map(roi => adaptRoiToAnnotation(roi))\n\n    const openSubMenuItems = [\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\n    ]\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map((finding, index) => {\n      return (\n        <Select.Option\n          key={(finding.CodeValue !== undefined && finding.CodeValue !== '') ? finding.CodeValue : `finding-${index}`}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n          placeholder='Select finding'\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach((evaluation, index) => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={(code.CodeValue !== undefined && code.CodeValue !== '') ? code.CodeValue : `evaluation-${index}`}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n            placeholder='Select geometry type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const equipmentMenu = (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach((instance, index) => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={(instance.SOPInstanceUID !== undefined && instance.SOPInstanceUID !== '') ? instance.SOPInstanceUID : `presentation-state-${index}`}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription !== undefined && instance.ContentDescription !== '' ? instance.ContentDescription : 'Untitled'}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={undefined}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          <></>\n        </Select.Option>\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={<UndoOutlined />}\n                type='primary'\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametric-maps')\n    }\n\n    let annotationGroupMenu\n\n    annotations?.forEach?.(this.formatAnnotation.bind(this))\n\n    if (annotationGroups.length > 0) {\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const defaultAnnotationGroupStyles: {\n        [annotationUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            onAnnotationGroupClick={this.handleAnnotationGroupClick}\n            // when adding annotationGroups to annotationCategory list,\n            // make so that this is uses this.defaultAnnotationStyles later instead of defaultAnnotationGroupStyles\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    const annotationTools = [\n      <Button\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Button\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Button\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Button\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Button\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Button\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Button\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    let cursor = 'default'\n    if (this.state.isLoading) {\n      cursor = 'progress'\n    }\n\n    let selectedRoiInformation\n    if (this.state.selectedRoi != null) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence != null) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit != null) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      selectedRoiInformation = (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n\n    const iccProfilesMenu = this.volumeViewer.getICCProfiles().length > 0 && (\n      <div style={{ margin: '0.9rem' }}>\n        <Checkbox\n          checked={this.state.isICCProfilesEnabled}\n          onChange={this.handleICCProfilesToggle}\n        >\n          ICC Profiles\n        </Checkbox>\n      </div>\n    )\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden',\n              cursor: cursor\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            open={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            okButtonProps={{ disabled: !(this.state.selectedFinding !== undefined && this.state.selectedGeometryType !== undefined) }}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {annotationConfigurations}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isSelectedRoiModalVisible}\n            title='Selected ROI'\n            onCancel={this.handleRoiSelectionCancellation}\n            maskClosable\n            footer={null}\n          >\n            <Space align='start' direction='vertical'>\n              {selectedRoiInformation}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isGoToModalVisible}\n            title='Go to slide position'\n            onOk={this.handleSlidePositionSelection}\n            onCancel={this.handleSlidePositionSelectionCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validXCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validXCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='X Coordinate [mm]'\n                onChange={this.handleXCoordinateSelection}\n                onPressEnter={this.handleXCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedXCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validYCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validYCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='Y Coordinate [mm]'\n                onChange={this.handleYCoordinateSelection}\n                onPressEnter={this.handleYCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedYCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder='[0 - 40]'\n                prefix='Magnification'\n                onChange={this.handleMagnificationSelection}\n                onPressEnter={this.handleMagnificationSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedMagnificationValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n            onOpenChange={() => {\n              // Give menu item time to render before updating viewer size\n              setTimeout(() => {\n                if (this.labelViewer != null) {\n                  this.labelViewer.resize()\n                }\n              }, 100)\n            }}\n          >\n            {this.labelViewportRef.current != null && (\n              <Menu.SubMenu key='label' title='Slide label'>\n                <Menu.Item style={{ height: '100%' }} key='image'>\n                  <div\n                    style={{ height: '220px' }}\n                    ref={this.labelViewportRef}\n                  />\n                </Menu.Item>\n              </Menu.SubMenu>\n            )}\n            {specimenMenu}\n            {iccProfilesMenu}\n            {equipmentMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {annotations.length === 0\n              ? (\n                <></>\n                )\n              : (\n                <Menu.SubMenu\n                  key='annotation-categories'\n                  title='Annotation Categories'\n                >\n                  <AnnotationCategoryList\n                    annotations={annotations}\n                    onChange={this.handleAnnotationVisibilityChange}\n                    checkedAnnotationUids={this.state.visibleRoiUIDs}\n                    onStyleChange={this.handleRoiStyleChange}\n                    defaultAnnotationStyles={this.defaultAnnotationStyles}\n                  />\n                </Menu.SubMenu>\n                )}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n        {this.state.isHoveredRoiTooltipVisible &&\n        this.state.hoveredRoiAttributes.length > 0\n          ? (\n            <HoveredRoiTooltip\n              xPosition={this.state.hoveredRoiTooltipX}\n              yPosition={this.state.hoveredRoiTooltipY}\n              rois={this.state.hoveredRoiAttributes}\n            />\n            )\n          : (\n            <></>\n            )}\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID != null) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null | undefined\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Value of option \"images\" have been non-zero length.'\n        )\n      )\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID != null) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (hasImageFlavor(image, ImageFlavors.VOLUME) || hasImageFlavor(image, ImageFlavors.THUMBNAIL)) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID !== null && image.PyramidUID !== undefined) {\n          for (const identifier of Object.keys(opticalPathIdentifiers)) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n\n    if (volumeImages.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'At least one VOLUME image must be provided for a slide.'\n        )\n      )\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n            'image that has not been resampled per optical path'\n        )\n      }\n    }\n\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All images of a slide must have the same Container Identifier.'\n        )\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must have ' +\n          'the same Frame of Reference UID.'\n        )\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `All VOLUME images for optical path \"${identifier}\"` +\n              'must be part of the same multi-resolution pyramid.'\n            )\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must be part of the same  ' +\n          'acquisition and have the same Acquisition UID.'\n        )\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter(\n        (image) =>\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      )\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import * as dmv from 'dicom-microscopy-viewer'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './NotificationMiddleware'\nimport { createSlides, Slide } from '../data/slides'\n\ninterface FetchImageMetadataParams {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  onSuccess: (slides: Slide[]) => void\n  onError: (error: Error) => void\n}\n\nexport const fetchImageMetadata = async ({\n  clients,\n  studyInstanceUID,\n  onSuccess,\n  onError\n}: FetchImageMetadataParams): Promise<void> => {\n  try {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n\n    const client = clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(\n      matchedSeries.map(async (s) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const loadingSeries = dataset as dmv.metadata.Series\n        console.info(\n          `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n        )\n        const retrievedMetadata = await client.retrieveSeriesMetadata({\n          studyInstanceUID: studyInstanceUID,\n          seriesInstanceUID: loadingSeries.SeriesInstanceUID\n        })\n\n        const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n        retrievedMetadata.forEach((item) => {\n          if (\n            item['00080016']?.Value?.[0] ===\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        })\n\n        if (seriesImages.length > 0) {\n          images.push(seriesImages)\n        }\n      })\n    )\n    const newSlides = createSlides(images)\n    onSuccess(newSlides)\n  } catch (err) {\n    console.error(err)\n    const customError = new CustomError(\n      errorTypes.ENCODINGANDDECODING,\n      'Image metadata could not be retrieved or decoded.'\n    )\n    onError(customError)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      customError\n    )\n  }\n}\n","import { useState, useEffect } from 'react'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\nimport { fetchImageMetadata } from '../services/fetchImageMetadata'\n\ninterface UseSlidesProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\ninterface UseSlidesReturn {\n  slides: Slide[]\n  isLoading: boolean\n  error: Error | null\n}\n\nconst slidesCache = new Map<string, Slide[]>()\nconst pendingRequests = new Map<string, Promise<Slide[]>>()\n\n/**\n * Hook to fetch and manage whole slide microscopy images for a given study.\n * Values are cached so they can be reused if props are not provided.\n *\n * @param props - Hook configuration props\n * @param props.clients - Map of DICOM web clients keyed by storage class\n */\nexport const useSlides = ({ clients, studyInstanceUID }: UseSlidesProps): UseSlidesReturn => {\n  const [slides, setSlides] = useState<Slide[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    if (studyInstanceUID === undefined) {\n      setSlides([])\n      setIsLoading(false)\n      return\n    }\n\n    const cachedData = slidesCache.get(studyInstanceUID)\n    if (cachedData !== undefined) {\n      setSlides(cachedData)\n      setIsLoading(false)\n      return\n    }\n\n    setIsLoading(true)\n\n    const fetchSlides = async (): Promise<void> => {\n      // Check if there's already a pending request for this study\n      let pendingRequest = pendingRequests.get(studyInstanceUID)\n\n      if (pendingRequest === undefined) {\n        // Create a new promise for this request\n        pendingRequest = new Promise((resolve, reject): void => {\n          fetchImageMetadata({\n            clients,\n            studyInstanceUID,\n            onSuccess: (newSlides) => {\n              slidesCache.set(studyInstanceUID, newSlides)\n              resolve(newSlides)\n            },\n            onError: (err) => {\n              reject(err)\n            }\n          }).catch((err) => {\n            reject(err)\n          })\n        })\n        pendingRequests.set(studyInstanceUID, pendingRequest)\n      }\n\n      try {\n        const newSlides = await pendingRequest\n        setSlides(newSlides)\n        setError(null)\n      } catch (err) {\n        setError(err as Error)\n        setSlides([])\n      } finally {\n        pendingRequests.delete(studyInstanceUID)\n        setIsLoading(false)\n      }\n    }\n\n    void fetchSlides()\n  }, [clients, studyInstanceUID])\n\n  return { slides, isLoading, error }\n}\n","import { Routes, Route, useLocation, useParams } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\nimport * as dcmjs from 'dcmjs'\nimport { useEffect, useState } from 'react'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide } from '../data/slides'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { useSlides } from '../hooks/useSlides'\nimport { StorageClasses } from '../data/uids'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface NaturalizedInstance {\n  SeriesInstanceUID: string\n  SOPInstanceUID: string\n  ReferencedSeriesSequence?: Array<{\n    SeriesInstanceUID: string\n  }>\n  ContentSequence?: Array<{\n    ConceptNameCodeSequence: Array<{\n      CodeValue: string\n    }>\n    ContentSequence?: Array<{\n      ContentSequence: Array<{\n        ReferencedSOPSequence: Array<{\n          ReferencedSOPInstanceUID: string\n        }>\n      }>\n    }>\n  }>\n}\n\ninterface ReferencedSlideResult {\n  slide: Slide | undefined\n  metadata: NaturalizedInstance\n}\n\nconst findSeriesSlide = (slides: Slide[], seriesInstanceUID: string): Slide | undefined => {\n  return slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n}\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID = '', seriesInstanceUID = '' } = useParams<{ studyInstanceUID: string, seriesInstanceUID: string }>()\n  const location = useLocation()\n\n  const [selectedSlide, setSelectedSlide] = useState(findSeriesSlide(slides, seriesInstanceUID))\n  const [derivedDataset, setDerivedDataset] = useState<NaturalizedInstance | null>(null)\n\n  useEffect(() => {\n    const seriesSlide = findSeriesSlide(slides, seriesInstanceUID)\n    if (seriesSlide !== null) {\n      setSelectedSlide(seriesSlide)\n    }\n  }, [seriesInstanceUID, slides])\n\n  useEffect(() => {\n    const findReferencedSlide = async ({ clients, studyInstanceUID, seriesInstanceUID }: {\n      clients: { [key: string]: DicomWebManager }\n      studyInstanceUID: string\n      seriesInstanceUID: string\n    }): Promise<ReferencedSlideResult | null> => await new Promise<ReferencedSlideResult | null>((resolve, reject) => {\n      try {\n        const allClients = Object.values(StorageClasses).map((storageClass) => clients[storageClass])\n        Promise.all(allClients.map(async (client) => {\n          const seriesMetadata = await client.retrieveSeriesMetadata({\n            studyInstanceUID: studyInstanceUID,\n            seriesInstanceUID: seriesInstanceUID\n          })\n          const [naturalizedSeriesMetadata] = seriesMetadata.map((metadata) => naturalizeDataset(metadata)) as NaturalizedInstance[]\n\n          if (naturalizedSeriesMetadata.ReferencedSeriesSequence != null) {\n            const referencedSeriesInstanceUID = naturalizedSeriesMetadata.ReferencedSeriesSequence[0].SeriesInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.seriesInstanceUIDs.find((uid: string) => {\n                return uid === referencedSeriesInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n\n          const IMAGE_LIBRARY_CONCEPT_NAME_CODE = '111028'\n          const imageLibrary = naturalizedSeriesMetadata.ContentSequence?.find(\n            contentItem => contentItem.ConceptNameCodeSequence[0].CodeValue === IMAGE_LIBRARY_CONCEPT_NAME_CODE\n          )\n          if ((imageLibrary?.ContentSequence?.[0]?.ContentSequence?.[0]?.ReferencedSOPSequence?.[0]) != null) {\n            const referencedSOPInstanceUID = imageLibrary.ContentSequence[0].ContentSequence[0].ReferencedSOPSequence[0].ReferencedSOPInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.volumeImages.find((image: { SOPInstanceUID: string }) => {\n                return image.SOPInstanceUID === referencedSOPInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n        })).catch(reject)\n      } catch (error) {\n        reject(error)\n      }\n    })\n\n    if (selectedSlide === null || selectedSlide === undefined) {\n      void findReferencedSlide({ clients, studyInstanceUID, seriesInstanceUID }).then((result: ReferencedSlideResult | null) => {\n        if (result !== null) {\n          setSelectedSlide(result.slide)\n          setDerivedDataset(result.metadata)\n        }\n      }).catch(error => {\n        console.error('Error finding referenced slide:', error)\n      })\n    }\n  }, [slides, clients, selectedSlide, studyInstanceUID, seriesInstanceUID])\n\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string | null | undefined\n  if (!searchParams.has('access_token')) {\n    presentationStateUID = searchParams.get('state')\n    if (presentationStateUID === null) {\n      presentationStateUID = undefined\n    }\n  }\n\n  let viewer = null\n  if (selectedSlide != null) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n        derivedDataset={derivedDataset}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\nfunction Viewer (props: ViewerProps): JSX.Element | null {\n  const { clients, studyInstanceUID, location, navigate } = props\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n\n  const handleSeriesSelection = ({ seriesInstanceUID }: { seriesInstanceUID: string }): void => {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n\n    if (location.pathname.includes('/projects/')) {\n      urlPath = location.pathname\n      if (!location.pathname.includes('/series/')) {\n        urlPath += `/series/${seriesInstanceUID}`\n      } else {\n        urlPath = urlPath.replace(/\\/series\\/[^/]+/, `/series/${seriesInstanceUID}`)\n      }\n    }\n\n    if (\n      location.pathname.includes('/series/') &&\n      location.search != null\n    ) {\n      urlPath += location.search\n    }\n\n    navigate(urlPath, { replace: true })\n  }\n\n  if (isLoading) {\n    return null\n  }\n\n  if (slides.length === 0) {\n    return null\n  }\n\n  const firstSlide = slides[0]\n  const volumeInstances = firstSlide.volumeImages\n  if (volumeInstances.length === 0) {\n    return null\n  }\n  const refImage = volumeInstances[0]\n\n  /* If a series is encoded in the path, route the viewer to this series.\n   * Otherwise select the first series correspondent to\n   * the first slide contained in the study.\n   */\n  let selectedSeriesInstanceUID: string\n  if (location.pathname.includes('series/')) {\n    const seriesFragment = location.pathname.split('series/')[1]\n    selectedSeriesInstanceUID = seriesFragment.includes('/') ? seriesFragment.split('/')[0] : seriesFragment\n  } else {\n    selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n  }\n\n  let clinicalTrialMenu\n  if (refImage.ClinicalTrialSponsorName != null) {\n    clinicalTrialMenu = (\n      <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n        <ClinicalTrial metadata={refImage} />\n      </Menu.SubMenu>\n    )\n  }\n\n  return (\n    <Layout style={{ height: '100%' }} hasSider>\n      <Layout.Sider\n        width={300}\n        style={{\n          height: '100%',\n          borderRight: 'solid',\n          borderRightWidth: 0.25,\n          overflow: 'hidden',\n          background: 'none'\n        }}\n      >\n        <Menu\n          mode='inline'\n          defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n          style={{ height: '100%' }}\n          inlineIndent={14}\n        >\n          <Menu.SubMenu key='patient' title='Patient'>\n            <Patient metadata={refImage} />\n          </Menu.SubMenu>\n          <Menu.SubMenu key='study' title='Study'>\n            <Study metadata={refImage} />\n          </Menu.SubMenu>\n          {clinicalTrialMenu}\n          <Menu.SubMenu key='slides' title='Slides'>\n            <SlideList\n              clients={props.clients}\n              metadata={slides}\n              selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n              onSeriesSelection={handleSeriesSelection}\n            />\n          </Menu.SubMenu>\n        </Menu>\n      </Layout.Sider>\n\n      <Routes>\n        <Route\n          path='/series/:seriesInstanceUID'\n          element={\n            <ParametrizedSlideViewer\n              clients={props.clients}\n              slides={slides}\n              preload={props.preload}\n              annotations={props.annotations}\n              enableAnnotationTools={props.enableAnnotationTools}\n              app={props.app}\n              user={props.user}\n            />\n          }\n        />\n      </Routes>\n    </Layout>\n  )\n}\n\nexport default withRouter(Viewer)\n","import dcmjs from 'dcmjs'\n\nconst { DicomMetaDictionary } = dcmjs.data\n\ninterface TagInfo {\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TagInfo[]\n  level: number\n}\n\nexport interface DicomTag {\n  name: string\n  vr: string\n  Value?: any[]\n  [key: string]: any\n}\n\nconst formatValue = (val: any): string => {\n  if (typeof val === 'object' && val !== null) {\n    return JSON.stringify(val)\n  }\n  return String(val)\n}\n\nexport const formatTagValue = (tag: DicomTag): string => {\n  if (tag.Value == null) return ''\n\n  if (Array.isArray(tag.Value)) {\n    return tag.Value.map(formatValue).join(', ')\n  }\n\n  return formatValue(tag.Value)\n}\n\n/**\n * Processes DICOM metadata and returns a flattened array of tag information\n * @param metadata - The DICOM metadata object to process\n * @param depth - The current depth level for nested sequences (default: 0)\n * @returns Array of processed tag information\n */\nexport function getRows (metadata: Record<string, any>, depth = 0): TagInfo[] {\n  if (metadata === undefined || metadata === null) return []\n  const keywords = Object.keys(metadata).filter(key => key !== '_vrMap')\n\n  return keywords.flatMap(keyword => {\n    // @ts-expect-error\n    const tagInfo = DicomMetaDictionary.nameMap[keyword] as TagInfo | undefined\n    let value = metadata[keyword]\n\n    // Handle private or unknown tags\n    if (tagInfo === undefined) {\n      const regex = /[0-9A-Fa-f]{6}/g\n      if (keyword.match(regex) == null) return []\n\n      return [{\n        tag: `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`,\n        vr: '',\n        keyword: 'Private Tag',\n        value: value?.toString() ?? '',\n        level: depth\n      }]\n    }\n\n    // Handle sequence values (SQ VR)\n    if (tagInfo.vr === 'SQ' && value !== undefined) {\n      const sequenceItems = Array.isArray(value) ? value : [value]\n\n      // Create a parent sequence node\n      const sequenceNode: TagInfo = {\n        tag: tagInfo.tag,\n        vr: tagInfo.vr,\n        keyword,\n        value: `Sequence with ${sequenceItems.length} item(s)`,\n        level: depth,\n        children: []\n      }\n\n      // Create individual nodes for each sequence item\n      sequenceNode.children = sequenceItems.map((item, index) => {\n        const itemNode: TagInfo = {\n          tag: `${tagInfo.tag}.${index + 1}`,\n          vr: 'Item',\n          keyword: `Item ${index + 1}`,\n          value: `Sequence Item ${index + 1}`,\n          level: depth + 1,\n          children: getRows(item, depth + 2)\n        }\n        return itemNode\n      })\n\n      return [sequenceNode]\n    }\n\n    // Handle array values\n    if (Array.isArray(value)) {\n      value = value.map(formatValue).join('\\\\')\n    } else if (typeof value === 'object' && value !== null) {\n      value = formatValue(value)\n    }\n\n    return [{\n      tag: tagInfo.tag,\n      vr: tagInfo.vr,\n      keyword: keyword.replace('RETIRED_', ''),\n      value: value?.toString() ?? '',\n      level: depth\n    }]\n  })\n}\n\n/**\n * Sorts DICOM tags alphabetically by tag value\n * @param metadata - The DICOM metadata object to process\n * @returns Sorted array of tag information\n */\nexport function getSortedTags (metadata: Record<string, any>): TagInfo[] {\n  const tagList = getRows(metadata)\n  return tagList.sort((a, b) => a.tag.localeCompare(b.tag))\n}\n","/**\n * Formats a DICOM datetime string (YYYYMMDD:HHmmss) into a human-readable format\n *\n * @param dateStr - DICOM datetime string in format \"YYYYMMDD:HHmmss\"\n * @returns Formatted date string (e.g., \"Mon, Jan 1 2024\")\n * @example\n * formatDicomDate(\"20240101:120000\") // Returns \"Mon, Jan 1 2024\"\n * formatDicomDate(\"invalid\") // Returns \"invalid\"\n */\nexport const formatDicomDate = (dateStr: string): string => {\n  // Parse YYYYMMDD:HHmmss format\n  const match = dateStr.match(/^(\\d{4})(\\d{2})(\\d{2}):(\\d{2})(\\d{2})(\\d{2})/)\n  if (match == null) return dateStr\n\n  const [, year, month, day, hour, minute, second] = match\n\n  // Validate month and day\n  const monthNum = parseInt(month)\n  const dayNum = parseInt(day)\n  if (monthNum < 1 || monthNum > 12 || dayNum < 1 || dayNum > 31) {\n    return dateStr\n  }\n\n  const date = new Date(\n    parseInt(year),\n    monthNum - 1, // months are 0-based\n    dayNum,\n    parseInt(hour),\n    parseInt(minute),\n    parseInt(second)\n  )\n\n  // Check if the date is invalid or if the month/day combination is invalid\n  // This catches cases like February 31st where the date rolls over to March\n  if (\n    date.getMonth() !== monthNum - 1 || // month rolled over\n    date.getDate() !== dayNum // day rolled over\n  ) {\n    return dateStr\n  }\n\n  // Format parts separately to avoid the extra comma\n  const weekday = date.toLocaleDateString('en-US', { weekday: 'short' })\n  const monthName = date.toLocaleDateString('en-US', { month: 'short' })\n  const dayFormatted = date.getDate()\n  const yearNum = date.getFullYear()\n\n  return `${weekday}, ${monthName} ${dayFormatted} ${yearNum}`\n}\n","import { v4 as generateUUID } from 'uuid'\n\n/**\n * Consumer must implement:\n * this.listeners = {}\n * this.EVENTS = { \"EVENT_KEY\": \"EVENT_VALUE\" }\n */\nconst pubSubInterface = {\n  subscribe,\n  _broadcastEvent,\n  _unsubscribe,\n  _isValidEvent\n}\n\nexport default pubSubInterface\n\n/**\n * Subscribe to updates.\n *\n * @param {string} eventName The name of the event\n * @param {Function} callback Events callback\n * @return {Object} Observable object with actions\n */\nfunction subscribe (this: PubSubService, eventName: string, callback: Function): { unsubscribe: () => any } {\n  if (this._isValidEvent(eventName)) {\n    const listenerId = generateUUID()\n    const subscription = { id: listenerId, callback }\n\n    // console.info(`Subscribing to '${eventName}'.`);\n    if (Array.isArray(this.listeners[eventName])) {\n      this.listeners[eventName].push(subscription)\n    } else {\n      this.listeners[eventName] = [subscription]\n    }\n\n    return {\n      unsubscribe: () => this._unsubscribe(eventName, listenerId)\n    }\n  } else {\n    throw new Error(`Event ${eventName} not supported.`)\n  }\n}\n\n/**\n * Unsubscribe to measurement updates.\n *\n * @param {string} eventName The name of the event\n * @param {string} listenerId The listeners id\n * @return void\n */\nfunction _unsubscribe (this: PubSubService, eventName: string, listenerId: string): void {\n  if (this.listeners[eventName] === undefined) {\n    return\n  }\n\n  const listeners = this.listeners[eventName]\n  if (Array.isArray(listeners)) {\n    this.listeners[eventName] = listeners.filter(({ id }) => id !== listenerId)\n  } else {\n    this.listeners[eventName] = []\n  }\n}\n\n/**\n * Check if a given event is valid.\n *\n * @param {string} eventName The name of the event\n * @return {boolean} Event name validation\n */\nfunction _isValidEvent (this: PubSubService, eventName: string): boolean {\n  return Object.values(this.EVENTS).includes(eventName)\n}\n\n/**\n * Broadcasts changes.\n *\n * @param {string} eventName - The event name\n * @param {func} callbackProps - Properties to pass callback\n * @return void\n */\nfunction _broadcastEvent (this: PubSubService, eventName: string, callbackProps: any): void {\n  const hasListeners = Object.keys(this.listeners).length > 0\n  const hasCallbacks = Array.isArray(this.listeners[eventName])\n\n  if (hasListeners && hasCallbacks) {\n    this.listeners[eventName].forEach((listener: { id: string, callback: Function }) => {\n      listener.callback(callbackProps)\n    })\n  }\n}\n\n/** Export a PubSubService class to be used instead of the individual items */\nexport class PubSubService {\n  EVENTS: any\n  subscribe: (\n    eventName: string,\n    callback: Function\n  ) => { unsubscribe: () => any }\n\n  _broadcastEvent: (eventName: string, callbackProps: any) => void\n  _unsubscribe: (eventName: string, listenerId: string) => void\n  _isValidEvent: (eventName: string) => boolean\n  listeners: { [key: string]: Array<{ id: string, callback: Function }> }\n  unsubscriptions: any[]\n  constructor (EVENTS: Record<string, string>) {\n    this.EVENTS = EVENTS\n    this.subscribe = subscribe\n    this._broadcastEvent = _broadcastEvent\n    this._unsubscribe = _unsubscribe\n    this._isValidEvent = _isValidEvent\n    this.listeners = {}\n    this.unsubscriptions = []\n  }\n\n  reset (): void {\n    this.unsubscriptions.forEach((unsub) => unsub())\n    this.unsubscriptions = []\n  }\n\n  /**\n   * Creates an event that records whether or not someone\n   * has consumed it.  Call eventData.consume() to consume the event.\n   * Check eventData.isConsumed to see if it is consumed or not.\n   * @param props - to include in the event\n   */\n  protected createConsumableEvent (props: Record<string, any>): Record<string, any> {\n    return {\n      ...props,\n      isConsumed: false,\n      consume: function Consume () {\n        this.isConsumed = true\n      }\n    }\n  }\n}\n","import { Instance, Series } from '../services/DICOMMetadataStore'\n\nfunction createSeriesMetadata (SeriesInstanceUID: string, defaultInstances?: Instance[]): Series {\n  const instances: Instance[] = []\n  const instancesMap = new Map<string, Instance>()\n\n  return {\n    SeriesInstanceUID,\n    Modality: '',\n    SeriesNumber: 0,\n    SeriesDescription: '',\n    SeriesDate: '',\n    SeriesTime: '',\n    ...defaultInstances?.[0],\n    instances,\n    addInstance: function (newInstance: Instance) {\n      this.addInstances([newInstance])\n    },\n    addInstances: function (newInstances: Instance[]) {\n      for (let i = 0, len = newInstances.length; i < len; i++) {\n        const instance = newInstances[i]\n\n        if (!instancesMap.has(instance.SOPInstanceUID)) {\n          instancesMap.set(instance.SOPInstanceUID, instance)\n          instances.push(instance)\n        }\n      }\n    },\n    getInstance: function (SOPInstanceUID: string) {\n      return instancesMap.get(SOPInstanceUID)\n    }\n  }\n}\n\nexport default createSeriesMetadata\n","import createSeriesMetadata from './createSeriesMetadata'\n\nimport { Study, Series, Instance } from '../services/DICOMMetadataStore'\n\nfunction createStudyMetadata (StudyInstanceUID: string): Study {\n  return {\n    StudyInstanceUID,\n    StudyDescription: '',\n    PatientID: '',\n    PatientName: '',\n    StudyDate: '',\n    AccessionNumber: '',\n    NumInstances: 0,\n    ModalitiesInStudy: [],\n    isLoaded: false,\n    series: [] as Series[],\n    /**\n     * @param {object} instance\n     */\n    addInstanceToSeries: function (instance: Instance) {\n      this.addInstancesToSeries([instance])\n    },\n    /**\n     * @param {object[]} instances\n     * @param {string} instances[].SeriesInstanceUID\n     * @param {string} instances[].StudyDescription\n     */\n    addInstancesToSeries: function (instances: Instance[]) {\n      const { SeriesInstanceUID } = instances[0]\n\n      if (this.StudyDescription !== '' && this.StudyDescription !== undefined) {\n        this.StudyDescription = instances[0].StudyDescription\n      }\n\n      let series = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (series == null) {\n        series = createSeriesMetadata(SeriesInstanceUID, instances)\n        this.series.push(series)\n      }\n\n      series.addInstances(instances)\n    },\n\n    setSeriesMetadata: function (\n      SeriesInstanceUID: string,\n      seriesMetadata: any\n    ) {\n      let existingSeries = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (existingSeries != null) {\n        existingSeries = Object.assign(existingSeries, seriesMetadata)\n      } else {\n        const series = createSeriesMetadata(SeriesInstanceUID)\n        this.series.push(Object.assign(series, seriesMetadata))\n      }\n    }\n  }\n}\n\nexport default createStudyMetadata\n","import dcmjs from 'dcmjs'\n\nimport pubSubServiceInterface from '../utils/pubSubServiceInterface'\nimport createStudyMetadata from '../utils/createStudyMetadata'\n\nexport const EVENTS = {\n  STUDY_ADDED: 'event::dicomMetadataStore:studyAdded',\n  INSTANCES_ADDED: 'event::dicomMetadataStore:instancesAdded',\n  SERIES_ADDED: 'event::dicomMetadataStore:seriesAdded',\n  SERIES_UPDATED: 'event::dicomMetadataStore:seriesUpdated'\n}\n\nexport interface Instance {\n  SOPInstanceUID: string\n  SOPClassUID: string\n  Rows: number\n  Columns: number\n  PatientSex: string\n  Modality: string\n  InstanceNumber: string\n  imageId?: string\n  [key: string]: any // For dynamic metadata properties\n}\n\nexport interface Series {\n  Modality: string\n  SeriesInstanceUID: string\n  SeriesNumber: number\n  SeriesDate: string\n  SeriesTime: string\n  SeriesDescription: string\n  instances: Instance[]\n  addInstance: (newInstance: Instance) => void\n  addInstances: (newInstances: Instance[]) => void\n  getInstance: (SOPInstanceUID: string) => Instance | undefined\n}\n\nexport interface Study {\n  StudyInstanceUID: string\n  StudyDescription: string\n  PatientID: string\n  PatientName: string\n  StudyDate: string\n  AccessionNumber: string\n  NumInstances: number\n  ModalitiesInStudy: any[]\n  NumberOfStudyRelatedSeries?: number\n  isLoaded: boolean\n  series: Series[]\n  addInstanceToSeries: (instance: Instance) => void\n  addInstancesToSeries: (instances: Instance[]) => void\n  setSeriesMetadata: (SeriesInstanceUID: string, metadata: any) => void\n}\n\ninterface Model {\n  studies: Study[]\n}\n\nconst _model: Model = {\n  studies: []\n}\n\nfunction _getStudyInstanceUIDs (): string[] {\n  return _model.studies.map((aStudy) => aStudy.StudyInstanceUID)\n}\n\nfunction _getStudy (StudyInstanceUID: string): Study | undefined {\n  return _model.studies.find(\n    (aStudy) => aStudy.StudyInstanceUID === StudyInstanceUID\n  )\n}\n\nfunction _getSeries (StudyInstanceUID: string, SeriesInstanceUID: string): Series | undefined {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  return study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n}\n\nfunction _getInstance (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  SOPInstanceUID: string\n): Instance | undefined {\n  const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n\n  if (series == null) {\n    return\n  }\n\n  return series.getInstance(SOPInstanceUID)\n}\n\nfunction _getInstanceByImageId (imageId: string): Instance | undefined {\n  for (const study of _model.studies) {\n    for (const series of study.series) {\n      for (const instance of series.instances) {\n        if (instance.imageId === imageId) {\n          return instance\n        }\n      }\n    }\n  }\n}\n\n/**\n * Update the metadata of a specific series\n * @param {*} StudyInstanceUID\n * @param {*} SeriesInstanceUID\n * @param {*} metadata metadata inform of key value pairs\n * @returns\n */\nfunction _updateMetadataForSeries (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  metadata: Record<string, any>\n): void {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  const series = study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n\n  if (series == null) {\n    return\n  }\n\n  const { instances } = series\n  instances.forEach((instance) => {\n    Object.keys(metadata).forEach((key) => {\n      if (typeof metadata[key] === 'object') {\n        instance[key] = { ...instance[key], ...metadata[key] }\n      } else {\n        instance[key] = metadata[key]\n      }\n    })\n  })\n}\n\ninterface BaseImplementationType {\n  EVENTS: typeof EVENTS\n  listeners: Record<string, any>\n  addInstance: (dicomJSONDatasetOrP10ArrayBuffer: ArrayBuffer | Record<string, any>) => void\n  addInstances: (instances: Instance[], madeInClient?: boolean) => void\n  updateSeriesMetadata: (seriesMetadata: Record<string, any>) => void\n  addSeriesMetadata: (seriesSummaryMetadata: Array<Record<string, any>>, madeInClient?: boolean) => void\n  addStudy: (study: Record<string, any>) => void\n  getStudyInstanceUIDs: typeof _getStudyInstanceUIDs\n  getStudy: typeof _getStudy\n  getSeries: typeof _getSeries\n  getInstance: typeof _getInstance\n  getInstanceByImageId: typeof _getInstanceByImageId\n  updateMetadataForSeries: typeof _updateMetadataForSeries\n  _broadcastEvent: (eventName: string, data: any) => void\n}\n\nconst BaseImplementation: BaseImplementationType = {\n  EVENTS,\n  listeners: {},\n  addInstance (dicomJSONDatasetOrP10ArrayBuffer) {\n    let dicomJSONDataset\n\n    // If Arraybuffer, parse to DICOMJSON before naturalizing.\n    if (dicomJSONDatasetOrP10ArrayBuffer instanceof ArrayBuffer) {\n      const dicomData = dcmjs.data.DicomMessage.readFile(\n        dicomJSONDatasetOrP10ArrayBuffer\n      )\n\n      dicomJSONDataset = dicomData.dict\n    } else {\n      dicomJSONDataset = dicomJSONDatasetOrP10ArrayBuffer\n    }\n\n    let naturalizedDataset: Instance\n\n    if (!('SeriesInstanceUID' in dicomJSONDataset)) {\n      naturalizedDataset =\n        dcmjs.data.DicomMetaDictionary.naturalizeDataset(dicomJSONDataset) as Instance\n    } else {\n      naturalizedDataset = dicomJSONDataset as unknown as Instance\n    }\n\n    const { StudyInstanceUID } = naturalizedDataset\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstanceToSeries(naturalizedDataset)\n  },\n  addInstances (instances, madeInClient = false) {\n    const { StudyInstanceUID, SeriesInstanceUID } = instances[0]\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstancesToSeries(instances)\n\n    // Broadcast an event even if we used cached data.\n    // This is because the mode needs to listen to instances that are added to build up its active displaySets.\n    // It will see there are cached displaySets and end early if this Series has already been fired in this\n    // Mode session for some reason.\n    this._broadcastEvent(EVENTS.INSTANCES_ADDED, {\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      madeInClient\n    })\n  },\n  updateSeriesMetadata (seriesMetadata) {\n    const { StudyInstanceUID, SeriesInstanceUID } = seriesMetadata\n    const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n    if (series == null) {\n      return\n    }\n\n    const study = _getStudy(StudyInstanceUID)\n    if (study != null) {\n      study.setSeriesMetadata(SeriesInstanceUID, seriesMetadata)\n    }\n  },\n  addSeriesMetadata (seriesSummaryMetadata, madeInClient = false) {\n    if (\n      seriesSummaryMetadata === undefined ||\n      seriesSummaryMetadata.length === 0 ||\n      seriesSummaryMetadata[0] === undefined\n    ) {\n      return\n    }\n\n    const { StudyInstanceUID } = seriesSummaryMetadata[0]\n    let study = _getStudy(StudyInstanceUID)\n    if (study == null) {\n      study = createStudyMetadata(StudyInstanceUID)\n      // Will typically be undefined with a compliant DICOMweb server, reset later\n      study.StudyDescription = seriesSummaryMetadata[0].StudyDescription\n      seriesSummaryMetadata?.forEach((item) => {\n        if (study !== undefined && !study.ModalitiesInStudy?.includes(item.Modality)) {\n          study.ModalitiesInStudy?.push(item.Modality)\n        }\n      })\n      study.NumberOfStudyRelatedSeries = seriesSummaryMetadata.length\n      _model.studies.push(study)\n    }\n\n    seriesSummaryMetadata.forEach((series) => {\n      const { SeriesInstanceUID } = series\n      study?.setSeriesMetadata(SeriesInstanceUID, series)\n    })\n\n    this._broadcastEvent(EVENTS.SERIES_ADDED, {\n      StudyInstanceUID,\n      seriesSummaryMetadata,\n      madeInClient\n    })\n  },\n  addStudy (study) {\n    const { StudyInstanceUID } = study\n\n    const existingStudy = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (existingStudy == null) {\n      const newStudy = createStudyMetadata(StudyInstanceUID)\n\n      newStudy.PatientID = study.PatientID\n      newStudy.PatientName = study.PatientName\n      newStudy.StudyDate = study.StudyDate\n      newStudy.ModalitiesInStudy = study.ModalitiesInStudy\n      newStudy.StudyDescription = study.StudyDescription\n      newStudy.AccessionNumber = study.AccessionNumber\n      newStudy.NumInstances = study.NumInstances // todo: Correct naming?\n\n      _model.studies.push(newStudy)\n    }\n  },\n  getStudyInstanceUIDs: _getStudyInstanceUIDs,\n  getStudy: _getStudy,\n  getSeries: _getSeries,\n  getInstance: _getInstance,\n  getInstanceByImageId: _getInstanceByImageId,\n  updateMetadataForSeries: _updateMetadataForSeries,\n  _broadcastEvent (eventName: string, data: any): void {\n  }\n}\n\ninterface DicomMetadataStoreType extends BaseImplementationType {\n  subscribe: (event: string, callback: (data: any) => void) => { unsubscribe: () => any }\n  unsubscribe: (event: string, callback: (data: any) => void) => void\n}\n\nconst DicomMetadataStore = Object.assign(\n  {},\n  BaseImplementation,\n  pubSubServiceInterface\n) as unknown as DicomMetadataStoreType\n\nexport { DicomMetadataStore }\nexport default DicomMetadataStore\n","import { useState, useEffect } from 'react'\n\n/**\n * A hook that delays updating a value for the specified time\n * @param value The value to debounce\n * @param delay The delay time in milliseconds\n * @returns The debounced value\n * @example\n * const debouncedSearchTerm = useDebounce(searchTerm, 300)\n */\nexport const useDebounce = <T,>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import { useState, useMemo, useEffect } from 'react'\nimport { Select, Input, Slider, Typography, Table } from 'antd'\nimport { SearchOutlined } from '@ant-design/icons'\n\nimport DicomWebManager from '../../DicomWebManager'\nimport './DicomTagBrowser.css'\nimport { useSlides } from '../../hooks/useSlides'\nimport { getSortedTags } from './dicomTagUtils'\nimport { formatDicomDate } from '../../utils/formatDicomDate'\nimport DicomMetadataStore, { Series, Study } from '../../services/DICOMMetadataStore'\nimport { useDebounce } from '../../hooks/useDebounce'\n\nconst { Option } = Select\n\ninterface DisplaySet {\n  displaySetInstanceUID: number\n  SeriesDate?: string\n  SeriesTime?: string\n  SeriesNumber: string\n  SeriesDescription?: string\n  Modality: string\n  images: any[]\n}\n\ninterface TableDataItem {\n  key: string\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TableDataItem[]\n}\n\ninterface DicomTagBrowserProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\nconst DicomTagBrowser = ({ clients, studyInstanceUID }: DicomTagBrowserProps): JSX.Element => {\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n  const [study, setStudy] = useState<Study | undefined>(undefined)\n\n  const [displaySets, setDisplaySets] = useState<DisplaySet[]>([])\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] = useState(0)\n  const [instanceNumber, setInstanceNumber] = useState(1)\n  const [filterValue, setFilterValue] = useState('')\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([])\n  const [searchInput, setSearchInput] = useState('')\n\n  const debouncedSearchValue = useDebounce(searchInput, 300)\n\n  useEffect(() => {\n    if (debouncedSearchValue === '') {\n      setFilterValue('')\n      setExpandedKeys([])\n    } else {\n      setFilterValue(debouncedSearchValue)\n    }\n  }, [debouncedSearchValue])\n\n  useEffect(() => {\n    const handler = (event: any): void => {\n      const study: Study | undefined = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n      setStudy(study)\n    }\n    const seriesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.SERIES_ADDED, handler)\n    const instancesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.INSTANCES_ADDED, handler)\n\n    const study = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n    setStudy(study)\n\n    return () => {\n      seriesAddedSubscription.unsubscribe()\n      instancesAddedSubscription.unsubscribe()\n    }\n  }, [studyInstanceUID])\n\n  useEffect(() => {\n    let displaySets: DisplaySet[] = []\n    let derivedDisplaySets: DisplaySet[] = []\n    const processedSeries: string[] = []\n    let index = 0\n\n    if (slides.length > 0) {\n      displaySets = slides\n        .map((slide): DisplaySet | null => {\n          const { volumeImages } = slide\n          if (volumeImages?.[0] === undefined) return null\n\n          const {\n            SeriesDate,\n            SeriesTime,\n            SeriesNumber,\n            SeriesInstanceUID,\n            SeriesDescription,\n            Modality\n          } = volumeImages[0]\n\n          processedSeries.push(SeriesInstanceUID)\n\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate,\n            SeriesTime,\n            SeriesInstanceUID,\n            // @ts-expect-error\n            SeriesNumber,\n            SeriesDescription,\n            Modality,\n            images: volumeImages\n          }\n          index++\n          return ds\n        })\n        .filter((set): set is DisplaySet => set !== null)\n    }\n\n    if (study !== undefined && study.series?.length > 0) {\n      derivedDisplaySets = study.series.filter(s => !processedSeries.includes(s.SeriesInstanceUID))\n        .map((series: Series): DisplaySet => {\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate: series.SeriesDate,\n            SeriesTime: series.SeriesTime,\n            // @ts-expect-error\n            SeriesNumber: series.SeriesNumber,\n            SeriesDescription: series.SeriesDescription,\n            SeriesInstanceUID: series.SeriesInstanceUID,\n            Modality: series.Modality,\n            images: series?.instances?.length > 0 ? series.instances : [series]\n          }\n          index++\n          return ds\n        })\n    }\n\n    setDisplaySets([...displaySets, ...derivedDisplaySets])\n  }, [slides, study])\n\n  const displaySetList = useMemo(() => {\n    displaySets.sort((a, b) => Number(a.SeriesNumber) - Number(b.SeriesNumber))\n    return displaySets.map((displaySet, index) => {\n      const {\n        SeriesDate = '',\n        SeriesTime = '',\n        SeriesNumber = '',\n        SeriesDescription = '',\n        Modality = ''\n      } = displaySet\n\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0]\n      const displayDate = formatDicomDate(dateStr)\n\n      return {\n        value: index,\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\n        description: displayDate\n      }\n    })\n  }, [displaySets])\n\n  const showInstanceList =\n    displaySets[selectedDisplaySetInstanceUID]?.images.length > 1\n\n  const instanceSliderMarks = useMemo(() => {\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return {}\n    const totalInstances = displaySets[selectedDisplaySetInstanceUID].images.length\n\n    // Create marks for first, middle, and last instances\n    const marks: Record<number, string> = {\n      1: '1', // First\n      [Math.ceil(totalInstances / 2)]: String(Math.ceil(totalInstances / 2)), // Middle\n      [totalInstances]: String(totalInstances) // Last\n    }\n\n    return marks\n  }, [selectedDisplaySetInstanceUID, displaySets])\n\n  const columns = [\n    {\n      title: 'Tag',\n      dataIndex: 'tag',\n      key: 'tag',\n      width: '30%'\n    },\n    {\n      title: 'VR',\n      dataIndex: 'vr',\n      key: 'vr',\n      width: '5%'\n    },\n    {\n      title: 'Keyword',\n      dataIndex: 'keyword',\n      key: 'keyword',\n      width: '30%'\n    },\n    {\n      title: 'Value',\n      dataIndex: 'value',\n      key: 'value',\n      width: '40%'\n    }\n  ]\n\n  const tableData = useMemo(() => {\n    const transformTagsToTableData = (tags: any[], parentKey = ''): TableDataItem[] => {\n      return tags.map((tag, index) => {\n        // Create a unique key using tag value if available, otherwise use index\n        const keyBase: string = tag.tag !== '' ? tag.tag.replace(/[(),]/g, '') : index.toString()\n        const currentKey: string = parentKey !== '' ? `${parentKey}-${keyBase}` : keyBase\n\n        const item: TableDataItem = {\n          key: currentKey,\n          tag: tag.tag,\n          vr: tag.vr,\n          keyword: tag.keyword,\n          value: tag.value\n        }\n\n        if (tag.children !== undefined && tag.children.length > 0) {\n          item.children = transformTagsToTableData(tag.children, currentKey)\n        }\n\n        return item\n      })\n    }\n\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return []\n    const images = displaySets[selectedDisplaySetInstanceUID]?.images\n    const sortedMetadata = Array.isArray(images)\n      ? [...images].sort((a, b) => {\n          if (a.InstanceNumber !== undefined && b.InstanceNumber !== undefined) {\n            return Number(a.InstanceNumber) - Number(b.InstanceNumber)\n          }\n          return 0 // keep original order if either is missing InstanceNumber\n        })\n      : []\n    const metadata = sortedMetadata[instanceNumber - 1]\n    const tags = getSortedTags(metadata)\n    return transformTagsToTableData(tags)\n  }, [instanceNumber, selectedDisplaySetInstanceUID, displaySets])\n\n  const filteredData = useMemo(() => {\n    if (filterValue === undefined || filterValue === '') return tableData\n\n    const searchLower = filterValue.toLowerCase()\n    const matchedKeys = new Set<string>()\n\n    const nodeMatches = (node: TableDataItem): boolean => {\n      return (\n        (node.tag?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.vr?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.keyword?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.value?.toString().toLowerCase() ?? '').includes(searchLower)\n      )\n    }\n\n    // First pass: find all matching nodes and their parent paths\n    const findMatchingPaths = (\n      node: TableDataItem,\n      parentPath: TableDataItem[] = []\n    ): TableDataItem[][] => {\n      const currentPath = [...parentPath, node]\n      let matchingPaths: TableDataItem[][] = []\n\n      if (nodeMatches(node)) {\n        matchingPaths.push(currentPath)\n      }\n\n      if (node.children != null) {\n        node.children.forEach(child => {\n          const childPaths = findMatchingPaths(child, currentPath)\n          matchingPaths = [...matchingPaths, ...childPaths]\n        })\n      }\n\n      return matchingPaths\n    }\n\n    // Find all paths that contain matches\n    const matchingPaths = tableData.flatMap(node => findMatchingPaths(node))\n\n    // Second pass: reconstruct the tree with matching paths\n    const reconstructTree = (\n      paths: TableDataItem[][],\n      level = 0\n    ): TableDataItem[] => {\n      if (paths.length === 0 || level >= paths[0].length) return []\n\n      const nodesAtLevel = new Map<string, {\n        node: TableDataItem\n        childPaths: TableDataItem[][]\n      }>()\n\n      paths.forEach(path => {\n        if (level < path.length) {\n          const node = path[level]\n          if (!nodesAtLevel.has(node.key)) {\n            nodesAtLevel.set(node.key, {\n              node: { ...node },\n              childPaths: []\n            })\n          }\n          if (level + 1 < path.length) {\n            nodesAtLevel.get(node.key)?.childPaths.push(path)\n          }\n        }\n      })\n\n      return Array.from(nodesAtLevel.values()).map(({ node, childPaths }) => {\n        matchedKeys.add(node.key)\n        const children = reconstructTree(childPaths, level + 1)\n        return children.length > 0 ? { ...node, children } : node\n      })\n    }\n\n    const filtered = reconstructTree(matchingPaths)\n    setExpandedKeys(Array.from(matchedKeys))\n\n    return filtered\n  }, [tableData, filterValue])\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div className='dicom-tag-browser'>\n      <div\n        style={{\n          width: '100%',\n          padding: '16px 20px 20px'\n        }}\n      >\n        <div style={{ display: 'flex', gap: '24px', marginBottom: '32px' }}>\n          <div style={{ flex: 1 }}>\n            <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>Series</Typography.Text>\n            <Select\n              style={{ width: '100%' }}\n              value={selectedDisplaySetInstanceUID}\n              onChange={(value) => {\n                setSelectedDisplaySetInstanceUID(value)\n                setInstanceNumber(1)\n              }}\n              optionLabelProp='label'\n              optionFilterProp='label'\n            >\n              {displaySetList.map((item) => (\n                <Option key={item.value} value={item.value} label={item.label}>\n                  <div>\n                    <div>{item.label}</div>\n                    <div\n                      style={{ fontSize: '12px', color: 'rgba(0, 0, 0, 0.45)' }}\n                    >\n                      {item.description}\n                    </div>\n                  </div>\n                </Option>\n              ))}\n            </Select>\n          </div>\n\n          {showInstanceList && (\n            <div style={{ flex: 1 }}>\n              <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>\n                Instance Number: {instanceNumber}\n              </Typography.Text>\n              <Slider\n                min={1}\n                max={displaySets[selectedDisplaySetInstanceUID]?.images.length}\n                value={instanceNumber}\n                onChange={(value) => setInstanceNumber(value)}\n                marks={instanceSliderMarks}\n                tooltip={{\n                  formatter: (value: number | undefined) => value !== undefined ? `Instance ${value}` : ''\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        <Input\n          style={{ marginBottom: '20px' }}\n          placeholder='Search DICOM tags...'\n          prefix={<SearchOutlined />}\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n        />\n\n        <Table\n          columns={columns}\n          dataSource={filteredData}\n          pagination={false}\n          expandable={{\n            expandedRowKeys: expandedKeys,\n            onExpandedRowsChange: (keys) => setExpandedKeys(keys as string[])\n          }}\n          size='small'\n          scroll={{ y: 500 }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default DicomTagBrowser\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Modal,\n  Row,\n  Space,\n  Badge,\n  Collapse,\n  Radio,\n  Tooltip\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  FileSearchOutlined,\n  UnorderedListOutlined,\n  UserOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport NotificationMiddleware, { NotificationMiddlewareEvents } from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\nimport { v4 as uuidv4 } from 'uuid'\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser'\nimport DicomWebManager from '../DicomWebManager'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  clients?: { [key: string]: DicomWebManager }\n  defaultClients?: { [key: string]: DicomWebManager }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface ExtendedCustomError extends CustomError {\n  source: string\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n  errorObj: ExtendedCustomError[]\n  errorCategory: string[]\n  warnings: string[]\n  serverSelectionMode: 'default' | 'custom'\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    const cachedMode = window.localStorage.getItem('slim_server_selection_mode') as 'default' | 'custom' | null\n\n    this.state = {\n      errorObj: [],\n      errorCategory: [],\n      warnings: [],\n      selectedServerUrl: cachedServerUrl ?? '',\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl),\n      serverSelectionMode: cachedMode === 'custom' && cachedServerUrl !== null && cachedServerUrl !== '' ? 'custom' : 'default'\n    }\n\n    const onErrorHandler = ({ source, error }: {\n      source: string\n      error: CustomError\n    }): void => {\n      this.setState(state => ({\n        ...state,\n        errorObj: [...state.errorObj, { ...error, source }],\n        errorCategory: [...state.errorCategory, error.type]\n      }))\n    }\n\n    const onWarningHandler = (warning: string): void => {\n      this.setState(state => ({\n        ...state,\n        warnings: [...state.warnings, warning]\n      }))\n    }\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnError,\n      onErrorHandler\n    )\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnWarning,\n      onWarningHandler\n    )\n  }\n\n  componentDidUpdate (prevProps: Readonly<HeaderProps>, prevState: Readonly<HeaderState>): void {\n    if (((prevState.warnings.length > 0) || (prevState.errorObj.length > 0)) && this.props.location.pathname !== prevProps.location.pathname) {\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true,\n        errorObj: [],\n        errorCategory: [],\n        warnings: []\n      })\n    }\n  }\n\n  isValidServerUrl = (url: string | null | undefined): boolean => {\n    if (url == null || url === '') {\n      return false\n    }\n    try {\n      const urlObj = new URL(url)\n      return urlObj.protocol.startsWith('http') && urlObj.pathname.length > 0\n    } catch (TypeError) {\n      return false\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleDicomTagBrowserButtonClick = (): void => {\n    const width = window.innerWidth - 200\n    Modal.info({\n      title: 'DICOM Tag Browser',\n      width,\n      content: <DicomTagBrowser\n        clients={this.props.clients ?? {}}\n        studyInstanceUID={this.props.params.studyInstanceUID ?? ''}\n               />,\n      onOk (): void {}\n    })\n  }\n\n  handleDebugButtonClick = (): void => {\n    const errorMsgs: {\n      Authentication: string[]\n      Communication: string[]\n      EncodingDecoding: string[]\n      Visualization: string[]\n    } = {\n      Authentication: [],\n      Communication: [],\n      EncodingDecoding: [],\n      Visualization: []\n    }\n\n    type ObjectKey = keyof typeof errorMsgs\n    const errorNum = this.state.errorObj.length\n\n    if (errorNum > 0) {\n      for (let i = 0; i < errorNum; i++) {\n        const category = this.state.errorCategory[i] as ObjectKey\n        errorMsgs[category].push(`${this.state.errorObj[i].message as string} (Source: ${this.state.errorObj[i].source})`)\n      }\n    }\n\n    const { Panel } = Collapse\n\n    const showErrorCount = (errcount: number): JSX.Element => (\n      <Badge count={errcount} />\n    )\n\n    const showWarningCount = (warncount: number): JSX.Element => (\n      <Badge color='green' count={warncount} />\n    )\n\n    Modal.info({\n      title: 'Debug Information\\n (Check console for more information)',\n      width: 800,\n      content: (\n        <Collapse>\n          <Panel\n            header='Communication Error'\n            key='communicationerror'\n            extra={showErrorCount(errorMsgs.Communication.length)}\n          >\n            <ol>\n              {errorMsgs.Communication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Data Encoding/Decoding error'\n            key='encodedecodeerror'\n            extra={showErrorCount(errorMsgs.EncodingDecoding.length)}\n          >\n            <ol>\n              {errorMsgs.EncodingDecoding.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Visualization error'\n            key='visualizationerror'\n            extra={showErrorCount(errorMsgs.Visualization.length)}\n          >\n            <ol>\n              {errorMsgs.Visualization.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Authentication error'\n            key='autherror'\n            extra={showErrorCount(errorMsgs.Authentication.length)}\n          >\n            <ol>\n              {errorMsgs.Authentication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Warning'\n            key='warning'\n            extra={showWarningCount(this.state.warnings.length)}\n          >\n            <ol>\n              {this.state.warnings.map(warning => (\n                <li key={uuidv4()}>{warning}</li>\n              ))}\n            </ol>\n          </Panel>\n        </Collapse>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  handleServerSelectionInput = (\n    event: React.FormEvent<HTMLInputElement>\n  ): void => {\n    const value = event.currentTarget.value\n    this.setState({\n      selectedServerUrl: value,\n      isServerSelectionDisabled: !this.isValidServerUrl(value)\n    })\n  }\n\n  handleServerSelectionCancellation = (): void => {\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    this.setState({\n      serverSelectionMode: cachedServerUrl !== null && cachedServerUrl !== '' ? 'custom' : 'default',\n      selectedServerUrl: cachedServerUrl ?? undefined,\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl)\n    })\n  }\n\n  handleServerSelectionModeChange = (e: any): void => {\n    const mode = e.target.value\n    this.setState({ serverSelectionMode: mode })\n  }\n\n  handleServerSelection = (): void => {\n    window.localStorage.setItem('slim_server_selection_mode', this.state.serverSelectionMode)\n\n    if (this.state.serverSelectionMode === 'default') {\n      this.props.onServerSelection({ url: '' })\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: false\n      })\n      return\n    }\n\n    const url = this.state.selectedServerUrl\n    let closeModal = false\n    if (url != null && url !== '') {\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        this.props.onServerSelection({ url })\n        closeModal = true\n      }\n    }\n    this.setState({\n      isServerSelectionModalVisible: !closeModal,\n      isServerSelectionDisabled: !closeModal\n    })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = { items: userMenuItems }\n      user = (\n        <Dropdown menu={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    const debugButton = (\n      <Badge count={this.state.errorObj.length} style={{ zIndex: 1000 }}>\n        <Badge color='green' count={this.state.warnings.length} style={{ zIndex: 1001 }}>\n          <Button\n            icon={SettingOutlined}\n            tooltip='Debug info'\n            onClick={this.handleDebugButtonClick}\n          />\n        </Badge>\n      </Badge>\n    )\n\n    const showDicomTagBrowser = this.props.location.pathname.includes('/studies/')\n\n    const dicomTagBrowserButton = showDicomTagBrowser\n      ? (\n        <Button\n          icon={FileSearchOutlined}\n          tooltip='Dicom Tag Browser'\n          onClick={this.handleDicomTagBrowserButtonClick}\n        />\n        )\n      : null\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    const selectedServerUrl = this.state.serverSelectionMode === 'custom'\n      ? this.state.selectedServerUrl\n      : this.props.clients?.default?.baseURL ?? this.props.defaultClients?.default?.baseURL\n\n    const urlInfo = selectedServerUrl != null && selectedServerUrl !== ''\n      ? (\n        <Tooltip title={selectedServerUrl}>\n          <div\n            style={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap',\n              paddingRight: '20px',\n              paddingLeft: '20px'\n            }}\n            title={selectedServerUrl}\n          >\n            {selectedServerUrl}\n          </div>\n        </Tooltip>\n        )\n      : null\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row style={{ flexWrap: 'nowrap' }}>\n            <Col style={{ flexShrink: 0 }}>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' style={{ minWidth: 0, overflow: 'hidden' }}>\n              <div style={{ width: '100%', overflow: 'hidden' }}>\n                {this.props.showServerSelectionButton ? urlInfo : ''}\n              </div>\n            </Col>\n            <Col style={{ flexShrink: 0 }}>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {debugButton}\n                {dicomTagBrowserButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          open={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={this.handleServerSelection}\n          onCancel={this.handleServerSelectionCancellation}\n        >\n          <Radio.Group\n            value={this.state.serverSelectionMode}\n            onChange={this.handleServerSelectionModeChange}\n            style={{ marginBottom: '16px' }}\n          >\n            <Radio value='default'>Use default server</Radio>\n            <Radio value='custom'>Use custom server</Radio>\n          </Radio.Group>\n\n          {this.state.serverSelectionMode === 'custom' && (\n            <Tooltip title={this.state.selectedServerUrl}>\n              <Input\n                placeholder='Enter base URL of DICOMweb Study Service'\n                value={this.state.selectedServerUrl}\n                onChange={this.handleServerSelectionInput}\n                onPressEnter={this.handleServerSelection}\n                addonAfter={\n                this.state.isServerSelectionDisabled\n                  ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                  : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n            </Tooltip>\n          )}\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { Button, Input, Space, Table, TablePaginationConfig } from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'An error occured. Search for studies failed.'\n          )\n        )\n      })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Request to search for studies failed.'\n          )\n        )\n      })\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\nimport NotificationMiddleware,\n{ NotificationMiddlewareContext } from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nconst createUser = (userData: UserData | null): User => {\n  let profile\n  if (userData !== null) {\n    profile = userData.profile\n  }\n\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.AUTH,\n        new CustomError(\n          errorTypes.AUTHENTICATION,\n          'Failed to obtain user \"name\" and \"email\".'\n        )\n      )\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.AUTH,\n      new CustomError(\n        errorTypes.AUTHENTICATION,\n        'Failed to obtain user profile.'\n      )\n    )\n  }\n  return {\n    name: undefined,\n    email: undefined\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string|undefined> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user profile.'\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user information.'\n          )\n        )\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\nimport * as dcmjs from 'dcmjs'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\nimport DicomMetadataStore, { Instance } from './services/DICOMMetadataStore'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'At least one server needs to be configured.'\n          )\n        )\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Either path or full URL needs to be configured for server.'\n          )\n        )\n      }\n\n      const hasHttpsUrl = (url?: string): boolean => url?.startsWith('https') ?? false\n\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n\n      const shouldUpgradeInsecure = serverSettings.upgradeInsecureRequests === true && [\n        serviceUrl,\n        serverSettings.qidoPathPrefix,\n        serverSettings.wadoPathPrefix,\n        serverSettings.stowPathPrefix\n      ].some(hasHttpsUrl)\n\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n\n      if (shouldUpgradeInsecure) {\n        clientSettings.headers = {\n          ...clientSettings.headers,\n          'Content-Security-Policy': 'upgrade-insecure-requests'\n        }\n      }\n\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one store is supported for now.'\n        )\n      )\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const studySummaryMetadata = await this.stores[0].client.retrieveStudyMetadata(options)\n    const naturalized = naturalizeDataset(studySummaryMetadata)\n    DicomMetadataStore.addStudy(naturalized)\n    return studySummaryMetadata\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const seriesSummaryMetadata = await this.stores[0].client.retrieveSeriesMetadata(options)\n    const naturalized = seriesSummaryMetadata.map(naturalizeDataset)\n    DicomMetadataStore.addSeriesMetadata(naturalized, true)\n    return seriesSummaryMetadata\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    const instance = await this.stores[0].client.retrieveInstance(options)\n    const data = dcmjs.data.DicomMessage.readFile(instance)\n    const { dataset } = dmv.metadata.formatMetadata(data.dict)\n    DicomMetadataStore.addInstances([dataset as Instance])\n    return instance\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <CaseViewer\n      clients={clients}\n      user={user}\n      annotations={config.annotations}\n      preload={preload}\n      app={app}\n      enableAnnotationTools={enableAnnotationTools}\n      studyInstanceUID={studyInstanceUID}\n    />\n  )\n}\n\nfunction _createClientMapping ({ baseUri, gcpBaseUrl, settings, onError }: {\n  baseUri: string\n  gcpBaseUrl: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      if (window.location.pathname.includes('/projects/')) {\n        const pathname = window.location.pathname.split('/study/')[0]\n        const pathUrl = `${gcpBaseUrl}${pathname}/dicomWeb`\n        serverSettings.url = pathUrl\n      }\n\n      storageClassMapping.default += 1\n      clientMapping.default = new DicomWebManager({\n        baseUri,\n        settings: [serverSettings],\n        onError\n      })\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.COMMUNICATION,\n        'Only one default server can be configured without specification ' +\n        'of storage classes.'\n      )\n    )\n  }\n\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one configured server can specify a given storage class. ' +\n          `Storage class \"${key}\" is specified by more than one ` +\n          'of the configured servers.'\n        )\n      )\n    }\n  }\n\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n  }\n\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  defaultClients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'User is not authorized to access DICOMweb resources.')\n      )\n    }\n\n    const logServerError = (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'An unexpected server error occured.'\n        )\n      )\n    }\n\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          logServerError()\n        }\n      })\n    } else if (error.status === 500) {\n      logServerError()\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'One server needs to be configured.')\n      )\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n    this.addGcpSecondaryAnnotationServer(props.config)\n\n    const defaultClients = _createClientMapping({\n      baseUri,\n      gcpBaseUrl: props.config.gcpBaseUrl ?? 'https://healthcare.googleapis.com/v1',\n      settings: props.config.servers,\n      onError: this.handleDICOMwebError\n    })\n\n    this.state = {\n      clients: defaultClients,\n      defaultClients,\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  addGcpSecondaryAnnotationServer (config: AppProps['config']): void {\n    const serverId = 'gcp_secondary_annotation_server'\n    const urlParams = new URLSearchParams(window.location.search)\n    const url = urlParams.get('gcp')\n    const gcpSecondaryAnnotationServer = config.servers.find(\n      (server) => server.id === serverId\n    )\n    if (gcpSecondaryAnnotationServer === undefined && typeof url === 'string') {\n      config.servers.push({\n        id: serverId,\n        write: true,\n        url,\n        storageClasses: [\n          StorageClasses.COMPREHENSIVE_SR,\n          StorageClasses.COMPREHENSIVE_3D_SR,\n          StorageClasses.SEGMENTATION,\n          StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION,\n          StorageClasses.PARAMETRIC_MAP,\n          StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE,\n          StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n        ]\n      })\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    if (url === '' || window.localStorage.getItem('slim_server_selection_mode') === 'default') {\n      this.setState({ clients: this.state.defaultClients })\n      return\n    }\n    window.localStorage.setItem('slim_selected_server', url)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath !== null && storedPath !== '') {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch !== null && storedSearch !== '') {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Could not sign-in user.')\n        )\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path === null || path === '') {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n\n    // Restore cached server selection if it exists\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    if (cachedServerUrl !== null && cachedServerUrl !== '') {\n      this.handleServerSelection({ url: cachedServerUrl })\n    }\n\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n              clients={this.state.clients}\n              defaultClients={this.state.defaultClients}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/projects/:project/locations/:location/datasets/:dataset/dicomStores/:dicomStore/study/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","PatientID","PatientName","PatientSex","PatientBirthDate","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","_subscriptions","Symbol","_lastSubscriptionId","PubSub","eventName","callback","Error","hasOwnProperty","subscriptionId","callbacks","payload","errorTypes","CustomError","type","message","stack","NotificationMiddlewareEvents","NotificationMiddlewareContext","NotificationType","NotificationSourceDefinition","sources","category","notificationType","outerContext","args","publish","Array","from","warn","console","JSON","stringify","arguments","includes","apply","prototype","slice","call","source","error","notificationMsg","errorCategory","find","s","String","notification","description","duration","state","isLoading","overviewViewportRef","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","info","ContainerIdentifier","dmv","client","clients","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","disableInteractions","resizeFactor","errorInterceptor","NotificationMiddleware","render","container","resize","style","height","containerIdentifier","position","ref","textAlign","display","alignItems","justifyContent","fontSize","color","letterSpacing","volumeImages","top","right","zIndex","textShadow","seriesInstanceUIDs","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","AnnotationGroupControls","settings","direction","placement","content","overlayStyle","shape","SettingOutlined","AnnotationGroupBadgeDescription","isBadgeVisible","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","annotationGroupUID","annotationGroup","handleAnnotationGroupClick","onAnnotationGroupClick","handleMeasurementSelection","handleOpacityChange","handleColorRChange","handleColorGChange","handleColorBChange","getCurrentColor","currentStyle","opacity","defaultStyle","onStyleChange","styleOptions","limitValues","isArray","option","codeComponents","measurement","schemeDesignator","meaning","colorSettings","windowSettings","explorationSettings","AnnotationGroupSequence","findIndex","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","AnnotationCoordinateType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","plain","justify","gutter","range","min","max","step","handleLowerLimitChange","handleLimitChange","handleUpperLimitChange","minWidth","defaultValue","annotationGroups","onAnnotationGroupVisibilityChange","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupStyleChange","handleClick","text","button","Icon","isSelected","tooltip","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","overflowY","handleRemoval","getCurrentColors","paletteColorLookupTable","previousProps","previousState","opticalPath","opticalPathIdentifier","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","specimenDescriptions","maxValue","Math","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","SeriesInstanceUID","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","mappingUID","mapping","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","segmentUID","segment","algorithmName","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","contourOnly","annotationGroupsUIDs","updateCurrentStyle","handleShowOutlineOnly","target","checkedAnnotationUids","defaultAnnotationStyles","types","checkAll","every","uids","indeterminate","some","handleChangeCheckedType","e","mouseEnterDelay","reduce","acc","marginLeft","shortenedCodeMeaning","displayCodeMeaning","isChecked","indeterminateType","flexDirection","categories","categoriesAcc","annotation","categoryKey","typeKey","oldCategory","oldType","Object","keys","typesArr","getCategories","xPosition","yPosition","left","backgroundColor","minHeight","pointerEvents","attr","roiUid","adaptRoiToAnnotation","result","user","app","refImage","observer","refSpecimen","debug","sr","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","trackingIdentifier","referencedRegion","graphicType","graphicData","qualitativeEvaluations","filter","ContentTemplateSequence","MappingResource","TemplateIdentifier","measurementReport","languageOfContentItemAndDescendants","procedureReported","isReportModalVisible","generatedReport","evidence","seriesNumber","seriesDescription","sopInstanceUID","instanceNumber","manufacturer","previousVersions","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","DEFAULT_ANNOTATION_STROKE_COLOR","DEFAULT_ANNOTATION_COLOR_PALETTE","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","_areROIsEqual","a","b","s1","s2","j","_formatRoiStyle","stroke","fill","image","circle","radius","_constructViewers","preload","labelViewer","volumeViewer","clientMapping","controls","activateSelectInteraction","labelImages","_implementsTID1500","templateSeq","_describesSpecimenSubject","subjectClassValue","retrievedConcept","expectedConcept","_containsROIAnnotations","measurementGroups","foundRegion","regions","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","hoveredRois","lastPixel","keysDown","Set","defaultRoiStyle","roiStyles","selectionStrokeColor","selectionFillColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","rawInstance","instance","SOPInstanceUID","retrieveInstance","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","selectedPresentationStateUID","setPresentationState","presentationStates","catch","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","activateOpticalPath","showOpticalPath","add","searchParams","URLSearchParams","search","set","pathname","replace","getRoiStyle","loadDerivedDataset","derivedDataset","SOPClassUID","getAllROIs","handleAnnotationVisibilityChange","getAllAnnotationGroups","handleAnnotationGroupVisibilityChange","getAllSegments","handleSegmentVisibilityChange","getAllParameterMappings","parameterMapping","handleMappingVisibilityChange","handleOpticalPathVisibilityChange","addAnnotationGroups","Promise","resolve","reject","MICROSCOPY_BULK_SIMPLE_ANNOTATION","searchForSeries","matchedSeries","series","retrieveSeriesMetadata","retrievedMetadata","ann","finding","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","forceUpdate","addSegmentations","SEGMENTATION","segmentations","seg","FrameOfReferenceUID","addSegments","addParametricMaps","PARAMETRIC_MAP","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","addAnnotations","onRoiModified","onWindowResize","onRoiDrawn","detail","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","addROI","onRoiDoubleClicked","isSelectedRoiModalVisible","setHoveredRoiAttributes","r","hoveredRoiAttributes","clearHoveredRois","getUniqueHoveredRois","newRoi","allRois","isSamePixelAsLast","clientX","clientY","onPointerMove","hoveredRoi","feature","originalEvent","isHoveredRoiTooltipVisible","hoveredRoiTooltipX","hoveredRoiTooltipY","getUpdatedSelectedRois","newSelectedRoiUid","selectedRoiUid","emptySelection","selectedRoi","getROI","oldSelectedRois","resetUnselectedRoiStyles","selectionState","setROIStyle","onMapClicked","updatedSelectedRois","clearSelections","onRoiSelected","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingError","onLoadingError","onFrameLoadingEnded","delete","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","onKeyDown","onKeyUp","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","isAnnotationModalVisible","isGoToModalVisible","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","zoomToROI","handleICCProfilesToggle","isICCProfilesEnabled","toggleICCProfiles","formatAnnotation","generateRoiStyle","geometryTypes","componentSetup","componentCleanup","handleRoiSelectionCancellation","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationGroupStyleChange","handleRoiStyleChange","handleXCoordinateSelection","handleYCoordinateSelection","handleMagnificationSelection","handleSlidePositionSelection","handleSlidePositionSelectionCancellation","handleReportVerification","handleReportCancellation","handleSegmentStyleChange","handleMappingStyleChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","handleAnnotationSelection","boundingBox","isSelectedMagnificationValid","isSelectedXCoordinateValid","isSelectedYCoordinateValid","selectedXCoordinate","validXCoordinateRange","selectedYCoordinate","validYCoordinateRange","selectedMagnification","areRoisHidden","cleanup","isOpticalPathVisible","isOpticalPathActive","COMPREHENSIVE_3D_SR","otherROI","roiAsAnnotation","document","body","removeEventListener","window","addEventListener","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","selectedMarkup","filteredEvaluations","x","Number","start","end","y","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","point","log","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","prevState","generateReport","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","showAnnotationGroup","hideAnnotationGroup","strokeColor","fillColor","c","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","sort","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","showROIs","hideROIs","allAnnotationGroups","filteredAnnotationGroups","referencedSeriesInstanceUID","annotationMenuItems","openSubMenuItems","geometryTypeOptionsMapping","box","polygon","line","freehandpolygon","freehandline","annotationConfigurations","defaultActiveFirstOption","placeholder","onClear","specimenMenu","equipmentMenu","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","selectedRoiInformation","cursor","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","iccProfilesMenu","getICCProfiles","margin","hasSider","overflow","open","onOk","okButtonProps","onCancel","okText","maskClosable","footer","prefix","onPressEnter","addonAfter","CheckOutlined","StopOutlined","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","setTimeout","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","areSameAcquisition","AcquisitionUID","Slide","options","acquisitionUID","opticalPathIdentifiers","pyramidUIDs","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","THUMBNAIL","PyramidUID","samplesPerPixel","SamplesPerPixel","requirePyramidUID","PhotometricInterpretation","createSlides","slideMetadata","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","imgA","imgB","fetchImageMetadata","onSuccess","onError","StudyInstanceUID","all","loadingSeries","seriesImages","newSlides","customError","slidesCache","Map","pendingRequests","useSlides","useState","setSlides","setIsLoading","setError","useEffect","cachedData","get","fetchSlides","pendingRequest","err","naturalizeDataset","findSeriesSlide","ParametrizedSlideViewer","selectedSlide","setSelectedSlide","setDerivedDataset","seriesSlide","findReferencedSlide","allClients","storageClass","seriesMetadata","naturalizedSeriesMetadata","ReferencedSeriesSequence","referencedSlide","imageLibrary","contentItem","referencedSOPInstanceUID","presentationStateUID","viewer","volumeInstances","clinicalTrialMenu","seriesFragment","borderRight","borderRightWidth","path","element","DicomMetaDictionary","formatValue","val","getRows","depth","keywords","flatMap","keyword","tagInfo","nameMap","match","tag","sequenceItems","sequenceNode","getSortedTags","subscribe","_broadcastEvent","_unsubscribe","_isValidEvent","listenerId","subscription","listeners","unsubscribe","EVENTS","callbackProps","hasListeners","hasCallbacks","listener","defaultInstances","instances","instancesMap","SeriesNumber","SeriesDescription","SeriesDate","SeriesTime","addInstance","newInstance","addInstances","newInstances","len","getInstance","StudyDescription","NumInstances","ModalitiesInStudy","isLoaded","addInstanceToSeries","addInstancesToSeries","createSeriesMetadata","setSeriesMetadata","existingSeries","assign","STUDY_ADDED","INSTANCES_ADDED","SERIES_ADDED","SERIES_UPDATED","_model","studies","_getStudy","aStudy","_getSeries","study","aSeries","BaseImplementation","dicomJSONDatasetOrP10ArrayBuffer","dicomJSONDataset","naturalizedDataset","ArrayBuffer","createStudyMetadata","madeInClient","updateSeriesMetadata","addSeriesMetadata","seriesSummaryMetadata","NumberOfStudyRelatedSeries","addStudy","existingStudy","newStudy","getStudyInstanceUIDs","getStudy","getSeries","getInstanceByImageId","imageId","updateMetadataForSeries","pubSubServiceInterface","setStudy","displaySets","setDisplaySets","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","expandedKeys","setExpandedKeys","searchInput","setSearchInput","debouncedSearchValue","delay","debouncedValue","setDebouncedValue","timer","clearTimeout","useDebounce","handler","DicomMetadataStore","seriesAddedSubscription","instancesAddedSubscription","derivedDisplaySets","processedSeries","ds","displaySetInstanceUID","displaySetList","useMemo","displaySet","displayDate","dateStr","hour","minute","second","monthNum","parseInt","dayNum","date","Date","getMonth","getDate","weekday","toLocaleDateString","monthName","dayFormatted","yearNum","getFullYear","formatDicomDate","showInstanceList","instanceSliderMarks","totalInstances","tableData","transformTagsToTableData","tags","parentKey","keyBase","currentKey","InstanceNumber","filteredData","searchLower","toLowerCase","matchedKeys","nodeMatches","node","findMatchingPaths","parentPath","currentPath","matchingPaths","child","childPaths","filtered","reconstructTree","paths","nodesAtLevel","className","gap","marginBottom","flex","strong","optionLabelProp","optionFilterProp","marks","formatter","SearchOutlined","columns","dataIndex","dataSource","pagination","expandable","expandedRowKeys","onExpandedRowsChange","scroll","isValidServerUrl","url","urlObj","URL","protocol","startsWith","TypeError","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleDicomTagBrowserButtonClick","innerWidth","handleDebugButtonClick","errorMsgs","Authentication","Communication","EncodingDecoding","Visualization","errorNum","errorObj","warncount","Panel","Collapse","showErrorCount","errcount","uuidv4","warnings","warning","handleServerSelectionButtonClick","isServerSelectionModalVisible","handleServerSelectionInput","currentTarget","selectedServerUrl","isServerSelectionDisabled","handleServerSelectionCancellation","cachedServerUrl","localStorage","getItem","serverSelectionMode","handleServerSelectionModeChange","handleServerSelection","setItem","onServerSelection","closeModal","cachedMode","prevProps","worklistButton","userMenuItems","onUserLogout","userMenu","menu","trigger","UserOutlined","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","debugButton","dicomTagBrowserButton","FileSearchOutlined","showServerSelectionButton","ApiOutlined","default","baseURL","defaultClients","urlInfo","textOverflow","paddingRight","flexWrap","flexShrink","src","process","alt","subTitle","defaultPageSize","handleSearch","confirm","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","filterIcon","fetchData","handleChange","numStudies","pageSize","searchOptions","searchForStudies","limit","searchCriteria","fuzzymatching","filters","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","record","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","status","errorMessage","attemptFailedError","DicomWebManager","stores","handleError","updateHeaders","fields","f","headers","retrieveStudyMetadata","studySummaryMetadata","naturalized","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","shouldUpgradeInsecure","upgradeInsecureRequests","qidoPathPrefix","wadoPathPrefix","stowPathPrefix","qidoURLPrefix","wadoURLPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","read","dwc","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","auth","handleDICOMwebError","logServerError","errorMessages","setting","Authorization","storedPath","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","addGcpSecondaryAnnotationServer","gcpBaseUrl","storageClassMapping","storageClasses","pathUrl","server","_createClientMapping","wasAuthSuccessful","serverId","COMPREHENSIVE_SR","COLOR_SOFTCOPY_PRESENTATION_STATE","GRAYSCALE_SOFTCOPY_PRESENTATION_STATE","PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE","tmpClient","redirectTo","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}