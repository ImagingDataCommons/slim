{"version":3,"file":"static/js/315.13c9a84a.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","utils/PubSub.js","utils/CustomError.js","services/NotificationMiddleware.js","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","utils/router.tsx","components/ColorSettingsMenu.tsx","components/AnnotationCategoryItem.tsx","components/AnnotationCategoryList.tsx","components/HoveredRoiTooltip.tsx","services/RoiToAnnotationAdapter.ts","components/SlideViewer.tsx","data/slides.tsx","components/CaseViewer.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Gender',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","// Use symbols to prevent exposing private attributes\nconst _subscriptions = Symbol('subscriptions')\nconst _lastSubscriptionId = Symbol('lastSubscriptionId')\n\n/**\n * Class to enable implementation of publish/subscribe pattern\n * @class\n * @classdesc Enables publishing/subscribing\n */\nexport default class PubSub {\n  constructor () {\n    this[_subscriptions] = {}\n    this[_lastSubscriptionId] = 0\n  }\n\n  /**\n   * Adds a subscription callback to the provided event name\n   * @param {string} eventName Event name that will trigger the callback\n   * @param {Function} callback Function to be executed when event is published\n   * @returns {void}\n   */\n  subscribe (eventName, callback) {\n    if (eventName === undefined) {\n      throw new Error('Trying to subscribe to an inexistent event')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('The provided callback must be a function')\n    }\n\n    if (!this[_subscriptions].hasOwnProperty(eventName)) {\n      this[_subscriptions][eventName] = {}\n    }\n\n    const subscriptionId = `sub${this[_lastSubscriptionId]++}`\n    this[_subscriptions][eventName][subscriptionId] = callback\n  }\n\n  /**\n   * Removes a subscription callback for the provided event name\n   * @param {string} eventName Event name for the registerd callback\n   * @param {Function} [callback] Function to have its subscription removed\n   * @returns {void}\n   */\n  unsubscribe (eventName, callback) {\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      if (!callback) {\n        delete callbacks[subscriptionId]\n      } else if (callbacks[subscriptionId] === callback) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n\n  /**\n   * Trigger all registered subscription callbacks for a specific event name\n   * @param {String} eventName Event name to trigger subscriptions from\n   * @param {any} [payload] Payload that will be passed to the callback fuction\n   * @returns {void}\n   */\n  publish (eventName, ...payload) {\n    if (eventName === undefined) {\n      throw new Error('Trying to publish an inexistent event')\n    }\n\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      callbacks[subscriptionId](...payload)\n    }\n  }\n\n  /**\n   * Cleares all subscriptions for current instance\n   * @returns {void}\n   */\n  unsubscribeFromAll () {\n    for (const eventName in this[_subscriptions]) {\n      const callbacks = this[_subscriptions][eventName]\n      for (const subscriptionId in callbacks) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n}\n","const errorTypes = {\n  AUTHENTICATION: 'Authentication',\n  COMMUNICATION: 'Communication',\n  ENCODINGANDDECODING: 'EncodingDecoding',\n  VISUALIZATION: 'Visualization'\n}\n\nclass CustomError extends Error {\n  constructor (type, message) {\n    super()\n    this.message = message\n    this.stack = new Error().stack\n    this.type = type\n  }\n}\n\nexport { errorTypes, CustomError }\n","import PubSub from '../utils/PubSub'\nimport { notification } from 'antd'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nexport const NotificationMiddlewareEvents = {\n  OnError: 'onError',\n  OnWarning: 'onWarning'\n}\n\nexport const NotificationMiddlewareContext = {\n  DICOMWEB: 'dicomweb-client',\n  DMV: 'dicom-microscopy-viewer',\n  DCMJS: 'dcmjs',\n  SLIM: 'slim',\n  AUTH: 'authentication'\n}\n\nconst NotificationType = {\n  TOAST: 'toast',\n  CONSOLE: 'console'\n}\n\n/* Sources of Error:\n  1. 'dicomweb-client': Error while requesting/fetching data, tagged as 'Communication'\n  2. 'slim' and 'dicom-microscopy-viewer' library: Error related to dicom data encoding/decoding,\n  could directly/indirectly impact image-related visualization, tagged as 'Visualization' or\n  'Encoding/Decoding' accordingly\n  3. 'dcmjs' library: Data parsing error, tagged as 'DICOMError'\n  4. 'authentication': Error during user authentication, tagged as 'Authentication'\n  */\nconst NotificationSourceDefinition = {\n  sources: [\n    {\n      category: errorTypes.AUTHENTICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.COMMUNICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.VISUALIZATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.ENCODINGANDDECODING,\n      notificationType: NotificationType.CONSOLE\n    },\n    {\n      category: 'Warning',\n      notificationType: NotificationType.TOAST\n    }\n  ]\n}\n\nclass NotificationMiddleware extends PubSub {\n  constructor() {\n    super()\n\n    const outerContext = (args) => {\n      this.publish(NotificationMiddlewareEvents.OnWarning, Array.from(args).join(' '))\n    }\n\n    (function () {\n      var warn = console.warn;\n      console.warn = function () {\n        if (!JSON.stringify(arguments).includes('request')) {\n          outerContext(arguments)\n        }\n        warn.apply(this, Array.prototype.slice.call(arguments))\n      }\n    }())\n  }\n\n  /**\n   * Error handling middleware function\n   *\n   * @param source - source of error - dicomweb-client, dmv, dcmjs or slim itself\n   * @param error - error object\n   */\n  onError (source, error) {\n    const errorCategory = error.type\n    const sourceConfig = NotificationSourceDefinition.sources.find(\n      s => s.category === errorCategory\n    )\n\n    const { notificationType } = sourceConfig\n\n    this.publish(NotificationMiddlewareEvents.OnError, {\n      source,\n      error\n    })\n\n    let notificationMsg\n    if (error instanceof CustomError) {\n      notificationMsg = error.message\n    } else {\n      notificationMsg = String(error)\n    }\n\n    switch (notificationType) {\n      case NotificationType.TOAST:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        return notification.error({\n          message: `${errorCategory} error`,\n          description: notificationMsg,\n          duration: 3\n        })\n\n      case NotificationType.CONSOLE:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        break\n\n      default:\n    }\n  }\n}\n\nexport default new NotificationMiddleware()\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          metadata: metadata,\n          resizeFactor: 1,\n          errorInterceptor: (error: CustomError) => {\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.DMV,\n              error\n            )\n          }\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n    const attributes = []\n    const description = this.props.slide.description\n    if (description != null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ height: '100px' }} ref={this.overviewViewportRef} />\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: ({ roiUID }: { roiUID: string }) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection({ roiUID: object.key })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color,\n          limitValues: this.state.currentStyle.limitValues\n        }\n      })\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      uid: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value != null && option.children != null) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      },\n      {\n        name: 'Annotation coordinate type',\n        value: this.props.metadata.AnnotationCoordinateType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const measurementOptions = measurementsSequence.map((measurementItem, i) => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      return (\n        <Select.Option\n          key={i}\n          value={`${name.CodingSchemeDesignator}-${name.CodeValue}`}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    })\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        {}\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>\n            Color\n          </Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Red\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Green\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Blue\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues != null) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>\n            Exploration\n          </Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>\n              Measurement\n            </Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible = (\n      this.state.isVisible && this.state.currentStyle.measurement == null\n    )\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Badge\n            offset={[-20, 20]}\n            count={' '}\n            style={{\n              borderStyle: 'solid',\n              borderWidth: '1px',\n              borderColor: 'gray',\n              visibility: isBadgeVisible ? 'visible' : 'hidden',\n              backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n            }}\n          >\n            <Description\n              header={this.props.annotationGroup.label}\n              attributes={attributes}\n              selectable\n              hasLongValues\n            />\n          </Badge>\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<AnnotationGroupListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.ENCODINGANDDECODING,\n        'Content item \"Imaging Measurements\" not found.' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\".'\n      )\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Tracking Unique Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Finding\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Image Region\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: any\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Content item \"Image Region\" has unknown graphic type ' +\n            `\"${regionItem.GraphicType}\". ` +\n            'Content of Comprehensive 3D SR document is not structured ' +\n            'based on TID 1500 \"Measurement Report\" -> ' +\n            'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n          )\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen UID\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Container Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number | null\n  ): void {\n    if (value != null) {\n      const identifier = this.props.opticalPath.identifier\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { opacity: value }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          color: state.currentStyle.color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: value,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    try {\n      specimenDescriptions.forEach(description => {\n        const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] =\n          description.SpecimenPreparationSequence ?? []\n        specimenPreparationSteps.forEach(\n          (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n            step.SpecimenPreparationStepContentItemSequence.forEach((\n              item: (\n                dcmjs.sr.valueTypes.CodeContentItem |\n                dcmjs.sr.valueTypes.TextContentItem |\n                dcmjs.sr.valueTypes.UIDRefContentItem |\n                dcmjs.sr.valueTypes.PNameContentItem |\n                dcmjs.sr.valueTypes.DateTimeContentItem\n              ),\n              index: number\n            ) => {\n              const name = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptNameCodeSequence[0].CodeValue,\n                schemeDesignator:\n                    item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n              })\n              if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n                item = item as dcmjs.sr.valueTypes.CodeContentItem\n                const value = new dcmjs.sr.coding.CodedConcept({\n                  value: item.ConceptCodeSequence[0].CodeValue,\n                  schemeDesignator:\n                      item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                  meaning: item.ConceptCodeSequence[0].CodeMeaning\n                })\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: value.CodeMeaning\n                    })\n                  }\n                }\n              } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n                item = item as dcmjs.sr.valueTypes.TextContentItem\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: item.TextValue\n                    })\n                  }\n                }\n              }\n            })\n          }\n        )\n      })\n    } catch (error: any) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DCMJS,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          error.message\n        )\n      )\n    }\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        mappingUID: this.props.mapping.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: value\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({ currentStyle: { opacity: value } })\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","import React from 'react'\nimport { Col, Divider, InputNumber, Row, Slider } from 'antd'\n\ninterface ColorSettingsMenuProps {\n  annotationGroupsUIDs: string[]\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onStyleChange: Function\n}\n\ninterface ColorSettingsMenuState {\n  currentStyle: {\n    opacity: number\n    color?: number[]\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass ColorSettingsMenu extends React.Component<\nColorSettingsMenuProps,\nColorSettingsMenuState\n> {\n  constructor (props: ColorSettingsMenuProps) {\n    super(props)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: this.state.currentStyle.color,\n            opacity: value\n          }\n        })\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color\n        }\n      })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity\n        }\n      }))\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n          },\n        });\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity\n        }\n      }))\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n          },\n        })\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity\n        }\n      }))\n\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n          },\n        })\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  render (): React.ReactNode {\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    return (\n      <div>\n        {colorSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default ColorSettingsMenu\n","import React from 'react'\nimport { Menu, Space, Checkbox, Tooltip, Popover, Button } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { Category, Type } from './AnnotationCategoryList'\nimport ColorSettingsMenu from './ColorSettingsMenu'\n\nconst AnnotationCategoryItem = ({\n  category,\n  onChange,\n  checkedAnnotationUids,\n  onStyleChange,\n  defaultAnnotationStyles\n}: {\n  category: Category\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const { types } = category\n\n  const onCheckCategoryChange = (e: any): void => {\n    const isVisible = e.target.checked\n    types.forEach((type: Type) => {\n      handleChangeCheckedType({ type, isVisible })\n    })\n  }\n\n  const checkAll = types.every((type: Type) =>\n    type.uids.every((uid: string) => checkedAnnotationUids.has(uid))\n  )\n  const indeterminate =\n    !checkAll &&\n    types.some((type: Type) =>\n      type.uids.some((uid: string) => checkedAnnotationUids.has(uid))\n    )\n\n  const handleChangeCheckedType = ({\n    type,\n    isVisible\n  }: {\n    type: Type\n    isVisible: boolean\n  }): void => {\n    type.uids.forEach((uid: string) => {\n      onChange({ roiUID: uid, isVisible })\n    })\n  }\n\n  return (\n    <Menu.Item\n      style={{ height: '100%', paddingLeft: '3px' }}\n      key={category.CodeMeaning}\n    >\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Space direction='vertical' align='end'>\n            <Checkbox\n              indeterminate={indeterminate}\n              checked={checkAll}\n              onChange={onCheckCategoryChange}\n            >\n              <Tooltip\n                title={`${category.CodeValue}:${category.CodingSchemeDesignator}`}\n                mouseEnterDelay={1}\n              >\n                {category.CodeMeaning}\n              </Tooltip>\n              <Popover\n                placement='topLeft'\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n                content={() => (\n                  <ColorSettingsMenu\n                    annotationGroupsUIDs={types.reduce(\n                      (acc: string[], type) => {\n                        return [...acc, ...type.uids]\n                      },\n                      []\n                    )}\n                    onStyleChange={onStyleChange}\n                    defaultStyle={\n                      defaultAnnotationStyles[types[0].uids[0]]\n                    }\n                  />\n                )}\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  style={{ marginLeft: '10px' }}\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Checkbox>\n          </Space>\n          {types.map((type: Type) => {\n            const { CodeMeaning, CodingSchemeDesignator, CodeValue, uids } =\n              type;\n            const shortenedCodeMeaning = CodeMeaning.slice(0, 22);\n            const displayCodeMeaning = shortenedCodeMeaning === CodeMeaning ? CodeMeaning : `${shortenedCodeMeaning}...`;\n            const isChecked = uids.every((uid: string) =>\n              checkedAnnotationUids.has(uid)\n            )\n            const indeterminateType =\n              !isChecked &&\n              uids.some((uid: string) => checkedAnnotationUids.has(uid))\n            return (\n              <div\n                key={`${type.CodingSchemeDesignator}:${type.CodeMeaning}`}\n                style={{\n                  paddingLeft: \"25px\",\n                  wordWrap: \"break-word\",\n                  width: \"100%\",\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                }}\n              >\n                <Checkbox\n                  indeterminate={indeterminateType}\n                  checked={isChecked}\n                  onChange={(e: any) =>\n                    handleChangeCheckedType({\n                      type,\n                      isVisible: e.target.checked,\n                    })\n                  }\n                ></Checkbox>\n                <div style={{ paddingLeft: \"5px\" }}>\n                  <Tooltip\n                    title={`${CodeValue}:${CodingSchemeDesignator}`}\n                    mouseEnterDelay={1}\n                  >\n                    {displayCodeMeaning}\n                  </Tooltip>\n                  <Popover\n                    placement=\"topLeft\"\n                    overlayStyle={{ width: \"350px\" }}\n                    title=\"Display Settings\"\n                    content={() => (\n                      <ColorSettingsMenu\n                        annotationGroupsUIDs={type.uids}\n                        onStyleChange={onStyleChange}\n                        defaultStyle={defaultAnnotationStyles[type.uids[0]]}\n                      />\n                    )}\n                  >\n                    <Button\n                      type=\"primary\"\n                      shape=\"circle\"\n                      style={{ marginLeft: \"10px\" }}\n                      icon={<SettingOutlined />}\n                    />\n                  </Popover>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </Space>\n    </Menu.Item>\n  )\n}\n\nexport default AnnotationCategoryItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport AnnotationCategoryItem from './AnnotationCategoryItem'\n\n\nexport interface AnnotationCategoryAndType {\n  uid: string;\n  type: Omit<Type, 'uids'>\n  category: Omit<Category, 'types'>\n}\nexport interface Type {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  uids: string[]\n}\nexport interface Category {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  types: Type[]\n}\n\nconst getCategories = (annotations: any): Record<string, Category> => {\n  const categories = annotations?.reduce(\n    (\n      categoriesAcc: Record<string, Category & { types: Record<string, Type> }>,\n      annotation: AnnotationCategoryAndType\n    ) => {\n      const { category, type, uid } = annotation\n      const categoryKey = category.CodeMeaning\n      const typeKey = type.CodeMeaning\n\n      const oldCategory = categoriesAcc[categoryKey] ?? {\n        ...category,\n        types: {}\n      }\n      const oldType = oldCategory.types[typeKey] ?? {\n        ...type,\n        uids: []\n      }\n\n      return {\n        ...categoriesAcc,\n        [categoryKey]: {\n          ...oldCategory,\n          types: {\n            ...oldCategory.types,\n            [typeKey]: { ...oldType, uids: [...oldType.uids, uid] }\n          }\n        }\n      }\n    },\n    {}\n  )\n\n  // Normalizing types so that it's an array instead of an object:\n  Object.keys(categories).forEach((categoryKey: string) => {\n    const category = categories[categoryKey]\n    const { types } = category\n    const typesArr = Object.keys(types).map(\n      (typeKey: string) => types[typeKey]\n    )\n    categories[categoryKey].types = typesArr\n  })\n\n  return categories\n}\n\nconst AnnotationCategoryList = ({\n  annotations,\n  onChange,\n  onStyleChange,\n  defaultAnnotationStyles,\n  checkedAnnotationUids\n}: {\n  annotations: AnnotationCategoryAndType[]\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const categories: Record<string, Category> = getCategories(annotations)\n\n  if (Object.keys(categories).length === 0) {\n    return <></>\n  }\n\n  const items = Object.keys(categories).map((categoryKey: any) => {\n    const category = categories[categoryKey]\n    return (\n      <AnnotationCategoryItem\n        key={category.CodeMeaning}\n        category={category}\n        onChange={onChange}\n        onStyleChange={onStyleChange}\n        defaultAnnotationStyles={defaultAnnotationStyles}\n        checkedAnnotationUids={checkedAnnotationUids}\n      />\n    )\n  })\n\n  return <Menu selectable={false}>{items}</Menu>\n}\nexport default AnnotationCategoryList\n","const HoveredRoiTooltip = ({\n  xPosition,\n  yPosition,\n  attributes\n}: {\n  xPosition: number\n  yPosition: number\n  attributes: Array<{ name: string, value: string }>\n}): JSX.Element => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: `${yPosition}px`,\n        left: `${xPosition}px`,\n        backgroundColor: 'rgba(230, 230, 230, 0.65)',\n        minWidth: '150px',\n        minHeight: '60px',\n        padding: '20px',\n        fontWeight: 'bold',\n        pointerEvents: 'none'\n      }}\n    >\n      {attributes.map((attr) => (\n        <div key={attr.name}>\n          {attr.name}: <span style={{ fontWeight: 500 }}>{attr.value}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default HoveredRoiTooltip\n","import * as dmv from 'dicom-microscopy-viewer';\nimport * as dcmjs from 'dcmjs'\nimport { AnnotationCategoryAndType } from '../components/AnnotationCategoryList';\n\n\nexport const adaptRoiToAnnotation = (roi: dmv.roi.ROI): AnnotationCategoryAndType => {\n  const { uid, evaluations } = roi;\n\n  const result = {\n    category: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined',\n    },\n    type: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined',\n    }\n  }\n\n  evaluations.forEach((\n    item: (\n      dcmjs.sr.valueTypes.TextContentItem |\n      dcmjs.sr.valueTypes.CodeContentItem\n    )\n  ) => {\n    const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n    if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n      const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n      const value = codeContentItem.ConceptCodeSequence[0];\n      // For consistency with Segment and Annotation Group\n      if (nameValue === '276214006') {\n        result.category = { ...value };\n      } else if (nameValue === '121071') {\n        result.type = { ...value };\n      }\n    }\n  })\n\n  return {\n    ...result,\n    uid\n  }\n}\n\n","import React from 'react'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  Descriptions,\n  Divider,\n  InputNumber,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space,\n  Tooltip\n} from 'antd'\nimport { UndoOutlined, CheckOutlined, StopOutlined } from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Equipment from './Equipment'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { findContentItemsByName } from '../utils/sr'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport AnnotationCategoryList from './AnnotationCategoryList'\nimport HoveredRoiTooltip from './HoveredRoiTooltip'\nimport { adaptRoiToAnnotation } from '../services/RoiToAnnotationAdapter'\n\nconst DEFAULT_ROI_STROKE_COLOR: number[] = [255, 234, 0] // [0, 126, 163]\nconst DEFAULT_ROI_FILL_COLOR: number[] = [255, 234, 0, 0.2] // [0, 126, 163, 0.2]\nconst DEFAULT_ROI_STROKE_WIDTH: number = 2\nconst DEFAULT_ROI_RADIUS: number = 5\n\nconst _buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    console.warn(`no finding found for ROI ${roi.uid}`)\n    return\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: DEFAULT_ROI_STROKE_COLOR,\n    width: DEFAULT_ROI_STROKE_WIDTH\n  }\n  if (style.stroke != null) {\n    if (style.stroke.color != null) {\n      stroke.color = style.stroke.color\n    }\n    if (style.stroke.width != null) {\n      stroke.width = style.stroke.width\n    }\n  }\n  const fill = {\n    color: DEFAULT_ROI_FILL_COLOR\n  }\n  if (style.fill != null) {\n    if (style.fill.color != null) {\n      fill.color = style.fill.color\n    }\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius != null\n          ? style.radius\n          : Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n\nconst _constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      preload: preload,\n      errorInterceptor: (error: CustomError) => {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DMV, error\n        )\n      }\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical',\n        errorInterceptor: (error: CustomError) => {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.DMV,\n            error\n          )\n        }\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'Failed to instantiate viewer'\n      )\n    )\n    throw error\n  }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface Measurement {\n  name: dcmjs.sr.coding.CodedConcept\n  value?: number\n  unit: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload?: boolean\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n}\n\ninterface SlideViewerState {\n  visibleRoiUIDs: Set<string>\n  visibleSegmentUIDs: Set<string>\n  visibleMappingUIDs: Set<string>\n  visibleAnnotationGroupUIDs: Set<string>\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  selectedRoi?: dmv.roi.ROI\n  selectedRoiUIDs: Set<string>\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isSelectedRoiModalVisible: boolean\n  isHoveredRoiTooltipVisible: boolean\n  hoveredRoi?: dmv.roi.ROI\n  hoveredRoiAttributes: Array<{ name: string, value: string }>\n  hoveredRoiTooltipX: number\n  hoveredRoiTooltipY: number\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  isGoToModalVisible: boolean\n  isSelectedMagnificationValid: boolean\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  selectedXCoordinate?: number\n  validXCoordinateRange: number[]\n  selectedYCoordinate?: number\n  validYCoordinateRange: number[]\n  selectedMagnification?: number\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n  loadingFrames: Set<string>\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private readonly selectionColor: number[] = [140, 184, 198]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\n    fill: { color: [...this.selectionColor, 0.2] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = _formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n\n    this.onWindowResize = this.onWindowResize.bind(this)\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleRoiSelectionCancellation = this.handleRoiSelectionCancellation.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleRoiStyleChange = this.handleRoiStyleChange.bind(this)\n    this.handleGoTo = this.handleGoTo.bind(this)\n    this.handleXCoordinateSelection = this.handleXCoordinateSelection.bind(this)\n    this.handleYCoordinateSelection = this.handleYCoordinateSelection.bind(this)\n    this.handleMagnificationSelection = this.handleMagnificationSelection.bind(this)\n    this.handleSlidePositionSelection = this.handleSlidePositionSelection.bind(this)\n    this.handleSlidePositionSelectionCancellation = this.handleSlidePositionSelectionCancellation.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n\n    const { volumeViewer, labelViewer } = _constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isHoveredRoiTooltipVisible: false,\n      hoveredRoiTooltipX: 0,\n      hoveredRoiTooltipY: 0,\n      hoveredRoiAttributes: [],\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set()\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current != null) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        if (this.labelViewportRef.current != null) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance, index) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                this.props.selectedPresentationStateUID == null\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Presentation State could not be loaded'\n            )\n          )\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Presentation State could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID != null\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key == null) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotations = (): void => {\n    console.info('search for Comprehensive 3D SR instances')\n    const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach(i => {\n        const { dataset } = dmv.metadata.formatMetadata(i)\n        const instance = dataset as dmv.metadata.Instance\n        if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n          console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n          client.retrieveInstance({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: instance.SeriesInstanceUID,\n            sopInstanceUID: instance.SOPInstanceUID\n          }).then((retrievedInstance): void => {\n            const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n            const { dataset } = dmv.metadata.formatMetadata(data.dict)\n            const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n            /*\n             * Perform a couple of checks to ensure the document content of the\n             * report fullfils the requirements of the application.\n             */\n            if (!_implementsTID1500(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it is not structured according to template ' +\n                'TID 1500 \"MeasurementReport\"'\n              )\n              return\n            }\n            if (!_describesSpecimenSubject(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not describe a specimen subject'\n              )\n              return\n            }\n            if (!_containsROIAnnotations(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not contain any suitable ROI annotations'\n              )\n              return\n            }\n\n            const content = new MeasurementReport(report)\n            content.ROIs.forEach(roi => {\n              console.info(`add ROI \"${roi.uid}\"`)\n              const scoord3d = roi.scoord3d\n              const image = this.props.slide.volumeImages[0]\n              if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                /*\n                 * ROIs may get assigned new UIDs upon re-rendering of the\n                 * page and we need to ensure that we don't add them twice.\n                 * The same ROI may be stored in multiple SR documents and\n                 * we don't want them to show up twice.\n                 * TODO: We should probably either \"merge\" measurements and\n                 * quantitative evaluations or pick the ROI from the \"best\"\n                 * available report (COMPLETE and VERIFIED).\n                 */\n                const doesROIExist = this.volumeViewer.getAllROIs().some(\n                  (otherROI: dmv.roi.ROI): boolean => {\n                    return _areROIsEqual(otherROI, roi)\n                  }\n                )\n                if (!doesROIExist) {\n                  try {\n                    // Add ROI without style such that it won't be visible.\n                    this.volumeViewer.addROI(roi, {})\n                  } catch {\n                    console.error(`could not add ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                }\n              } else {\n                console.debug(\n                  `skip ROI \"${roi.uid}\" ` +\n                  `of SR document \"${report.SOPInstanceUID}\"` +\n                  'because it is defined in another frame of reference'\n                )\n              }\n            })\n          }).catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Annotations could not be loaded'\n              )\n            )\n            console.error(\n              'failed to load ROIs ' +\n              `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n              `of series \"${instance.SeriesInstanceUID}\" ` +\n              `of study \"${this.props.studyInstanceUID}\": `,\n              error\n            )\n          })\n          /*\n           * React is not aware of the fact that ROIs have been added via the\n           * viewer (the viewport is a ref object) and won't show the\n           * annotations in the user interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Annotations could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = (): void => {\n    console.info('search for Microscopy Bulk Simple Annotations instances')\n    const client = this.props.clients[\n      StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n    ]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'ANN'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[] = retrievedMetadata.map(metadata => {\n            return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n              metadata\n            })\n          })\n          // annotations = annotations.filter(ann => {\n          //   const refImage = this.props.slide.volumeImages[0]\n          //   return (\n          //     ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n          //     ann.ContainerIdentifier === refImage.ContainerIdentifier\n          //   )\n          // })\n          annotations.forEach(ann => {\n            try {\n              this.volumeViewer.addAnnotationGroups(ann)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Microscopy Bulk Simple Annotations cannot be displayed.'\n                )\n              )\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              console.error('failed to add annotation groups:', error)\n            }\n            ann.AnnotationGroupSequence.forEach(item => {\n              const annotationGroupUID = item.AnnotationGroupUID\n              const finding = item.AnnotationPropertyTypeCodeSequence[0]\n              const key = _buildKey(finding)\n              const style = this.roiStyles[key]\n              // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n              if (style != null && style.fill != null) {\n                this.volumeViewer.setAnnotationGroupStyle(\n                  annotationGroupUID,\n                  { color: style.fill.color }\n                )\n              }\n            })\n          })\n          /*\n           * React is not aware of the fact that annotation groups have been\n           * added via the viewer (the underlying HTML viewport element is a\n           * ref object) and won't show the annotation groups in the user\n           * interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n              'instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Microscopy Bulk Simple Annotations instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = (): void => {\n    console.info('search for Segmentation instances')\n    const client = this.props.clients[StorageClasses.SEGMENTATION]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SEG'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach((s, i) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const segmentations: dmv.metadata.Segmentation[] = []\n          retrievedMetadata.forEach(metadata => {\n            const seg = new dmv.metadata.Segmentation({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              seg.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              segmentations.push(seg)\n            }\n          })\n          if (segmentations.length > 0) {\n            try {\n              this.volumeViewer.addSegments(segmentations)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Segmentations cannot be displayed'\n                )\n              )\n              console.error('failed to add segments: ', error)\n            }\n            /*\n           * React is not aware of the fact that segments have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the segments in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Segmentation instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Segmentation instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = (): void => {\n    console.info('search for Parametric Map instances')\n    const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'OT'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const parametricMaps: dmv.metadata.ParametricMap[] = []\n          retrievedMetadata.forEach(metadata => {\n            const pm = new dmv.metadata.ParametricMap({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              pm.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              parametricMaps.push(pm)\n            } else {\n              console.warn(\n                `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n              )\n            }\n          })\n          if (parametricMaps.length > 0) {\n            try {\n              this.volumeViewer.addParameterMappings(parametricMaps)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Parametric Map cannot be displayed'\n                )\n              )\n              console.error('failed to add mappings: ', error)\n            }\n            /*\n           * React is not aware of the fact that mappings have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the mappings in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Parametric Map instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Parametric Map instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    this.addAnnotations()\n    this.addAnnotationGroups()\n    this.addSegmentations()\n    this.addParametricMaps()\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer != null) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiDoubleClicked = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi != null) {\n      this.setState({\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  setHoveredRoiAttributes = (hoveredRoi: dmv.roi.ROI): void => {\n    const attributes: Array<{ name: string, value: string }> = []\n    hoveredRoi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n\n    this.setState({ hoveredRoiAttributes: attributes })\n  }\n\n  onPointerMove = (event: CustomEventInit): void => {\n    const { feature: hoveredRoi, event: evt } = event.detail.payload\n    if (hoveredRoi != null) {\n      const originalEvent = evt.originalEvent\n      this.setHoveredRoiAttributes(hoveredRoi)\n      this.setState({\n        isHoveredRoiTooltipVisible: true,\n        hoveredRoi,\n        hoveredRoiTooltipX: originalEvent.clientX,\n        hoveredRoiTooltipY: originalEvent.clientY\n      })\n    } else {\n      this.setState({\n        isHoveredRoiTooltipVisible: false\n      })\n    }\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi != null) {\n      console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n      this.volumeViewer.setROIStyle(selectedRoi.uid, this.selectedRoiStyle)\n      const key = _getRoiKey(selectedRoi)\n      this.volumeViewer.getAllROIs().forEach((roi) => {\n        if (roi.uid !== selectedRoi.uid) {\n          this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n        }\n      })\n      this.setState({\n        selectedRoiUIDs: new Set([selectedRoi.uid]),\n        selectedRoi: selectedRoi\n      })\n    } else {\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        selectedRoi: undefined\n      })\n    }\n  }\n\n  handleRoiSelectionCancellation (): void {\n    this.setState({\n      isSelectedRoiModalVisible: false\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load frame')\n  }\n\n  onLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load data')\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    const message = (event.detail?.payload?.message === null ? 'Failed to load data' : event.detail?.payload?.message) as string\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        message\n      ) as any\n    )\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray != null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID == null) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount (): void {\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_error',\n      this.onLoadingError\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_error',\n      this.onFrameLoadingError\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.addEventListener('beforeunload', this.componentCleanup)\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount (): void {\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection (value: any): void {\n    if (value != null) {\n      const x = Number(value)\n      const start = this.state.validXCoordinateRange[0]\n      const end = this.state.validXCoordinateRange[1]\n      if (x >= start && x <= end) {\n        this.setState({\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedXCoordinate: undefined,\n      isSelectedXCoordinateValid: false\n    })\n  }\n\n  handleYCoordinateSelection (value: any): void {\n    if (value != null) {\n      const y = Number(value)\n      const start = this.state.validYCoordinateRange[0]\n      const end = this.state.validYCoordinateRange[1]\n      if (y >= start && y <= end) {\n        this.setState({\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedYCoordinate: undefined,\n      isSelectedYCoordinateValid: false\n    })\n  }\n\n  handleMagnificationSelection (value: any): void {\n    if (value != null) {\n      if (value > 0 && value <= 40) {\n        this.setState({\n          selectedMagnification: Number(value),\n          isSelectedMagnificationValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedMagnification: undefined,\n      isSelectedMagnificationValid: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection (): void {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n      this.state.selectedXCoordinate != null &&\n      this.state.selectedYCoordinate != null &&\n      this.state.selectedMagnification != null\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation (): void {\n    console.log('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      isSelectedMagnificationValid: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Could not complete annotation configuration'\n        )\n      )\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    // Metadata should be sorted such that the image with the highest\n    // resolution is the last item in the array.\n    const refImage = metadata[metadata.length - 1]\n    // We assume that there is only one specimen (tissue section) per\n    // ontainer (slide). Only the tissue section is tracked with a unique\n    // identifier, even if the section may be composed of different biological\n    // samples.\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'More than one specimen has been described for the slide'\n        )\n      )\n    }\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n    console.debug('create Observation Context')\n    let observer\n    if (this.props.user !== undefined) {\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: this.props.user.name,\n        loginName: this.props.user.email\n      })\n    } else {\n      console.warn('no user information available')\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: 'ANONYMOUS'\n      })\n    }\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121006',\n          schemeDesignator: 'DCM',\n          meaning: 'Person'\n        }),\n        observerIdentifyingAttributes: observer\n      }),\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121007',\n          schemeDesignator: 'DCM',\n          meaning: 'Device'\n        }),\n        observerIdentifyingAttributes:\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\n            uid: this.props.app.uid,\n            manufacturerName: 'MGH Computational Pathology',\n            modelName: this.props.app.name\n          })\n      }),\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\n          value: '121027',\n          schemeDesignator: 'DCM',\n          meaning: 'Specimen'\n        }),\n        subjectClassSpecificContext:\n          new dcmjs.sr.templates.SubjectContextSpecimen({\n            uid: refSpecimen.SpecimenUID,\n            identifier: refSpecimen.SpecimenIdentifier,\n            containerIdentifier: refImage.ContainerIdentifier\n          })\n      })\n    })\n\n    console.debug('encode Imaging Measurements')\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\n    for (let i = 0; i < rois.length; i++) {\n      const roi = rois[i]\n      if (!this.state.visibleRoiUIDs.has(roi.uid)) {\n        continue\n      }\n      let findingType = roi.evaluations.find(\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n        }\n      )\n      if (findingType === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            `No finding type was specified for ROI \"${roi.uid}\"`\n          )\n        )\n      }\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.properties.trackingUID ?? roi.uid,\n          identifier: `ROI #${i + 1}`\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: findingType.ConceptCodeSequence[0].CodeValue,\n          schemeDesignator:\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n        }),\n        qualitativeEvaluations: roi.evaluations.filter(\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n          }\n        ),\n        measurements: roi.measurements\n      })\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\n      measurements[0].ContentTemplateSequence = [{\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }]\n      imagingMeasurements.push(...measurements)\n    }\n\n    console.debug('create Measurement Report document content')\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\n      observationContext: observationContext,\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\n        value: '112703',\n        schemeDesignator: 'DCM',\n        meaning: 'Whole Slide Imaging'\n      }),\n      imagingMeasurements: imagingMeasurements\n    })\n\n    console.info('create Comprehensive 3D SR document')\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n      content: measurementReport[0],\n      evidence: [refImage],\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      seriesNumber: 1,\n      seriesDescription: 'Annotation',\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      instanceNumber: 1,\n      manufacturer: 'MGH Computational Pathology',\n      previousVersions: undefined // TODO\n    })\n\n    this.setState({\n      isReportModalVisible: true,\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Annotations could not be saved'\n          )\n        )\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when an annotation has been selected from the\n   * current list of annotations.\n   */\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\n    console.log(`selected ROI ${roiUID}`)\n    this.setState({ selectedRoiUIDs: new Set([roiUID]) })\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (roi.uid === roiUID) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Failed to show annotation group.'\n          )\n        )\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void {\n    console.log(`change style of annotation group ${uid}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        uid,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of annotation group.'\n        )\n      )\n      throw error\n    }\n  }\n\n  handleRoiStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n    }\n  }): void {\n    console.log(`change style of ROI ${uid}`)\n    try {\n      const opacity = styleOptions.opacity ?? 0.4;\n      const strokeColor = styleOptions.color ?? [0, 0, 0];\n      const fillColor = strokeColor.map((c) => Math.min(c + 25, 255));\n      const style = _formatRoiStyle({\n        fill: { color: [...fillColor, opacity] },\n        stroke: { color: [...strokeColor, opacity] },\n        radius: this.defaultRoiStyle.stroke?.width,\n      });\n      this.volumeViewer.setROIStyle(uid, style);\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of ROI.'\n        )\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState (): void {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState != null) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Presentation State could not be found'\n          )\n        )\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (this.volumeViewer.areROIsVisible) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const filteredAnnotationGroups = allAnnotationGroups?.filter((annotationGroup) =>\n      annotationGroup.referencedSeriesInstanceUID === this.props.seriesInstanceUID\n    )\n    annotationGroups.push(...filteredAnnotationGroups)\n\n    const annotations = rois.map(roi => adaptRoiToAnnotation(roi));\n\n    const openSubMenuItems = [\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\n    ]\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map(finding => {\n      return (\n        <Select.Option\n          key={finding.CodeValue}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach(evaluation => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={code.CodeValue}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const equipmentMenu = (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach(instance => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={instance.SOPInstanceUID}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={null}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          {}\n        </Select.Option>\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={<UndoOutlined />}\n                type='primary'\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametric-maps')\n    }\n\n    let annotationGroupMenu\n    const defaultAnnotationStyles: {\n      [annotationUID: string]: {\n        opacity: number\n        color: number[]\n      }\n    } = {}\n\n    if(annotations.length > 0){\n      annotations.forEach((annotation) => {\n        const key = _buildKey(annotation.category);\n        const style = this.getRoiStyle(key);\n        defaultAnnotationStyles[annotation.uid] = {\n          color: style.stroke?.color,\n          opacity: 0.4,\n        } as any;\n      });\n    }\n\n    if (annotationGroups.length > 0) {\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      annotationGroups.forEach(annotationGroup => {\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            defaultAnnotationGroupStyles={defaultAnnotationStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    const annotationTools = [\n      <Button\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Button\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Button\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Button\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Button\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Button\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Button\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    let cursor = 'default'\n    if (this.state.isLoading) {\n      cursor = 'progress'\n    }\n\n    let selectedRoiInformation\n    if (this.state.selectedRoi != null) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence != null) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit != null) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      selectedRoiInformation = (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden',\n              cursor: cursor\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            visible={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {annotationConfigurations}\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isSelectedRoiModalVisible}\n            title='Selected ROI'\n            onCancel={this.handleRoiSelectionCancellation}\n            maskClosable\n            footer={null}\n          >\n            <Space align='start' direction='vertical'>\n              {selectedRoiInformation}\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isGoToModalVisible}\n            title='Go to slide position'\n            onOk={this.handleSlidePositionSelection}\n            onCancel={this.handleSlidePositionSelectionCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              <InputNumber\n                placeholder={(\n                  '[' +\n                  `${this.state.validXCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validXCoordinateRange[1]}` +\n                  ']'\n                )}\n                prefix='X Coordinate [mm]'\n                onChange={this.handleXCoordinateSelection}\n                onPressEnter={this.handleXCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedXCoordinateValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validYCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validYCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='Y Coordinate [mm]'\n                onChange={this.handleYCoordinateSelection}\n                onPressEnter={this.handleYCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedYCoordinateValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n              <InputNumber\n                placeholder='[0 - 40]'\n                prefix='Magnification'\n                onChange={this.handleMagnificationSelection}\n                onPressEnter={this.handleMagnificationSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedMagnificationValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n            onOpenChange={() => {\n              // Give menu item time to render before updating viewer size\n              setTimeout(\n                () => {\n                  if (this.labelViewer != null) {\n                    this.labelViewer.resize()\n                  }\n                },\n                100\n              )\n            }}\n          >\n            <Menu.SubMenu key='label' title='Slide label'>\n              <Menu.Item style={{ height: '100%' }} key='image'>\n                <div\n                  style={{ height: '220px' }}\n                  ref={this.labelViewportRef}\n                />\n              </Menu.Item>\n            </Menu.SubMenu>\n            {specimenMenu}\n            {equipmentMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {annotations.length === 0\n              ? (\n                <></>\n                )\n              : (\n                <Menu.SubMenu\n                  key='annotation-category'\n                  title='Annotation Categories'\n                >\n                  <AnnotationCategoryList\n                    annotations={annotations}\n                    onChange={this.handleAnnotationVisibilityChange}\n                    checkedAnnotationUids={this.state.visibleRoiUIDs}\n                    onStyleChange={this.handleRoiStyleChange}\n                    defaultAnnotationStyles={defaultAnnotationStyles}\n                  />\n                </Menu.SubMenu>\n                )}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n        {this.state.isHoveredRoiTooltipVisible &&\n        (this.state.hoveredRoiAttributes.length > 0)\n          ? (\n            <HoveredRoiTooltip\n              xPosition={this.state.hoveredRoiTooltipX}\n              yPosition={this.state.hoveredRoiTooltipY}\n              attributes={this.state.hoveredRoiAttributes}\n            />\n            )\n          : (\n            <></>\n            )}\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID != null) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null | undefined\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Value of option \"images\" have been non-zero length.'\n        )\n      )\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID != null) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (\n        hasImageFlavor(image, ImageFlavors.VOLUME) ||\n        hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      ) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID != null) {\n          for (const identifier in opticalPathIdentifiers) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n    if (volumeImages.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'At least one VOLUME image must be provided for a slide.'\n        )\n      )\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n            'image that has not been resampled per optical path'\n        )\n      }\n    }\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All images of a slide must have the same Container Identifier.'\n        )\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must have ' +\n          'the same Frame of Reference UID.'\n        )\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `All VOLUME images for optical path \"${identifier}\"` +\n              'must be part of the same multi-resolution pyramid.'\n            )\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must be part of the same  ' +\n          'acquisition and have the same Acquisition UID.'\n        )\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) => {\n        return (\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n        )\n      })\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import React from 'react'\nimport { Routes, Route, useLocation, useParams } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide, createSlides } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID, seriesInstanceUID } = useParams()\n  const location = useLocation()\n\n  const selectedSlide = slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string | null | undefined\n  if (!searchParams.has('access_token')) {\n    presentationStateUID = searchParams.get('state')\n    if (presentationStateUID === null) {\n      presentationStateUID = undefined\n    }\n  }\n  let viewer = null\n  if (selectedSlide != null) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\ninterface ViewerState {\n  slides: Slide[]\n  isLoading: boolean\n}\n\nclass Viewer extends React.Component<ViewerProps, ViewerState> {\n  state = {\n    slides: [],\n    isLoading: true\n  }\n\n  constructor (props: ViewerProps) {\n    super(props)\n    this.handleSeriesSelection = this.handleSeriesSelection.bind(this)\n  }\n\n  componentDidMount (): void {\n    this.fetchImageMetadata().then(\n      (metadata: dmv.metadata.VLWholeSlideMicroscopyImage[][]) => {\n        this.setState({\n          slides: createSlides(metadata),\n          isLoading: false\n        })\n      }\n    ).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Image metadata could not be retrieved or decoded.')\n      )\n      this.setState({ isLoading: false })\n    })\n  }\n\n  /**\n   * Fetch metadata for VL Whole Slide Microscopy Image instances of the study.\n   *\n   * @returns Metadata of image instances of the study grouped per series\n   */\n  async fetchImageMetadata (): Promise<dmv.metadata.VLWholeSlideMicroscopyImage[][]> {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    const studyInstanceUID = this.props.studyInstanceUID\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(matchedSeries.map(async (s) => {\n      const { dataset } = dmv.metadata.formatMetadata(s)\n      const loadingSeries = dataset as dmv.metadata.Series\n      console.info(\n        `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n      )\n      const retrievedMetadata = await client.retrieveSeriesMetadata({\n        studyInstanceUID: this.props.studyInstanceUID,\n        seriesInstanceUID: loadingSeries.SeriesInstanceUID\n      })\n\n      const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n      retrievedMetadata.forEach((item, index) => {\n        if (item['00080016'] != null) {\n          const values = item['00080016'].Value\n          if (values != null) {\n            const sopClassUID = values[0]\n            if (sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE) {\n              const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n                metadata: item\n              })\n              seriesImages.push(image)\n            }\n          }\n        }\n      })\n\n      if (seriesImages.length > 0) {\n        images.push(seriesImages)\n      }\n    }))\n\n    return images\n  }\n\n  handleSeriesSelection (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ): void {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${this.props.studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n\n    if (this.props.location.pathname.includes('/projects/')) {\n      urlPath = this.props.location.pathname\n      if (!this.props.location.pathname.includes('/series/')) {\n        urlPath += `/series/${seriesInstanceUID}`\n      } else {\n        urlPath = urlPath.replace(/\\/series\\/[^/]+/, `/series/${seriesInstanceUID}`)\n      }\n    }\n\n    if (\n      this.props.location.pathname.includes('/series/') &&\n      this.props.location.search != null\n    ) {\n      urlPath += this.props.location.search\n    }\n\n    this.props.navigate(urlPath, { replace: true })\n  }\n\n  render (): React.ReactNode {\n    if (this.state.isLoading) {\n      return null\n    }\n\n    if (this.state.slides.length === 0) {\n      return null\n    }\n    const firstSlide = this.state.slides[0] as Slide\n    const volumeInstances = firstSlide.volumeImages\n    if (volumeInstances.length === 0) {\n      return null\n    }\n    const refImage = volumeInstances[0]\n\n    /* If a series is encoded in the path, route the viewer to this series.\n     * Otherwise select the first series correspondent to\n     * the first slide contained in the study.\n     */\n    let selectedSeriesInstanceUID: string\n    if (this.props.location.pathname.includes('series/')) {\n      const seriesFragment = this.props.location.pathname.split('series/')[1]\n      selectedSeriesInstanceUID = seriesFragment.includes('/') ? seriesFragment.split('/')[0] : seriesFragment\n    } else {\n      selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n    }\n\n    let clinicalTrialMenu\n    if (refImage.ClinicalTrialSponsorName != null) {\n      clinicalTrialMenu = (\n        <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n          <ClinicalTrial metadata={refImage} />\n        </Menu.SubMenu>\n      )\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Sider\n          width={300}\n          style={{\n            height: '100%',\n            borderRight: 'solid',\n            borderRightWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n          >\n            <Menu.SubMenu key='patient' title='Patient'>\n              <Patient metadata={refImage} />\n            </Menu.SubMenu>\n            <Menu.SubMenu key='study' title='Study'>\n              <Study metadata={refImage} />\n            </Menu.SubMenu>\n            {clinicalTrialMenu}\n            <Menu.SubMenu key='slides' title='Slides'>\n              <SlideList\n                clients={this.props.clients}\n                metadata={this.state.slides}\n                selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n                onSeriesSelection={this.handleSeriesSelection}\n              />\n            </Menu.SubMenu>\n          </Menu>\n        </Layout.Sider>\n\n        <Routes>\n          <Route\n            path='/series/:seriesInstanceUID'\n            element={\n              <ParametrizedSlideViewer\n                clients={this.props.clients}\n                slides={this.state.slides}\n                preload={this.props.preload}\n                annotations={this.props.annotations}\n                enableAnnotationTools={this.props.enableAnnotationTools}\n                app={this.props.app}\n                user={this.props.user}\n              />\n            }\n          />\n        </Routes>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(Viewer)\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Menu,\n  Modal,\n  Row,\n  Space,\n  Badge,\n  Collapse\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  UnorderedListOutlined,\n  UserOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport NotificationMiddleware, { NotificationMiddlewareEvents } from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\nimport { v4 as uuidv4 } from 'uuid'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface ExtendedCustomError extends CustomError {\n  source: string\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n  errorObj: ExtendedCustomError[]\n  errorCategory: string[]\n  warnings: string[]\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    this.state = {\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: true,\n      errorObj: [],\n      errorCategory: [],\n      warnings: []\n    }\n\n    const onErrorHandler = ({ source, error }: {\n      source: string\n      error: CustomError\n    }): void => {\n      this.setState(state => ({\n        ...state,\n        errorObj: [...state.errorObj, { ...error, source }],\n        errorCategory: [...state.errorCategory, error.type]\n      }))\n    }\n\n    const onWarningHandler = (warning: string): void => {\n      this.setState(state => ({\n        ...state,\n        warnings: [...state.warnings, warning]\n      }))\n    }\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnError,\n      onErrorHandler\n    )\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnWarning,\n      onWarningHandler\n    )\n  }\n\n  componentDidUpdate (prevProps: Readonly<HeaderProps>, prevState: Readonly<HeaderState>): void {\n    if (((prevState.warnings.length > 0) || (prevState.errorObj.length > 0)) && this.props.location.pathname !== prevProps.location.pathname) {\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true,\n        errorObj: [],\n        errorCategory: [],\n        warnings: []\n      })\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleDebugButtonClick = (): void => {\n    const errorMsgs: {\n      Authentication: string[]\n      Communication: string[]\n      EncodingDecoding: string[]\n      Visualization: string[]\n    } = {\n      Authentication: [],\n      Communication: [],\n      EncodingDecoding: [],\n      Visualization: []\n    }\n\n    type ObjectKey = keyof typeof errorMsgs\n    const errorNum = this.state.errorObj.length\n\n    if (errorNum > 0) {\n      for (let i = 0; i < errorNum; i++) {\n        const category = this.state.errorCategory[i] as ObjectKey\n        errorMsgs[category].push(`${this.state.errorObj[i].message as string} (Source: ${this.state.errorObj[i].source})`)\n      }\n    }\n\n    const { Panel } = Collapse\n\n    const showErrorCount = (errcount: number): JSX.Element => (\n      <Badge count={errcount} />\n    )\n\n    const showWarningCount = (warncount: number): JSX.Element => (\n      <Badge color='green' count={warncount} />\n    )\n\n    Modal.info({\n      title: 'Debug Information\\n (Check console for more information)',\n      width: 800,\n      content: (\n        <Collapse>\n          <Panel\n            header='Communication Error'\n            key='communicationerror'\n            extra={showErrorCount(errorMsgs.Communication.length)}\n          >\n            <ol>\n              {errorMsgs.Communication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Data Encoding/Decoding error'\n            key='encodedecodeerror'\n            extra={showErrorCount(errorMsgs.EncodingDecoding.length)}\n          >\n            <ol>\n              {errorMsgs.EncodingDecoding.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Visualization error'\n            key='visualizationerror'\n            extra={showErrorCount(errorMsgs.Visualization.length)}\n          >\n            <ol>\n              {errorMsgs.Visualization.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Authentication error'\n            key='autherror'\n            extra={showErrorCount(errorMsgs.Authentication.length)}\n          >\n            <ol>\n              {errorMsgs.Authentication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Warning'\n            key='warning'\n            extra={showWarningCount(this.state.warnings.length)}\n          >\n            <ol>\n              {this.state.warnings.map(warning => (\n                <li key={uuidv4()}>{warning}</li>\n              ))}\n            </ol>\n          </Panel>\n        </Collapse>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = <Menu items={userMenuItems} />\n      user = (\n        <Dropdown overlay={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    const debugButton = (\n      <Badge count={this.state.errorObj.length}>\n        <Badge color='green' count={this.state.warnings.length}>\n          <Button\n            icon={SettingOutlined}\n            tooltip='Debug info'\n            onClick={this.handleDebugButtonClick}\n          />\n        </Badge>\n      </Badge>\n    )\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const handleServerSelectionInput = (\n      event: React.FormEvent<HTMLInputElement>\n    ): void => {\n      const value = event.currentTarget.value\n      let isDisabled = true\n      if (value != null) {\n        try {\n          const url = new URL(value)\n          if (url.protocol.startsWith('http') && url.pathname.length > 0) {\n            isDisabled = false\n          }\n        } catch (TypeError) {}\n      }\n      this.setState({\n        selectedServerUrl: value,\n        isServerSelectionDisabled: isDisabled\n      })\n    }\n\n    const handleServerSelectionCancellation = (): void => {\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const handleServerSelection = (): void => {\n      const url = this.state.selectedServerUrl\n      let closeModal = false\n      if (url != null && url !== '') {\n        if (url.startsWith('http://') || url.startsWith('https://')) {\n          this.props.onServerSelection({ url })\n          closeModal = true\n        }\n      }\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: !closeModal,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row>\n            <Col>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' />\n            <Col>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {debugButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          visible={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={handleServerSelection}\n          onCancel={handleServerSelectionCancellation}\n        >\n          <Input\n            placeholder='Enter base URL of DICOMweb Study Service'\n            onChange={handleServerSelectionInput}\n            onPressEnter={handleServerSelection}\n            addonAfter={\n              this.state.isServerSelectionDisabled\n                ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n            }\n          />\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { Button, Input, Space, Table, TablePaginationConfig } from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'An error occured. Search for studies failed.'\n          )\n        )\n      })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Request to search for studies failed.'\n          )\n        )\n      })\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\nimport NotificationMiddleware,\n{ NotificationMiddlewareContext } from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nconst createUser = (userData: UserData | null): User => {\n  let profile\n  if (userData !== null) {\n    profile = userData.profile\n  }\n\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.AUTH,\n        new CustomError(\n          errorTypes.AUTHENTICATION,\n          'Failed to obtain user \"name\" and \"email\".'\n        )\n      )\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.AUTH,\n      new CustomError(\n        errorTypes.AUTHENTICATION,\n        'Failed to obtain user profile.'\n      )\n    )\n  }\n  return {\n    name: undefined,\n    email: undefined\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string|undefined> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user profile.'\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user information.'\n          )\n        )\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'At least one server needs to be configured.'\n          )\n        )\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Either path or full URL needs to be configured for server.'\n          )\n        )\n      }\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one store is supported for now.'\n        )\n      )\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveStudyMetadata(options)\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveSeriesMetadata(options)\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    return await this.stores[0].client.retrieveInstance(options)\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <CaseViewer\n      clients={clients}\n      user={user}\n      annotations={config.annotations}\n      preload={preload}\n      app={app}\n      enableAnnotationTools={enableAnnotationTools}\n      studyInstanceUID={studyInstanceUID}\n    />\n  )\n}\n\nfunction _createClientMapping ({ baseUri, gcpBaseUrl, settings, onError }: {\n  baseUri: string\n  gcpBaseUrl: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      if (window.location.pathname.includes('/projects/')) {\n        const pathname = window.location.pathname.split('/study/')[0]\n        const pathUrl = `${gcpBaseUrl}${pathname}/dicomWeb`\n        serverSettings.url = pathUrl\n      }\n\n      storageClassMapping.default += 1\n      clientMapping.default = new DicomWebManager({\n        baseUri,\n        settings: [serverSettings],\n        onError\n      })\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.COMMUNICATION,\n        'Only one default server can be configured without specification ' +\n        'of storage classes.'\n      )\n    )\n  }\n\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one configured server can specify a given storage class. ' +\n          `Storage class \"${key}\" is specified by more than one ` +\n          'of the configured servers.'\n        )\n      )\n    }\n  }\n\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n  }\n\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'User is not authorized to access DICOMweb resources.')\n      )\n    }\n\n    const logServerError = (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'An unexpected server error occured.'\n        )\n      )\n    }\n\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          logServerError()\n        }\n      })\n    } else if (error.status === 500) {\n      logServerError()\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'One server needs to be configured.')\n      )\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n    this.addGcpSecondaryAnnotationServer(props.config)\n\n    this.state = {\n      clients: _createClientMapping({\n        baseUri,\n        gcpBaseUrl: props.config.gcpBaseUrl ?? 'https://healthcare.googleapis.com/v1',\n        settings: props.config.servers,\n        onError: this.handleDICOMwebError\n      }),\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  addGcpSecondaryAnnotationServer (config: AppProps['config']): void {\n    const serverId = 'gcp_secondary_annotation_server'\n    const urlParams = new URLSearchParams(window.location.search)\n    const url = urlParams.get('gcp')\n    const gcpSecondaryAnnotationServer = config.servers.find(\n      (server) => server.id === serverId\n    )\n    if (gcpSecondaryAnnotationServer === undefined && typeof url === 'string') {\n      config.servers.push({\n        id: serverId,\n        write: true,\n        url,\n        storageClasses: [\n          StorageClasses.COMPREHENSIVE_SR,\n          StorageClasses.COMPREHENSIVE_3D_SR,\n          StorageClasses.SEGMENTATION,\n          StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION,\n          StorageClasses.PARAMETRIC_MAP,\n          StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE,\n          StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n        ]\n      })\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath != null) {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch != null) {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Could not sign-in user.')\n        )\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path == null) {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/projects/:project/locations/:location/datasets/:dataset/dicomStores/:dicomStore/study/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","PatientID","PatientName","PatientSex","PatientBirthDate","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","_subscriptions","Symbol","_lastSubscriptionId","PubSub","eventName","callback","Error","hasOwnProperty","subscriptionId","callbacks","payload","errorTypes","CustomError","type","message","stack","NotificationMiddlewareEvents","NotificationMiddlewareContext","NotificationType","NotificationSourceDefinition","sources","category","notificationType","outerContext","args","publish","Array","from","warn","console","JSON","stringify","arguments","includes","apply","prototype","slice","call","source","error","notificationMsg","errorCategory","find","s","String","notification","description","duration","state","isLoading","overviewViewportRef","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","info","ContainerIdentifier","dmv","client","clients","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","resizeFactor","errorInterceptor","NotificationMiddleware","render","container","resize","style","height","containerIdentifier","ref","seriesInstanceUIDs","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","handleMeasurementSelection","handleOpacityChange","handleColorRChange","handleColorGChange","handleColorBChange","getCurrentColor","currentStyle","opacity","defaultStyle","color","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","limitValues","isArray","option","codeComponents","measurement","schemeDesignator","meaning","colorSettings","windowSettings","explorationSettings","AnnotationGroupSequence","findIndex","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","AnnotationCoordinateType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","plain","justify","gutter","range","min","max","step","handleLowerLimitChange","handleLimitChange","handleUpperLimitChange","minWidth","defaultValue","settings","isBadgeVisible","direction","placement","content","overlayStyle","shape","SettingOutlined","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","annotationGroups","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupVisibilityChange","onAnnotationGroupStyleChange","handleClick","text","button","Icon","isSelected","tooltip","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","overflowY","handleRemoval","getCurrentColors","paletteColorLookupTable","previousProps","previousState","opticalPath","opticalPathIdentifier","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","specimenDescriptions","maxValue","Math","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","SeriesInstanceUID","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","mappingUID","mapping","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","segmentUID","segment","algorithmName","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","annotationGroupsUIDs","checkedAnnotationUids","defaultAnnotationStyles","types","checkAll","every","uids","indeterminate","some","handleChangeCheckedType","e","target","mouseEnterDelay","reduce","acc","marginLeft","shortenedCodeMeaning","displayCodeMeaning","isChecked","indeterminateType","wordWrap","display","flexDirection","categories","categoriesAcc","annotation","categoryKey","typeKey","oldCategory","oldType","Object","keys","typesArr","getCategories","xPosition","yPosition","position","top","left","backgroundColor","minHeight","pointerEvents","attr","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","_formatRoiStyle","stroke","fill","image","circle","radius","_constructViewers","preload","volumeImages","labelViewer","volumeViewer","clientMapping","controls","activateSelectInteraction","labelImages","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","defaultRoiStyle","roiStyles","selectionColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","rawInstance","instance","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","selectedPresentationStateUID","setPresentationState","presentationStates","catch","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","Set","activateOpticalPath","showOpticalPath","add","searchParams","URLSearchParams","search","set","pathname","replace","getRoiStyle","addAnnotations","COMPREHENSIVE_3D_SR","SOPClassUID","templateSeq","ContentTemplateSequence","TemplateIdentifier","_implementsTID1500","subjectClassValue","retrievedConcept","expectedConcept","_describesSpecimenSubject","debug","measurementGroups","foundRegion","regions","_containsROIAnnotations","FrameOfReferenceUID","doesROIExist","getAllROIs","otherROI","a","b","graphicType","graphicData","s1","s2","j","_areROIsEqual","addROI","forceUpdate","addAnnotationGroups","MICROSCOPY_BULK_SIMPLE_ANNOTATION","searchForSeries","matchedSeries","series","retrieveSeriesMetadata","retrievedMetadata","ann","finding","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","addSegmentations","SEGMENTATION","segmentations","seg","refImage","addSegments","addParametricMaps","PARAMETRIC_MAP","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","onRoiModified","onWindowResize","onRoiDrawn","detail","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","onRoiDoubleClicked","isSelectedRoiModalVisible","setHoveredRoiAttributes","hoveredRoi","hoveredRoiAttributes","onPointerMove","feature","evt","originalEvent","isHoveredRoiTooltipVisible","hoveredRoiTooltipX","clientX","hoveredRoiTooltipY","clientY","onRoiSelected","selectedRoi","setROIStyle","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingError","onLoadingError","onFrameLoadingEnded","delete","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","onKeyUp","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","isAnnotationModalVisible","isGoToModalVisible","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","geometryTypes","componentSetup","componentCleanup","handleRoiSelectionCancellation","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationVisibilityChange","handleAnnotationGroupVisibilityChange","handleAnnotationGroupStyleChange","handleRoiStyleChange","handleXCoordinateSelection","handleYCoordinateSelection","handleMagnificationSelection","handleSlidePositionSelection","handleSlidePositionSelectionCancellation","handleReportVerification","handleReportCancellation","handleSegmentVisibilityChange","handleSegmentStyleChange","handleMappingVisibilityChange","handleMappingStyleChange","handleOpticalPathVisibilityChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","boundingBox","generatedReport","isSelectedMagnificationValid","isReportModalVisible","isSelectedXCoordinateValid","isSelectedYCoordinateValid","selectedXCoordinate","validXCoordinateRange","selectedYCoordinate","validYCoordinateRange","selectedMagnification","areRoisHidden","cleanup","isOpticalPathVisible","isOpticalPathActive","document","body","removeEventListener","window","addEventListener","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","selectedMarkup","filteredEvaluations","filter","x","Number","start","end","y","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","point","log","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","observer","refSpecimen","user","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","app","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","evidence","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","getROI","showAnnotationGroup","hideAnnotationGroup","strokeColor","fillColor","c","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","sort","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areROIsVisible","hideROIs","showROIs","getAllSegments","getAllParameterMappings","allAnnotationGroups","getAllAnnotationGroups","filteredAnnotationGroups","referencedSeriesInstanceUID","annotationMenuItems","result","adaptRoiToAnnotation","openSubMenuItems","geometryTypeOptionsMapping","box","polygon","line","freehandpolygon","freehandline","annotationConfigurations","defaultActiveFirstOption","onClear","specimenMenu","equipmentMenu","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","opticalPathMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","toolbar","annotationGroupMetadata","getAnnotationGroupMetadata","toolbarHeight","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","selectedRoiInformation","cursor","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","hasSider","overflow","visible","onOk","onCancel","okText","maskClosable","footer","placeholder","prefix","onPressEnter","addonAfter","CheckOutlined","StopOutlined","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","setTimeout","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","areSameAcquisition","AcquisitionUID","Slide","options","acquisitionUID","opticalPathIdentifiers","pyramidUIDs","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","THUMBNAIL","PyramidUID","samplesPerPixel","SamplesPerPixel","requirePyramidUID","PhotometricInterpretation","createSlides","slideMetadata","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","imgA","imgB","ParametrizedSlideViewer","presentationStateUID","selectedSlide","get","viewer","handleSeriesSelection","fetchImageMetadata","StudyInstanceUID","Promise","all","loadingSeries","seriesImages","volumeInstances","clinicalTrialMenu","seriesFragment","borderRight","borderRightWidth","path","element","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleDebugButtonClick","errorMsgs","Authentication","Communication","EncodingDecoding","Visualization","errorNum","errorObj","warncount","Panel","Collapse","showErrorCount","errcount","uuidv4","warnings","warning","handleServerSelectionButtonClick","isServerSelectionModalVisible","isServerSelectionDisabled","prevProps","prevState","worklistButton","userMenuItems","onUserLogout","userMenu","overlay","trigger","UserOutlined","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","debugButton","showServerSelectionButton","ApiOutlined","handleServerSelection","url","selectedServerUrl","closeModal","startsWith","onServerSelection","src","process","alt","margin","flex","currentTarget","isDisabled","URL","protocol","TypeError","alignItems","justifyContent","subTitle","defaultPageSize","handleSearch","confirm","dataIndex","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","marginBottom","SearchOutlined","filterIcon","filtered","fetchData","handleChange","studies","numStudies","pageSize","searchOptions","ModalitiesInStudy","searchForStudies","study","limit","searchCriteria","fuzzymatching","pagination","filters","columns","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","record","dataSource","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","status","errorMessage","attemptFailedError","open","DicomWebManager","onError","stores","handleError","updateHeaders","fields","f","headers","reject","retrieveStudyMetadata","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","qidoPathPrefix","qidoURLPrefix","wadoPathPrefix","wadoURLPrefix","stowPathPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","read","dwc","baseURL","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","_createClientMapping","gcpBaseUrl","storageClassMapping","default","storageClasses","pathUrl","server","auth","handleDICOMwebError","logServerError","errorMessages","setting","Authorization","storedPath","localStorage","getItem","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","addGcpSecondaryAnnotationServer","wasAuthSuccessful","serverId","COMPREHENSIVE_SR","COLOR_SOFTCOPY_PRESENTATION_STATE","GRAYSCALE_SOFTCOPY_PRESENTATION_STATE","PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE","tmpClient","redirectTo","setItem","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}