{"version":3,"file":"static/js/796.6273c7de.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","utils/CustomError.js","utils/PubSub.js","services/NotificationMiddleware.js","data/slides.tsx","services/fetchImageMetadata.ts","hooks/useSlides.ts","contexts/ValidationContext.tsx","components/ValidationWarning.tsx","components/SlideItem.tsx","components/SlideList.tsx","utils/router.tsx","utils/sr.tsx","services/RoiToAnnotationAdapter.ts","components/SlideViewer/AnnotationModal.tsx","components/SlideViewer/SelectedRoiModal.tsx","components/SlideViewer/GoToModal.tsx","components/SlideViewer/ReportModal.tsx","components/SlideViewer/SlideViewerModals.tsx","components/ColorSettingsMenu.tsx","components/AnnotationCategoryItem.tsx","components/AnnotationCategoryList.tsx","components/SlideViewer/SlideViewerSidebar.tsx","components/SlideViewer/SlideViewerContent.tsx","components/SlideViewer/utils/roiUtils.ts","utils/segmentColors.ts","components/SlideViewer/utils/viewerUtils.ts","components/SlideViewer/constants.ts","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Report.tsx","components/HoveredRoiTooltip.tsx","utils/generateReport.ts","utils/pubSubServiceInterface.ts","utils/createSeriesMetadata.ts","utils/createStudyMetadata.ts","services/DICOMMetadataStore.ts","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/Equipment.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/Button.tsx","components/SlideViewer.tsx","components/CaseViewer.tsx","components/DicomTagBrowser/dicomTagUtils.ts","utils/formatDicomDate.ts","components/DicomTagBrowser/DicomTagBrowser.tsx","hooks/useDebounce.ts","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Sex',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3',\n  OPTICAL_PATH = '1.2.840.10008.5.1.4.1.1.88.21'\n}\n","const errorTypes = {\n  AUTHENTICATION: 'Authentication',\n  COMMUNICATION: 'Communication',\n  ENCODINGANDDECODING: 'EncodingDecoding',\n  VISUALIZATION: 'Visualization'\n}\n\nclass CustomError extends Error {\n  constructor (type, message) {\n    super()\n    this.message = message\n    this.stack = new Error().stack\n    this.type = type\n  }\n}\n\nexport { errorTypes, CustomError }\n","// Use symbols to prevent exposing private attributes\nconst _subscriptions = Symbol('subscriptions')\nconst _lastSubscriptionId = Symbol('lastSubscriptionId')\n\n/**\n * Class to enable implementation of publish/subscribe pattern\n * @class\n * @classdesc Enables publishing/subscribing\n */\nexport default class PubSub {\n  constructor () {\n    this[_subscriptions] = {}\n    this[_lastSubscriptionId] = 0\n  }\n\n  /**\n   * Adds a subscription callback to the provided event name\n   * @param {string} eventName Event name that will trigger the callback\n   * @param {Function} callback Function to be executed when event is published\n   * @returns {void}\n   */\n  subscribe (eventName, callback) {\n    if (eventName === undefined) {\n      throw new Error('Trying to subscribe to an inexistent event')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('The provided callback must be a function')\n    }\n\n    if (!this[_subscriptions].hasOwnProperty(eventName)) {\n      this[_subscriptions][eventName] = {}\n    }\n\n    const subscriptionId = `sub${this[_lastSubscriptionId]++}`\n    this[_subscriptions][eventName][subscriptionId] = callback\n  }\n\n  /**\n   * Removes a subscription callback for the provided event name\n   * @param {string} eventName Event name for the registerd callback\n   * @param {Function} [callback] Function to have its subscription removed\n   * @returns {void}\n   */\n  unsubscribe (eventName, callback) {\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      if (!callback) {\n        delete callbacks[subscriptionId]\n      } else if (callbacks[subscriptionId] === callback) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n\n  /**\n   * Trigger all registered subscription callbacks for a specific event name\n   * @param {String} eventName Event name to trigger subscriptions from\n   * @param {any} [payload] Payload that will be passed to the callback fuction\n   * @returns {void}\n   */\n  publish (eventName, ...payload) {\n    if (eventName === undefined) {\n      throw new Error('Trying to publish an inexistent event')\n    }\n\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      callbacks[subscriptionId](...payload)\n    }\n  }\n\n  /**\n   * Cleares all subscriptions for current instance\n   * @returns {void}\n   */\n  unsubscribeFromAll () {\n    for (const eventName in this[_subscriptions]) {\n      const callbacks = this[_subscriptions][eventName]\n      for (const subscriptionId in callbacks) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n}\n","import PubSub from '../utils/PubSub'\nimport { notification } from 'antd'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nexport const NotificationMiddlewareEvents = {\n  OnError: 'onError',\n  OnWarning: 'onWarning'\n}\n\nexport const NotificationMiddlewareContext = {\n  DICOMWEB: 'dicomweb-client',\n  DMV: 'dicom-microscopy-viewer',\n  DCMJS: 'dcmjs',\n  SLIM: 'slim',\n  AUTH: 'authentication'\n}\n\nconst NotificationType = {\n  TOAST: 'toast',\n  CONSOLE: 'console'\n}\n\n/* Sources of Error:\n  1. 'dicomweb-client': Error while requesting/fetching data, tagged as 'Communication'\n  2. 'slim' and 'dicom-microscopy-viewer' library: Error related to dicom data encoding/decoding,\n  could directly/indirectly impact image-related visualization, tagged as 'Visualization' or\n  'Encoding/Decoding' accordingly\n  3. 'dcmjs' library: Data parsing error, tagged as 'DICOMError'\n  4. 'authentication': Error during user authentication, tagged as 'Authentication'\n  */\nconst NotificationSourceDefinition = {\n  sources: [\n    {\n      category: errorTypes.AUTHENTICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.COMMUNICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.VISUALIZATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.ENCODINGANDDECODING,\n      notificationType: NotificationType.CONSOLE\n    },\n    {\n      category: 'Warning',\n      notificationType: NotificationType.TOAST\n    }\n  ]\n}\n\nclass NotificationMiddleware extends PubSub {\n  constructor () {\n    super()\n\n    const outerContext = (args) => {\n      this.publish(NotificationMiddlewareEvents.OnWarning, Array.from(args).join(' '))\n    }\n\n    (function () {\n      const warn = console.warn\n      console.warn = function () {\n        if (!JSON.stringify(arguments).includes('request')) {\n          outerContext(arguments)\n        }\n        warn.apply(this, Array.prototype.slice.call(arguments))\n      }\n    }())\n  }\n\n  /**\n   * Error handling middleware function\n   *\n   * @param source - source of error - dicomweb-client, dmv, dcmjs or slim itself\n   * @param error - error object\n   */\n  onError (source, error) {\n    const errorCategory = error.type\n    const sourceConfig = NotificationSourceDefinition.sources.find(\n      s => s.category === errorCategory\n    )\n\n    const { notificationType } = sourceConfig\n\n    this.publish(NotificationMiddlewareEvents.OnError, {\n      source,\n      error\n    })\n\n    let notificationMsg\n    if (error instanceof CustomError) {\n      notificationMsg = error.message\n    } else {\n      notificationMsg = String(error)\n    }\n\n    switch (notificationType) {\n      case NotificationType.TOAST:\n        // Only log errors in development environment\n        if (process.env.NODE_ENV === 'development') {\n          console.error(`A ${errorCategory} error occurred: `, error)\n        }\n        return notification.error({\n          message: `${errorCategory} error`,\n          description: notificationMsg,\n          duration: 3\n        })\n\n      case NotificationType.CONSOLE:\n        // Only log errors in development environment\n        if (process.env.NODE_ENV === 'development') {\n          console.error(`A ${errorCategory} error occurred: `, error)\n        }\n        break\n\n      default:\n    }\n  }\n}\n\nexport default new NotificationMiddleware()\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID !== null && image.AcquisitionUID !== undefined) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null | undefined\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Value of option \"images\" have been non-zero length.'\n        )\n      )\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID !== null && image.AcquisitionUID !== undefined) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (hasImageFlavor(image, ImageFlavors.VOLUME) || hasImageFlavor(image, ImageFlavors.THUMBNAIL)) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID !== null && image.PyramidUID !== undefined) {\n          for (const identifier of Object.keys(opticalPathIdentifiers)) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n\n    if (volumeImages.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'At least one VOLUME image must be provided for a slide.'\n        )\n      )\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n            'image that has not been resampled per optical path'\n        )\n      }\n    }\n\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All images of a slide must have the same Container Identifier.'\n        )\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must have ' +\n          'the same Frame of Reference UID.'\n        )\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `All VOLUME images for optical path \"${identifier}\"` +\n              'must be part of the same multi-resolution pyramid.'\n            )\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must be part of the same  ' +\n          'acquisition and have the same Acquisition UID.'\n        )\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter(\n        (image) =>\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      )\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './NotificationMiddleware'\nimport { createSlides, Slide } from '../data/slides'\n\ninterface FetchImageMetadataParams {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  onSuccess: (slides: Slide[]) => void\n  onError: (error: Error) => void\n}\n\nexport const fetchImageMetadata = async ({\n  clients,\n  studyInstanceUID,\n  onSuccess,\n  onError\n}: FetchImageMetadataParams): Promise<void> => {\n  try {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n\n    const client = clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(\n      matchedSeries.map(async (s) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const loadingSeries = dataset as dmv.metadata.Series\n        console.info(\n          `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n        )\n        const retrievedMetadata = await client.retrieveSeriesMetadata({\n          studyInstanceUID: studyInstanceUID,\n          seriesInstanceUID: loadingSeries.SeriesInstanceUID\n        })\n\n        const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n        retrievedMetadata.forEach((item) => {\n          if (\n            item['00080016']?.Value?.[0] ===\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        })\n\n        if (seriesImages.length > 0) {\n          images.push(seriesImages)\n        }\n      })\n    )\n    const newSlides = createSlides(images)\n    onSuccess(newSlides)\n  } catch (err) {\n    console.error(err)\n    const customError = new CustomError(\n      errorTypes.ENCODINGANDDECODING,\n      'Image metadata could not be retrieved or decoded.'\n    )\n    onError(customError)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      customError\n    )\n  }\n}\n","import { useState, useEffect, useMemo } from 'react'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\nimport { fetchImageMetadata } from '../services/fetchImageMetadata'\n\ninterface UseSlidesProps {\n  clients?: { [key: string]: DicomWebManager }\n  studyInstanceUID?: string\n}\n\ninterface UseSlidesReturn {\n  slides: Slide[]\n  isLoading: boolean\n  error: Error | null\n}\n\nconst slidesCache = new Map<string, Slide[]>()\nconst pendingRequests = new Map<string, Promise<Slide[]>>()\nconst cacheTimestamps = new Map<string, number>()\n\n// Cache expiration time: 30 minutes\nconst CACHE_EXPIRATION_TIME = 30 * 60 * 1000\n\n// Clean up expired cache entries\nconst cleanupExpiredCache = (): void => {\n  const now = Date.now()\n  for (const [key, timestamp] of cacheTimestamps.entries()) {\n    if (now - timestamp > CACHE_EXPIRATION_TIME) {\n      slidesCache.delete(key)\n      cacheTimestamps.delete(key)\n    }\n  }\n}\n\n// Utility functions for cache management\nexport const clearSlidesCache = (studyInstanceUID?: string): void => {\n  if (studyInstanceUID !== null && studyInstanceUID !== undefined && studyInstanceUID !== '' && studyInstanceUID.length > 0) {\n    slidesCache.delete(studyInstanceUID)\n    cacheTimestamps.delete(studyInstanceUID)\n    pendingRequests.delete(studyInstanceUID)\n  } else {\n    slidesCache.clear()\n    cacheTimestamps.clear()\n    pendingRequests.clear()\n  }\n}\n\nexport const getCachedSlides = (studyInstanceUID: string): Slide[] | undefined => {\n  return slidesCache.get(studyInstanceUID)\n}\n\nexport const isSlidesCached = (studyInstanceUID: string): boolean => {\n  return slidesCache.has(studyInstanceUID)\n}\n\n/**\n * Hook to fetch and manage whole slide microscopy images for a given study.\n * Values are cached so they can be reused if props are not provided.\n * If no arguments are provided, returns the most recently cached slides.\n *\n * @param props - Hook configuration props (optional)\n * @param props.clients - Map of DICOM web clients keyed by storage class\n * @param props.studyInstanceUID - Study instance UID to fetch slides for\n */\nexport const useSlides = ({ clients, studyInstanceUID }: UseSlidesProps = {}): UseSlidesReturn => {\n  const [slides, setSlides] = useState<Slide[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    // Clean up expired cache entries periodically\n    cleanupExpiredCache()\n\n    // If no arguments provided, return cached slides if available\n    if ((clients === null || clients === undefined) || (studyInstanceUID === null || studyInstanceUID === undefined) || studyInstanceUID === '' || studyInstanceUID.length === 0) {\n      // Get the most recently cached slides (last entry in the cache)\n      const cachedEntries = Array.from(slidesCache.entries())\n      if (cachedEntries.length > 0) {\n        const lastCachedSlides = cachedEntries[cachedEntries.length - 1][1]\n        setSlides(lastCachedSlides)\n        setIsLoading(false)\n        setError(null)\n      } else {\n        setSlides([])\n        setIsLoading(false)\n        setError(null)\n      }\n      return\n    }\n\n    const cachedData = slidesCache.get(studyInstanceUID)\n    if (cachedData !== undefined) {\n      setSlides(cachedData)\n      setIsLoading(false)\n      setError(null)\n      return\n    }\n\n    setIsLoading(true)\n    setError(null)\n\n    const fetchSlides = async (): Promise<void> => {\n      // Check if there's already a pending request for this study\n      let pendingRequest = pendingRequests.get(studyInstanceUID)\n\n      if (pendingRequest === undefined) {\n        // Create a new promise for this request\n        pendingRequest = new Promise<Slide[]>((resolve, reject): void => {\n          fetchImageMetadata({\n            clients,\n            studyInstanceUID,\n            onSuccess: (newSlides) => {\n              slidesCache.set(studyInstanceUID, newSlides)\n              cacheTimestamps.set(studyInstanceUID, Date.now())\n              resolve(newSlides)\n            },\n            onError: (err) => {\n              reject(err)\n            }\n          }).catch((err) => {\n            reject(err)\n          })\n        })\n        pendingRequests.set(studyInstanceUID, pendingRequest)\n      }\n\n      try {\n        const newSlides = await pendingRequest\n        setSlides(newSlides)\n        setError(null)\n      } catch (err) {\n        setError(err as Error)\n        setSlides([])\n      } finally {\n        pendingRequests.delete(studyInstanceUID)\n        setIsLoading(false)\n      }\n    }\n\n    void fetchSlides()\n  }, [clients, studyInstanceUID])\n\n  // Memoize the return value to prevent unnecessary re-renders\n  const result = useMemo(() => ({\n    slides,\n    isLoading,\n    error\n  }), [slides, isLoading, error])\n\n  return result\n}\n","import React, { createContext, useContext, useState, useCallback, useEffect, useMemo } from 'react'\nimport { Modal } from 'antd'\nimport { useSlides } from '../hooks/useSlides'\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\ninterface ValidationResult {\n  isValid: boolean\n  message?: string\n  type: 'warning' | 'error' | 'info'\n}\n\ninterface ValidationContextType {\n  runValidations: (options: { dialog?: boolean, context: { annotationGroup?: dmv.annotation.AnnotationGroup, slide?: Slide } }) => ValidationResult\n}\n\nconst ValidationContext = createContext<ValidationContextType | undefined>(undefined)\n\n/**\n * Global validation function for class components\n */\nlet globalValidationContext: ValidationContextType | null = null\n\nfunction setGlobalValidationContext (context: ValidationContextType): void {\n  globalValidationContext = context\n}\n\ninterface ValidationProviderProps {\n  children: React.ReactNode\n  clients?: { [key: string]: DicomWebManager }\n  studyInstanceUID?: string\n}\n\n/**\n * ValidationProvider - Provides validation context for running validations and showing dialogs\n *\n * Usage:\n * 1. Wrap your component tree with ValidationProvider\n * 2. Use useValidation hook to access validation functions\n *\n * Example:\n * ```tsx\n * // Simple usage - just call runValidations with options\n * const { runValidations } = useValidation()\n *\n * const handleAction = () => {\n *   const result = runValidations({\n *     dialog: true,\n *     context: { annotationGroup, slide }\n *   })\n *   if (result.isValid) {\n *     // proceed with action\n *   }\n * }\n * ```\n */\nexport const ValidationProvider: React.FC<ValidationProviderProps> = ({\n  children,\n  clients,\n  studyInstanceUID\n}) => {\n  const [isDialogVisible, setIsDialogVisible] = useState(false)\n  const [currentValidationResult, setCurrentValidationResult] = useState<ValidationResult | null>(null)\n  const { slides } = useSlides({ clients, studyInstanceUID })\n\n  // Memoize slides to prevent unnecessary re-renders when slides array reference changes but content is the same\n  const memoizedSlides = useMemo(() => {\n    // Only update if slides actually changed (deep comparison would be expensive, so we use a simple approach)\n    // For now, we'll use the slides directly but memoize the validation functions more efficiently\n    return slides\n  }, [slides])\n\n  // Memoize the slides length and existence to avoid unnecessary validation function recreations\n  const slidesInfo = useMemo(() => {\n    const slidesLength = slides?.length\n    let hasSlides = false\n    if (slides !== null && slides !== undefined && typeof slidesLength === 'number' && !Number.isNaN(slidesLength)) {\n      hasSlides = slidesLength !== 0\n    }\n    return {\n      hasSlides,\n      slidesLength: slidesLength ?? 0\n    }\n  }, [slides])\n\n  const showValidationDialog = useCallback((result: ValidationResult) => {\n    setCurrentValidationResult(result)\n    setIsDialogVisible(true)\n  }, [])\n\n  const validateMultiResolutionPyramid = useCallback((slide: Slide): ValidationResult => {\n    if ((slide?.volumeImages?.length ?? 0) <= 1) {\n      return {\n        isValid: false,\n        message: 'This slide is missing a multi-resolution pyramid. Display and performance may be degraded.',\n        type: 'warning'\n      }\n    }\n    return { isValid: true, type: 'info' }\n  }, [])\n\n  const validateAnnotationGroupAssociation = useCallback((annotationGroup?: dmv.annotation.AnnotationGroup): ValidationResult => {\n    if (annotationGroup !== null && annotationGroup !== undefined && slidesInfo.hasSlides) {\n      const checkSlideMatch = (slide: Slide): boolean => {\n        const checkImageMatch = (volumeImage: dmv.metadata.VLWholeSlideMicroscopyImage): boolean =>\n          volumeImage.SOPInstanceUID !== null && volumeImage.SOPInstanceUID !== undefined &&\n          volumeImage.SOPInstanceUID === (annotationGroup as dmv.annotation.AnnotationGroup & { referencedSOPInstanceUID: string }).referencedSOPInstanceUID\n\n        const hasMatchingImage = slide.volumeImages?.some(checkImageMatch)\n        return hasMatchingImage\n      }\n\n      const hasMatchingSlide = memoizedSlides.some(checkSlideMatch)\n\n      if (!hasMatchingSlide) {\n        return {\n          isValid: false,\n          message: 'The annotation group is not associated with any slide.',\n          type: 'warning'\n        }\n      }\n    }\n    return { isValid: true, type: 'info' }\n  }, [memoizedSlides, slidesInfo.hasSlides])\n\n  const runValidations = useCallback((options: { dialog?: boolean, context: { annotationGroup?: dmv.annotation.AnnotationGroup, slide?: Slide } }): ValidationResult => {\n    const { dialog = false, context } = options\n    const { annotationGroup, slide } = context\n\n    if (slide !== null && slide !== undefined) {\n      const pyramidValidation = validateMultiResolutionPyramid(slide)\n      if (!pyramidValidation.isValid) {\n        if (dialog) {\n          showValidationDialog(pyramidValidation)\n        }\n        return pyramidValidation\n      }\n    }\n\n    const associationValidation = validateAnnotationGroupAssociation(annotationGroup)\n    if (!associationValidation.isValid) {\n      if (dialog) {\n        showValidationDialog(associationValidation)\n      }\n      return associationValidation\n    }\n\n    return { isValid: true, type: 'info' }\n  }, [validateMultiResolutionPyramid, validateAnnotationGroupAssociation, showValidationDialog])\n\n  /**\n   * Set global validation context for class components\n   */\n  useEffect(() => {\n    const context: ValidationContextType = {\n      runValidations\n    }\n    setGlobalValidationContext(context)\n  }, [runValidations])\n\n  const handleDialogClose = useCallback((): void => {\n    setIsDialogVisible(false)\n    setCurrentValidationResult(null)\n  }, [])\n\n  function getModalType (type: ValidationResult['type']): { error?: boolean, warning?: boolean, info?: boolean } {\n    switch (type) {\n      case 'error':\n        return { error: true }\n      case 'warning':\n        return { warning: true }\n      case 'info':\n        return { info: true }\n      default:\n        return { info: true }\n    }\n  }\n\n  const value: ValidationContextType = {\n    runValidations\n  }\n\n  return (\n    <ValidationContext.Provider value={value}>\n      {children}\n      {(currentValidationResult !== null && currentValidationResult !== undefined) && (\n        <Modal\n          open={isDialogVisible}\n          onCancel={handleDialogClose}\n          onOk={handleDialogClose}\n          title={`Validation ${currentValidationResult.type.charAt(0).toUpperCase() + currentValidationResult.type.slice(1)}`}\n          okText='OK'\n          cancelButtonProps={{ style: { display: 'none' } }}\n          {...getModalType(currentValidationResult.type)}\n        >\n          <p>{currentValidationResult.message}</p>\n        </Modal>\n      )}\n    </ValidationContext.Provider>\n  )\n}\n\nexport const useValidation = (): ValidationContextType => {\n  const context = useContext(ValidationContext)\n  if (context === undefined) {\n    throw new Error('useValidation must be used within a ValidationProvider')\n  }\n  return context\n}\n\nexport const runValidations = (options: { dialog?: boolean, context: { annotationGroup?: dmv.annotation.AnnotationGroup, slide?: Slide } }): ValidationResult => {\n  if (globalValidationContext === null || globalValidationContext === undefined) {\n    console.warn('Validation context not available. Make sure ValidationProvider is mounted.')\n    return { isValid: true, type: 'info' }\n  }\n  return globalValidationContext.runValidations(options)\n}\n","import React, { useState, useEffect } from 'react'\nimport { FaExclamationTriangle } from 'react-icons/fa'\nimport { Tooltip } from 'antd'\nimport { useValidation } from '../contexts/ValidationContext'\nimport { Slide } from '../data/slides'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\ninterface ValidationWarningProps {\n  annotationGroup?: dmv.annotation.AnnotationGroup\n  onEvent?: () => void\n  slide?: Slide\n  iconColor?: string\n  iconSize?: string\n  style?: React.CSSProperties\n  position?: {\n    top?: string\n    right?: string\n  }\n}\n\nconst ValidationWarning: React.FC<ValidationWarningProps> = ({\n  slide,\n  annotationGroup,\n  iconColor = '#e69500',\n  iconSize = '1.3em',\n  position = { top: '4px', right: '4px' },\n  style\n}) => {\n  const [show, setShow] = useState(false)\n  const [tooltipText, setTooltipText] = useState<string | undefined>(undefined)\n\n  const { runValidations } = useValidation()\n\n  useEffect(() => {\n    const validationResult = runValidations({\n      dialog: false,\n      context: { annotationGroup, slide }\n    })\n    if (!validationResult.isValid) {\n      setShow(true)\n      setTooltipText(validationResult.message)\n      // Only log warnings in development environment\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(validationResult.message)\n      }\n    } else {\n      setShow(false)\n      setTooltipText(undefined)\n    }\n  }, [slide, annotationGroup, runValidations])\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <Tooltip title={tooltipText}>\n      <div style={{\n        ...style,\n        position: 'absolute',\n        top: position.top,\n        right: position.right,\n        zIndex: 2,\n        pointerEvents: 'auto'\n      }}\n      >\n        <FaExclamationTriangle style={{\n          color: iconColor,\n          fontSize: iconSize,\n          textShadow: '0 2px 6px rgba(0,0,0,0.25), 0 0px 2px #fff'\n        }}\n        />\n      </div>\n    </Tooltip>\n  )\n}\n\nexport default ValidationWarning\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport ValidationWarning from './ValidationWarning'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null && this.overviewViewportRef.current !== undefined) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          disableInteractions: true,\n          metadata,\n          resizeFactor: 1,\n          errorInterceptor: (error: CustomError) => {\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.DMV,\n              error\n            )\n          }\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n\n    const attributes = []\n    const description = this.props.slide.description\n    if (description !== null && description !== undefined && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ position: 'relative', height: '100px' }}>\n            {this.props.slide.overviewImages.length > 0\n              ? (\n                <div ref={this.overviewViewportRef} style={{ height: '100%' }} />\n                )\n              : (\n                <div style={{\n                  height: '100%',\n                  textAlign: 'center',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  fontSize: '1.5rem',\n                  fontWeight: 300,\n                  color: '#8F9BA8',\n                  letterSpacing: '0.1em'\n                }}\n                >\n                  SM\n                </div>\n                )}\n            <ValidationWarning slide={this.props.slide} />\n          </div>\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== null && this.state.selectedSeriesInstanceUID !== undefined) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { AnnotationCategoryAndType } from '../components/AnnotationCategoryList'\n\nexport const adaptRoiToAnnotation = (roi: dmv.roi.ROI): AnnotationCategoryAndType => {\n  const { uid, evaluations } = roi\n\n  const result = {\n    category: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    },\n    type: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    }\n  }\n\n  evaluations.forEach((\n    item: (\n      dcmjs.sr.valueTypes.TextContentItem |\n      dcmjs.sr.valueTypes.CodeContentItem\n    )\n  ) => {\n    const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n    if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n      const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n      const value = codeContentItem.ConceptCodeSequence[0]\n      // For consistency with Segment and Annotation Group\n      if (nameValue === '276214006') {\n        result.category = { ...value }\n      } else if (nameValue === '121071') {\n        result.type = { ...value }\n      }\n    }\n  })\n\n  return {\n    ...result,\n    uid\n  }\n}\n","import React from 'react'\nimport { Modal, Space } from 'antd'\n\ninterface AnnotationModalProps {\n  isVisible: boolean\n  onOk: () => void\n  onCancel: () => void\n  isOkDisabled: boolean\n  children: React.ReactNode\n}\n\n/**\n * Modal component for configuring annotations\n */\nconst AnnotationModal: React.FC<AnnotationModalProps> = ({\n  isVisible,\n  onOk,\n  onCancel,\n  isOkDisabled,\n  children\n}) => {\n  return (\n    <Modal\n      open={isVisible}\n      title='Configure annotations'\n      onOk={onOk}\n      okButtonProps={{ disabled: isOkDisabled }}\n      onCancel={onCancel}\n      okText='Select'\n    >\n      <Space align='start' direction='vertical'>\n        {children}\n      </Space>\n    </Modal>\n  )\n}\n\nexport default AnnotationModal\n","import React from 'react'\nimport { Modal, Space } from 'antd'\n\ninterface SelectedRoiModalProps {\n  isVisible: boolean\n  onCancel: () => void\n  children: React.ReactNode\n}\n\n/**\n * Modal component for displaying selected ROI information\n */\nconst SelectedRoiModal: React.FC<SelectedRoiModalProps> = ({\n  isVisible,\n  onCancel,\n  children\n}) => {\n  return (\n    <Modal\n      open={isVisible}\n      title='Selected ROI'\n      onCancel={onCancel}\n      maskClosable\n      footer={null}\n    >\n      <Space align='start' direction='vertical'>\n        {children}\n      </Space>\n    </Modal>\n  )\n}\n\nexport default SelectedRoiModal\n","import React, { useCallback } from 'react'\nimport { Modal, Space, InputNumber } from 'antd'\nimport { CheckOutlined, StopOutlined } from '@ant-design/icons'\n\ninterface GoToModalProps {\n  isVisible: boolean\n  onOk: () => void\n  onCancel: () => void\n  validXCoordinateRange: number[]\n  validYCoordinateRange: number[]\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  isSelectedMagnificationValid: boolean\n  onXCoordinateSelection: (value: number | string | null) => void\n  onYCoordinateSelection: (value: number | string | null) => void\n  onMagnificationSelection: (value: number | string | null) => void\n}\n\n/**\n * Modal component for navigating to specific slide positions\n */\nconst GoToModal: React.FC<GoToModalProps> = ({\n  isVisible,\n  onOk,\n  onCancel,\n  validXCoordinateRange,\n  validYCoordinateRange,\n  isSelectedXCoordinateValid,\n  isSelectedYCoordinateValid,\n  isSelectedMagnificationValid,\n  onXCoordinateSelection,\n  onYCoordinateSelection,\n  onMagnificationSelection\n}) => {\n  const handleXCoordinateEnter = useCallback((event: React.KeyboardEvent<HTMLInputElement>): void => {\n    const target = event.target as HTMLInputElement\n    onXCoordinateSelection(target.value !== '' ? Number(target.value) : null)\n  }, [onXCoordinateSelection])\n\n  const handleYCoordinateEnter = useCallback((event: React.KeyboardEvent<HTMLInputElement>): void => {\n    const target = event.target as HTMLInputElement\n    onYCoordinateSelection(target.value !== '' ? Number(target.value) : null)\n  }, [onYCoordinateSelection])\n\n  const handleMagnificationEnter = useCallback((event: React.KeyboardEvent<HTMLInputElement>): void => {\n    const target = event.target as HTMLInputElement\n    onMagnificationSelection(target.value !== '' ? Number(target.value) : null)\n  }, [onMagnificationSelection])\n\n  return (\n    <Modal\n      open={isVisible}\n      title='Go to slide position'\n      onOk={onOk}\n      onCancel={onCancel}\n      okText='Select'\n    >\n      <Space align='start' direction='vertical'>\n        <InputNumber\n          placeholder={\n            '[' +\n            `${validXCoordinateRange[0]}` +\n            ', ' +\n            `${validXCoordinateRange[1]}` +\n            ']'\n          }\n          prefix='X Coordinate [mm]'\n          onChange={onXCoordinateSelection}\n          onPressEnter={handleXCoordinateEnter}\n          controls={false}\n          addonAfter={\n            isSelectedXCoordinateValid\n              ? (\n                <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n              : (\n                <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n          }\n        />\n        <InputNumber\n          placeholder={\n            '[' +\n            `${validYCoordinateRange[0]}` +\n            ', ' +\n            `${validYCoordinateRange[1]}` +\n            ']'\n          }\n          prefix='Y Coordinate [mm]'\n          onChange={onYCoordinateSelection}\n          onPressEnter={handleYCoordinateEnter}\n          controls={false}\n          addonAfter={\n            isSelectedYCoordinateValid\n              ? (\n                <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n              : (\n                <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n          }\n        />\n        <InputNumber\n          placeholder='[0 - 40]'\n          prefix='Magnification'\n          onChange={onMagnificationSelection}\n          onPressEnter={handleMagnificationEnter}\n          controls={false}\n          addonAfter={\n            isSelectedMagnificationValid\n              ? (\n                <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n              : (\n                <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n          }\n        />\n      </Space>\n    </Modal>\n  )\n}\n\nexport default GoToModal\n","import React from 'react'\nimport { Modal } from 'antd'\n\ninterface ReportModalProps {\n  isVisible: boolean\n  onOk: () => void\n  onCancel: () => void\n  children: React.ReactNode\n}\n\n/**\n * Modal component for verifying and saving reports\n */\nconst ReportModal: React.FC<ReportModalProps> = ({\n  isVisible,\n  onOk,\n  onCancel,\n  children\n}) => {\n  return (\n    <Modal\n      open={isVisible}\n      title='Verify and save report'\n      onOk={onOk}\n      onCancel={onCancel}\n      okText='Save'\n    >\n      {children}\n    </Modal>\n  )\n}\n\nexport default ReportModal\n","import React from 'react'\nimport AnnotationModal from './AnnotationModal'\nimport SelectedRoiModal from './SelectedRoiModal'\nimport GoToModal from './GoToModal'\nimport ReportModal from './ReportModal'\n\ninterface SlideViewerModalsProps {\n  // Annotation Modal\n  isAnnotationModalVisible: boolean\n  onAnnotationConfigurationCompletion: () => void\n  onAnnotationConfigurationCancellation: () => void\n  isAnnotationOkDisabled: boolean\n  annotationConfigurations: React.ReactNode\n\n  // Selected ROI Modal\n  isSelectedRoiModalVisible: boolean\n  onRoiSelectionCancellation: () => void\n  selectedRoiInformation: React.ReactNode\n\n  // Go To Modal\n  isGoToModalVisible: boolean\n  onSlidePositionSelection: () => void\n  onSlidePositionSelectionCancellation: () => void\n  validXCoordinateRange: number[]\n  validYCoordinateRange: number[]\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  isSelectedMagnificationValid: boolean\n  onXCoordinateSelection: (value: number | string | null) => void\n  onYCoordinateSelection: (value: number | string | null) => void\n  onMagnificationSelection: (value: number | string | null) => void\n\n  // Report Modal\n  isReportModalVisible: boolean\n  onReportVerification: () => void\n  onReportCancellation: () => void\n  report: React.ReactNode\n}\n\n/**\n * Component that renders all modals for the SlideViewer\n */\nconst SlideViewerModals: React.FC<SlideViewerModalsProps> = ({\n  // Annotation Modal\n  isAnnotationModalVisible,\n  onAnnotationConfigurationCompletion,\n  onAnnotationConfigurationCancellation,\n  isAnnotationOkDisabled,\n  annotationConfigurations,\n\n  // Selected ROI Modal\n  isSelectedRoiModalVisible,\n  onRoiSelectionCancellation,\n  selectedRoiInformation,\n\n  // Go To Modal\n  isGoToModalVisible,\n  onSlidePositionSelection,\n  onSlidePositionSelectionCancellation,\n  validXCoordinateRange,\n  validYCoordinateRange,\n  isSelectedXCoordinateValid,\n  isSelectedYCoordinateValid,\n  isSelectedMagnificationValid,\n  onXCoordinateSelection,\n  onYCoordinateSelection,\n  onMagnificationSelection,\n\n  // Report Modal\n  isReportModalVisible,\n  onReportVerification,\n  onReportCancellation,\n  report\n}) => {\n  return (\n    <>\n      <AnnotationModal\n        isVisible={isAnnotationModalVisible}\n        onOk={onAnnotationConfigurationCompletion}\n        onCancel={onAnnotationConfigurationCancellation}\n        isOkDisabled={isAnnotationOkDisabled}\n      >\n        {annotationConfigurations}\n      </AnnotationModal>\n\n      <SelectedRoiModal\n        isVisible={isSelectedRoiModalVisible}\n        onCancel={onRoiSelectionCancellation}\n      >\n        {selectedRoiInformation}\n      </SelectedRoiModal>\n\n      <GoToModal\n        isVisible={isGoToModalVisible}\n        onOk={onSlidePositionSelection}\n        onCancel={onSlidePositionSelectionCancellation}\n        validXCoordinateRange={validXCoordinateRange}\n        validYCoordinateRange={validYCoordinateRange}\n        isSelectedXCoordinateValid={isSelectedXCoordinateValid}\n        isSelectedYCoordinateValid={isSelectedYCoordinateValid}\n        isSelectedMagnificationValid={isSelectedMagnificationValid}\n        onXCoordinateSelection={onXCoordinateSelection}\n        onYCoordinateSelection={onYCoordinateSelection}\n        onMagnificationSelection={onMagnificationSelection}\n      />\n\n      <ReportModal\n        isVisible={isReportModalVisible}\n        onOk={onReportVerification}\n        onCancel={onReportCancellation}\n      >\n        {report}\n      </ReportModal>\n    </>\n  )\n}\n\nexport default SlideViewerModals\n","import React from 'react'\nimport { Checkbox, Col, Divider, InputNumber, Row, Slider } from 'antd'\n\ninterface ColorSettingsMenuProps {\n  annotationGroupsUIDs: string[]\n  defaultStyle: {\n    opacity: number\n    color: number[]\n    contourOnly: boolean\n  }\n  onStyleChange: Function\n}\n\ninterface ColorSettingsMenuState {\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    contourOnly: boolean\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass ColorSettingsMenu extends React.Component<\nColorSettingsMenuProps,\nColorSettingsMenuState\n> {\n  constructor (props: ColorSettingsMenuProps) {\n    super(props)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        contourOnly: this.props.defaultStyle.contourOnly\n      }\n    }\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: this.state.currentStyle.color,\n            opacity: value,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n      this.updateCurrentStyle({ opacity: value })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleShowOutlineOnly (value: boolean): void {\n    this.updateCurrentStyle({ contourOnly: value })\n\n    this.props.annotationGroupsUIDs.forEach((uid) => {\n      this.props.onStyleChange({\n        uid,\n        styleOptions: {\n          color: this.state.currentStyle.color,\n          opacity: this.state.currentStyle.opacity,\n          contourOnly: value\n        }\n      })\n    })\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  updateCurrentStyle ({\n    color,\n    opacity,\n    contourOnly\n  }: {\n    color?: number[]\n    opacity?: number\n    contourOnly?: boolean\n  }): void {\n    this.setState((state) => ({\n      currentStyle: {\n        opacity: opacity ?? state.currentStyle.opacity,\n        color: color ?? state.currentStyle.color,\n        contourOnly: contourOnly ?? state.currentStyle.contourOnly\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    return (\n      <div>\n        {colorSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Checkbox\n            value={this.state.currentStyle.contourOnly}\n            onChange={(event) =>\n              this.handleShowOutlineOnly(event.target.checked)}\n          >\n            Show outline only\n          </Checkbox>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default ColorSettingsMenu\n","import React from 'react'\nimport { Menu, Space, Checkbox, Tooltip, Popover, Button } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { Category, Type } from './AnnotationCategoryList'\nimport ColorSettingsMenu from './ColorSettingsMenu'\n\nconst AnnotationCategoryItem = ({\n  category,\n  onChange,\n  checkedAnnotationUids,\n  onStyleChange,\n  defaultAnnotationStyles,\n  ...props\n}: {\n  category: Category\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const { types } = category\n\n  const onCheckCategoryChange = (e: any): void => {\n    const isVisible = e.target.checked\n    types.forEach((type: Type) => {\n      handleChangeCheckedType({ type, isVisible })\n    })\n  }\n\n  const checkAll = types.every((type: Type) =>\n    type.uids.every((uid: string) => checkedAnnotationUids.has(uid))\n  )\n  const indeterminate =\n    !checkAll &&\n    types.some((type: Type) =>\n      type.uids.some((uid: string) => checkedAnnotationUids.has(uid))\n    )\n\n  const handleChangeCheckedType = ({\n    type,\n    isVisible\n  }: {\n    type: Type\n    isVisible: boolean\n  }): void => {\n    type.uids.forEach((uid: string) => {\n      onChange({ roiUID: uid, isVisible })\n    })\n  }\n\n  return (\n    <Menu.Item\n      style={{ height: '100%', paddingLeft: '3px' }}\n      {...props}\n    >\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px', color: 'black' }}>\n          <Space direction='vertical' align='end'>\n            <Checkbox\n              indeterminate={indeterminate}\n              checked={checkAll}\n              onChange={onCheckCategoryChange}\n            >\n              <Tooltip\n                title={`${category.CodeValue}:${category.CodingSchemeDesignator}`}\n                mouseEnterDelay={1}\n              >\n                {category.CodeMeaning}\n              </Tooltip>\n              <Popover\n                placement='topLeft'\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n                content={() => (\n                  <ColorSettingsMenu\n                    annotationGroupsUIDs={types.reduce(\n                      (acc: string[], type) => {\n                        return [...acc, ...type.uids]\n                      },\n                      []\n                    )}\n                    onStyleChange={onStyleChange}\n                    defaultStyle={\n                      defaultAnnotationStyles[types[0].uids[0]]\n                    }\n                  />\n                )}\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  style={{ marginLeft: '10px' }}\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Checkbox>\n          </Space>\n          {types.map((type: Type) => {\n            const { CodeMeaning, CodingSchemeDesignator, CodeValue, uids } =\n              type\n            const shortenedCodeMeaning = CodeMeaning.slice(0, 22)\n            const displayCodeMeaning = shortenedCodeMeaning === CodeMeaning ? CodeMeaning : `${shortenedCodeMeaning}...`\n            const isChecked = uids.every((uid: string) =>\n              checkedAnnotationUids.has(uid)\n            )\n            const indeterminateType =\n              !isChecked &&\n              uids.some((uid: string) => checkedAnnotationUids.has(uid))\n            return (\n              <div\n                key={`${type.CodingSchemeDesignator}:${type.CodeMeaning}`}\n                style={{\n                  paddingLeft: '25px',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'row'\n                }}\n              >\n                <Checkbox\n                  indeterminate={indeterminateType}\n                  checked={isChecked}\n                  onChange={(e: any) =>\n                    handleChangeCheckedType({\n                      type,\n                      isVisible: e.target.checked\n                    })}\n                />\n                <div style={{ paddingLeft: '5px' }}>\n                  <Tooltip\n                    title={`${CodeValue}:${CodingSchemeDesignator}`}\n                    mouseEnterDelay={1}\n                  >\n                    {displayCodeMeaning}\n                  </Tooltip>\n                  <Popover\n                    placement='topLeft'\n                    overlayStyle={{ width: '350px' }}\n                    title='Display Settings'\n                    content={() => (\n                      <ColorSettingsMenu\n                        annotationGroupsUIDs={type.uids}\n                        onStyleChange={onStyleChange}\n                        defaultStyle={defaultAnnotationStyles[type.uids[0]]}\n                      />\n                    )}\n                  >\n                    <Button\n                      type='primary'\n                      shape='circle'\n                      style={{ marginLeft: '10px' }}\n                      icon={<SettingOutlined />}\n                    />\n                  </Popover>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </Space>\n    </Menu.Item>\n  )\n}\n\nexport default AnnotationCategoryItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport AnnotationCategoryItem from './AnnotationCategoryItem'\n\nexport interface AnnotationCategoryAndType {\n  uid: string\n  type: Omit<Type, 'uids'>\n  category: Omit<Category, 'types'>\n}\nexport interface Type {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  uids: string[]\n}\nexport interface Category {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  types: Type[]\n}\n\nconst getCategories = (annotations: any): Record<string, Category> => {\n  const categories = annotations?.reduce(\n    (\n      categoriesAcc: Record<string, Category & { types: Record<string, Type> }>,\n      annotation: AnnotationCategoryAndType\n    ) => {\n      const { category, type, uid } = annotation\n      const categoryKey = category.CodeMeaning\n      const typeKey = type.CodeMeaning\n\n      const oldCategory = categoriesAcc[categoryKey] ?? {\n        ...category,\n        types: {}\n      }\n      const oldType = oldCategory.types[typeKey] ?? {\n        ...type,\n        uids: []\n      }\n\n      return {\n        ...categoriesAcc,\n        [categoryKey]: {\n          ...oldCategory,\n          types: {\n            ...oldCategory.types,\n            [typeKey]: { ...oldType, uids: [...oldType.uids, uid] }\n          }\n        }\n      }\n    },\n    {}\n  )\n\n  // Normalizing types so that it's an array instead of an object:\n  Object.keys(categories).forEach((categoryKey: string) => {\n    const category = categories[categoryKey]\n    const { types } = category\n    const typesArr = Object.keys(types).map(\n      (typeKey: string) => types[typeKey]\n    )\n    categories[categoryKey].types = typesArr\n  })\n\n  return categories\n}\n\nconst AnnotationCategoryList = ({\n  annotations,\n  onChange,\n  onStyleChange,\n  defaultAnnotationStyles,\n  checkedAnnotationUids\n}: {\n  annotations: AnnotationCategoryAndType[]\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const categories: Record<string, Category> = getCategories(annotations)\n\n  if (Object.keys(categories).length === 0) {\n    return <></>\n  }\n\n  const items = Object.keys(categories).map((categoryKey: string) => {\n    const category = categories[categoryKey]\n    return (\n      <AnnotationCategoryItem\n        key={category.CodeMeaning !== '' ? category.CodeMeaning : `category-${categoryKey}`}\n        category={category}\n        onChange={onChange}\n        onStyleChange={onStyleChange}\n        defaultAnnotationStyles={defaultAnnotationStyles}\n        checkedAnnotationUids={checkedAnnotationUids}\n      />\n    )\n  })\n\n  return <Menu selectable={false}>{items}</Menu>\n}\nexport default AnnotationCategoryList\n","import React, { useCallback } from 'react'\nimport { Layout, Menu } from 'antd'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport AnnotationCategoryList from '../AnnotationCategoryList'\nimport { AnnotationCategoryAndType } from '../../types/annotations'\nimport { StyleOptions } from './types'\n\ninterface SlideViewerSidebarProps {\n  labelViewportRef: React.RefObject<HTMLDivElement>\n  labelViewer?: dmv.viewer.LabelImageViewer\n  openSubMenuItems: string[]\n  specimenMenu: React.ReactNode\n  iccProfilesMenu: React.ReactNode\n  equipmentMenu: React.ReactNode\n  opticalPathMenu: React.ReactNode\n  presentationStateMenu: React.ReactNode\n  annotationMenuItems: React.ReactNode\n  annotationGroupMenu: React.ReactNode\n  segmentationMenu: React.ReactNode\n  parametricMapMenu: React.ReactNode\n  annotations: AnnotationCategoryAndType[]\n  visibleRoiUIDs: Set<string>\n  onAnnotationVisibilityChange: ({ roiUID, isVisible }: { roiUID: string, isVisible: boolean }) => void\n  onRoiStyleChange: ({ uid, styleOptions }: { uid: string, styleOptions: StyleOptions }) => void\n  defaultAnnotationStyles: { [annotationUID: string]: StyleOptions }\n}\n\n/**\n * Sidebar component for the SlideViewer containing all menu items\n */\nconst SlideViewerSidebar: React.FC<SlideViewerSidebarProps> = ({\n  labelViewportRef,\n  labelViewer,\n  openSubMenuItems,\n  specimenMenu,\n  iccProfilesMenu,\n  equipmentMenu,\n  opticalPathMenu,\n  presentationStateMenu,\n  annotationMenuItems,\n  annotationGroupMenu,\n  segmentationMenu,\n  parametricMapMenu,\n  annotations,\n  visibleRoiUIDs,\n  onAnnotationVisibilityChange,\n  onRoiStyleChange,\n  defaultAnnotationStyles\n}) => {\n  const handleMenuOpenChange = useCallback((): void => {\n    // Give menu item time to render before updating viewer size\n    const resizeViewer = (): void => {\n      if (labelViewer !== null && labelViewer !== undefined) {\n        labelViewer.resize()\n      }\n    }\n    setTimeout(resizeViewer, 100)\n  }, [labelViewer])\n\n  return (\n    <Layout.Sider\n      width={300}\n      reverseArrow\n      style={{\n        borderLeft: 'solid',\n        borderLeftWidth: 0.25,\n        overflow: 'hidden',\n        background: 'none'\n      }}\n    >\n      <Menu\n        mode='inline'\n        defaultOpenKeys={openSubMenuItems}\n        style={{ height: '100%' }}\n        inlineIndent={14}\n        forceSubMenuRender\n        onOpenChange={handleMenuOpenChange}\n      >\n        {labelViewportRef.current !== null && (\n          <Menu.SubMenu key='label' title='Slide label'>\n            <Menu.Item style={{ height: '100%' }} key='image'>\n              <div\n                style={{ height: '220px' }}\n                ref={labelViewportRef}\n              />\n            </Menu.Item>\n          </Menu.SubMenu>\n        )}\n        {specimenMenu}\n        {iccProfilesMenu}\n        {equipmentMenu}\n        {opticalPathMenu}\n        {presentationStateMenu}\n        <Menu.SubMenu key='annotations' title='Annotations'>\n          {annotationMenuItems}\n        </Menu.SubMenu>\n        {annotationGroupMenu}\n        {annotations.length === 0\n          ? null\n          : (\n            <Menu.SubMenu\n              key='annotation-categories'\n              title='Annotation Categories'\n            >\n              <AnnotationCategoryList\n                annotations={annotations}\n                onChange={onAnnotationVisibilityChange}\n                checkedAnnotationUids={visibleRoiUIDs}\n                onStyleChange={onRoiStyleChange}\n                defaultAnnotationStyles={defaultAnnotationStyles}\n              />\n            </Menu.SubMenu>\n            )}\n        {segmentationMenu}\n        {parametricMapMenu}\n      </Menu>\n    </Layout.Sider>\n  )\n}\n\nexport default SlideViewerSidebar\n","import React from 'react'\nimport { Layout } from 'antd'\n\ninterface SlideViewerContentProps {\n  toolbar: React.ReactNode\n  toolbarHeight: string\n  cursor: string\n  volumeViewportRef: React.RefObject<HTMLDivElement>\n  children: React.ReactNode\n}\n\n/**\n * Main content area component for the SlideViewer\n */\nconst SlideViewerContent: React.FC<SlideViewerContentProps> = ({\n  toolbar,\n  toolbarHeight,\n  cursor,\n  volumeViewportRef,\n  children\n}) => {\n  return (\n    <Layout.Content style={{ height: '100%' }}>\n      {toolbar}\n\n      <div\n        style={{\n          height: `calc(100% - ${toolbarHeight})`,\n          overflow: 'hidden',\n          cursor\n        }}\n        ref={volumeViewportRef}\n      />\n\n      {children}\n    </Layout.Content>\n  )\n}\n\nexport default SlideViewerContent\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { findContentItemsByName } from '../../../utils/sr'\n\n/**\n * Builds a key for a concept based on its coding scheme and value\n */\nexport const buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\n/**\n * Gets the ROI key from a ROI object\n */\nexport const getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length > 0) {\n    const finding = matches[0].ConceptNameCodeSequence[0]\n    return buildKey(finding)\n  }\n  return undefined\n}\n\n/**\n * Compares two ROIs for equality based on their spatial coordinates\n */\nexport const areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\n/**\n * Formats ROI style options\n */\nexport const formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: style.stroke?.color ?? [255, 234, 0],\n    width: style.stroke?.width ?? 2\n  }\n  const fill = {\n    color: style.fill?.color ?? [255, 234, 0, 0.2]\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius ?? Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n","/**\n * Utility functions for handling segment colors\n */\n\nimport dcmjs from 'dcmjs'\n\n/**\n * Type guard to check if a value is defined and not null\n */\nconst isDefined = <T>(value: T | undefined | null): value is T => {\n  return value !== undefined && value !== null\n}\n\n/**\n * Generate a distinct color for a segment based on its index\n * Uses a predefined palette of distinct colors that work well together\n */\nexport const generateSegmentColor = (index: number): number[] => {\n  // Use a predefined palette of distinct colors that work well together\n  const colorPalette = [\n    [255, 0, 0], // Red\n    [0, 255, 0], // Green\n    [0, 0, 255], // Blue\n    [255, 255, 0], // Yellow\n    [255, 0, 255], // Magenta\n    [0, 255, 255], // Cyan\n    [255, 128, 0], // Orange\n    [128, 0, 255], // Purple\n    [0, 128, 128], // Teal\n    [128, 128, 0], // Olive\n    [255, 128, 128], // Light Red\n    [128, 255, 128], // Light Green\n    [128, 128, 255], // Light Blue\n    [255, 255, 128], // Light Yellow\n    [255, 128, 255], // Light Magenta\n    [128, 255, 255] // Light Cyan\n  ]\n\n  return colorPalette[index % colorPalette.length]\n}\n\n/**\n * Convert RGB values to hex color string\n */\nexport const rgbToHex = (rgb: number[]): string => {\n  const r = Math.max(0, Math.min(255, Math.round(rgb[0])))\n  const g = Math.max(0, Math.min(255, Math.round(rgb[1])))\n  const b = Math.max(0, Math.min(255, Math.round(rgb[2])))\n  return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n}\n\n/**\n * Convert hex color string to RGB values\n */\nexport const hexToRgb = (hex: string): number[] => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  if (result !== null) {\n    return [\n      parseInt(result[1], 16),\n      parseInt(result[2], 16),\n      parseInt(result[3], 16)\n    ]\n  }\n  return [0, 0, 0]\n}\n\n/**\n * Check if a color is light or dark for determining text contrast\n */\nexport const isLightColor = (rgb: number[]): boolean => {\n  const brightness = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000\n  return brightness > 128\n}\n\n/**\n * Get contrasting text color (black or white) for a given background color\n */\nexport const getContrastColor = (rgb: number[]): number[] => {\n  return isLightColor(rgb) ? [0, 0, 0] : [255, 255, 255]\n}\n\n/**\n * Extract color hints from DICOM segment metadata\n * Looks for RecommendedDisplayCIELabValue in the Segment Sequence\n */\nexport const extractSegmentColorFromMetadata = (\n  segmentMetadata: Record<string, unknown>,\n  segmentNumber: number\n): number[] | null => {\n  try {\n    /** Look for SegmentSequence in the metadata */\n    if (segmentMetadata.SegmentSequence !== undefined && Array.isArray(segmentMetadata.SegmentSequence)) {\n      const segment = (segmentMetadata.SegmentSequence as Array<Record<string, unknown>>).find(\n        (seg: Record<string, unknown>) => seg.SegmentNumber === segmentNumber\n      )\n\n      if (isDefined(segment) && isDefined(segment.RecommendedDisplayCIELabValue) && Array.isArray(segment.RecommendedDisplayCIELabValue)) {\n        /** Convert CIELab to RGB using dcmjs */\n        const labValues = segment.RecommendedDisplayCIELabValue as number[]\n        if (labValues.length >= 3) {\n          try {\n            /** Use dcmjs's dicomlab2RGB function for accurate DICOM CIELAB to RGB conversion */\n            const rgb = (dcmjs as any).data.Colors.dicomlab2RGB(labValues)\n            /** Convert from 0-1 range to 0-255 range and round to integers */\n            const result = [\n              Math.max(0, Math.min(255, Math.round(rgb[0] * 255))),\n              Math.max(0, Math.min(255, Math.round(rgb[1] * 255))),\n              Math.max(0, Math.min(255, Math.round(rgb[2] * 255)))\n            ]\n            return result\n          } catch (error) {\n            /** Failed to convert CIELab to RGB using dcmjs */\n            console.warn('Failed to convert CIELab to RGB using dcmjs:', error)\n            return null\n          }\n        }\n      }\n    }\n  } catch (error) {\n    /** Failed to extract color from segment metadata */\n    console.warn(`Failed to extract color from segment ${segmentNumber}:`, error)\n  }\n\n  return null\n}\n\n/**\n * Get the best color for a segment, either from DICOM metadata or generated\n */\nexport const getSegmentColor = (\n  segmentMetadata: Record<string, unknown>,\n  segmentNumber: number,\n  fallbackIndex: number\n): number[] => {\n  /** First try to get color from DICOM metadata */\n  const metadataColor = extractSegmentColorFromMetadata(segmentMetadata, segmentNumber)\n  if (metadataColor !== null) {\n    return metadataColor\n  }\n\n  /** Fall back to generated color */\n  return generateSegmentColor(fallbackIndex)\n}\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { Slide } from '../../../data/slides'\nimport { StorageClasses } from '../../../data/uids'\nimport { CustomError, errorTypes } from '../../../utils/CustomError'\nimport { findContentItemsByName } from '../../../utils/sr'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../../../services/NotificationMiddleware'\n\n/**\n * Constructs volume and label viewers for the slide\n */\nexport const constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      skipThumbnails: true,\n      preload,\n      errorInterceptor: (error: CustomError) => {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DMV, error\n        )\n      }\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical',\n        errorInterceptor: (error: CustomError) => {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.DMV,\n            error\n          )\n        }\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'Failed to instantiate viewer'\n      )\n    )\n    throw error\n  }\n}\n\n/**\n * Checks if a report implements TID1500\n */\nexport const implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Checks if a report describes a specimen subject\n */\nexport const describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  return retrievedConcept.equals(expectedConcept)\n}\n\n/**\n * Checks if a report contains appropriate graphic ROI annotations.\n */\nexport const containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n","/**\n * Default ROI stroke color\n */\nexport const DEFAULT_ROI_STROKE_COLOR = [255, 234, 0] // [0, 126, 163]\n\n/**\n * Default ROI fill color\n */\nexport const DEFAULT_ROI_FILL_COLOR = [255, 234, 0, 0.2] // [0, 126, 163, 0.2]\n\n/**\n * Default ROI stroke width\n */\nexport const DEFAULT_ROI_STROKE_WIDTH = 2\n\n/**\n * Default ROI radius\n */\nexport const DEFAULT_ROI_RADIUS = 5\n\n/**\n * Default annotation opacity\n */\nexport const DEFAULT_ANNOTATION_OPACITY = 0.4\n\n/**\n * Default annotation stroke color\n */\nexport const DEFAULT_ANNOTATION_STROKE_COLOR = [0, 0, 0]\n\n/**\n * Default annotation color palette\n */\nexport const DEFAULT_ANNOTATION_COLOR_PALETTE = [\n  [255, 0, 0],\n  [0, 255, 0],\n  [0, 0, 255],\n  [255, 255, 0],\n  [0, 255, 255],\n  [0, 0, 0]\n]\n\n/**\n * Selection stroke color\n */\nexport const SELECTION_STROKE_COLOR = [0, 153, 255]\n\n/**\n * Selection fill color\n */\nexport const SELECTION_FILL_COLOR = [255, 255, 255]\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: (uid: string) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection(object.key)\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React, { useCallback } from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\nimport ValidationWarning from './ValidationWarning'\n\n// Helper function components\nfunction AnnotationGroupControls ({\n  isVisible,\n  onVisibilityChange,\n  settings\n}: {\n  isVisible: boolean\n  onVisibilityChange: (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => void\n  settings: React.ReactNode\n}): React.ReactElement {\n  return (\n    <Space direction='vertical' align='end'>\n      <Switch\n        size='small'\n        onChange={onVisibilityChange}\n        checked={isVisible}\n        checkedChildren={<FaEye />}\n        unCheckedChildren={<FaEyeSlash />}\n      />\n      <Popover\n        placement='left'\n        content={settings}\n        overlayStyle={{ width: '350px' }}\n        title='Display Settings'\n      >\n        <Button type='primary' shape='circle' icon={<SettingOutlined />} />\n      </Popover>\n    </Space>\n  )\n}\n\nfunction AnnotationGroupBadgeDescription ({\n  annotationGroup,\n  onClick,\n  isBadgeVisible,\n  color,\n  label,\n  attributes\n}: {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  onClick: () => void\n  isBadgeVisible: boolean\n  color: string\n  label: string\n  attributes: Array<{ name: string, value: string }>\n}): React.ReactElement {\n  const handleKeyDown = useCallback((event: React.KeyboardEvent): void => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault()\n      onClick()\n    }\n  }, [onClick])\n\n  return (\n    <div\n      onClick={onClick}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      role='button'\n      aria-label={`Annotation group ${label}`}\n    >\n      <Badge\n        offset={[-20, 20]}\n        count={' '}\n        style={{\n          borderStyle: 'solid',\n          borderWidth: '1px',\n          borderColor: 'gray',\n          visibility: isBadgeVisible ? 'visible' : 'hidden',\n          backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n        }}\n      >\n        <ValidationWarning\n          annotationGroup={annotationGroup}\n          style={{ padding: '0.3rem' }}\n        />\n        <Description\n          header={label}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      </Badge>\n    </div>\n  )\n}\n\n// Interfaces\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onAnnotationGroupClick: (annotationGroupUID: string) => void\n  onVisibilityChange: ({\n    annotationGroupUID,\n    isVisible\n  }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({\n    uid,\n    styleOptions\n  }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n// Class\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<\nAnnotationGroupItemProps,\nAnnotationGroupItemState\n> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleMeasurementSelection =\n      this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange = (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value !== null && value !== undefined) {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color,\n          limitValues: this.state.currentStyle.limitValues\n        }\n      })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value !== null && value !== undefined && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value !== null && value !== undefined && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value !== null && value !== undefined && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color !== null && this.state.currentStyle.color !== undefined) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange (value: number | null): void {\n    if (value !== null && value !== undefined && this.state.currentStyle.limitValues !== undefined) {\n      this.setState((state) => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [value, this.state.currentStyle.limitValues[1]]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (value: number | null): void {\n    if (value !== null && value !== undefined && this.state.currentStyle.limitValues !== undefined) {\n      this.setState((state) => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [this.state.currentStyle.limitValues[0], value]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (values: number[]): void {\n    this.setState((state) => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      uid: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleAnnotationGroupClick = (): void => {\n    this.props.onAnnotationGroupClick(this.props.annotationGroup.uid)\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value !== null && value !== undefined && option?.children !== null && option?.children !== undefined) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState((state) => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState((state) => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      (item) => item.AnnotationGroupUID === this.props.annotationGroup.uid\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      },\n      {\n        name: 'Annotation coordinate type',\n        value: this.props.metadata.AnnotationCoordinateType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const createMeasurementOption = (measurementItem: { ConceptNameCodeSequence: Array<{ CodingSchemeDesignator: string, CodeValue: string, CodeMeaning: string }> }): React.ReactElement => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      const key = `${name.CodingSchemeDesignator}-${name.CodeValue}`\n      return (\n        <Select.Option\n          key={key}\n          value={key}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    }\n    const measurementOptions = measurementsSequence.map(createMeasurementOption)\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        {null}\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color !== null && this.state.currentStyle.color !== undefined) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues !== null && this.state.currentStyle.limitValues !== undefined) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>Values of interest</Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>Exploration</Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>Measurement</Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible =\n      this.state.isVisible && this.state.currentStyle.measurement === null\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onAnnotationGroupClick,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <AnnotationGroupControls\n              isVisible={this.props.isVisible}\n              onVisibilityChange={this.handleVisibilityChange}\n              settings={settings}\n            />\n          </div>\n          <AnnotationGroupBadgeDescription\n            onClick={this.handleAnnotationGroupClick}\n            annotationGroup={this.props.annotationGroup}\n            isBadgeVisible={isBadgeVisible}\n            color={color}\n            label={this.props.annotationGroup.label}\n            attributes={attributes}\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu, Switch } from 'antd'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupClick: (annotationGroupUID: string) => void\n  onAnnotationGroupVisibilityChange: ({\n    annotationGroupUID,\n    isVisible\n  }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({\n    uid,\n    styleOptions\n  }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<\nAnnotationGroupListProps,\nunknown\n> {\n  handleVisibilityChange = (checked: boolean): void => {\n    if (checked) {\n      this.props.annotationGroups.forEach((annotationGroup) => {\n        this.props.onAnnotationGroupVisibilityChange({\n          annotationGroupUID: annotationGroup.uid,\n          isVisible: checked\n        })\n      })\n      return\n    }\n\n    this.props.visibleAnnotationGroupUIDs.forEach((annotationGroupUID) => {\n      this.props.onAnnotationGroupVisibilityChange({\n        annotationGroupUID,\n        isVisible: checked\n      })\n    })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          onAnnotationGroupClick={this.props.onAnnotationGroupClick}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <>\n        <div\n          style={{\n            paddingLeft: '14px',\n            paddingTop: '7px',\n            paddingBottom: '7px'\n          }}\n        >\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleAnnotationGroupUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu selectable={false}>{items}</Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.ENCODINGANDDECODING,\n        'Content item \"Imaging Measurements\" not found.' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\".'\n      )\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Tracking Unique Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Finding\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Image Region\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: any\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Content item \"Image Region\" has unknown graphic type ' +\n            `\"${regionItem.GraphicType}\". ` +\n            'Content of Comprehensive 3D SR document is not structured ' +\n            'based on TID 1500 \"Measurement Report\" -> ' +\n            'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n          )\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen UID\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Container Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","const HoveredRoiTooltip = ({\n  xPosition,\n  yPosition,\n  rois\n}: {\n  xPosition: number\n  yPosition: number\n  rois: Array<{ index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n}): JSX.Element => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: `${yPosition}px`,\n        left: `${xPosition}px`,\n        backgroundColor: 'rgba(230, 230, 230, 0.65)',\n        minWidth: '150px',\n        minHeight: '60px',\n        padding: '20px',\n        fontWeight: 'bold',\n        pointerEvents: 'none'\n      }}\n    >\n      {rois.map((roi, i) => {\n        const attributes = roi.attributes\n        return (\n          <div key={roi.roiUid}>\n            <span>ROI {roi.index}</span>\n            {attributes.map((attr) => {\n              return (\n                <div key={attr.name + roi.roiUid}>\n                  {attr.name}: <span style={{ fontWeight: 500 }}>{attr.value}</span>\n                </div>\n              )\n            })}\n          </div>\n\n        )\n      })}\n    </div>\n  )\n}\n\nexport default HoveredRoiTooltip\n","import { roi, metadata } from 'dicom-microscopy-viewer'\nimport { sr, data } from 'dcmjs'\n\nimport { CustomError, errorTypes } from './CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { User } from '../auth'\n\ninterface AppInfo {\n  name: string\n  version: string\n  uid: string\n  organization?: string\n}\n\nconst generateReport = ({\n  rois,\n  metadata,\n  user,\n  app,\n  visibleRoiUIDs\n}: {\n  rois: roi.ROI[]\n  metadata: metadata.VLWholeSlideMicroscopyImage[]\n  user: User | undefined\n  app: AppInfo\n  visibleRoiUIDs: Set<string>\n}): { isReportModalVisible: boolean, generatedReport: metadata.Comprehensive3DSR } => {\n  // Metadata should be sorted such that the image with the highest\n  // resolution is the last item in the array.\n  const refImage = metadata[metadata.length - 1]\n  // We assume that there is only one specimen (tissue section) per\n  // ontainer (slide). Only the tissue section is tracked with a unique\n  // identifier, even if the section may be composed of different biological\n  // samples.\n  if ((refImage.SpecimenDescriptionSequence?.length ?? 0) > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'More than one specimen has been described for the slide'\n      )\n    )\n  }\n  const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n  console.debug('create Observation Context')\n  let observer\n\n  if (user !== undefined) {\n    observer = new sr.templates.PersonObserverIdentifyingAttributes({\n      name: user.name ?? 'ANONYMOUS',\n      loginName: user.email ?? ''\n    })\n  } else {\n    console.warn('no user information available')\n    observer = new sr.templates.PersonObserverIdentifyingAttributes({\n      name: 'ANONYMOUS'\n    })\n  }\n\n  const observationContext = new sr.templates.ObservationContext({\n    observerPersonContext: new sr.templates.ObserverContext({\n      observerType: new sr.coding.CodedConcept({\n        value: '121006',\n        schemeDesignator: 'DCM',\n        meaning: 'Person'\n      }),\n      observerIdentifyingAttributes: observer\n    }),\n    observerDeviceContext: new sr.templates.ObserverContext({\n      observerType: new sr.coding.CodedConcept({\n        value: '121007',\n        schemeDesignator: 'DCM',\n        meaning: 'Device'\n      }),\n      observerIdentifyingAttributes: new sr.templates.DeviceObserverIdentifyingAttributes({\n        uid: app.uid,\n        manufacturerName: 'MGH Computational Pathology',\n        modelName: app.name\n      })\n    }),\n    subjectContext: new sr.templates.SubjectContext({\n      subjectClass: new sr.coding.CodedConcept({\n        value: '121027',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen'\n      }),\n      subjectClassSpecificContext: new sr.templates.SubjectContextSpecimen({\n        uid: refSpecimen.SpecimenUID,\n        identifier: refSpecimen.SpecimenIdentifier,\n        containerIdentifier: refImage.ContainerIdentifier\n      })\n    })\n  })\n\n  console.debug('encode Imaging Measurements')\n  const imagingMeasurements: sr.valueTypes.ContainerContentItem[] = []\n  for (let i = 0; i < rois.length; i++) {\n    const roi = rois[i]\n    if (!visibleRoiUIDs.has(roi.uid)) {\n      continue\n    }\n\n    let findingType = roi.evaluations.find((item: sr.valueTypes.ContentItem) => {\n      return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n    })\n\n    if (findingType === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          `No finding type was specified for ROI \"${String(roi.uid)}\"`\n        )\n      )\n    }\n\n    findingType = findingType as sr.valueTypes.CodeContentItem\n\n    const trackingIdentifier = new sr.templates.TrackingIdentifier({\n      uid: roi.properties.trackingUID ?? roi.uid,\n      identifier: `ROI #${i + 1}`\n    })\n\n    const group = new sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n      trackingIdentifier,\n      referencedRegion: new sr.contentItems.ImageRegion3D({\n        graphicType: roi.scoord3d.graphicType,\n        graphicData: roi.scoord3d.graphicData,\n        frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n      }),\n      findingType: new sr.coding.CodedConcept({\n        value: findingType.ConceptCodeSequence[0].CodeValue,\n        schemeDesignator: findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n        meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n      }),\n      qualitativeEvaluations: roi.evaluations.filter((item: sr.valueTypes.ContentItem) => {\n        return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n      }),\n      measurements: roi.measurements\n    })\n\n    const measurements = group as sr.valueTypes.ContainerContentItem[]\n    measurements[0].ContentTemplateSequence = [\n      {\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }\n    ]\n    imagingMeasurements.push(...measurements)\n  }\n\n  console.debug('create Measurement Report document content')\n  const measurementReport = new sr.templates.MeasurementReport({\n    languageOfContentItemAndDescendants: new sr.templates.LanguageOfContentItemAndDescendants(\n      {}\n    ),\n    observationContext,\n    procedureReported: new sr.coding.CodedConcept({\n      value: '112703',\n      schemeDesignator: 'DCM',\n      meaning: 'Whole Slide Imaging'\n    }),\n    imagingMeasurements\n  })\n\n  console.info('create Comprehensive 3D SR document')\n  const dataset = new sr.documents.Comprehensive3DSR({\n    content: measurementReport[0],\n    evidence: [refImage],\n    seriesInstanceUID: data.DicomMetaDictionary.uid(),\n    seriesNumber: 1,\n    seriesDescription: 'Annotation',\n    sopInstanceUID: data.DicomMetaDictionary.uid(),\n    instanceNumber: 1,\n    manufacturer: 'MGH Computational Pathology',\n    previousVersions: undefined // TODO\n  })\n\n  return {\n    isReportModalVisible: true,\n    generatedReport: dataset as metadata.Comprehensive3DSR\n  }\n}\n\nexport default generateReport\n","import { v4 as generateUUID } from 'uuid'\n\n/**\n * Consumer must implement:\n * this.listeners = {}\n * this.EVENTS = { \"EVENT_KEY\": \"EVENT_VALUE\" }\n */\nconst pubSubInterface = {\n  subscribe,\n  _broadcastEvent,\n  _unsubscribe,\n  _isValidEvent\n}\n\nexport default pubSubInterface\n\n/**\n * Subscribe to updates.\n *\n * @param {string} eventName The name of the event\n * @param {Function} callback Events callback\n * @return {Object} Observable object with actions\n */\nfunction subscribe (this: PubSubService, eventName: string, callback: Function): { unsubscribe: () => any } {\n  if (this._isValidEvent(eventName)) {\n    const listenerId = generateUUID()\n    const subscription = { id: listenerId, callback }\n\n    // console.info(`Subscribing to '${eventName}'.`);\n    if (Array.isArray(this.listeners[eventName])) {\n      this.listeners[eventName].push(subscription)\n    } else {\n      this.listeners[eventName] = [subscription]\n    }\n\n    return {\n      unsubscribe: () => this._unsubscribe(eventName, listenerId)\n    }\n  } else {\n    throw new Error(`Event ${eventName} not supported.`)\n  }\n}\n\n/**\n * Unsubscribe to measurement updates.\n *\n * @param {string} eventName The name of the event\n * @param {string} listenerId The listeners id\n * @return void\n */\nfunction _unsubscribe (this: PubSubService, eventName: string, listenerId: string): void {\n  if (this.listeners[eventName] === undefined) {\n    return\n  }\n\n  const listeners = this.listeners[eventName]\n  if (Array.isArray(listeners)) {\n    this.listeners[eventName] = listeners.filter(({ id }) => id !== listenerId)\n  } else {\n    this.listeners[eventName] = []\n  }\n}\n\n/**\n * Check if a given event is valid.\n *\n * @param {string} eventName The name of the event\n * @return {boolean} Event name validation\n */\nfunction _isValidEvent (this: PubSubService, eventName: string): boolean {\n  return Object.values(this.EVENTS).includes(eventName)\n}\n\n/**\n * Broadcasts changes.\n *\n * @param {string} eventName - The event name\n * @param {func} callbackProps - Properties to pass callback\n * @return void\n */\nfunction _broadcastEvent (this: PubSubService, eventName: string, callbackProps: any): void {\n  const hasListeners = Object.keys(this.listeners).length > 0\n  const hasCallbacks = Array.isArray(this.listeners[eventName])\n\n  if (hasListeners && hasCallbacks) {\n    this.listeners[eventName].forEach((listener: { id: string, callback: Function }) => {\n      listener.callback(callbackProps)\n    })\n  }\n}\n\n/** Export a PubSubService class to be used instead of the individual items */\nexport class PubSubService {\n  EVENTS: any\n  subscribe: (\n    eventName: string,\n    callback: Function\n  ) => { unsubscribe: () => any }\n\n  _broadcastEvent: (eventName: string, callbackProps: any) => void\n  _unsubscribe: (eventName: string, listenerId: string) => void\n  _isValidEvent: (eventName: string) => boolean\n  listeners: { [key: string]: Array<{ id: string, callback: Function }> }\n  unsubscriptions: any[]\n  constructor (EVENTS: Record<string, string>) {\n    this.EVENTS = EVENTS\n    this.subscribe = subscribe\n    this._broadcastEvent = _broadcastEvent\n    this._unsubscribe = _unsubscribe\n    this._isValidEvent = _isValidEvent\n    this.listeners = {}\n    this.unsubscriptions = []\n  }\n\n  reset (): void {\n    this.unsubscriptions.forEach((unsub) => unsub())\n    this.unsubscriptions = []\n  }\n\n  /**\n   * Creates an event that records whether or not someone\n   * has consumed it.  Call eventData.consume() to consume the event.\n   * Check eventData.isConsumed to see if it is consumed or not.\n   * @param props - to include in the event\n   */\n  protected createConsumableEvent (props: Record<string, any>): Record<string, any> {\n    return {\n      ...props,\n      isConsumed: false,\n      consume: function Consume () {\n        this.isConsumed = true\n      }\n    }\n  }\n}\n","import { Instance, Series } from '../services/DICOMMetadataStore'\n\nfunction createSeriesMetadata (SeriesInstanceUID: string, defaultInstances?: Instance[]): Series {\n  const instances: Instance[] = []\n  const instancesMap = new Map<string, Instance>()\n\n  return {\n    SeriesInstanceUID,\n    Modality: '',\n    SeriesNumber: 0,\n    SeriesDescription: '',\n    SeriesDate: '',\n    SeriesTime: '',\n    ...defaultInstances?.[0],\n    instances,\n    addInstance: function (newInstance: Instance) {\n      this.addInstances([newInstance])\n    },\n    addInstances: function (newInstances: Instance[]) {\n      for (let i = 0, len = newInstances.length; i < len; i++) {\n        const instance = newInstances[i]\n\n        if (!instancesMap.has(instance.SOPInstanceUID)) {\n          instancesMap.set(instance.SOPInstanceUID, instance)\n          instances.push(instance)\n        }\n      }\n    },\n    getInstance: function (SOPInstanceUID: string) {\n      return instancesMap.get(SOPInstanceUID)\n    }\n  }\n}\n\nexport default createSeriesMetadata\n","import createSeriesMetadata from './createSeriesMetadata'\n\nimport { Study, Series, Instance } from '../services/DICOMMetadataStore'\n\nfunction createStudyMetadata (StudyInstanceUID: string): Study {\n  return {\n    StudyInstanceUID,\n    StudyDescription: '',\n    PatientID: '',\n    PatientName: '',\n    StudyDate: '',\n    AccessionNumber: '',\n    NumInstances: 0,\n    ModalitiesInStudy: [],\n    isLoaded: false,\n    series: [] as Series[],\n    /**\n     * @param {object} instance\n     */\n    addInstanceToSeries: function (instance: Instance) {\n      this.addInstancesToSeries([instance])\n    },\n    /**\n     * @param {object[]} instances\n     * @param {string} instances[].SeriesInstanceUID\n     * @param {string} instances[].StudyDescription\n     */\n    addInstancesToSeries: function (instances: Instance[]) {\n      const { SeriesInstanceUID } = instances[0]\n\n      if (this.StudyDescription !== '' && this.StudyDescription !== undefined) {\n        this.StudyDescription = instances[0].StudyDescription\n      }\n\n      let series = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (series == null) {\n        series = createSeriesMetadata(SeriesInstanceUID, instances)\n        this.series.push(series)\n      }\n\n      series.addInstances(instances)\n    },\n\n    setSeriesMetadata: function (\n      SeriesInstanceUID: string,\n      seriesMetadata: any\n    ) {\n      let existingSeries = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (existingSeries != null) {\n        existingSeries = Object.assign(existingSeries, seriesMetadata)\n      } else {\n        const series = createSeriesMetadata(SeriesInstanceUID)\n        this.series.push(Object.assign(series, seriesMetadata))\n      }\n    }\n  }\n}\n\nexport default createStudyMetadata\n","import dcmjs from 'dcmjs'\n\nimport pubSubServiceInterface from '../utils/pubSubServiceInterface'\nimport createStudyMetadata from '../utils/createStudyMetadata'\n\nexport const EVENTS = {\n  STUDY_ADDED: 'event::dicomMetadataStore:studyAdded',\n  INSTANCES_ADDED: 'event::dicomMetadataStore:instancesAdded',\n  SERIES_ADDED: 'event::dicomMetadataStore:seriesAdded',\n  SERIES_UPDATED: 'event::dicomMetadataStore:seriesUpdated'\n}\n\nexport interface Instance {\n  SOPInstanceUID: string\n  SOPClassUID: string\n  Rows: number\n  Columns: number\n  PatientSex: string\n  Modality: string\n  InstanceNumber: string\n  imageId?: string\n  [key: string]: any // For dynamic metadata properties\n}\n\nexport interface Series {\n  Modality: string\n  SeriesInstanceUID: string\n  SeriesNumber: number\n  SeriesDate: string\n  SeriesTime: string\n  SeriesDescription: string\n  instances: Instance[]\n  addInstance: (newInstance: Instance) => void\n  addInstances: (newInstances: Instance[]) => void\n  getInstance: (SOPInstanceUID: string) => Instance | undefined\n}\n\nexport interface Study {\n  StudyInstanceUID: string\n  StudyDescription: string\n  PatientID: string\n  PatientName: string\n  StudyDate: string\n  AccessionNumber: string\n  NumInstances: number\n  ModalitiesInStudy: any[]\n  NumberOfStudyRelatedSeries?: number\n  isLoaded: boolean\n  series: Series[]\n  addInstanceToSeries: (instance: Instance) => void\n  addInstancesToSeries: (instances: Instance[]) => void\n  setSeriesMetadata: (SeriesInstanceUID: string, metadata: any) => void\n}\n\ninterface Model {\n  studies: Study[]\n}\n\nconst _model: Model = {\n  studies: []\n}\n\nfunction _getStudyInstanceUIDs (): string[] {\n  return _model.studies.map((aStudy) => aStudy.StudyInstanceUID)\n}\n\nfunction _getStudy (StudyInstanceUID: string): Study | undefined {\n  return _model.studies.find(\n    (aStudy) => aStudy.StudyInstanceUID === StudyInstanceUID\n  )\n}\n\nfunction _getSeries (StudyInstanceUID: string, SeriesInstanceUID: string): Series | undefined {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  return study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n}\n\nfunction _getInstance (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  SOPInstanceUID: string\n): Instance | undefined {\n  const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n\n  if (series == null) {\n    return\n  }\n\n  return series.getInstance(SOPInstanceUID)\n}\n\nfunction _getInstanceByImageId (imageId: string): Instance | undefined {\n  for (const study of _model.studies) {\n    for (const series of study.series) {\n      for (const instance of series.instances) {\n        if (instance.imageId === imageId) {\n          return instance\n        }\n      }\n    }\n  }\n}\n\n/**\n * Update the metadata of a specific series\n * @param {*} StudyInstanceUID\n * @param {*} SeriesInstanceUID\n * @param {*} metadata metadata inform of key value pairs\n * @returns\n */\nfunction _updateMetadataForSeries (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  metadata: Record<string, any>\n): void {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  const series = study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n\n  if (series == null) {\n    return\n  }\n\n  const { instances } = series\n  instances.forEach((instance) => {\n    Object.keys(metadata).forEach((key) => {\n      if (typeof metadata[key] === 'object') {\n        instance[key] = { ...instance[key], ...metadata[key] }\n      } else {\n        instance[key] = metadata[key]\n      }\n    })\n  })\n}\n\ninterface BaseImplementationType {\n  EVENTS: typeof EVENTS\n  listeners: Record<string, any>\n  addInstance: (dicomJSONDatasetOrP10ArrayBuffer: ArrayBuffer | Record<string, any>) => void\n  addInstances: (instances: Instance[], madeInClient?: boolean) => void\n  updateSeriesMetadata: (seriesMetadata: Record<string, any>) => void\n  addSeriesMetadata: (seriesSummaryMetadata: Array<Record<string, any>>, madeInClient?: boolean) => void\n  addStudy: (study: Record<string, any>) => void\n  getStudyInstanceUIDs: typeof _getStudyInstanceUIDs\n  getStudy: typeof _getStudy\n  getSeries: typeof _getSeries\n  getInstance: typeof _getInstance\n  getInstanceByImageId: typeof _getInstanceByImageId\n  updateMetadataForSeries: typeof _updateMetadataForSeries\n  _broadcastEvent: (eventName: string, data: any) => void\n}\n\nconst BaseImplementation: BaseImplementationType = {\n  EVENTS,\n  listeners: {},\n  addInstance (dicomJSONDatasetOrP10ArrayBuffer) {\n    let dicomJSONDataset\n\n    // If Arraybuffer, parse to DICOMJSON before naturalizing.\n    if (dicomJSONDatasetOrP10ArrayBuffer instanceof ArrayBuffer) {\n      const dicomData = dcmjs.data.DicomMessage.readFile(\n        dicomJSONDatasetOrP10ArrayBuffer\n      )\n\n      dicomJSONDataset = dicomData.dict\n    } else {\n      dicomJSONDataset = dicomJSONDatasetOrP10ArrayBuffer\n    }\n\n    let naturalizedDataset: Instance\n\n    if (!('SeriesInstanceUID' in dicomJSONDataset)) {\n      naturalizedDataset =\n        dcmjs.data.DicomMetaDictionary.naturalizeDataset(dicomJSONDataset) as Instance\n    } else {\n      naturalizedDataset = dicomJSONDataset as unknown as Instance\n    }\n\n    const { StudyInstanceUID } = naturalizedDataset\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstanceToSeries(naturalizedDataset)\n  },\n  addInstances (instances, madeInClient = false) {\n    const { StudyInstanceUID, SeriesInstanceUID } = instances[0]\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstancesToSeries(instances)\n\n    // Broadcast an event even if we used cached data.\n    // This is because the mode needs to listen to instances that are added to build up its active displaySets.\n    // It will see there are cached displaySets and end early if this Series has already been fired in this\n    // Mode session for some reason.\n    this._broadcastEvent(EVENTS.INSTANCES_ADDED, {\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      madeInClient\n    })\n  },\n  updateSeriesMetadata (seriesMetadata) {\n    const { StudyInstanceUID, SeriesInstanceUID } = seriesMetadata\n    const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n    if (series == null) {\n      return\n    }\n\n    const study = _getStudy(StudyInstanceUID)\n    if (study != null) {\n      study.setSeriesMetadata(SeriesInstanceUID, seriesMetadata)\n    }\n  },\n  addSeriesMetadata (seriesSummaryMetadata, madeInClient = false) {\n    if (\n      seriesSummaryMetadata === undefined ||\n      seriesSummaryMetadata.length === 0 ||\n      seriesSummaryMetadata[0] === undefined\n    ) {\n      return\n    }\n\n    const { StudyInstanceUID } = seriesSummaryMetadata[0]\n    let study = _getStudy(StudyInstanceUID)\n    if (study == null) {\n      study = createStudyMetadata(StudyInstanceUID)\n      // Will typically be undefined with a compliant DICOMweb server, reset later\n      study.StudyDescription = seriesSummaryMetadata[0].StudyDescription\n      seriesSummaryMetadata?.forEach((item) => {\n        if (study !== undefined && !study.ModalitiesInStudy?.includes(item.Modality)) {\n          study.ModalitiesInStudy?.push(item.Modality)\n        }\n      })\n      study.NumberOfStudyRelatedSeries = seriesSummaryMetadata.length\n      _model.studies.push(study)\n    }\n\n    seriesSummaryMetadata.forEach((series) => {\n      const { SeriesInstanceUID } = series\n      study?.setSeriesMetadata(SeriesInstanceUID, series)\n    })\n\n    this._broadcastEvent(EVENTS.SERIES_ADDED, {\n      StudyInstanceUID,\n      seriesSummaryMetadata,\n      madeInClient\n    })\n  },\n  addStudy (study) {\n    const { StudyInstanceUID } = study\n\n    const existingStudy = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (existingStudy == null) {\n      const newStudy = createStudyMetadata(StudyInstanceUID)\n\n      newStudy.PatientID = study.PatientID\n      newStudy.PatientName = study.PatientName\n      newStudy.StudyDate = study.StudyDate\n      newStudy.ModalitiesInStudy = study.ModalitiesInStudy\n      newStudy.StudyDescription = study.StudyDescription\n      newStudy.AccessionNumber = study.AccessionNumber\n      newStudy.NumInstances = study.NumInstances // todo: Correct naming?\n\n      _model.studies.push(newStudy)\n    }\n  },\n  getStudyInstanceUIDs: _getStudyInstanceUIDs,\n  getStudy: _getStudy,\n  getSeries: _getSeries,\n  getInstance: _getInstance,\n  getInstanceByImageId: _getInstanceByImageId,\n  updateMetadataForSeries: _updateMetadataForSeries,\n  _broadcastEvent (eventName: string, data: any): void {\n  }\n}\n\ninterface DicomMetadataStoreType extends BaseImplementationType {\n  subscribe: (event: string, callback: (data: any) => void) => { unsubscribe: () => any }\n  unsubscribe: (event: string, callback: (data: any) => void) => void\n}\n\nconst DicomMetadataStore = Object.assign(\n  {},\n  BaseImplementation,\n  pubSubServiceInterface\n) as unknown as DicomMetadataStoreType\n\nexport { DicomMetadataStore }\nexport default DicomMetadataStore\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number | null\n  ): void {\n    if (value != null) {\n      const identifier = this.props.opticalPath.identifier\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { opacity: value }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          color: state.currentStyle.color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: value,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    try {\n      specimenDescriptions.forEach(description => {\n        const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] =\n          description.SpecimenPreparationSequence ?? []\n        specimenPreparationSteps.forEach(\n          (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n            step.SpecimenPreparationStepContentItemSequence.forEach((\n              item: (\n                dcmjs.sr.valueTypes.CodeContentItem |\n                dcmjs.sr.valueTypes.TextContentItem |\n                dcmjs.sr.valueTypes.UIDRefContentItem |\n                dcmjs.sr.valueTypes.PNameContentItem |\n                dcmjs.sr.valueTypes.DateTimeContentItem\n              ),\n              index: number\n            ) => {\n              const name = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptNameCodeSequence[0].CodeValue,\n                schemeDesignator:\n                    item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n              })\n              if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n                item = item as dcmjs.sr.valueTypes.CodeContentItem\n                const value = new dcmjs.sr.coding.CodedConcept({\n                  value: item.ConceptCodeSequence[0].CodeValue,\n                  schemeDesignator:\n                      item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                  meaning: item.ConceptCodeSequence[0].CodeMeaning\n                })\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: value.CodeMeaning\n                    })\n                  }\n                }\n              } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n                item = item as dcmjs.sr.valueTypes.TextContentItem\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: item.TextValue\n                    })\n                  }\n                }\n              }\n            })\n          }\n        )\n      })\n    } catch (error: any) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DCMJS,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          error.message\n        )\n      )\n    }\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Divider\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\nimport { rgbToHex } from '../utils/segmentColors'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n      color?: number[]\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color: number[]\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n\n    /** Initialize with default color if not provided */\n    const defaultColor = this.props.defaultStyle.color ?? [255, 255, 0] // Default yellow\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: defaultColor\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: value,\n          color: this.state.currentStyle.color\n        }\n      })\n      this.setState({ currentStyle: { ...this.state.currentStyle, opacity: value } })\n    }\n  }\n\n  handleColorRChange (value: number | null): void {\n    if (value != null) {\n      const newColor = [value, this.state.currentStyle.color[1], this.state.currentStyle.color[2]]\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: this.state.currentStyle.opacity,\n          color: newColor\n        }\n      })\n      this.setState({ currentStyle: { ...this.state.currentStyle, color: newColor } })\n    }\n  }\n\n  handleColorGChange (value: number | null): void {\n    if (value != null) {\n      const newColor = [this.state.currentStyle.color[0], value, this.state.currentStyle.color[2]]\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: this.state.currentStyle.opacity,\n          color: newColor\n        }\n      })\n      this.setState({ currentStyle: { ...this.state.currentStyle, color: newColor } })\n    }\n  }\n\n  handleColorBChange (value: number | null): void {\n    if (value != null) {\n      const newColor = [this.state.currentStyle.color[0], this.state.currentStyle.color[1], value]\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: this.state.currentStyle.opacity,\n          color: newColor\n        }\n      })\n      this.setState({ currentStyle: { ...this.state.currentStyle, color: newColor } })\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Divider plain>Color</Divider>\n        <Row justify='center' align='middle' gutter={[8, 8]}>\n          <Col span={5}>\n            Red\n          </Col>\n          <Col span={14}>\n            <Slider\n              range={false}\n              min={0}\n              max={255}\n              step={1}\n              value={this.state.currentStyle.color[0]}\n              onChange={this.handleColorRChange}\n            />\n          </Col>\n          <Col span={5}>\n            <InputNumber\n              min={0}\n              max={255}\n              size='small'\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.color[0]}\n              onChange={this.handleColorRChange}\n            />\n          </Col>\n        </Row>\n\n        <Row justify='center' align='middle' gutter={[8, 8]}>\n          <Col span={5}>\n            Green\n          </Col>\n          <Col span={14}>\n            <Slider\n              range={false}\n              min={0}\n              max={255}\n              step={1}\n              value={this.state.currentStyle.color[1]}\n              onChange={this.handleColorGChange}\n            />\n          </Col>\n          <Col span={5}>\n            <InputNumber\n              min={0}\n              max={255}\n              size='small'\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.color[1]}\n              onChange={this.handleColorGChange}\n            />\n          </Col>\n        </Row>\n\n        <Row justify='center' align='middle' gutter={[8, 8]}>\n          <Col span={5}>\n            Blue\n          </Col>\n          <Col span={14}>\n            <Slider\n              range={false}\n              min={0}\n              max={255}\n              step={1}\n              value={this.state.currentStyle.color[2]}\n              onChange={this.handleColorBChange}\n            />\n          </Col>\n          <Col span={5}>\n            <InputNumber\n              min={0}\n              max={255}\n              size='small'\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.color[2]}\n              onChange={this.handleColorBChange}\n            />\n          </Col>\n        </Row>\n        <Divider plain />\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='center'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {/* Color indicator */}\n              <div\n                style={{\n                  width: '20px',\n                  height: '20px',\n                  backgroundColor: rgbToHex(this.state.currentStyle.color),\n                  border: '1px solid #d9d9d9',\n                  borderRadius: '50%',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center'\n                }}\n                title={`Segment color: ${rgbToHex(this.state.currentStyle.color)}`}\n              />\n            </Space>\n          </div>\n          <div style={{ flex: 1 }}>\n            <Description\n              header={this.props.segment.label}\n              attributes={attributes}\n              selectable\n              hasLongValues\n            />\n          </div>\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n      color?: number[]\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n      color?: number[]\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        mappingUID: this.props.mapping.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: value\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\nimport { IconType } from 'react-icons'\n\ninterface ButtonProps {\n  icon: IconType | React.ComponentType<Record<string, never>> | React.ForwardRefExoticComponent<object>\n  tooltip?: string\n  label?: string\n  onClick?: (options: React.SyntheticEvent) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport { Layout, Space, Checkbox, Descriptions, Divider, Select, Tooltip, message, Menu, Row } from 'antd'\nimport { CheckboxChangeEvent } from 'antd/es/checkbox'\nimport { UndoOutlined } from '@ant-design/icons'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { withRouter } from '../utils/router'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport { findContentItemsByName } from '../utils/sr'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { adaptRoiToAnnotation } from '../services/RoiToAnnotationAdapter'\nimport { AnnotationSettings, AnnotationCategoryAndType } from '../types/annotations'\nimport {\n  SlideViewerProps,\n  SlideViewerState,\n  StyleOptions,\n  EvaluationOptions,\n  Evaluation,\n  Measurement\n} from './SlideViewer/types'\nimport SlideViewerModals from './SlideViewer/SlideViewerModals'\nimport SlideViewerSidebar from './SlideViewer/SlideViewerSidebar'\nimport SlideViewerContent from './SlideViewer/SlideViewerContent'\nimport {\n  buildKey,\n  getRoiKey,\n  areROIsEqual,\n  formatRoiStyle\n} from './SlideViewer/utils/roiUtils'\nimport { getSegmentColor, generateSegmentColor } from '../utils/segmentColors'\nimport {\n  constructViewers,\n  implementsTID1500,\n  describesSpecimenSubject,\n  containsROIAnnotations\n} from './SlideViewer/utils/viewerUtils'\nimport {\n  DEFAULT_ROI_STROKE_COLOR,\n  DEFAULT_ROI_FILL_COLOR,\n  DEFAULT_ROI_STROKE_WIDTH,\n  DEFAULT_ROI_RADIUS,\n  DEFAULT_ANNOTATION_OPACITY,\n  DEFAULT_ANNOTATION_STROKE_COLOR,\n  DEFAULT_ANNOTATION_COLOR_PALETTE\n} from './SlideViewer/constants'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Report, { MeasurementReport } from './Report'\nimport HoveredRoiTooltip from './HoveredRoiTooltip'\nimport generateReport from '../utils/generateReport'\nimport { runValidations } from '../contexts/ValidationContext'\nimport DicomMetadataStore from '../services/DICOMMetadataStore'\nimport SpecimenList from './SpecimenList'\nimport Equipment from './Equipment'\nimport OpticalPathList from './OpticalPathList'\nimport SegmentList from './SegmentList'\nimport MappingList from './MappingList'\nimport Btn from './Button'\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private hoveredRois = [] as dmv.roi.ROI[]\n\n  private lastPixel = [0, 0] as [number, number]\n\n  private readonly keysDown = new Set<string>()\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private defaultAnnotationStyles: {\n    [annotationUID: string]: StyleOptions\n  } = {}\n\n  private readonly selectionStrokeColor: number[] = [0, 153, 255]\n  private readonly selectionFillColor: number[] = [255, 255, 255]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionStrokeColor, 1], width: 3 },\n    fill: { color: [...this.selectionFillColor, 0.5] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionStrokeColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style !== null && annotation.style !== undefined) {\n        this.roiStyles[key] = formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    const { volumeViewer, labelViewer } = constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isHoveredRoiTooltipVisible: false,\n      hoveredRoiTooltipX: 0,\n      hoveredRoiTooltipY: 0,\n      hoveredRoiAttributes: [],\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      selectedSeriesInstanceUID: undefined,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set(),\n      isICCProfilesEnabled: true,\n      customizedSegmentColors: {}\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current !== null && this.volumeViewportRef.current !== undefined) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer !== null && this.labelViewer !== undefined) {\n        if (this.labelViewportRef.current !== null && this.labelViewportRef.current !== undefined) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances: dwc.api.Instance[] | null): void => {\n      if (matchedInstances === null || matchedInstances === undefined) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance: dwc.api.Instance, index: number) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance: dwc.api.Dataset): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                (this.props.selectedPresentationStateUID === null ||\n                 this.props.selectedPresentationStateUID === undefined)\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Presentation State could not be loaded'\n            )\n          )\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Presentation State could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence !== null && blendingItem.PaletteColorLookupTableSequence !== undefined) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID !== null && cpLUTItem.PaletteColorLookupTableUID !== undefined\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData !== null && cpLUTItem.RedPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData !== null && cpLUTItem.GreenPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData !== null && cpLUTItem.BluePaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData !== null && cpLUTItem.SegmentedRedPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData !== null && cpLUTItem.SegmentedGreenPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData !== null && cpLUTItem.SegmentedBluePaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence !== null && blendingItem.SoftcopyVOILUTSequence !== undefined) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions !== null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key === null || key === undefined) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  loadDerivedDataset = (derivedDataset: dmv.metadata.Dataset): void => {\n    console.debug('Loading derived dataset')\n    const Comprehensive3DSR = StorageClasses.COMPREHENSIVE_3D_SR\n    const ComprehensiveSR = StorageClasses.COMPREHENSIVE_SR\n    const MicroscopyBulkSimpleAnnotation = StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n    const Segmentation = StorageClasses.SEGMENTATION\n    const ParametricMap = StorageClasses.PARAMETRIC_MAP\n    const OpticalPath = StorageClasses.OPTICAL_PATH\n    const AdvancedBlendingPresentationState = StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    const ColorSoftcopyPresentationState = StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE\n    const GrayscaleSoftcopyPresentationState = StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE\n    const PseudocolorSoftcopyPresentationState = StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n\n    if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Comprehensive3DSR) {\n      const allRois = this.volumeViewer.getAllROIs()\n      allRois.forEach((roi) => {\n        this.handleAnnotationVisibilityChange({ roiUID: roi.uid, isVisible: true })\n      })\n      console.debug('Loading Comprehensive 3D SR')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === MicroscopyBulkSimpleAnnotation) {\n      const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      allAnnotationGroups.forEach((annotationGroup) => {\n        this.handleAnnotationGroupVisibilityChange({ annotationGroupUID: annotationGroup.uid, isVisible: true })\n      })\n      console.debug('Loading Microscopy Bulk Simple Annotation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Segmentation) {\n      const allSegments = this.volumeViewer.getAllSegments()\n      allSegments.forEach((segment) => {\n        this.handleSegmentVisibilityChange({ segmentUID: segment.uid, isVisible: true })\n      })\n      console.debug('Loading Segmentation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === ParametricMap) {\n      const allParameterMappings = this.volumeViewer.getAllParameterMappings()\n      allParameterMappings.forEach((parameterMapping) => {\n        this.handleMappingVisibilityChange({ mappingUID: parameterMapping.uid, isVisible: true })\n      })\n      console.debug('Loading Parametric Map')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === OpticalPath) {\n      const allOpticalPaths = this.volumeViewer.getAllOpticalPaths()\n      allOpticalPaths.forEach((opticalPath) => {\n        this.handleOpticalPathVisibilityChange({ opticalPathIdentifier: opticalPath.identifier, isVisible: true })\n      })\n      console.debug('Loading Optical Path')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === ComprehensiveSR) {\n      console.debug('TODO: Loading Comprehensive SR')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === AdvancedBlendingPresentationState) {\n      console.debug('TODO: Loading Advanced Blending Presentation State')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === ColorSoftcopyPresentationState) {\n      console.debug('TODO: Loading Color Softcopy Presentation State')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === GrayscaleSoftcopyPresentationState) {\n      console.debug('TODO: Loading Grayscale Softcopy Presentation State')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === PseudocolorSoftcopyPresentationState) {\n      console.debug('TODO: Loading Pseudocolor Softcopy Presentation State')\n    }\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  async addAnnotations (): Promise<void> {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Comprehensive 3D SR instances')\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.searchForInstances({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SR'\n        }\n      }).then((matchedInstances): void => {\n        if (matchedInstances === null || matchedInstances === undefined) {\n          matchedInstances = []\n        }\n        matchedInstances.forEach(i => {\n          const { dataset } = dmv.metadata.formatMetadata(i)\n          const instance = dataset as dmv.metadata.Instance\n          if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n            console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n            client.retrieveInstance({\n              studyInstanceUID: this.props.studyInstanceUID,\n              seriesInstanceUID: instance.SeriesInstanceUID,\n              sopInstanceUID: instance.SOPInstanceUID\n            }).then((retrievedInstance): void => {\n              const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n              const { dataset } = dmv.metadata.formatMetadata(data.dict)\n              const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n              /*\n              * Perform a couple of checks to ensure the document content of the\n              * report fullfils the requirements of the application.\n              */\n              if (!implementsTID1500(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it is not structured according to template ' +\n                  'TID 1500 \"MeasurementReport\"'\n                )\n                return\n              }\n              if (!describesSpecimenSubject(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not describe a specimen subject'\n                )\n                return\n              }\n              if (!containsROIAnnotations(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not contain any suitable ROI annotations'\n                )\n                return\n              }\n\n              const content = new MeasurementReport(report)\n              content.ROIs.forEach(roi => {\n                console.info(`add ROI \"${roi.uid}\"`)\n                const scoord3d = roi.scoord3d\n                const image = this.props.slide.volumeImages[0]\n                if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                  /*\n                  * ROIs may get assigned new UIDs upon re-rendering of the\n                  * page and we need to ensure that we don't add them twice.\n                  * The same ROI may be stored in multiple SR documents and\n                  * we don't want them to show up twice.\n                  * TODO: We should probably either \"merge\" measurements and\n                  * quantitative evaluations or pick the ROI from the \"best\"\n                  * available report (COMPLETE and VERIFIED).\n                  */\n                  const doesROIExist = this.volumeViewer.getAllROIs().some(\n                    (otherROI: dmv.roi.ROI): boolean => {\n                      return areROIsEqual(otherROI, roi)\n                    }\n                  )\n                  if (!doesROIExist) {\n                    try {\n                      // Add ROI without style such that it won't be visible.\n                      this.volumeViewer.addROI(roi, {})\n                      const roiAsAnnotation = adaptRoiToAnnotation(roi)\n                      this.formatAnnotation(roiAsAnnotation)\n                    } catch {\n                      console.error(`could not add ROI \"${roi.uid}\"`)\n                    }\n                  } else {\n                    console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(\n                    `skip ROI \"${roi.uid}\" ` +\n                    `of SR document \"${report.SOPInstanceUID}\"` +\n                    'because it is defined in another frame of reference'\n                  )\n                }\n              })\n\n              resolve()\n            }).catch((error) => {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Annotations could not be loaded'\n                )\n              )\n              console.error(\n                'failed to load ROIs ' +\n                `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n                `of series \"${instance.SeriesInstanceUID}\" ` +\n                `of study \"${this.props.studyInstanceUID}\": `,\n                error\n              )\n            })\n            /*\n            * React is not aware of the fact that ROIs have been added via the\n            * viewer (the viewport is a ref object) and won't show the\n            * annotations in the user interface unless an update is forced.\n            */\n            this.forceUpdate()\n          }\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Annotations could not be loaded'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error as unknown)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Microscopy Bulk Simple Annotations instances')\n      const client = this.props.clients[\n        StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n      ]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'ANN'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries === null || matchedSeries === undefined) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[] = retrievedMetadata.map(metadata => {\n              return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n                metadata\n              })\n            })\n            // annotations = annotations.filter(ann => {\n            //   const refImage = this.props.slide.volumeImages[0]\n            //   return (\n            //     ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n            //     ann.ContainerIdentifier === refImage.ContainerIdentifier\n            //   )\n            // })\n            annotations.forEach(ann => {\n              try {\n                this.volumeViewer.addAnnotationGroups(ann)\n              } catch (error: unknown) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Microscopy Bulk Simple Annotations cannot be displayed.'\n                  )\n                )\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                console.error('failed to add annotation groups:', error)\n              }\n              ann.AnnotationGroupSequence.forEach(item => {\n                const annotationGroupUID = item.AnnotationGroupUID\n                const finding = item.AnnotationPropertyTypeCodeSequence[0]\n                const key = buildKey(finding)\n                const style = this.roiStyles[key]\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                if (style !== null && style !== undefined && style.fill !== null && style.fill !== undefined) {\n                  this.volumeViewer.setAnnotationGroupStyle(\n                    annotationGroupUID,\n                    { color: style.fill.color }\n                  )\n                }\n              })\n            })\n            /*\n            * React is not aware of the fact that annotation groups have been\n            * added via the viewer (the underlying HTML viewport element is a\n            * ref object) and won't show the annotation groups in the user\n            * interface unless an update is forced.\n            */\n            this.forceUpdate()\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n                'instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Microscopy Bulk Simple Annotations instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error as unknown)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Segmentation instances')\n      const client = this.props.clients[StorageClasses.SEGMENTATION]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SEG'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries === null || matchedSeries === undefined) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach((s, i) => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const segmentations: dmv.metadata.Segmentation[] = []\n            retrievedMetadata.forEach(metadata => {\n              const seg = new dmv.metadata.Segmentation({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                seg.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                segmentations.push(seg)\n              }\n            })\n            if (segmentations.length > 0) {\n              try {\n                this.volumeViewer.addSegments(segmentations)\n\n                /** Apply default styles to newly added segments to ensure color consistency */\n                const segments = this.volumeViewer.getAllSegments()\n                segments.forEach((segment, index) => {\n                  try {\n                    const defaultStyle = this.volumeViewer.getSegmentStyle(segment.uid)\n                    if (defaultStyle?.opacity !== undefined && typeof defaultStyle.opacity === 'number') {\n                      const segmentColor = generateSegmentColor(index)\n                      this.volumeViewer.setSegmentStyle(segment.uid, {\n                        opacity: defaultStyle.opacity,\n                        paletteColorLookupTable: (this.volumeViewer as any).createSegmentPaletteColorLookupTable(\n                          segment.uid,\n                          segmentColor\n                        )\n                      })\n                    }\n                  } catch (error) {\n                    console.warn('Failed to apply default style for segment ' + String(segment.uid) + ':', String(error))\n                  }\n                })\n              } catch (error: unknown) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Segmentations cannot be displayed'\n                  )\n                )\n                console.error('failed to add segments: ', error)\n              }\n              /*\n              * React is not aware of the fact that segments have been added via\n              * the viewer (the underlying HTML viewport element is a ref object)\n              * and won't show the segments in the user interface unless an update\n              * is forced.\n              */\n              this.forceUpdate()\n            }\n\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Segmentation instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Segmentation instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error as unknown)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Parametric Map instances')\n      const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'OT'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries === null || matchedSeries === undefined) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const parametricMaps: dmv.metadata.ParametricMap[] = []\n            retrievedMetadata.forEach(metadata => {\n              const pm = new dmv.metadata.ParametricMap({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                pm.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                parametricMaps.push(pm)\n              } else {\n                console.warn(\n                  `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n                )\n              }\n            })\n            if (parametricMaps.length > 0) {\n              try {\n                this.volumeViewer.addParameterMappings(parametricMaps)\n              } catch (error: unknown) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Parametric Map cannot be displayed'\n                  )\n                )\n                console.error('failed to add mappings: ', error)\n              }\n              /*\n               * React is not aware of the fact that mappings have been added via\n               * the viewer (the underlying HTML viewport element is a ref object)\n               * and won't show the mappings in the user interface unless an update\n               * is forced.\n               */\n              this.forceUpdate()\n            }\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Parametric Map instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Parametric Map instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error as unknown)))\n      })\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current !== null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current !== null &&\n      this.labelViewer !== null && this.labelViewer !== undefined\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    // Handle promises properly with catch blocks\n    void this.addAnnotations()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotations:', error)\n      })\n\n    void this.addAnnotationGroups()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotation groups:', error)\n      })\n\n    void this.addSegmentations()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add segmentations:', error)\n      })\n\n    void this.addParametricMaps()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add parametric maps:', error)\n      })\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer !== null && this.labelViewer !== undefined) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiDoubleClicked = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi !== null) {\n      this.setState({\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  setHoveredRoiAttributes = (hoveredRois: dmv.roi.ROI[]): void => {\n    const rois = this.volumeViewer.getAllROIs()\n    if (rois.length === 0) {\n      this.setState({ hoveredRoiAttributes: [] })\n      return\n    }\n\n    const result = hoveredRois.map((roi) => {\n      const attributes: Array<{ name: string, value: string }> = []\n      const evaluations = roi.evaluations\n      evaluations.forEach((\n        item: (\n          dcmjs.sr.valueTypes.TextContentItem |\n          dcmjs.sr.valueTypes.CodeContentItem\n        )\n      ) => {\n        const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n        const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n        const name = `${nameMeaning}`\n        if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n          const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n          // For consistency with Segment and Annotation Group\n          if (nameValue === '276214006') {\n            attributes.push({\n              name: 'Property category',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '121071') {\n            attributes.push({\n              name: 'Property type',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '111001') {\n            attributes.push({\n              name: 'Algorithm Name',\n              value: `${valueMeaning}`\n            })\n          } else {\n            attributes.push({\n              name: name,\n              value: `${valueMeaning}`\n            })\n          }\n        } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n          const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n          attributes.push({\n            name: name,\n            value: textContentItem.TextValue\n          })\n        }\n      })\n\n      const index = (rois.findIndex((r) => r.uid === roi.uid) ?? 0) + 1\n      return { index, roiUid: roi.uid, attributes }\n    }, [] as Array<dcmjs.sr.valueTypes.CodeContentItem | dcmjs.sr.valueTypes.TextContentItem>)\n\n    this.setState({ hoveredRoiAttributes: result })\n  }\n\n  clearHoveredRois = (): void => {\n    this.hoveredRois = [] as any\n  }\n\n  getUniqueHoveredRois = (newRoi: dmv.roi.ROI | null): dmv.roi.ROI[] => {\n    if (newRoi === null || newRoi === undefined) {\n      return this.hoveredRois\n    }\n    const allRois = [...this.hoveredRois, newRoi]\n    const uniqueIds = Array.from(new Set(allRois.map(roi => roi.uid)))\n    return uniqueIds.map(id => allRois.find(roi => roi.uid === id))\n      .filter((roi): roi is dmv.roi.ROI => roi !== undefined)\n  }\n\n  isSamePixelAsLast = (event: MouseEvent): boolean => {\n    return event.clientX === this.lastPixel[0] && event.clientY === this.lastPixel[1]\n  }\n\n  onPointerMove = (event: CustomEventInit): void => {\n    const { feature: hoveredRoi, event: evt } = event.detail.payload\n    const originalEvent = evt.originalEvent\n\n    if (!this.isSamePixelAsLast(originalEvent)) {\n      this.lastPixel = [originalEvent.clientX, originalEvent.clientY]\n      this.clearHoveredRois()\n    }\n\n    this.hoveredRois = this.getUniqueHoveredRois(hoveredRoi)\n\n    if (this.hoveredRois.length > 0) {\n      this.setHoveredRoiAttributes(this.hoveredRois)\n      this.setState({\n        isHoveredRoiTooltipVisible: true,\n        hoveredRoiTooltipX: originalEvent.clientX,\n        hoveredRoiTooltipY: originalEvent.clientY\n      })\n    } else {\n      this.setState({\n        isHoveredRoiTooltipVisible: false\n      })\n    }\n  }\n\n  getUpdatedSelectedRois = (newSelectedRoiUid?: string): { selectedRoiUIDs: Set<string>, selectedRoi?: dmv.roi.ROI} => {\n    const selectedRoiUid = newSelectedRoiUid\n    const emptySelection = {\n      selectedRoiUIDs: new Set<string>(),\n      selectedRoi: undefined\n    }\n\n    if (selectedRoiUid === undefined) {\n      return emptySelection\n    }\n\n    const selectedRoi = this.volumeViewer.getROI(selectedRoiUid)\n    if (selectedRoi === undefined) {\n      return emptySelection\n    }\n\n    console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n\n    if (!this.keysDown.has('Shift')) {\n      return {\n        selectedRoiUIDs: new Set([selectedRoi.uid]),\n        selectedRoi\n      }\n    }\n\n    const oldSelectedRois = Array.from(this.state.selectedRoiUIDs)\n    return {\n      selectedRoiUIDs: new Set([...oldSelectedRois, selectedRoi.uid]),\n      selectedRoi\n    }\n  }\n\n  resetUnselectedRoiStyles = (selectionState: { selectedRoiUIDs: Set<string> }): void => {\n    this.volumeViewer.getAllROIs().forEach(roi => {\n      const uid = roi.uid\n\n      if (selectionState.selectedRoiUIDs.has(uid) || !this.state.visibleRoiUIDs.has(uid)) {\n        return\n      }\n\n      const key = getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(uid, style)\n    })\n  }\n\n  onMapClicked = (event: CustomEventInit): void => {\n    const roisClicked = (event.detail?.payload?.rois ?? []) as dmv.roi.ROI[]\n\n    if (roisClicked.length !== 0) {\n      return\n    }\n\n    const updatedSelectedRois = this.getUpdatedSelectedRois()\n    this.setState(updatedSelectedRois)\n\n    // @ts-expect-error\n    this.volumeViewer.clearSelections()\n\n    this.resetUnselectedRoiStyles(updatedSelectedRois)\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoiUid = event.detail?.payload?.uid as string\n    const updatedSelectedRois = this.getUpdatedSelectedRois(selectedRoiUid)\n    this.setState(updatedSelectedRois)\n\n    this.resetUnselectedRoiStyles(updatedSelectedRois)\n  }\n\n  handleAnnotationSelection = (uid: string): void => {\n    // @ts-expect-error\n    this.volumeViewer.clearSelections()\n\n    const updatedSelectedRois = this.getUpdatedSelectedRois(uid)\n    this.setState(updatedSelectedRois)\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (updatedSelectedRois.selectedRoiUIDs.has(roi.uid)) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  handleRoiSelectionCancellation = (): void => {\n    console.info('cancel ROI selection')\n    this.setState({\n      isSelectedRoiModalVisible: false\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load frame')\n  }\n\n  onLoadingError = (event: CustomEventInit): void => {\n    const message = (event.detail?.payload?.message ?? 'Failed to load data') as string\n    console.error(message)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        message\n      ) as any\n    )\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray !== null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] !== null && stats[opticalPathIdentifier] !== undefined) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID === null || state.selectedPresentationStateUID === undefined) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup = (): void => {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_viewport_clicked',\n      this.onMapClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyDown\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer !== null && this.labelViewer !== undefined) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyDown = (event: KeyboardEvent): void => {\n    this.keysDown.add(event.key)\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    this.keysDown.delete(event.key)\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount = (): void => {\n    this.volumeViewer.cleanup()\n    if (this.labelViewer !== null && this.labelViewer !== undefined) {\n      this.labelViewer.cleanup()\n    }\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup = (): void => {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_viewport_clicked',\n      this.onMapClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_error',\n      this.onLoadingError\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_error',\n      this.onFrameLoadingError\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    document.body.addEventListener(\n      'keydown',\n      this.onKeyDown\n    )\n    window.addEventListener('beforeunload', this.componentCleanup)\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount = (): void => {\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile === null || metadataItem.ICCProfile === undefined) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection = (\n    value: string,\n    _option: { label: React.ReactNode }\n  ): void => {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection = (value: string, _option: { label: string }): void => {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation = (event: CheckboxChangeEvent): void => {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection = (\n    value: string,\n    option: { label: dcmjs.sr.coding.CodedConcept }\n  ): void => {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance = (): void => {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection = (value: number | string | null): void => {\n    if (value !== null && value !== undefined) {\n      const x = Number(value)\n      this.setState(state => {\n        const isValid = x >= state.validXCoordinateRange[0] && x <= state.validXCoordinateRange[1]\n        return {\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: isValid\n        }\n      })\n    } else {\n      this.setState({\n        selectedXCoordinate: undefined,\n        isSelectedXCoordinateValid: false\n      })\n    }\n  }\n\n  handleYCoordinateSelection = (value: number | string | null): void => {\n    if (value !== null && value !== undefined) {\n      const y = Number(value)\n      this.setState(state => {\n        const isValid = y >= state.validYCoordinateRange[0] && y <= state.validYCoordinateRange[1]\n        return {\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: isValid\n        }\n      })\n    } else {\n      this.setState({\n        selectedYCoordinate: undefined,\n        isSelectedYCoordinateValid: false\n      })\n    }\n  }\n\n  handleMagnificationSelection = (value: number | string | null): void => {\n    if (value !== null && value !== undefined) {\n      const magnification = Number(value)\n      this.setState(() => {\n        const isValid = magnification >= 0 && magnification <= 40\n        return {\n          selectedMagnification: magnification,\n          isSelectedMagnificationValid: isValid\n        }\n      })\n    } else {\n      this.setState({\n        selectedMagnification: undefined,\n        isSelectedMagnificationValid: false\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection = (): void => {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n              this.state.selectedXCoordinate !== null && this.state.selectedXCoordinate !== undefined &&\n        this.state.selectedYCoordinate !== null && this.state.selectedYCoordinate !== undefined &&\n        this.state.selectedMagnification !== null && this.state.selectedMagnification !== undefined\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation = (): void => {\n    console.info('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion = (): void => {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Could not complete annotation configuration'\n        )\n      )\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation = (): void => {\n    console.info('cancel annotation configuration')\n    this.volumeViewer.activateSelectInteraction({})\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration = (): void => {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    this.setState((prevState) => {\n      const report = generateReport({\n        rois,\n        metadata,\n        user: this.props.user,\n        app: this.props.app,\n        visibleRoiUIDs: prevState.visibleRoiUIDs\n      })\n      return {\n        isReportModalVisible: report.isReportModalVisible,\n        generatedReport: report.generatedReport\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification = (): void => {\n    console.info('verify report generation')\n    if (this.state.generatedReport !== undefined) {\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      // The Comprehensive3DSR object should have a write method or similar\n      // For now, let's try to access it as an ArrayBuffer directly\n      client.storeInstances({ datasets: [(this.state.generatedReport as unknown as dcmjs.data.DicomDict).write()] }).then(\n        () => message.info('Annotations were saved.')\n      ).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Annotations could not be saved'\n          )\n        )\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation = (): void => {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange = ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void => {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(roi.uid, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange = ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void => {\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const annotationGroup = allAnnotationGroups.find(ag => ag.uid === annotationGroupUID)\n    if (annotationGroup !== null && annotationGroup !== undefined) {\n      runValidations({\n        dialog: true,\n        context: { annotationGroup, slide: this.props.slide }\n      })\n    }\n\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Failed to show annotation group.'\n          )\n        )\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange = ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void => {\n    console.log(`change style of annotation group ${uid}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        uid,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of annotation group.'\n        )\n      )\n      throw error\n    }\n  }\n\n  generateRoiStyle = (\n    styleOptions: StyleOptions): dmv.viewer.ROIStyleOptions => {\n    const opacity = styleOptions.opacity ?? DEFAULT_ANNOTATION_OPACITY\n    const strokeColor = styleOptions.color ?? DEFAULT_ANNOTATION_STROKE_COLOR\n    const fillColor = styleOptions.contourOnly ? [0, 0, 0, 0] : strokeColor.map((c) => Math.min(c + 25, 255))\n    const style = formatRoiStyle({\n      fill: { color: [...fillColor, opacity] },\n      stroke: { color: [...strokeColor, opacity] },\n      radius: this.defaultRoiStyle.stroke?.width\n    })\n    return style\n  }\n\n  handleRoiStyleChange = ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: StyleOptions\n  }): void => {\n    console.log(`change style of ROI ${uid}`)\n    try {\n      this.defaultAnnotationStyles[uid] = styleOptions\n      const style = this.generateRoiStyle(styleOptions)\n\n      const roi = this.volumeViewer.getROI(uid)\n      const key = getRoiKey(roi) as string\n      this.roiStyles[key] = style\n      this.volumeViewer.setROIStyle(uid, style)\n      this.state.visibleRoiUIDs.add(uid)\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of ROI.'\n        )\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange = ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void => {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange = ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n    }\n  }): void => {\n    console.log(`change style of segment ${segmentUID}`)\n\n    /** Track user customization if color is provided */\n    if (styleOptions.color !== undefined) {\n      this.setState(state => ({\n        customizedSegmentColors: {\n          ...state.customizedSegmentColors,\n          [segmentUID]: styleOptions.color!\n        }\n      }))\n    }\n\n    /** If color is provided, create a palette color lookup table */\n    let paletteColorLookupTable\n    if (styleOptions.color !== undefined) {\n      paletteColorLookupTable = (this.volumeViewer as any).createSegmentPaletteColorLookupTable(\n        segmentUID,\n        styleOptions.color\n      )\n    }\n\n    this.volumeViewer.setSegmentStyle(segmentUID, {\n      opacity: styleOptions.opacity,\n      paletteColorLookupTable\n    })\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange = ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void => {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange = ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void => {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange = ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void => {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange = ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void => {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange = ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void => {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState = (): void => {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID !== null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats !== null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset = (): void => {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection = (\n    value?: string,\n    _option?: unknown\n  ): void => {\n    if (value !== null) {\n      console.info(`select Presentation State instance \"${value ?? 'undefined'}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState !== null && presentationState !== undefined) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value ?? ''}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Presentation State could not be found'\n          )\n        )\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value ?? 'undefined'}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing = (): void => {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification = (): void => {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation = (): void => {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo = (): void => {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval = (): void => {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange = (): void => {\n    console.info('toggle visibility of ROIs')\n    if (!this.state.areRoisHidden) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  handleAnnotationGroupClick = (annotationGroupUID: string): void => {\n    this.volumeViewer.zoomToROI(annotationGroupUID)\n  }\n\n  handleAnnotationGroupSelection = (value: string): void => {\n    // Hide all currently visible annotation groups when selection changes\n    this.state.visibleAnnotationGroupUIDs.forEach(annotationGroupUID => {\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n    })\n\n    // Reset the visible annotation groups state\n    this.setState({\n      selectedSeriesInstanceUID: value,\n      visibleAnnotationGroupUIDs: new Set()\n    })\n  }\n\n  getSeriesDescription = (seriesInstanceUID: string): string => {\n    // Get the study from DicomMetadataStore\n    const study = DicomMetadataStore.getStudy(this.props.studyInstanceUID)\n\n    if ((study?.series) !== null && study !== null && study !== undefined) {\n      // Find the series that matches this series instance UID\n      const series = study.series.find(s => s.SeriesInstanceUID === seriesInstanceUID)\n\n      if (series?.SeriesDescription !== undefined && series.SeriesDescription !== '') {\n        return series.SeriesDescription\n      }\n    }\n\n    // Fallback to truncated UID if no description found\n    return `Series ${seriesInstanceUID.slice(0, 8)}...`\n  }\n\n  /**\n   * Handler that will toggle the ICC profile color management, i.e., either\n   * enable or disable it, depending on its current state.\n   */\n  handleICCProfilesToggle = (event: CheckboxChangeEvent): void => {\n    const checked = event.target.checked\n    this.setState({ isICCProfilesEnabled: checked })\n    this.volumeViewer.toggleICCProfiles()\n  }\n\n  formatAnnotation = (annotation: AnnotationCategoryAndType): void => {\n    const roi = this.volumeViewer.getROI(annotation.uid)\n    const key = getRoiKey(roi) as string\n    const color = this.roiStyles[key] !== undefined\n      ? this.roiStyles[key].stroke?.color.slice(0, 3)\n      : DEFAULT_ANNOTATION_COLOR_PALETTE[\n        Object.keys(this.roiStyles).length % DEFAULT_ANNOTATION_COLOR_PALETTE.length\n      ]\n    this.defaultAnnotationStyles[annotation.uid] = {\n      color: color as number[],\n      opacity: DEFAULT_ANNOTATION_OPACITY,\n      contourOnly: false\n    }\n\n    this.roiStyles[key] = this.generateRoiStyle(\n      this.defaultAnnotationStyles[annotation.uid]\n    )\n  }\n\n  // Helper functions to extract render logic\n  private readonly getDataFromViewer = (): {\n    rois: dmv.roi.ROI[]\n    segments: dmv.segment.Segment[]\n    mappings: dmv.mapping.ParameterMapping[]\n    annotationGroups: dmv.annotation.AnnotationGroup[]\n    annotations: AnnotationCategoryAndType[]\n  } => {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const filteredAnnotationGroups = allAnnotationGroups?.filter((annotationGroup) =>\n      annotationGroup.referencedSeriesInstanceUID === this.props.seriesInstanceUID\n    )\n    annotationGroups.push(...filteredAnnotationGroups)\n\n    const annotations = rois.map(roi => adaptRoiToAnnotation(roi))\n\n    return { rois, segments, mappings, annotationGroups, annotations }\n  }\n\n  private static getOpenSubMenuItems (): string[] {\n    return ['specimens', 'optical-paths', 'annotations', 'presentation-states']\n  }\n\n  private readonly getReport = (): React.ReactNode => {\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      return <Report dataset={dataset} />\n    }\n    return undefined\n  }\n\n  private readonly getAnnotationMenuItems = (rois: dmv.roi.ROI[]): React.ReactNode => {\n    if (rois.length > 0) {\n      return (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n    return undefined\n  }\n\n  private readonly getFindingOptions = (): React.ReactNode[] => {\n    return this.findingOptions.map((finding, index) => {\n      return (\n        <Select.Option\n          key={(finding.CodeValue !== undefined && finding.CodeValue !== '') ? finding.CodeValue : `finding-${index}`}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n  }\n\n  private static getGeometryTypeOptionsMapping (): { [key: string]: React.ReactNode } {\n    return {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n  }\n\n  private readonly getAnnotationConfigurations = (): React.ReactNode[] => {\n    const findingOptions = this.getFindingOptions()\n    const geometryTypeOptionsMapping = SlideViewer.getGeometryTypeOptionsMapping()\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n          placeholder='Select finding'\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach((evaluation, index) => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={(code.CodeValue !== undefined && code.CodeValue !== '') ? code.CodeValue : `evaluation-${index}`}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n            placeholder='Select geometry type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    return annotationConfigurations\n  }\n\n  private readonly getSpecimenMenu = (): React.ReactNode => {\n    return (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n  }\n\n  private readonly getEquipmentMenu = (): React.ReactNode => {\n    return (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n  }\n\n  private readonly getOpticalPathMenu = (): React.ReactNode => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    return (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n  }\n\n  private readonly getPresentationStateMenu = (): React.ReactNode => {\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach((instance, index) => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={(instance.SOPInstanceUID !== undefined && instance.SOPInstanceUID !== '') ? instance.SOPInstanceUID : `presentation-state-${index}`}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription !== undefined && instance.ContentDescription !== '' ? instance.ContentDescription : 'Untitled'}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={undefined}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          {null}\n        </Select.Option>\n      )\n      return (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={UndoOutlined}\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getSegmentationMenu = (segments: dmv.segment.Segment[]): React.ReactNode => {\n    // Skip processing if no segments or if viewer is not ready\n    if (segments.length === 0 || this.volumeViewer === null || this.volumeViewer === undefined) {\n      return undefined\n    }\n\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      segments.forEach((segment, index) => {\n        try {\n          /** Validate segment object */\n          if (segment === null || segment === undefined || segment.uid === undefined || segment.uid === '') {\n            console.warn(`Invalid segment at index ${index}:`, segment)\n            return\n          }\n\n          /** Check if volumeViewer methods are available */\n          if (this.volumeViewer === null || this.volumeViewer === undefined || typeof this.volumeViewer.getSegmentStyle !== 'function') {\n            console.warn('Volume viewer not properly initialized')\n            return\n          }\n\n          const defaultStyle = this.volumeViewer.getSegmentStyle(segment.uid)\n          segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n            segment.uid\n          )\n\n          /** Validate defaultStyle */\n          if (defaultStyle === null || defaultStyle === undefined || typeof defaultStyle.opacity !== 'number') {\n            console.warn(`Invalid default style for segment ${segment.uid}:`, defaultStyle)\n            defaultSegmentStyles[segment.uid] = {\n              opacity: 1,\n              color: generateSegmentColor(index)\n            }\n            return\n          }\n\n          /** Get the best color for this segment (from DICOM metadata or generated) */\n          const segmentColor = getSegmentColor(\n            (segmentMetadata[segment.uid]?.[0] as unknown) as Record<string, unknown> ?? {},\n            segment.number ?? index + 1,\n            index\n          )\n\n          /** Use customized color if user has set one, otherwise use DICOM/generated color */\n          const finalColor = this.state.customizedSegmentColors[segment.uid] ?? segmentColor\n\n          defaultSegmentStyles[segment.uid] = {\n            opacity: defaultStyle.opacity,\n            color: finalColor\n          }\n\n          /** Apply the color to the segment in the viewer only if it hasn't been set yet */\n          try {\n            const currentStyle = this.volumeViewer.getSegmentStyle(segment.uid)\n            /** Only set style if it's not already set or if it's different */\n            const currentColor = currentStyle?.paletteColorLookupTable?.data?.[1]\n            const colorsMatch = currentColor && \n                               currentColor.length >= 3 &&\n                               currentColor[0] === finalColor[0] &&\n                               currentColor[1] === finalColor[1] &&\n                               currentColor[2] === finalColor[2]\n            \n            const needsUpdate = currentStyle?.opacity === undefined || \n                               currentStyle.opacity !== defaultStyle.opacity ||\n                               !currentStyle.paletteColorLookupTable ||\n                               !colorsMatch\n            \n            if (needsUpdate) {\n              this.volumeViewer.setSegmentStyle(segment.uid, {\n                opacity: defaultStyle.opacity,\n                paletteColorLookupTable: (this.volumeViewer as any).createSegmentPaletteColorLookupTable(\n                  segment.uid,\n                  finalColor\n                )\n              })\n            }\n          } catch (styleError) {\n            console.warn(`Failed to set segment style for ${segment.uid}:`, styleError)\n            /** Continue without applying the style - the segment will still be displayed */\n          }\n        } catch (error) {\n          console.warn(`Failed to process segment ${segment.uid}:`, error)\n          /** Fallback to default color */\n          const segmentColor = generateSegmentColor(index)\n          defaultSegmentStyles[segment.uid] = {\n            opacity: 1,\n            color: segmentColor\n          }\n        }\n      })\n      return (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getParametricMapMenu = (mappings: dmv.mapping.ParameterMapping[]): React.ReactNode => {\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      return (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getAnnotationGroupMenu = (annotationGroups: dmv.annotation.AnnotationGroup[]): React.ReactNode => {\n    if (annotationGroups.length > 0) {\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const defaultAnnotationGroupStyles: {\n        [annotationUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n\n      // Group annotation groups by seriesInstanceUID\n      const annotationGroupsBySeries: { [seriesInstanceUID: string]: dmv.annotation.AnnotationGroup[] } = {}\n      annotationGroups.forEach(annotationGroup => {\n        const seriesUID = annotationGroup.seriesInstanceUID\n        if (!(seriesUID in annotationGroupsBySeries)) {\n          annotationGroupsBySeries[seriesUID] = []\n        }\n        annotationGroupsBySeries[seriesUID].push(annotationGroup)\n      })\n\n      // Initialize selected series if not set\n      if (this.state.selectedSeriesInstanceUID === undefined && annotationGroups.length !== 0) {\n        this.setState({ selectedSeriesInstanceUID: 'all' })\n      }\n\n      // Create dropdown options for series\n      const dropdownOptions = [\n        {\n          value: 'all',\n          label: 'All'\n        },\n        ...Object.keys(annotationGroupsBySeries).map((seriesUID) => ({\n          value: seriesUID,\n          label: `${this.getSeriesDescription(seriesUID)} (${annotationGroupsBySeries[seriesUID]?.length ?? 0} groups)`\n        }))\n      ]\n\n      // Get annotation groups for the selected series or all series\n      const selectedSeriesAnnotationGroups = this.state.selectedSeriesInstanceUID === 'all'\n        ? annotationGroups\n        : (this.state.selectedSeriesInstanceUID !== undefined\n            ? annotationGroupsBySeries[this.state.selectedSeriesInstanceUID] ?? []\n            : [])\n\n      return (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          {/* Series Selection Dropdown */}\n          <div\n            style={{\n              paddingLeft: '14px',\n              paddingRight: '14px',\n              paddingTop: '7px',\n              paddingBottom: '7px'\n            }}\n          >\n            <Select\n              style={{ width: '100%' }}\n              placeholder='Select a series'\n              value={this.state.selectedSeriesInstanceUID}\n              onChange={this.handleAnnotationGroupSelection}\n              options={dropdownOptions}\n            />\n          </div>\n\n          {/* Display annotation groups for the selected series */}\n          {selectedSeriesAnnotationGroups.length > 0 && (\n            <AnnotationGroupList\n              annotationGroups={selectedSeriesAnnotationGroups}\n              metadata={annotationGroupMetadata}\n              onAnnotationGroupClick={this.handleAnnotationGroupClick}\n              // when adding annotationGroups to annotationCategory list,\n              // make so that this is uses this.defaultAnnotationStyles later instead of defaultAnnotationGroupStyles\n              defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n              visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n              onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n              onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n            />\n          )}\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getToolbar = (): { toolbar: React.ReactNode, toolbarHeight: string } => {\n    const annotationTools = [\n      <Btn\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Btn\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Btn\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Btn\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Btn\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Btn\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Btn\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n\n    let toolbar: React.ReactNode\n    let toolbarHeight = '0px'\n\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    return { toolbar, toolbarHeight }\n  }\n\n  private readonly getCursor = (): string => {\n    if (this.state.isLoading) {\n      return 'progress'\n    }\n    return 'default'\n  }\n\n  private readonly getSelectedRoiInformation = (): React.ReactNode => {\n    if (this.state.selectedRoi !== null && this.state.selectedRoi !== undefined) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence !== null && item.ContentSequence !== undefined) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit !== null && item.unit !== undefined) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      return (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getICCProfilesMenu = (): React.ReactNode => {\n    return this.volumeViewer.getICCProfiles().length > 0 && (\n      <div style={{ margin: '0.9rem' }}>\n        <Checkbox\n          checked={this.state.isICCProfilesEnabled}\n          onChange={this.handleICCProfilesToggle}\n        >\n          ICC Profiles\n        </Checkbox>\n      </div>\n    )\n  }\n\n  render = (): React.ReactNode => {\n    const { rois, segments, mappings, annotationGroups, annotations } = this.getDataFromViewer()\n\n    const openSubMenuItems = SlideViewer.getOpenSubMenuItems()\n    const report = this.getReport()\n    const annotationMenuItems = this.getAnnotationMenuItems(rois)\n    const annotationConfigurations = this.getAnnotationConfigurations()\n    const specimenMenu = this.getSpecimenMenu()\n    const equipmentMenu = this.getEquipmentMenu()\n    const opticalPathMenu = this.getOpticalPathMenu()\n    const presentationStateMenu = this.getPresentationStateMenu()\n    const segmentationMenu = this.getSegmentationMenu(segments)\n    const parametricMapMenu = this.getParametricMapMenu(mappings)\n    const annotationGroupMenu = this.getAnnotationGroupMenu(annotationGroups)\n    const { toolbar, toolbarHeight } = this.getToolbar()\n    const cursor = this.getCursor()\n    const selectedRoiInformation = this.getSelectedRoiInformation()\n    const iccProfilesMenu = this.getICCProfilesMenu()\n\n    // Add segmentations and parametric maps to open sub menu items if they exist\n    if (segmentationMenu !== null && segmentationMenu !== undefined) {\n      openSubMenuItems.push('segmentations')\n    }\n    if (parametricMapMenu !== null && parametricMapMenu !== undefined) {\n      openSubMenuItems.push('parametric-maps')\n    }\n    if (annotationGroupMenu !== null && annotationGroupMenu !== undefined) {\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    // Format annotations\n    annotations?.forEach?.(this.formatAnnotation)\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <SlideViewerContent\n          toolbar={toolbar}\n          toolbarHeight={toolbarHeight}\n          cursor={cursor}\n          volumeViewportRef={this.volumeViewportRef}\n        >\n          <SlideViewerModals\n            isAnnotationModalVisible={this.state.isAnnotationModalVisible}\n            onAnnotationConfigurationCompletion={this.handleAnnotationConfigurationCompletion}\n            onAnnotationConfigurationCancellation={this.handleAnnotationConfigurationCancellation}\n            isAnnotationOkDisabled={!(this.state.selectedFinding !== undefined && this.state.selectedGeometryType !== undefined)}\n            annotationConfigurations={annotationConfigurations}\n            isSelectedRoiModalVisible={this.state.isSelectedRoiModalVisible}\n            onRoiSelectionCancellation={this.handleRoiSelectionCancellation}\n            selectedRoiInformation={selectedRoiInformation}\n            isGoToModalVisible={this.state.isGoToModalVisible}\n            onSlidePositionSelection={this.handleSlidePositionSelection}\n            onSlidePositionSelectionCancellation={this.handleSlidePositionSelectionCancellation}\n            validXCoordinateRange={this.state.validXCoordinateRange}\n            validYCoordinateRange={this.state.validYCoordinateRange}\n            isSelectedXCoordinateValid={this.state.isSelectedXCoordinateValid}\n            isSelectedYCoordinateValid={this.state.isSelectedYCoordinateValid}\n            isSelectedMagnificationValid={this.state.isSelectedMagnificationValid}\n            onXCoordinateSelection={this.handleXCoordinateSelection}\n            onYCoordinateSelection={this.handleYCoordinateSelection}\n            onMagnificationSelection={this.handleMagnificationSelection}\n            isReportModalVisible={this.state.isReportModalVisible}\n            onReportVerification={this.handleReportVerification}\n            onReportCancellation={this.handleReportCancellation}\n            report={report}\n          />\n        </SlideViewerContent>\n\n        <SlideViewerSidebar\n          labelViewportRef={this.labelViewportRef}\n          labelViewer={this.labelViewer}\n          openSubMenuItems={openSubMenuItems}\n          specimenMenu={specimenMenu}\n          iccProfilesMenu={iccProfilesMenu}\n          equipmentMenu={equipmentMenu}\n          opticalPathMenu={opticalPathMenu}\n          presentationStateMenu={presentationStateMenu}\n          annotationMenuItems={annotationMenuItems}\n          annotationGroupMenu={annotationGroupMenu}\n          segmentationMenu={segmentationMenu}\n          parametricMapMenu={parametricMapMenu}\n          annotations={annotations}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onAnnotationVisibilityChange={this.handleAnnotationVisibilityChange}\n          onRoiStyleChange={this.handleRoiStyleChange}\n          defaultAnnotationStyles={this.defaultAnnotationStyles}\n        />\n\n        {this.state.isHoveredRoiTooltipVisible &&\n        this.state.hoveredRoiAttributes.length > 0\n          ? (\n            <HoveredRoiTooltip\n              xPosition={this.state.hoveredRoiTooltipX}\n              yPosition={this.state.hoveredRoiTooltipY}\n              rois={this.state.hoveredRoiAttributes}\n            />\n            )\n          : null}\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import { Routes, Route, useLocation, useParams } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { useEffect, useState } from 'react'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide } from '../data/slides'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { useSlides } from '../hooks/useSlides'\nimport { StorageClasses } from '../data/uids'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface NaturalizedInstance {\n  SeriesInstanceUID: string\n  SOPInstanceUID: string\n  ReferencedSeriesSequence?: Array<{\n    SeriesInstanceUID: string\n  }>\n  ContentSequence?: Array<{\n    ConceptNameCodeSequence: Array<{\n      CodeValue: string\n    }>\n    ContentSequence?: Array<{\n      ContentSequence: Array<{\n        ReferencedSOPSequence: Array<{\n          ReferencedSOPInstanceUID: string\n        }>\n      }>\n    }>\n  }>\n}\n\ninterface ReferencedSlideResult {\n  slide: Slide | undefined\n  metadata: NaturalizedInstance\n}\n\nconst findSeriesSlide = (slides: Slide[], seriesInstanceUID: string): Slide | undefined => {\n  return slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n}\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID = '', seriesInstanceUID = '' } = useParams<{ studyInstanceUID: string, seriesInstanceUID: string }>()\n  const location = useLocation()\n\n  const [selectedSlide, setSelectedSlide] = useState(findSeriesSlide(slides, seriesInstanceUID))\n  const [derivedDataset, setDerivedDataset] = useState<NaturalizedInstance | null>(null)\n\n  useEffect(() => {\n    const seriesSlide = findSeriesSlide(slides, seriesInstanceUID)\n    if (seriesSlide !== null) {\n      setSelectedSlide(seriesSlide)\n    }\n  }, [seriesInstanceUID, slides])\n\n  useEffect(() => {\n    const findReferencedSlide = async ({ clients, studyInstanceUID, seriesInstanceUID }: {\n      clients: { [key: string]: DicomWebManager }\n      studyInstanceUID: string\n      seriesInstanceUID: string\n    }): Promise<ReferencedSlideResult | null> => await new Promise<ReferencedSlideResult | null>((resolve, reject) => {\n      try {\n        const allClients = Object.values(StorageClasses).map((storageClass) => clients[storageClass])\n        Promise.all(allClients.map(async (client) => {\n          const seriesMetadata = await client.retrieveSeriesMetadata({\n            studyInstanceUID: studyInstanceUID,\n            seriesInstanceUID: seriesInstanceUID\n          })\n          const [naturalizedSeriesMetadata] = seriesMetadata.map((metadata) => naturalizeDataset(metadata)) as NaturalizedInstance[]\n\n          if (naturalizedSeriesMetadata.ReferencedSeriesSequence != null) {\n            const referencedSeriesInstanceUID = naturalizedSeriesMetadata.ReferencedSeriesSequence[0].SeriesInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.seriesInstanceUIDs.find((uid: string) => {\n                return uid === referencedSeriesInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n\n          const IMAGE_LIBRARY_CONCEPT_NAME_CODE = '111028'\n          const imageLibrary = naturalizedSeriesMetadata.ContentSequence?.find(\n            contentItem => contentItem.ConceptNameCodeSequence[0].CodeValue === IMAGE_LIBRARY_CONCEPT_NAME_CODE\n          )\n          if ((imageLibrary?.ContentSequence?.[0]?.ContentSequence?.[0]?.ReferencedSOPSequence?.[0]) != null) {\n            const referencedSOPInstanceUID = imageLibrary.ContentSequence[0].ContentSequence[0].ReferencedSOPSequence[0].ReferencedSOPInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.volumeImages.find((image: { SOPInstanceUID: string }) => {\n                return image.SOPInstanceUID === referencedSOPInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n        })).catch(reject)\n      } catch (error) {\n        reject(error)\n      }\n    })\n\n    if (selectedSlide === null || selectedSlide === undefined) {\n      void findReferencedSlide({ clients, studyInstanceUID, seriesInstanceUID }).then((result: ReferencedSlideResult | null) => {\n        if (result !== null && result !== undefined) {\n          setSelectedSlide(result.slide)\n          setDerivedDataset(result.metadata)\n        }\n      }).catch(error => {\n        console.error('Error finding referenced slide:', error)\n      })\n    }\n  }, [slides, clients, studyInstanceUID, seriesInstanceUID, selectedSlide])\n\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string | undefined\n  if (!searchParams.has('access_token')) {\n    const stateParam = searchParams.get('state')\n    presentationStateUID = stateParam !== null ? stateParam : undefined\n  }\n\n  let viewer = null\n  if (selectedSlide != null && selectedSlide !== undefined) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n        derivedDataset={derivedDataset ?? undefined}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\nfunction Viewer (props: ViewerProps): JSX.Element | null {\n  const { clients, studyInstanceUID, location, navigate } = props\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n\n  const handleSeriesSelection = ({ seriesInstanceUID }: { seriesInstanceUID: string }): void => {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n\n    if (location.pathname.includes('/projects/')) {\n      urlPath = location.pathname\n      if (!location.pathname.includes('/series/')) {\n        urlPath += `/series/${seriesInstanceUID}`\n      } else {\n        urlPath = urlPath.replace(/\\/series\\/[^/]+/, `/series/${seriesInstanceUID}`)\n      }\n    }\n\n    if (\n      location.pathname.includes('/series/') &&\n      location.search != null\n    ) {\n      urlPath += location.search\n    }\n\n    navigate(urlPath, { replace: true })\n  }\n\n  if (isLoading) {\n    return null\n  }\n\n  if (slides.length === 0) {\n    return null\n  }\n\n  const firstSlide = slides[0]\n  const volumeInstances = firstSlide.volumeImages\n  if (volumeInstances.length === 0) {\n    return null\n  }\n  const refImage = volumeInstances[0]\n\n  /* If a series is encoded in the path, route the viewer to this series.\n   * Otherwise select the first series correspondent to\n   * the first slide contained in the study.\n   */\n  let selectedSeriesInstanceUID: string\n  if (location.pathname.includes('series/')) {\n    const seriesFragment = location.pathname.split('series/')[1]\n    selectedSeriesInstanceUID = seriesFragment.includes('/') ? seriesFragment.split('/')[0] : seriesFragment\n  } else {\n    selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n  }\n\n  let clinicalTrialMenu\n  if (refImage.ClinicalTrialSponsorName != null) {\n    clinicalTrialMenu = (\n      <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n        <ClinicalTrial metadata={refImage} />\n      </Menu.SubMenu>\n    )\n  }\n\n  return (\n    <Layout style={{ height: '100%' }} hasSider>\n      <Layout.Sider\n        width={300}\n        style={{\n          height: '100%',\n          borderRight: 'solid',\n          borderRightWidth: 0.25,\n          overflow: 'hidden',\n          background: 'none'\n        }}\n      >\n        <Menu\n          mode='inline'\n          defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n          style={{ height: '100%' }}\n          inlineIndent={14}\n        >\n          <Menu.SubMenu key='patient' title='Patient'>\n            <Patient metadata={refImage} />\n          </Menu.SubMenu>\n          <Menu.SubMenu key='study' title='Study'>\n            <Study metadata={refImage} />\n          </Menu.SubMenu>\n          {clinicalTrialMenu}\n          <Menu.SubMenu key='slides' title='Slides'>\n            <SlideList\n              clients={props.clients}\n              metadata={slides}\n              selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n              onSeriesSelection={handleSeriesSelection}\n            />\n          </Menu.SubMenu>\n        </Menu>\n      </Layout.Sider>\n\n      <Routes>\n        <Route\n          path='/series/:seriesInstanceUID'\n          element={\n            <ParametrizedSlideViewer\n              clients={props.clients}\n              slides={slides}\n              preload={props.preload}\n              annotations={props.annotations}\n              enableAnnotationTools={props.enableAnnotationTools}\n              app={props.app}\n              user={props.user}\n            />\n          }\n        />\n      </Routes>\n    </Layout>\n  )\n}\n\nexport default withRouter(Viewer)\n","import dcmjs from 'dcmjs'\n\nconst { DicomMetaDictionary } = dcmjs.data\n\ninterface TagInfo {\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TagInfo[]\n  level: number\n}\n\nexport interface DicomTag {\n  name: string\n  vr: string\n  Value?: any[]\n  [key: string]: any\n}\n\nconst formatValue = (val: any): string => {\n  if (typeof val === 'object' && val !== null) {\n    return JSON.stringify(val)\n  }\n  return String(val)\n}\n\nexport const formatTagValue = (tag: DicomTag): string => {\n  if (tag.Value == null) return ''\n\n  if (Array.isArray(tag.Value)) {\n    return tag.Value.map(formatValue).join(', ')\n  }\n\n  return formatValue(tag.Value)\n}\n\n/**\n * Processes DICOM metadata and returns a flattened array of tag information\n * @param metadata - The DICOM metadata object to process\n * @param depth - The current depth level for nested sequences (default: 0)\n * @returns Array of processed tag information\n */\nexport function getRows (metadata: Record<string, any>, depth = 0): TagInfo[] {\n  if (metadata === undefined || metadata === null) return []\n  const keywords = Object.keys(metadata).filter(key => key !== '_vrMap')\n\n  return keywords.flatMap(keyword => {\n    // @ts-expect-error\n    const tagInfo = DicomMetaDictionary.nameMap[keyword] as TagInfo | undefined\n    let value = metadata[keyword]\n\n    // Handle private or unknown tags\n    if (tagInfo === undefined) {\n      const regex = /[0-9A-Fa-f]{6}/g\n      if (keyword.match(regex) == null) return []\n\n      return [{\n        tag: `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`,\n        vr: '',\n        keyword: 'Private Tag',\n        value: value?.toString() ?? '',\n        level: depth\n      }]\n    }\n\n    // Handle sequence values (SQ VR)\n    if (tagInfo.vr === 'SQ' && value !== undefined) {\n      const sequenceItems = Array.isArray(value) ? value : [value]\n\n      // Create a parent sequence node\n      const sequenceNode: TagInfo = {\n        tag: tagInfo.tag,\n        vr: tagInfo.vr,\n        keyword,\n        value: `Sequence with ${sequenceItems.length} item(s)`,\n        level: depth,\n        children: []\n      }\n\n      // Create individual nodes for each sequence item\n      sequenceNode.children = sequenceItems.map((item, index) => {\n        const itemNode: TagInfo = {\n          tag: `${tagInfo.tag}.${index + 1}`,\n          vr: 'Item',\n          keyword: `Item ${index + 1}`,\n          value: `Sequence Item ${index + 1}`,\n          level: depth + 1,\n          children: getRows(item, depth + 2)\n        }\n        return itemNode\n      })\n\n      return [sequenceNode]\n    }\n\n    // Handle array values\n    if (Array.isArray(value)) {\n      value = value.map(formatValue).join('\\\\')\n    } else if (typeof value === 'object' && value !== null) {\n      value = formatValue(value)\n    }\n\n    return [{\n      tag: tagInfo.tag,\n      vr: tagInfo.vr,\n      keyword: keyword.replace('RETIRED_', ''),\n      value: value?.toString() ?? '',\n      level: depth\n    }]\n  })\n}\n\n/**\n * Sorts DICOM tags alphabetically by tag value\n * @param metadata - The DICOM metadata object to process\n * @returns Sorted array of tag information\n */\nexport function getSortedTags (metadata: Record<string, any>): TagInfo[] {\n  const tagList = getRows(metadata)\n  return tagList.sort((a, b) => a.tag.localeCompare(b.tag))\n}\n","/**\n * Formats a DICOM datetime string (YYYYMMDD:HHmmss) into a human-readable format\n *\n * @param dateStr - DICOM datetime string in format \"YYYYMMDD:HHmmss\"\n * @returns Formatted date string (e.g., \"Mon, Jan 1 2024\")\n * @example\n * formatDicomDate(\"20240101:120000\") // Returns \"Mon, Jan 1 2024\"\n * formatDicomDate(\"invalid\") // Returns \"invalid\"\n */\nexport const formatDicomDate = (dateStr: string): string => {\n  // Parse YYYYMMDD:HHmmss format\n  const match = dateStr.match(/^(\\d{4})(\\d{2})(\\d{2}):(\\d{2})(\\d{2})(\\d{2})/)\n  if (match == null) return dateStr\n\n  const [, year, month, day, hour, minute, second] = match\n\n  // Validate month and day\n  const monthNum = parseInt(month)\n  const dayNum = parseInt(day)\n  if (monthNum < 1 || monthNum > 12 || dayNum < 1 || dayNum > 31) {\n    return dateStr\n  }\n\n  const date = new Date(\n    parseInt(year),\n    monthNum - 1, // months are 0-based\n    dayNum,\n    parseInt(hour),\n    parseInt(minute),\n    parseInt(second)\n  )\n\n  // Check if the date is invalid or if the month/day combination is invalid\n  // This catches cases like February 31st where the date rolls over to March\n  if (\n    date.getMonth() !== monthNum - 1 || // month rolled over\n    date.getDate() !== dayNum // day rolled over\n  ) {\n    return dateStr\n  }\n\n  // Format parts separately to avoid the extra comma\n  const weekday = date.toLocaleDateString('en-US', { weekday: 'short' })\n  const monthName = date.toLocaleDateString('en-US', { month: 'short' })\n  const dayFormatted = date.getDate()\n  const yearNum = date.getFullYear()\n\n  return `${weekday}, ${monthName} ${dayFormatted} ${yearNum}`\n}\n","import { useState, useMemo, useEffect } from 'react'\nimport { Select, Input, Slider, Typography, Table } from 'antd'\nimport { SearchOutlined } from '@ant-design/icons'\n\nimport DicomWebManager from '../../DicomWebManager'\nimport './DicomTagBrowser.css'\nimport { useSlides } from '../../hooks/useSlides'\nimport { getSortedTags } from './dicomTagUtils'\nimport { formatDicomDate } from '../../utils/formatDicomDate'\nimport DicomMetadataStore, { Series, Study } from '../../services/DICOMMetadataStore'\nimport { useDebounce } from '../../hooks/useDebounce'\n\nconst { Option } = Select\n\ninterface DisplaySet {\n  displaySetInstanceUID: number\n  SeriesDate?: string\n  SeriesTime?: string\n  SeriesNumber: string\n  SeriesDescription?: string\n  Modality: string\n  images: any[]\n}\n\ninterface TableDataItem {\n  key: string\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TableDataItem[]\n}\n\ninterface DicomTagBrowserProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\nconst DicomTagBrowser = ({ clients, studyInstanceUID }: DicomTagBrowserProps): JSX.Element => {\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n  const [study, setStudy] = useState<Study | undefined>(undefined)\n\n  const [displaySets, setDisplaySets] = useState<DisplaySet[]>([])\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] = useState(0)\n  const [instanceNumber, setInstanceNumber] = useState(1)\n  const [filterValue, setFilterValue] = useState('')\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([])\n  const [searchInput, setSearchInput] = useState('')\n\n  const debouncedSearchValue = useDebounce(searchInput, 300)\n\n  useEffect(() => {\n    if (debouncedSearchValue === '') {\n      setFilterValue('')\n      setExpandedKeys([])\n    } else {\n      setFilterValue(debouncedSearchValue)\n    }\n  }, [debouncedSearchValue])\n\n  useEffect(() => {\n    const handler = (event: any): void => {\n      const study: Study | undefined = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n      setStudy(study)\n    }\n    const seriesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.SERIES_ADDED, handler)\n    const instancesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.INSTANCES_ADDED, handler)\n\n    const study = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n    setStudy(study)\n\n    return () => {\n      seriesAddedSubscription.unsubscribe()\n      instancesAddedSubscription.unsubscribe()\n    }\n  }, [studyInstanceUID])\n\n  useEffect(() => {\n    let displaySets: DisplaySet[] = []\n    let derivedDisplaySets: DisplaySet[] = []\n    const processedSeries: string[] = []\n    let index = 0\n\n    if (slides.length > 0) {\n      displaySets = slides\n        .map((slide): DisplaySet | null => {\n          const { volumeImages } = slide\n          if (volumeImages?.[0] === undefined) return null\n\n          const {\n            SeriesDate,\n            SeriesTime,\n            SeriesNumber,\n            SeriesInstanceUID,\n            SeriesDescription,\n            Modality\n          } = volumeImages[0]\n\n          processedSeries.push(SeriesInstanceUID)\n\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate,\n            SeriesTime,\n            SeriesInstanceUID,\n            // @ts-expect-error\n            SeriesNumber,\n            SeriesDescription,\n            Modality,\n            images: volumeImages\n          }\n          index++\n          return ds\n        })\n        .filter((set): set is DisplaySet => set !== null && set !== undefined)\n    }\n\n    if (study !== undefined && study.series?.length > 0) {\n      derivedDisplaySets = study.series.filter(s => !processedSeries.includes(s.SeriesInstanceUID))\n        .map((series: Series): DisplaySet => {\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate: series.SeriesDate,\n            SeriesTime: series.SeriesTime,\n            // @ts-expect-error\n            SeriesNumber: series.SeriesNumber,\n            SeriesDescription: series.SeriesDescription,\n            SeriesInstanceUID: series.SeriesInstanceUID,\n            Modality: series.Modality,\n            images: series?.instances?.length > 0 ? series.instances : [series]\n          }\n          index++\n          return ds\n        })\n    }\n\n    setDisplaySets([...displaySets, ...derivedDisplaySets])\n  }, [slides, study])\n\n  const displaySetList = useMemo(() => {\n    displaySets.sort((a, b) => Number(a.SeriesNumber) - Number(b.SeriesNumber))\n    return displaySets.map((displaySet, index) => {\n      const {\n        SeriesDate = '',\n        SeriesTime = '',\n        SeriesNumber = '',\n        SeriesDescription = '',\n        Modality = ''\n      } = displaySet\n\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0]\n      const displayDate = formatDicomDate(dateStr)\n\n      return {\n        value: index,\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\n        description: displayDate\n      }\n    })\n  }, [displaySets])\n\n  const showInstanceList =\n    displaySets[selectedDisplaySetInstanceUID]?.images.length > 1\n\n  const instanceSliderMarks = useMemo(() => {\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return {}\n    const totalInstances = displaySets[selectedDisplaySetInstanceUID].images.length\n\n    // Create marks for first, middle, and last instances\n    const marks: Record<number, string> = {\n      1: '1', // First\n      [Math.ceil(totalInstances / 2)]: String(Math.ceil(totalInstances / 2)), // Middle\n      [totalInstances]: String(totalInstances) // Last\n    }\n\n    return marks\n  }, [selectedDisplaySetInstanceUID, displaySets])\n\n  const columns = [\n    {\n      title: 'Tag',\n      dataIndex: 'tag',\n      key: 'tag',\n      width: '30%'\n    },\n    {\n      title: 'VR',\n      dataIndex: 'vr',\n      key: 'vr',\n      width: '5%'\n    },\n    {\n      title: 'Keyword',\n      dataIndex: 'keyword',\n      key: 'keyword',\n      width: '30%'\n    },\n    {\n      title: 'Value',\n      dataIndex: 'value',\n      key: 'value',\n      width: '40%'\n    }\n  ]\n\n  const tableData = useMemo(() => {\n    const transformTagsToTableData = (tags: any[], parentKey = ''): TableDataItem[] => {\n      return tags.map((tag, index) => {\n        // Create a unique key using tag value if available, otherwise use index\n        const keyBase: string = tag.tag !== '' ? tag.tag.replace(/[(),]/g, '') : index.toString()\n        const currentKey: string = parentKey !== '' ? `${parentKey}-${keyBase}` : keyBase\n\n        const item: TableDataItem = {\n          key: currentKey,\n          tag: tag.tag,\n          vr: tag.vr,\n          keyword: tag.keyword,\n          value: tag.value\n        }\n\n        if (tag.children !== undefined && tag.children.length > 0) {\n          item.children = transformTagsToTableData(tag.children, currentKey)\n        }\n\n        return item\n      })\n    }\n\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return []\n    const images = displaySets[selectedDisplaySetInstanceUID]?.images\n    const sortedMetadata = Array.isArray(images)\n      ? [...images].sort((a, b) => {\n          if (a.InstanceNumber !== undefined && b.InstanceNumber !== undefined) {\n            return Number(a.InstanceNumber) - Number(b.InstanceNumber)\n          }\n          return 0 // keep original order if either is missing InstanceNumber\n        })\n      : []\n    const metadata = sortedMetadata[instanceNumber - 1]\n    const tags = getSortedTags(metadata)\n    return transformTagsToTableData(tags)\n  }, [instanceNumber, selectedDisplaySetInstanceUID, displaySets])\n\n  const filteredData = useMemo(() => {\n    if (filterValue === undefined || filterValue === '') return tableData\n\n    const searchLower = filterValue.toLowerCase()\n    const matchedKeys = new Set<string>()\n\n    const nodeMatches = (node: TableDataItem): boolean => {\n      return (\n        (node.tag?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.vr?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.keyword?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.value?.toString().toLowerCase() ?? '').includes(searchLower)\n      )\n    }\n\n    // First pass: find all matching nodes and their parent paths\n    const findMatchingPaths = (\n      node: TableDataItem,\n      parentPath: TableDataItem[] = []\n    ): TableDataItem[][] => {\n      const currentPath = [...parentPath, node]\n      let matchingPaths: TableDataItem[][] = []\n\n      if (nodeMatches(node)) {\n        matchingPaths.push(currentPath)\n      }\n\n      if (node.children != null) {\n        node.children.forEach(child => {\n          const childPaths = findMatchingPaths(child, currentPath)\n          matchingPaths = [...matchingPaths, ...childPaths]\n        })\n      }\n\n      return matchingPaths\n    }\n\n    // Find all paths that contain matches\n    const matchingPaths = tableData.flatMap(node => findMatchingPaths(node))\n\n    // Second pass: reconstruct the tree with matching paths\n    const reconstructTree = (\n      paths: TableDataItem[][],\n      level = 0\n    ): TableDataItem[] => {\n      if (paths.length === 0 || level >= paths[0].length) return []\n\n      const nodesAtLevel = new Map<string, {\n        node: TableDataItem\n        childPaths: TableDataItem[][]\n      }>()\n\n      paths.forEach(path => {\n        if (level < path.length) {\n          const node = path[level]\n          if (!nodesAtLevel.has(node.key)) {\n            nodesAtLevel.set(node.key, {\n              node: { ...node },\n              childPaths: []\n            })\n          }\n          if (level + 1 < path.length) {\n            nodesAtLevel.get(node.key)?.childPaths.push(path)\n          }\n        }\n      })\n\n      return Array.from(nodesAtLevel.values()).map(({ node, childPaths }) => {\n        matchedKeys.add(node.key)\n        const children = reconstructTree(childPaths, level + 1)\n        return children.length > 0 ? { ...node, children } : node\n      })\n    }\n\n    const filtered = reconstructTree(matchingPaths)\n    setExpandedKeys(Array.from(matchedKeys))\n\n    return filtered\n  }, [tableData, filterValue])\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div className='dicom-tag-browser'>\n      <div\n        style={{\n          width: '100%',\n          padding: '16px 20px 20px'\n        }}\n      >\n        <div style={{ display: 'flex', gap: '24px', marginBottom: '32px' }}>\n          <div style={{ flex: 1 }}>\n            <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>Series</Typography.Text>\n            <Select\n              style={{ width: '100%' }}\n              value={selectedDisplaySetInstanceUID}\n              onChange={(value) => {\n                setSelectedDisplaySetInstanceUID(value)\n                setInstanceNumber(1)\n              }}\n              optionLabelProp='label'\n              optionFilterProp='label'\n            >\n              {displaySetList.map((item) => (\n                <Option key={item.value} value={item.value} label={item.label}>\n                  <div>\n                    <div>{item.label}</div>\n                    <div\n                      style={{ fontSize: '12px', color: 'rgba(0, 0, 0, 0.45)' }}\n                    >\n                      {item.description}\n                    </div>\n                  </div>\n                </Option>\n              ))}\n            </Select>\n          </div>\n\n          {showInstanceList && (\n            <div style={{ flex: 1 }}>\n              <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>\n                Instance Number: {instanceNumber}\n              </Typography.Text>\n              <Slider\n                min={1}\n                max={displaySets[selectedDisplaySetInstanceUID]?.images.length}\n                value={instanceNumber}\n                onChange={(value) => setInstanceNumber(value)}\n                marks={instanceSliderMarks}\n                tooltip={{\n                  formatter: (value: number | undefined) => value !== undefined ? `Instance ${value}` : ''\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        <Input\n          style={{ marginBottom: '20px' }}\n          placeholder='Search DICOM tags...'\n          prefix={<SearchOutlined />}\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n        />\n\n        <Table\n          columns={columns}\n          dataSource={filteredData}\n          pagination={false}\n          expandable={{\n            expandedRowKeys: expandedKeys,\n            onExpandedRowsChange: (keys) => setExpandedKeys(keys as string[])\n          }}\n          size='small'\n          scroll={{ y: 500 }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default DicomTagBrowser\n","import { useState, useEffect } from 'react'\n\n/**\n * A hook that delays updating a value for the specified time\n * @param value The value to debounce\n * @param delay The delay time in milliseconds\n * @returns The debounced value\n * @example\n * const debouncedSearchTerm = useDebounce(searchTerm, 300)\n */\nexport const useDebounce = <T,>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Modal,\n  Row,\n  Space,\n  Badge,\n  Collapse,\n  Radio,\n  Tooltip\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  FileSearchOutlined,\n  UnorderedListOutlined,\n  UserOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport NotificationMiddleware, { NotificationMiddlewareEvents } from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\nimport { v4 as uuidv4 } from 'uuid'\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser'\nimport DicomWebManager from '../DicomWebManager'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  clients?: { [key: string]: DicomWebManager }\n  defaultClients?: { [key: string]: DicomWebManager }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface ExtendedCustomError extends CustomError {\n  source: string\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n  errorObj: ExtendedCustomError[]\n  errorCategory: string[]\n  warnings: string[]\n  serverSelectionMode: 'default' | 'custom'\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')?.trim()\n    const cachedMode = window.localStorage.getItem('slim_server_selection_mode') as 'default' | 'custom' | null\n\n    this.state = {\n      errorObj: [],\n      errorCategory: [],\n      warnings: [],\n      selectedServerUrl: cachedServerUrl ?? '',\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl),\n      serverSelectionMode: cachedMode === 'custom' && cachedServerUrl !== null && cachedServerUrl !== undefined && cachedServerUrl !== '' ? 'custom' : 'default'\n    }\n\n    const onErrorHandler = ({ source, error }: {\n      source: string\n      error: CustomError\n    }): void => {\n      this.setState(state => ({\n        ...state,\n        errorObj: [...state.errorObj, { ...error, source }],\n        errorCategory: [...state.errorCategory, error.type]\n      }))\n    }\n\n    const onWarningHandler = (warning: string): void => {\n      this.setState(state => ({\n        ...state,\n        warnings: [...state.warnings, warning]\n      }))\n    }\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnError,\n      onErrorHandler\n    )\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnWarning,\n      onWarningHandler\n    )\n  }\n\n  componentDidUpdate (prevProps: Readonly<HeaderProps>, prevState: Readonly<HeaderState>): void {\n    if (((prevState.warnings.length > 0) || (prevState.errorObj.length > 0)) && this.props.location.pathname !== prevProps.location.pathname) {\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true,\n        errorObj: [],\n        errorCategory: [],\n        warnings: []\n      })\n    }\n  }\n\n  isValidServerUrl = (url: string | null | undefined): boolean => {\n    if (url == null || url === '') {\n      return false\n    }\n    const trimmedUrl = url.trim()\n    if (trimmedUrl === '') {\n      return false\n    }\n    try {\n      const urlObj = new URL(trimmedUrl)\n      return urlObj.protocol.startsWith('http') && urlObj.pathname.length > 0\n    } catch (TypeError) {\n      return false\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleDicomTagBrowserButtonClick = (): void => {\n    const width = window.innerWidth - 200\n    Modal.info({\n      title: 'DICOM Tag Browser',\n      width,\n      content: <DicomTagBrowser\n        clients={this.props.clients ?? {}}\n        studyInstanceUID={this.props.params.studyInstanceUID ?? ''}\n               />,\n      onOk (): void {}\n    })\n  }\n\n  handleDebugButtonClick = (): void => {\n    const errorMsgs: {\n      Authentication: string[]\n      Communication: string[]\n      EncodingDecoding: string[]\n      Visualization: string[]\n    } = {\n      Authentication: [],\n      Communication: [],\n      EncodingDecoding: [],\n      Visualization: []\n    }\n\n    type ObjectKey = keyof typeof errorMsgs\n    const errorNum = this.state.errorObj.length\n\n    if (errorNum > 0) {\n      for (let i = 0; i < errorNum; i++) {\n        const category = this.state.errorCategory[i] as ObjectKey\n        errorMsgs[category].push(`${this.state.errorObj[i].message as string} (Source: ${this.state.errorObj[i].source})`)\n      }\n    }\n\n    const { Panel } = Collapse\n\n    const showErrorCount = (errcount: number): JSX.Element => (\n      <Badge count={errcount} />\n    )\n\n    const showWarningCount = (warncount: number): JSX.Element => (\n      <Badge color='green' count={warncount} />\n    )\n\n    Modal.info({\n      title: 'Debug Information\\n (Check console for more information)',\n      width: 800,\n      content: (\n        <Collapse>\n          <Panel\n            header='Communication Error'\n            key='communicationerror'\n            extra={showErrorCount(errorMsgs.Communication.length)}\n          >\n            <ol>\n              {errorMsgs.Communication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Data Encoding/Decoding error'\n            key='encodedecodeerror'\n            extra={showErrorCount(errorMsgs.EncodingDecoding.length)}\n          >\n            <ol>\n              {errorMsgs.EncodingDecoding.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Visualization error'\n            key='visualizationerror'\n            extra={showErrorCount(errorMsgs.Visualization.length)}\n          >\n            <ol>\n              {errorMsgs.Visualization.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Authentication error'\n            key='autherror'\n            extra={showErrorCount(errorMsgs.Authentication.length)}\n          >\n            <ol>\n              {errorMsgs.Authentication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Warning'\n            key='warning'\n            extra={showWarningCount(this.state.warnings.length)}\n          >\n            <ol>\n              {this.state.warnings.map(warning => (\n                <li key={uuidv4()}>{warning}</li>\n              ))}\n            </ol>\n          </Panel>\n        </Collapse>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  handleServerSelectionInput = (\n    event: React.FormEvent<HTMLInputElement>\n  ): void => {\n    const value = event.currentTarget.value.trim()\n    this.setState({\n      selectedServerUrl: value,\n      isServerSelectionDisabled: !this.isValidServerUrl(value)\n    })\n  }\n\n  handleServerSelectionCancellation = (): void => {\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')?.trim()\n    this.setState({\n      serverSelectionMode: cachedServerUrl !== null && cachedServerUrl !== undefined && cachedServerUrl !== '' ? 'custom' : 'default',\n      selectedServerUrl: cachedServerUrl ?? undefined,\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl)\n    })\n  }\n\n  handleServerSelectionModeChange = (e: any): void => {\n    const mode = e.target.value\n    this.setState({ serverSelectionMode: mode })\n  }\n\n  handleServerSelection = (): void => {\n    window.localStorage.setItem('slim_server_selection_mode', this.state.serverSelectionMode)\n\n    if (this.state.serverSelectionMode === 'default') {\n      this.props.onServerSelection({ url: '' })\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: false\n      })\n      return\n    }\n\n    const url = this.state.selectedServerUrl?.trim()\n    let closeModal = false\n    if (url != null && url !== '') {\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        this.props.onServerSelection({ url })\n        closeModal = true\n      }\n    }\n    this.setState({\n      isServerSelectionModalVisible: !closeModal,\n      isServerSelectionDisabled: !closeModal\n    })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = { items: userMenuItems }\n      user = (\n        <Dropdown menu={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    const debugButton = (\n      <Badge count={this.state.errorObj.length} style={{ zIndex: 1000 }}>\n        <Badge color='green' count={this.state.warnings.length} style={{ zIndex: 1001 }}>\n          <Button\n            icon={SettingOutlined}\n            tooltip='Debug info'\n            onClick={this.handleDebugButtonClick}\n          />\n        </Badge>\n      </Badge>\n    )\n\n    const showDicomTagBrowser = this.props.location.pathname.includes('/studies/')\n\n    const dicomTagBrowserButton = showDicomTagBrowser\n      ? (\n        <Button\n          icon={FileSearchOutlined}\n          tooltip='Dicom Tag Browser'\n          onClick={this.handleDicomTagBrowserButtonClick}\n        />\n        )\n      : null\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    const selectedServerUrl = this.state.serverSelectionMode === 'custom'\n      ? this.state.selectedServerUrl?.trim()\n      : this.props.clients?.default?.baseURL ?? this.props.defaultClients?.default?.baseURL\n\n    const urlInfo = selectedServerUrl != null && selectedServerUrl !== ''\n      ? (\n        <Tooltip title={selectedServerUrl}>\n          <div\n            style={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap',\n              paddingRight: '20px',\n              paddingLeft: '20px'\n            }}\n            title={selectedServerUrl}\n          >\n            {selectedServerUrl}\n          </div>\n        </Tooltip>\n        )\n      : null\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row style={{ flexWrap: 'nowrap' }}>\n            <Col style={{ flexShrink: 0 }}>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' style={{ minWidth: 0, overflow: 'hidden' }}>\n              <div style={{ width: '100%', overflow: 'hidden' }}>\n                {this.props.showServerSelectionButton ? urlInfo : ''}\n              </div>\n            </Col>\n            <Col style={{ flexShrink: 0 }}>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {debugButton}\n                {dicomTagBrowserButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          open={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={this.handleServerSelection}\n          onCancel={this.handleServerSelectionCancellation}\n        >\n          <Radio.Group\n            value={this.state.serverSelectionMode}\n            onChange={this.handleServerSelectionModeChange}\n            style={{ marginBottom: '16px' }}\n          >\n            <Radio value='default'>Use default server</Radio>\n            <Radio value='custom'>Use custom server</Radio>\n          </Radio.Group>\n\n          {this.state.serverSelectionMode === 'custom' && (\n            <Tooltip title={this.state.selectedServerUrl?.trim()}>\n              <Input\n                placeholder='Enter base URL of DICOMweb Study Service'\n                value={this.state.selectedServerUrl}\n                onChange={this.handleServerSelectionInput}\n                onPressEnter={this.handleServerSelection}\n                addonAfter={\n                this.state.isServerSelectionDisabled\n                  ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                  : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n            </Tooltip>\n          )}\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { Button, Input, Space, Table, TablePaginationConfig } from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\n// Standalone function for row key generation\nconst getRowKey = (record: dmv.metadata.Study): string => {\n  return record.StudyInstanceUID\n}\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'An error occured. Search for studies failed.'\n          )\n        )\n      })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick = (event: React.SyntheticEvent, study: dmv.metadata.Study): void => {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData = ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void => {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Request to search for studies failed.'\n          )\n        )\n      })\n  }\n\n  handleChange = (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void => {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null && filters[dataIndex] !== undefined) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  handleRowProps = (record: dmv.metadata.Study): object => {\n    return {\n      onClick: (event: React.SyntheticEvent): void => {\n        return this.handleClick(event, record)\n      }\n    }\n  }\n\n  handlePressEnter = (selectedKeys: React.Key[], confirm: (params?: FilterConfirmProps) => void, dataIndex: string): void => {\n    this.handleSearch(selectedKeys, confirm, dataIndex)\n  }\n\n  static handleInputChange (e: React.ChangeEvent<HTMLInputElement>, setSelectedKeys: (selectedKeys: React.Key[]) => void): void {\n    setSelectedKeys(e.target.value !== undefined ? [e.target.value] : [])\n  }\n\n  static getFilterInputChangeHandler (setSelectedKeys: (selectedKeys: React.Key[]) => void) {\n    return (e: React.ChangeEvent<HTMLInputElement>) => Worklist.handleInputChange(e, setSelectedKeys)\n  }\n\n  getFilterPressEnterHandler = (selectedKeys: React.Key[], confirm: (params?: FilterConfirmProps) => void, dataIndex: string) => {\n    return () => this.handlePressEnter(selectedKeys, confirm, dataIndex)\n  }\n\n  getFilterSearchHandler = (selectedKeys: React.Key[], confirm: (params?: FilterConfirmProps) => void, dataIndex: string) => {\n    return () => this.handleSearch(selectedKeys, confirm, dataIndex)\n  }\n\n  getFilterResetHandler = (clearFilters: () => void) => {\n    return () => this.handleReset(clearFilters)\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={getRowKey}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={this.handleRowProps}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => {\n    return {\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n        setSelectedKeys: (selectedKeys: React.Key[]) => void\n        selectedKeys: React.Key[]\n        confirm: (params?: FilterConfirmProps) => void\n        clearFilters: () => void\n      }) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            placeholder='Search'\n            value={selectedKeys[0]}\n            onChange={Worklist.getFilterInputChangeHandler(setSelectedKeys)}\n            onPressEnter={this.getFilterPressEnterHandler(selectedKeys, confirm, dataIndex)}\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\n          />\n          <Space>\n            <Button\n              type='primary'\n              onClick={this.getFilterSearchHandler(selectedKeys, confirm, dataIndex)}\n              icon={<SearchOutlined />}\n              size='small'\n              style={{ width: 90 }}\n            >\n              Search\n            </Button>\n            <Button\n              onClick={this.getFilterResetHandler(clearFilters)}\n              size='small'\n              style={{ width: 90 }}\n            >\n              Reset\n            </Button>\n          </Space>\n        </div>\n      ),\n      filterIcon: (filtered: boolean) => (\n        <SearchOutlined\n          style={{ color: filtered ? '#1890ff' : undefined }}\n        />\n      )\n    }\n  }\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\nimport NotificationMiddleware,\n{ NotificationMiddlewareContext } from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nconst createUser = (userData: UserData | null): User => {\n  let profile\n  if (userData !== null) {\n    profile = userData.profile\n  }\n\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.AUTH,\n        new CustomError(\n          errorTypes.AUTHENTICATION,\n          'Failed to obtain user \"name\" and \"email\".'\n        )\n      )\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.AUTH,\n      new CustomError(\n        errorTypes.AUTHENTICATION,\n        'Failed to obtain user profile.'\n      )\n    )\n  }\n  return {\n    name: undefined,\n    email: undefined\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData === undefined || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string|undefined> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null && userData !== undefined) {\n        return userData.access_token\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user profile.'\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null || userData === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user information.'\n          )\n        )\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\nimport DicomMetadataStore, { Instance } from './services/DICOMMetadataStore'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        // Only log errors in development environment\n        if (process.env.NODE_ENV === 'development') {\n          console.error(error, serverSettings)\n        }\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'At least one server needs to be configured.'\n          )\n        )\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Either path or full URL needs to be configured for server.'\n          )\n        )\n      }\n\n      const hasHttpsUrl = (url?: string): boolean => url?.startsWith('https') ?? false\n\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n\n      const shouldUpgradeInsecure = serverSettings.upgradeInsecureRequests === true && [\n        serviceUrl,\n        serverSettings.qidoPathPrefix,\n        serverSettings.wadoPathPrefix,\n        serverSettings.stowPathPrefix\n      ].some(hasHttpsUrl)\n\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n\n      if (shouldUpgradeInsecure) {\n        clientSettings.headers = {\n          ...clientSettings.headers,\n          'Content-Security-Policy': 'upgrade-insecure-requests'\n        }\n      }\n\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one store is supported for now.'\n        )\n      )\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const studySummaryMetadata = await this.stores[0].client.retrieveStudyMetadata(options)\n    const naturalized = naturalizeDataset(studySummaryMetadata)\n    DicomMetadataStore.addStudy(naturalized)\n    return studySummaryMetadata\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const seriesSummaryMetadata = await this.stores[0].client.retrieveSeriesMetadata(options)\n    const naturalized = seriesSummaryMetadata.map(naturalizeDataset)\n    DicomMetadataStore.addSeriesMetadata(naturalized, true)\n    return seriesSummaryMetadata\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    const instance = await this.stores[0].client.retrieveInstance(options)\n    const data = dcmjs.data.DicomMessage.readFile(instance)\n    const { dataset } = dmv.metadata.formatMetadata(data.dict)\n    DicomMetadataStore.addInstances([dataset as Instance])\n    return instance\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\nimport { ValidationProvider } from './contexts/ValidationContext'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <ValidationProvider clients={clients} studyInstanceUID={studyInstanceUID}>\n      <CaseViewer\n        clients={clients}\n        user={user}\n        annotations={config.annotations}\n        preload={preload}\n        app={app}\n        enableAnnotationTools={enableAnnotationTools}\n        studyInstanceUID={studyInstanceUID}\n      />\n    </ValidationProvider>\n  )\n}\n\nfunction _createClientMapping ({ baseUri, gcpBaseUrl, settings, onError }: {\n  baseUri: string\n  gcpBaseUrl: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      if (window.location.pathname.includes('/projects/')) {\n        const pathname = window.location.pathname.split('/study/')[0]\n        const pathUrl = `${gcpBaseUrl}${pathname}/dicomWeb`\n        serverSettings.url = pathUrl\n      }\n\n      storageClassMapping.default += 1\n      clientMapping.default = new DicomWebManager({\n        baseUri,\n        settings: [serverSettings],\n        onError\n      })\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.COMMUNICATION,\n        'Only one default server can be configured without specification ' +\n        'of storage classes.'\n      )\n    )\n  }\n\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one configured server can specify a given storage class. ' +\n          `Storage class \"${key}\" is specified by more than one ` +\n          'of the configured servers.'\n        )\n      )\n    }\n  }\n\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n  }\n\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  defaultClients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'User is not authorized to access DICOMweb resources.')\n      )\n    }\n\n    const logServerError = (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'An unexpected server error occured.'\n        )\n      )\n    }\n\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          logServerError()\n        }\n      })\n    } else if (error.status === 500) {\n      logServerError()\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    // Only log in development environment\n    if (process.env.NODE_ENV === 'development') {\n      console.info('instatiate app')\n      console.info(`app is located at \"${props.config.path}\"`)\n    }\n\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      if (process.env.NODE_ENV === 'development') {\n        console.info(\n          'app uses the following OIDC configuration: ',\n          props.config.oidc\n        )\n      }\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'One server needs to be configured.')\n      )\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      console.info(\n        'app uses the following DICOMweb server configuration: ',\n        props.config.servers\n      )\n    }\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n    this.addGcpSecondaryAnnotationServer(props.config)\n\n    const defaultClients = _createClientMapping({\n      baseUri,\n      gcpBaseUrl: props.config.gcpBaseUrl ?? 'https://healthcare.googleapis.com/v1',\n      settings: props.config.servers,\n      onError: this.handleDICOMwebError\n    })\n\n    this.state = {\n      clients: defaultClients,\n      defaultClients,\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  addGcpSecondaryAnnotationServer (config: AppProps['config']): void {\n    const serverId = 'gcp_secondary_annotation_server'\n    const urlParams = new URLSearchParams(window.location.search)\n    const url = urlParams.get('gcp')\n    const gcpSecondaryAnnotationServer = config.servers.find(\n      (server) => server.id === serverId\n    )\n    if (gcpSecondaryAnnotationServer === undefined && typeof url === 'string') {\n      config.servers.push({\n        id: serverId,\n        write: true,\n        url,\n        storageClasses: [\n          StorageClasses.COMPREHENSIVE_SR,\n          StorageClasses.COMPREHENSIVE_3D_SR,\n          StorageClasses.SEGMENTATION,\n          StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION,\n          StorageClasses.PARAMETRIC_MAP,\n          StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE,\n          StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n        ]\n      })\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    const trimmedUrl = url.trim()\n    console.info('select DICOMweb server: ', trimmedUrl)\n    if (trimmedUrl === '' || window.localStorage.getItem('slim_server_selection_mode') === 'default') {\n      this.setState({ clients: this.state.defaultClients })\n      return\n    }\n    window.localStorage.setItem('slim_selected_server', trimmedUrl)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url: trimmedUrl,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath !== null && storedPath !== '') {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch !== null && storedSearch !== '') {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Could not sign-in user.')\n        )\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path === null || path === undefined || path === '') {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n\n    // Restore cached server selection if it exists\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    if (cachedServerUrl !== null && cachedServerUrl !== undefined && cachedServerUrl !== '') {\n      this.handleServerSelection({ url: cachedServerUrl })\n    }\n\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n              clients={this.state.clients}\n              defaultClients={this.state.defaultClients}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/projects/:project/locations/:location/datasets/:dataset/dicomStores/:dicomStore/study/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","PatientID","PatientName","PatientSex","PatientBirthDate","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","errorTypes","CustomError","type","message","stack","Error","_subscriptions","Symbol","_lastSubscriptionId","PubSub","eventName","callback","hasOwnProperty","subscriptionId","callbacks","payload","NotificationMiddlewareEvents","NotificationMiddlewareContext","NotificationType","NotificationSourceDefinition","sources","category","notificationType","outerContext","args","publish","Array","from","warn","console","JSON","stringify","arguments","includes","apply","prototype","slice","call","source","error","notificationMsg","errorCategory","find","s","String","notification","description","duration","ImageFlavors","hasImageFlavor","image","imageFlavor","ImageType","areSameAcquisition","refImage","AcquisitionUID","Slide","options","acquisitionUID","frameOfReferenceUID","containerIdentifier","seriesInstanceUIDs","opticalPathIdentifiers","pyramidUIDs","areVolumeImagesMonochrome","volumeImages","labelImages","overviewImages","images","length","NotificationMiddleware","Set","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","forEach","add","ContainerIdentifier","SeriesInstanceUID","OpticalPathSequence","OpticalPathIdentifier","THUMBNAIL","FrameOfReferenceUID","PyramidUID","Object","keys","identifier","samplesPerPixel","SamplesPerPixel","filter","requirePyramidUID","PhotometricInterpretation","createSlides","slideMetadata","series","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","findIndex","slide","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","sort","a","b","imgA","imgB","Number","fetchImageMetadata","clients","studyInstanceUID","onSuccess","onError","info","client","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","searchForSeries","queryParams","Modality","StudyInstanceUID","matchedSeries","Promise","all","dmv","dataset","loadingSeries","retrieveSeriesMetadata","seriesInstanceUID","retrievedMetadata","seriesImages","Value","newSlides","customError","slidesCache","Map","pendingRequests","cacheTimestamps","cleanupExpiredCache","now","Date","entries","key","delete","useSlides","useState","setSlides","isLoading","setIsLoading","setError","useEffect","cachedData","get","fetchSlides","pendingRequest","resolve","reject","set","err","catch","cachedEntries","lastCachedSlides","result","useMemo","ValidationContext","createContext","globalValidationContext","ValidationProvider","isDialogVisible","setIsDialogVisible","currentValidationResult","setCurrentValidationResult","memoizedSlides","slidesInfo","slidesLength","hasSlides","isNaN","showValidationDialog","useCallback","validateMultiResolutionPyramid","isValid","validateAnnotationGroupAssociation","annotationGroup","some","volumeImage","SOPInstanceUID","referencedSOPInstanceUID","runValidations","dialog","context","pyramidValidation","associationValidation","setGlobalValidationContext","handleDialogClose","Provider","open","onCancel","onOk","charAt","toUpperCase","okText","cancelButtonProps","style","display","warning","getModalType","iconColor","iconSize","position","top","right","show","setShow","tooltipText","setTooltipText","useContext","useValidation","validationResult","zIndex","pointerEvents","color","fontSize","textShadow","state","overviewViewportRef","overviewViewer","setState","current","innerHTML","disableInteractions","resizeFactor","errorInterceptor","render","container","resize","height","ref","textAlign","alignItems","justifyContent","letterSpacing","selectedSeriesInstanceUID","onSeriesSelection","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","keyPath","domEvent","toString","mode","inlineIndent","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","findContentItemsByName","content","concept","ConceptNameCodeSequence","CodeValue","CodingSchemeDesignator","hasName","adaptRoiToAnnotation","roi","evaluations","CodeMeaning","nameValue","ValueType","dcmjs","ConceptCodeSequence","isVisible","isOkDisabled","okButtonProps","disabled","align","direction","maskClosable","footer","validXCoordinateRange","validYCoordinateRange","isSelectedXCoordinateValid","isSelectedYCoordinateValid","isSelectedMagnificationValid","onXCoordinateSelection","onYCoordinateSelection","onMagnificationSelection","handleXCoordinateEnter","event","target","handleYCoordinateEnter","handleMagnificationEnter","placeholder","prefix","onChange","onPressEnter","controls","addonAfter","CheckOutlined","StopOutlined","isAnnotationModalVisible","onAnnotationConfigurationCompletion","onAnnotationConfigurationCancellation","isAnnotationOkDisabled","annotationConfigurations","isSelectedRoiModalVisible","onRoiSelectionCancellation","selectedRoiInformation","isGoToModalVisible","onSlidePositionSelection","onSlidePositionSelectionCancellation","isReportModalVisible","onReportVerification","onReportCancellation","report","handleOpacityChange","bind","handleColorRChange","handleColorGChange","handleColorBChange","getCurrentColor","currentStyle","opacity","defaultStyle","contourOnly","annotationGroupsUIDs","onStyleChange","styleOptions","updateCurrentStyle","isArray","values","colorSettings","plain","justify","gutter","range","min","max","step","handleShowOutlineOnly","checked","checkedAnnotationUids","defaultAnnotationStyles","types","checkAll","every","uids","has","indeterminate","handleChangeCheckedType","roiUID","paddingLeft","e","mouseEnterDelay","placement","overlayStyle","reduce","acc","shape","marginLeft","SettingOutlined","shortenedCodeMeaning","displayCodeMeaning","isChecked","indeterminateType","flexDirection","annotations","categories","categoriesAcc","annotation","categoryKey","typeKey","oldCategory","oldType","typesArr","getCategories","labelViewportRef","labelViewer","openSubMenuItems","specimenMenu","iccProfilesMenu","equipmentMenu","opticalPathMenu","presentationStateMenu","annotationMenuItems","annotationGroupMenu","segmentationMenu","parametricMapMenu","visibleRoiUIDs","onAnnotationVisibilityChange","onRoiStyleChange","handleMenuOpenChange","setTimeout","reverseArrow","borderLeft","borderLeftWidth","overflow","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","toolbar","toolbarHeight","cursor","volumeViewportRef","buildKey","codingScheme","codeValue","getRoiKey","matches","meaning","schemeDesignator","finding","areROIsEqual","scoord3d","graphicType","graphicData","s1","s2","toPrecision","j","formatRoiStyle","stroke","fill","circle","radius","Math","isDefined","generateSegmentColor","colorPalette","rgbToHex","rgb","round","getSegmentColor","segmentMetadata","segmentNumber","fallbackIndex","metadataColor","SegmentSequence","segment","seg","SegmentNumber","RecommendedDisplayCIELabValue","labValues","extractSegmentColorFromMetadata","constructViewers","preload","volumeViewer","clientMapping","skipThumbnails","activateSelectInteraction","orientation","implementsTID1500","templateSeq","ContentTemplateSequence","TemplateIdentifier","describesSpecimenSubject","ContentSequence","subjectClassValue","retrievedConcept","expectedConcept","equals","containsROIAnnotations","measurements","measurementGroups","foundRegion","group","regions","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","DEFAULT_ANNOTATION_STROKE_COLOR","DEFAULT_ANNOTATION_COLOR_PALETTE","handleVisibilityChange","onVisibilityChange","otherProps","nameMeaning","valueMeaning","textContentItem","TextValue","seq","MeasuredValueSequence","NumericValue","unit","MeasurementUnitsCodeSequence","checkedChildren","unCheckedChildren","handleMenuItemSelection","rois","object","onSelection","paddingTop","paddingBottom","selectedRoiUIDs","onClick","AnnotationGroupControls","settings","AnnotationGroupBadgeDescription","isBadgeVisible","handleKeyDown","preventDefault","onKeyDown","tabIndex","role","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","padding","annotationGroupUID","handleAnnotationGroupClick","onAnnotationGroupClick","handleMeasurementSelection","limitValues","option","codeComponents","measurement","windowSettings","explorationSettings","AnnotationGroupSequence","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","AnnotationCoordinateType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","dropdownMatchSelectWidth","handleLowerLimitChange","handleLimitChange","handleUpperLimitChange","minWidth","defaultValue","annotationGroups","onAnnotationGroupVisibilityChange","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupStyleChange","hasValueType","valueType","getROIs","measurementsItem","measurementGroupItems","observerType","trackingUIDItem","algorithmNameItem","algorithmVersionItem","regionItem","ReferencedFrameOfReferenceUID","coordinates","GraphicData","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","containerAttrs","specimenAttrs","observerAttrs","id","attrs","xPosition","yPosition","left","backgroundColor","minHeight","attr","roiUid","user","app","SpecimenDescriptionSequence","observer","refSpecimen","debug","sr","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","generatedReport","evidence","data","seriesNumber","seriesDescription","sopInstanceUID","instanceNumber","manufacturer","previousVersions","subscribe","_broadcastEvent","_unsubscribe","_isValidEvent","listenerId","subscription","listeners","unsubscribe","EVENTS","callbackProps","hasListeners","hasCallbacks","listener","defaultInstances","instances","instancesMap","SeriesNumber","SeriesDescription","SeriesDate","SeriesTime","addInstance","newInstance","addInstances","newInstances","len","instance","getInstance","StudyDescription","NumInstances","ModalitiesInStudy","isLoaded","addInstanceToSeries","addInstancesToSeries","createSeriesMetadata","setSeriesMetadata","seriesMetadata","existingSeries","assign","STUDY_ADDED","INSTANCES_ADDED","SERIES_ADDED","SERIES_UPDATED","_model","studies","_getStudy","aStudy","_getSeries","study","aSeries","BaseImplementation","dicomJSONDatasetOrP10ArrayBuffer","dicomJSONDataset","naturalizedDataset","ArrayBuffer","dict","createStudyMetadata","madeInClient","updateSeriesMetadata","addSeriesMetadata","seriesSummaryMetadata","NumberOfStudyRelatedSeries","addStudy","existingStudy","newStudy","getStudyInstanceUIDs","getStudy","getSeries","getInstanceByImageId","imageId","updateMetadataForSeries","pubSubServiceInterface","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","specimenDescription","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","showstain","overflowY","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","handleRemoval","getCurrentColors","paletteColorLookupTable","previousProps","previousState","opticalPath","opticalPathIdentifier","rgb2hex","onRemoval","illuminationWaveLength","illuminationColor","specimenDescriptions","maxValue","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","opticalPathItem","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","allowClear","AppstoreAddOutlined","defaultColor","segmentUID","newColor","algorithmName","border","borderRadius","flex","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","mappingUID","mapping","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","handleClick","text","button","Icon","isSelected","tooltip","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","hoveredRois","lastPixel","keysDown","defaultRoiStyle","roiStyles","selectionStrokeColor","selectionFillColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","then","matchedInstances","rawInstance","retrieveInstance","retrievedInstance","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","selectedPresentationStateUID","setPresentationState","presentationStates","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","activateOpticalPath","showOpticalPath","searchParams","URLSearchParams","search","pathname","replace","getRoiStyle","loadDerivedDataset","derivedDataset","Comprehensive3DSR","COMPREHENSIVE_3D_SR","ComprehensiveSR","COMPREHENSIVE_SR","MicroscopyBulkSimpleAnnotation","MICROSCOPY_BULK_SIMPLE_ANNOTATION","Segmentation","SEGMENTATION","ParametricMap","PARAMETRIC_MAP","OpticalPath","OPTICAL_PATH","AdvancedBlendingPresentationState","ColorSoftcopyPresentationState","COLOR_SOFTCOPY_PRESENTATION_STATE","GrayscaleSoftcopyPresentationState","GRAYSCALE_SOFTCOPY_PRESENTATION_STATE","PseudocolorSoftcopyPresentationState","PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE","SOPClassUID","getAllROIs","handleAnnotationVisibilityChange","getAllAnnotationGroups","handleAnnotationGroupVisibilityChange","getAllSegments","handleSegmentVisibilityChange","getAllParameterMappings","parameterMapping","handleMappingVisibilityChange","handleOpticalPathVisibilityChange","addAnnotationGroups","ann","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","forceUpdate","addSegmentations","segmentations","addSegments","getSegmentStyle","segmentColor","setSegmentStyle","createSegmentPaletteColorLookupTable","addParametricMaps","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","addAnnotations","onRoiModified","onWindowResize","onRoiDrawn","detail","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","addROI","onRoiDoubleClicked","setHoveredRoiAttributes","r","hoveredRoiAttributes","clearHoveredRois","getUniqueHoveredRois","newRoi","allRois","isSamePixelAsLast","clientX","clientY","onPointerMove","hoveredRoi","feature","originalEvent","isHoveredRoiTooltipVisible","hoveredRoiTooltipX","hoveredRoiTooltipY","getUpdatedSelectedRois","newSelectedRoiUid","selectedRoiUid","emptySelection","selectedRoi","getROI","oldSelectedRois","resetUnselectedRoiStyles","selectionState","setROIStyle","onMapClicked","updatedSelectedRois","clearSelections","onRoiSelected","handleAnnotationSelection","handleRoiSelectionCancellation","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingError","onLoadingError","onFrameLoadingEnded","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","componentCleanup","document","body","removeEventListener","onKeyUp","window","cleanup","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","componentWillUnmount","componentSetup","addEventListener","componentDidMount","hasICCProfile","metadataItem","ICCProfile","bulkdataReferences","handleAnnotationFindingSelection","_option","handleAnnotationGeometryTypeSelection","selectedGeometryType","handleAnnotationMeasurementActivation","selectedMarkup","handleAnnotationEvaluationSelection","filteredEvaluations","handleAnnotationEvaluationClearance","handleXCoordinateSelection","x","selectedXCoordinate","handleYCoordinateSelection","y","selectedYCoordinate","handleMagnificationSelection","magnification","selectedMagnification","handleSlidePositionSelection","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","point","handleSlidePositionSelectionCancellation","handleAnnotationConfigurationCompletion","geometryType","markup","activateDrawInteraction","handleAnnotationConfigurationCancellation","getOpticalPathMetadata","prevState","generateReport","handleReportVerification","storeInstances","datasets","write","handleReportCancellation","ag","log","showAnnotationGroup","hideAnnotationGroup","handleAnnotationGroupStyleChange","generateRoiStyle","strokeColor","fillColor","c","handleRoiStyleChange","showSegment","hideSegment","handleSegmentStyleChange","customizedSegmentColors","showParameterMapping","hideParameterMapping","handleMappingStyleChange","setParameterMappingStyle","handleOpticalPathStyleChange","handleOpticalPathActivityChange","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","handlePresentationStateReset","urlPath","handlePresentationStateSelection","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areRoisHidden","showROIs","hideROIs","zoomToROI","handleAnnotationGroupSelection","getSeriesDescription","DicomMetadataStore","handleICCProfilesToggle","isICCProfilesEnabled","toggleICCProfiles","formatAnnotation","getDataFromViewer","allAnnotationGroups","filteredAnnotationGroups","referencedSeriesInstanceUID","getReport","getAnnotationMenuItems","getFindingOptions","getAnnotationConfigurations","geometryTypeOptionsMapping","getGeometryTypeOptionsMapping","defaultActiveFirstOption","onClear","getSpecimenMenu","getEquipmentMenu","getOpticalPathMenu","opticalPathMetadata","getPresentationStateMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","getSegmentationMenu","getSegmentMetadata","number","finalColor","currentColor","colorsMatch","styleError","getParametricMapMenu","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","getAnnotationGroupMenu","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","annotationGroupsBySeries","seriesUID","dropdownOptions","selectedSeriesAnnotationGroups","paddingRight","getToolbar","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","getCursor","getSelectedRoiInformation","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","getICCProfilesMenu","getICCProfiles","margin","getOpenSubMenuItems","hasSider","geometryTypes","boundingBox","isOpticalPathVisible","isOpticalPathActive","otherROI","roiAsAnnotation","box","polygon","line","freehandpolygon","freehandline","naturalizeDataset","findSeriesSlide","ParametrizedSlideViewer","selectedSlide","setSelectedSlide","setDerivedDataset","seriesSlide","findReferencedSlide","allClients","storageClass","naturalizedSeriesMetadata","ReferencedSeriesSequence","referencedSlide","imageLibrary","contentItem","presentationStateUID","stateParam","viewer","volumeInstances","clinicalTrialMenu","seriesFragment","borderRight","borderRightWidth","path","element","DicomMetaDictionary","formatValue","val","getRows","depth","keywords","flatMap","keyword","tagInfo","nameMap","match","tag","vr","sequenceItems","sequenceNode","getSortedTags","setStudy","displaySets","setDisplaySets","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","expandedKeys","setExpandedKeys","searchInput","setSearchInput","debouncedSearchValue","delay","debouncedValue","setDebouncedValue","timer","clearTimeout","useDebounce","handler","seriesAddedSubscription","instancesAddedSubscription","derivedDisplaySets","processedSeries","ds","displaySetInstanceUID","displaySetList","displaySet","displayDate","dateStr","hour","minute","second","monthNum","parseInt","dayNum","date","getMonth","getDate","weekday","toLocaleDateString","monthName","dayFormatted","yearNum","getFullYear","formatDicomDate","showInstanceList","instanceSliderMarks","totalInstances","tableData","transformTagsToTableData","tags","parentKey","keyBase","currentKey","InstanceNumber","filteredData","searchLower","toLowerCase","matchedKeys","nodeMatches","node","findMatchingPaths","parentPath","currentPath","matchingPaths","child","childPaths","filtered","reconstructTree","paths","nodesAtLevel","className","gap","marginBottom","strong","optionLabelProp","optionFilterProp","marks","formatter","SearchOutlined","columns","dataIndex","dataSource","pagination","expandable","expandedRowKeys","onExpandedRowsChange","scroll","isValidServerUrl","url","trimmedUrl","trim","urlObj","URL","protocol","startsWith","TypeError","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleDicomTagBrowserButtonClick","innerWidth","handleDebugButtonClick","errorMsgs","Authentication","Communication","EncodingDecoding","Visualization","errorNum","errorObj","warncount","Panel","Collapse","showErrorCount","errcount","uuidv4","warnings","handleServerSelectionButtonClick","isServerSelectionModalVisible","handleServerSelectionInput","currentTarget","selectedServerUrl","isServerSelectionDisabled","handleServerSelectionCancellation","cachedServerUrl","localStorage","getItem","serverSelectionMode","handleServerSelectionModeChange","handleServerSelection","setItem","onServerSelection","closeModal","cachedMode","prevProps","worklistButton","userMenuItems","onUserLogout","userMenu","menu","trigger","UserOutlined","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","debugButton","dicomTagBrowserButton","FileSearchOutlined","showServerSelectionButton","ApiOutlined","default","baseURL","defaultClients","urlInfo","textOverflow","flexWrap","flexShrink","src","process","alt","subTitle","getRowKey","record","defaultPageSize","fetchData","limit","searchCriteria","fuzzymatching","searchOptions","searchForStudies","handleChange","filters","pageSize","handleSearch","confirm","handleReset","clearFilters","handleRowProps","handlePressEnter","getFilterPressEnterHandler","getFilterSearchHandler","getFilterResetHandler","getColumnSearchProps","filterDropdown","setSelectedKeys","Worklist","getFilterInputChangeHandler","filterIcon","numStudies","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","onRow","loading","handleInputChange","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","status","errorMessage","attemptFailedError","DicomWebManager","stores","handleError","updateHeaders","fields","f","headers","retrieveStudyMetadata","studySummaryMetadata","naturalized","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","shouldUpgradeInsecure","upgradeInsecureRequests","qidoPathPrefix","wadoPathPrefix","stowPathPrefix","qidoURLPrefix","wadoURLPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","read","dwc","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","auth","handleDICOMwebError","logServerError","errorMessages","setting","Authorization","storedPath","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","addGcpSecondaryAnnotationServer","gcpBaseUrl","storageClassMapping","storageClasses","pathUrl","server","_createClientMapping","wasAuthSuccessful","serverId","tmpClient","redirectTo","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}