{"version":3,"file":"static/js/884.3937e812.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","utils/router.tsx","components/SlideViewer.tsx","data/slides.tsx","components/CaseViewer.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Gender',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          metadata: metadata,\n          resizeFactor: 1\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n    const attributes = []\n    const description = this.props.slide.description\n    if (description != null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ height: '100px' }} ref={this.overviewViewportRef} />\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: ({ roiUID }: { roiUID: string }) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection({ roiUID: object.key })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState({\n      currentStyle: {\n        opacity: value,\n        color: this.state.currentStyle.color,\n        limitValues: this.state.currentStyle.limitValues\n      }\n    })\n  }\n\n  handleColorRChange (\n    value: number | number[]\n  ): void {\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[]\n  ): void {\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[]\n  ): void {\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number\n  ): void {\n    if (this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number\n  ): void {\n    if (this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value != null && option.children != null) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const measurementOptions = measurementsSequence.map((measurementItem, i) => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      return (\n        <Select.Option\n          key={i}\n          value={`${name.CodingSchemeDesignator}-${name.CodeValue}`}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    })\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        {}\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>\n            Color\n          </Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Red\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Green\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Blue\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues != null) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>\n            Exploration\n          </Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>\n              Measurement\n            </Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible = (\n      this.state.isVisible && this.state.currentStyle.measurement == null\n    )\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Badge\n            offset={[-20, 20]}\n            count={' '}\n            style={{\n              borderStyle: 'solid',\n              borderWidth: '1px',\n              borderColor: 'gray',\n              visibility: isBadgeVisible ? 'visible' : 'hidden',\n              backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n            }}\n          >\n            <Description\n              header={this.props.annotationGroup.label}\n              attributes={attributes}\n              selectable\n              hasLongValues\n            />\n          </Badge>\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<AnnotationGroupListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    throw new Error(\n      'Content item \"Imaging Measurements\" not found.' +\n      'Content of Comprehensive 3D SR document is not structured based on ' +\n      'TID 1500 \"Measurement Report\".'\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Tracking Unique Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Finding\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Image Region\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: dmv.scoord3d.Scoord3D\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        throw new Error(\n          'Content item \"Image Region\" has unknown graphic type ' +\n          `\"${regionItem.GraphicType}\". ` +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen UID\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen Container Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { opacity: value }\n    })\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: value,\n        limitValues: state.currentStyle.limitValues\n      }\n    }))\n  }\n\n  handleColorRChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    specimenDescriptions.forEach(description => {\n      const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] = (\n        description.SpecimenPreparationSequence ?? []\n      )\n      specimenPreparationSteps.forEach(\n        (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n          step.SpecimenPreparationStepContentItemSequence.forEach((\n            item: (\n              dcmjs.sr.valueTypes.CodeContentItem |\n              dcmjs.sr.valueTypes.TextContentItem |\n              dcmjs.sr.valueTypes.UIDRefContentItem |\n              dcmjs.sr.valueTypes.PNameContentItem |\n              dcmjs.sr.valueTypes.DateTimeContentItem\n            ),\n            index: number\n          ) => {\n            const name = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptNameCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n            })\n            if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n              item = item as dcmjs.sr.valueTypes.CodeContentItem\n              const value = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptCodeSequence[0].CodeValue,\n                schemeDesignator:\n                  item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptCodeSequence[0].CodeMeaning\n              })\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                  attributes.push({\n                    name: 'Tissue stain',\n                    value: value.CodeMeaning\n                  })\n                }\n              }\n            } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n              item = item as dcmjs.sr.valueTypes.TextContentItem\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                  attributes.push({\n                    name: 'Tissue stain',\n                    value: item.TextValue\n                  })\n                }\n              }\n            }\n          })\n        }\n      )\n    })\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      mappingUID: this.props.mapping.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState(state => ({\n      currentStyle: {\n        opacity: value\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      segmentUID: this.props.segment.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState({ currentStyle: { opacity: value } })\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","import React from 'react'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  Descriptions,\n  Divider,\n  InputNumber,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space,\n  Tooltip\n} from 'antd'\nimport {\n  UndoOutlined,\n  CheckOutlined,\n  StopOutlined\n} from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Equipment from './Equipment'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { findContentItemsByName } from '../utils/sr'\nimport { RouteComponentProps, withRouter } from '../utils/router'\n\nconst DEFAULT_ROI_STROKE_COLOR: number[] = [0, 126, 163]\nconst DEFAULT_ROI_FILL_COLOR: number[] = [0, 126, 163, 0.2]\nconst DEFAULT_ROI_STROKE_WIDTH: number = 2\nconst DEFAULT_ROI_RADIUS: number = 5\n\nconst _buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    console.warn(`no finding found for ROI ${roi.uid}`)\n    return\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: DEFAULT_ROI_STROKE_COLOR,\n    width: DEFAULT_ROI_STROKE_WIDTH\n  }\n  if (style.stroke != null) {\n    if (style.stroke.color != null) {\n      stroke.color = style.stroke.color\n    }\n    if (style.stroke.width != null) {\n      stroke.width = style.stroke.width\n    }\n  }\n  const fill = {\n    color: DEFAULT_ROI_FILL_COLOR\n  }\n  if (style.fill != null) {\n    if (style.fill.color != null) {\n      fill.color = style.fill.color\n    }\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius != null\n          ? style.radius\n          : Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n\nconst _constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      preload: preload\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical'\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    message.error('Failed to instantiate viewer')\n    throw error\n  }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface Measurement {\n  name: dcmjs.sr.coding.CodedConcept\n  value?: number\n  unit: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload?: boolean\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n}\n\ninterface SlideViewerState {\n  visibleRoiUIDs: Set<string>\n  visibleSegmentUIDs: Set<string>\n  visibleMappingUIDs: Set<string>\n  visibleAnnotationGroupUIDs: Set<string>\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  selectedRoi?: dmv.roi.ROI\n  selectedRoiUIDs: Set<string>\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isSelectedRoiModalVisible: boolean\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  isGoToModalVisible: boolean\n  isSelectedMagnificationValid: boolean\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  selectedXCoordinate?: number\n  validXCoordinateRange: number[]\n  selectedYCoordinate?: number\n  validYCoordinateRange: number[]\n  selectedMagnification?: number\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n  loadingFrames: Set<string>\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private readonly selectionColor: number[] = [140, 184, 198]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\n    fill: { color: [...this.selectionColor, 0.2] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = _formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n\n    this.onWindowResize = this.onWindowResize.bind(this)\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleRoiSelectionCancellation = this.handleRoiSelectionCancellation.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleGoTo = this.handleGoTo.bind(this)\n    this.handleXCoordinateSelection = this.handleXCoordinateSelection.bind(this)\n    this.handleYCoordinateSelection = this.handleYCoordinateSelection.bind(this)\n    this.handleMagnificationSelection = this.handleMagnificationSelection.bind(this)\n    this.handleSlidePositionSelection = this.handleSlidePositionSelection.bind(this)\n    this.handleSlidePositionSelectionCancellation = this.handleSlidePositionSelectionCancellation.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n\n    const { volumeViewer, labelViewer } = _constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set()\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current != null) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        if (this.labelViewportRef.current != null) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance, index) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                this.props.selectedPresentationStateUID == null\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error('Presentation State could not be loaded')\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Presentation State could not be loaded')\n      console.error(error)\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID != null\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key == null) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotations = (): void => {\n    console.info('search for Comprehensive 3D SR instances')\n    const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach(i => {\n        const { dataset } = dmv.metadata.formatMetadata(i)\n        const instance = dataset as dmv.metadata.Instance\n        if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n          console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n          client.retrieveInstance({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: instance.SeriesInstanceUID,\n            sopInstanceUID: instance.SOPInstanceUID\n          }).then((retrievedInstance): void => {\n            const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n            const { dataset } = dmv.metadata.formatMetadata(data.dict)\n            const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n            /*\n             * Perform a couple of checks to ensure the document content of the\n             * report fullfils the requirements of the application.\n             */\n            if (!_implementsTID1500(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it is not structured according to template ' +\n                'TID 1500 \"MeasurementReport\"'\n              )\n              return\n            }\n            if (!_describesSpecimenSubject(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not describe a specimen subject'\n              )\n              return\n            }\n            if (!_containsROIAnnotations(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not contain any suitable ROI annotations'\n              )\n              return\n            }\n\n            const content = new MeasurementReport(report)\n            content.ROIs.forEach(roi => {\n              console.info(`add ROI \"${roi.uid}\"`)\n              const scoord3d = roi.scoord3d\n              const image = this.props.slide.volumeImages[0]\n              if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                /*\n                 * ROIs may get assigned new UIDs upon re-rendering of the\n                 * page and we need to ensure that we don't add them twice.\n                 * The same ROI may be stored in multiple SR documents and\n                 * we don't want them to show up twice.\n                 * TODO: We should probably either \"merge\" measurements and\n                 * quantitative evaluations or pick the ROI from the \"best\"\n                 * available report (COMPLETE and VERIFIED).\n                 */\n                const doesROIExist = this.volumeViewer.getAllROIs().some(\n                  (otherROI: dmv.roi.ROI): boolean => {\n                    return _areROIsEqual(otherROI, roi)\n                  }\n                )\n                if (!doesROIExist) {\n                  try {\n                    // Add ROI without style such that it won't be visible.\n                    this.volumeViewer.addROI(roi, {})\n                  } catch {\n                    console.error(`could not add ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                }\n              } else {\n                console.debug(\n                  `skip ROI \"${roi.uid}\" ` +\n                  `of SR document \"${report.SOPInstanceUID}\"` +\n                  'because it is defined in another frame of reference'\n                )\n              }\n            })\n          }).catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            message.error('Annotations could not be loaded')\n            console.error(\n              'failed to load ROIs ' +\n              `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n              `of series \"${instance.SeriesInstanceUID}\" ` +\n              `of study \"${this.props.studyInstanceUID}\": `,\n              error\n            )\n          })\n          /*\n           * React is not aware of the fact that ROIs have been added via the\n           * viewer (the viewport is a ref object) and won't show the\n           * annotations in the user interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Annotations could not be loaded')\n      console.error(error)\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = (): void => {\n    console.info('search for Microscopy Bulk Simple Annotations instances')\n    const client = this.props.clients[\n      StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n    ]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'ANN'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          let annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[]\n          annotations = retrievedMetadata.map(metadata => {\n            return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n              metadata\n            })\n          })\n          annotations = annotations.filter(ann => {\n            const refImage = this.props.slide.volumeImages[0]\n            return (\n              ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              ann.ContainerIdentifier === refImage.ContainerIdentifier\n            )\n          })\n          annotations.forEach(ann => {\n            try {\n              this.volumeViewer.addAnnotationGroups(ann)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error(\n                'Microscopy Bulk Simple Annotations cannot be displayed.'\n              )\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              console.error('failed to add annotation groups: ', error)\n            }\n            ann.AnnotationGroupSequence.forEach(item => {\n              const annotationGroupUID = item.AnnotationGroupUID\n              const finding = item.AnnotationPropertyTypeCodeSequence[0]\n              const key = _buildKey(finding)\n              const style = this.roiStyles[key]\n              // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n              if (style != null && style.fill != null) {\n                this.volumeViewer.setAnnotationGroupStyle(\n                  annotationGroupUID,\n                  { color: style.fill.color }\n                )\n              }\n            })\n          })\n          /*\n           * React is not aware of the fact that annotation groups have been\n           * added via the viewer (the underlying HTML viewport element is a\n           * ref object) and won't show the annotation groups in the user\n           * interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n            'instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of ' +\n            'Microscopy Bulk Simple Annotations instances: ',\n            error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error(\n        'Search for Microscopy Bulk Simple Annotations instances failed.'\n      )\n      console.error(\n        'failed to search for Microscopy Bulk Simple Annotations instances: ',\n        error\n      )\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = (): void => {\n    console.info('search for Segmentation instances')\n    const client = this.props.clients[StorageClasses.SEGMENTATION]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SEG'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach((s, i) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const segmentations: dmv.metadata.Segmentation[] = []\n          retrievedMetadata.forEach(metadata => {\n            const seg = new dmv.metadata.Segmentation({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              seg.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              segmentations.push(seg)\n            }\n          })\n          if (segmentations.length > 0) {\n            try {\n              this.volumeViewer.addSegments(segmentations)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error('Segmentations cannot be displayed')\n              console.error('failed to add segments: ', error)\n            }\n            /*\n           * React is not aware of the fact that segments have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the segments in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Segmentation instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of Segmentation instances: ',\n            error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Search for Segmentation instances failed.')\n      console.error('failed to search for Segmentation instances: ', error)\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = (): void => {\n    console.info('search for Parametric Map instances')\n    const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'OT'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const parametricMaps: dmv.metadata.ParametricMap[] = []\n          retrievedMetadata.forEach(metadata => {\n            const pm = new dmv.metadata.ParametricMap({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              pm.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              parametricMaps.push(pm)\n            } else {\n              console.warn(\n                `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n              )\n            }\n          })\n          if (parametricMaps.length > 0) {\n            try {\n              this.volumeViewer.addParameterMappings(parametricMaps)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error('Parametric Map cannot be displayed')\n              console.error('failed to add mappings: ', error)\n            }\n            /*\n           * React is not aware of the fact that mappings have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the mappings in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Parametric Map instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of Parametric Map instances: ', error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Search for Parametric Map instances failed.')\n      console.error('failed to search for Parametric Map instances: ', error)\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    this.addAnnotations()\n    this.addAnnotationGroups()\n    this.addSegmentations()\n    this.addParametricMaps()\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer != null) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi != null) {\n      console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n      this.volumeViewer.setROIStyle(selectedRoi.uid, this.selectedRoiStyle)\n      const key = _getRoiKey(selectedRoi)\n      this.volumeViewer.getAllROIs().forEach((roi) => {\n        if (roi.uid !== selectedRoi.uid) {\n          this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n        }\n      })\n      this.setState({\n        selectedRoiUIDs: new Set([selectedRoi.uid]),\n        selectedRoi: selectedRoi,\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        selectedRoi: undefined,\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  handleRoiSelectionCancellation (): void {\n    this.setState({\n      isSelectedRoiModalVisible: false,\n      selectedRoiUIDs: new Set()\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray != null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID == null) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount (): void {\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount (): void {\n    window.addEventListener('beforeunload', this.componentCleanup)\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection (value: any): void {\n    if (value != null) {\n      const x = Number(value)\n      const start = this.state.validXCoordinateRange[0]\n      const end = this.state.validXCoordinateRange[1]\n      if (x >= start && x <= end) {\n        this.setState({\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedXCoordinate: undefined,\n      isSelectedXCoordinateValid: false\n    })\n  }\n\n  handleYCoordinateSelection (value: any): void {\n    if (value != null) {\n      const y = Number(value)\n      const start = this.state.validYCoordinateRange[0]\n      const end = this.state.validYCoordinateRange[1]\n      if (y >= start && y <= end) {\n        this.setState({\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedYCoordinate: undefined,\n      isSelectedYCoordinateValid: false\n    })\n  }\n\n  handleMagnificationSelection (value: any): void {\n    if (value != null) {\n      if (value > 0 && value <= 40) {\n        this.setState({\n          selectedMagnification: Number(value),\n          isSelectedMagnificationValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedMagnification: undefined,\n      isSelectedMagnificationValid: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection (): void {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n      this.state.selectedXCoordinate != null &&\n      this.state.selectedYCoordinate != null &&\n      this.state.selectedMagnification != null\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation (): void {\n    console.log('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      isSelectedMagnificationValid: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      console.error('could not complete annotation configuration')\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    // Metadata should be sorted such that the image with the highest\n    // resolution is the last item in the array.\n    const refImage = metadata[metadata.length - 1]\n    // We assume that there is only one specimen (tissue section) per\n    // ontainer (slide). Only the tissue section is tracked with a unique\n    // identifier, even if the section may be composed of different biological\n    // samples.\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\n      console.error('more than one specimen has been described for the slide')\n    }\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n    console.debug('create Observation Context')\n    let observer\n    if (this.props.user !== undefined) {\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: this.props.user.name,\n        loginName: this.props.user.email\n      })\n    } else {\n      console.warn('no user information available')\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: 'ANONYMOUS'\n      })\n    }\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121006',\n          schemeDesignator: 'DCM',\n          meaning: 'Person'\n        }),\n        observerIdentifyingAttributes: observer\n      }),\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121007',\n          schemeDesignator: 'DCM',\n          meaning: 'Device'\n        }),\n        observerIdentifyingAttributes:\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\n            uid: this.props.app.uid,\n            manufacturerName: 'MGH Computational Pathology',\n            modelName: this.props.app.name\n          })\n      }),\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\n          value: '121027',\n          schemeDesignator: 'DCM',\n          meaning: 'Specimen'\n        }),\n        subjectClassSpecificContext:\n          new dcmjs.sr.templates.SubjectContextSpecimen({\n            uid: refSpecimen.SpecimenUID,\n            identifier: refSpecimen.SpecimenIdentifier,\n            containerIdentifier: refImage.ContainerIdentifier\n          })\n      })\n    })\n\n    console.debug('encode Imaging Measurements')\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\n    for (let i = 0; i < rois.length; i++) {\n      const roi = rois[i]\n      if (!this.state.visibleRoiUIDs.has(roi.uid)) {\n        continue\n      }\n      let findingType = roi.evaluations.find(\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n        }\n      )\n      if (findingType === undefined) {\n        throw new Error(`No finding type was specified for ROI \"${roi.uid}\"`)\n      }\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.properties.trackingUID ?? roi.uid,\n          identifier: `ROI #${i + 1}`\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: findingType.ConceptCodeSequence[0].CodeValue,\n          schemeDesignator:\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n        }),\n        qualitativeEvaluations: roi.evaluations.filter(\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n          }\n        ),\n        measurements: roi.measurements\n      })\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\n      measurements[0].ContentTemplateSequence = [{\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }]\n      imagingMeasurements.push(...measurements)\n    }\n\n    console.debug('create Measurement Report document content')\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\n      observationContext: observationContext,\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\n        value: '112703',\n        schemeDesignator: 'DCM',\n        meaning: 'Whole Slide Imaging'\n      }),\n      imagingMeasurements: imagingMeasurements\n    })\n\n    console.info('create Comprehensive 3D SR document')\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n      content: measurementReport[0],\n      evidence: [refImage],\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      seriesNumber: 1,\n      seriesDescription: 'Annotation',\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      instanceNumber: 1,\n      manufacturer: 'MGH Computational Pathology',\n      previousVersions: undefined // TODO\n    })\n\n    this.setState({\n      isReportModalVisible: true,\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Annotations could not be saved')\n        console.error(error)\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when an annotation has been selected from the\n   * current list of annotations.\n   */\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\n    console.log(`selected ROI ${roiUID}`)\n    this.setState({ selectedRoiUIDs: new Set([roiUID]) })\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (roi.uid === roiUID) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Failed to show annotation group.')\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void {\n    console.log(`change style of annotation group ${annotationGroupUID}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        annotationGroupUID,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Failed to change style of annotation group.')\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState (): void {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState != null) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Presentation State could not be found')\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (this.volumeViewer.areROIsVisible) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    annotationGroups.push(...this.volumeViewer.getAllAnnotationGroups())\n\n    const openSubMenuItems = [\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\n    ]\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map(finding => {\n      return (\n        <Select.Option\n          key={finding.CodeValue}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach(evaluation => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={code.CodeValue}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const equipmentMenu = (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach(instance => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={instance.SOPInstanceUID}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={null}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          {}\n        </Select.Option>\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={<UndoOutlined />}\n                type='primary'\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametric-maps')\n    }\n\n    let annotationGroupMenu\n    if (annotationGroups.length > 0) {\n      const defaultAnnotationGroupStyles: {\n        [annotationGroupUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const annotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    const annotationTools = [\n      <Button\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Button\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Button\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Button\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Button\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Button\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Button\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    let cursor = 'default'\n    if (this.state.isLoading) {\n      cursor = 'progress'\n    }\n\n    let selectedRoiInformation\n    if (this.state.selectedRoi != null) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence != null) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit != null) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      selectedRoiInformation = (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden',\n              cursor: cursor\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            visible={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {annotationConfigurations}\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isSelectedRoiModalVisible}\n            title='Selected ROI'\n            onCancel={this.handleRoiSelectionCancellation}\n            maskClosable\n            footer={null}\n          >\n            <Space align='start' direction='vertical'>\n              {selectedRoiInformation}\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isGoToModalVisible}\n            title='Go to slide position'\n            onOk={this.handleSlidePositionSelection}\n            onCancel={this.handleSlidePositionSelectionCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              <InputNumber\n                placeholder={(\n                  '[' +\n                  `${this.state.validXCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validXCoordinateRange[1]}` +\n                  ']'\n                )}\n                prefix='X Coordinate [mm]'\n                onChange={this.handleXCoordinateSelection}\n                onPressEnter={this.handleXCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedXCoordinateValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validYCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validYCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='Y Coordinate [mm]'\n                onChange={this.handleYCoordinateSelection}\n                onPressEnter={this.handleYCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedYCoordinateValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n              <InputNumber\n                placeholder='[0 - 40]'\n                prefix='Magnification'\n                onChange={this.handleMagnificationSelection}\n                onPressEnter={this.handleMagnificationSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedMagnificationValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n            onOpenChange={() => {\n              // Give menu item time to render before updating viewer size\n              setTimeout(\n                () => {\n                  if (this.labelViewer != null) {\n                    this.labelViewer.resize()\n                  }\n                },\n                100\n              )\n            }}\n          >\n            <Menu.SubMenu key='label' title='Slide label'>\n              <Menu.Item style={{ height: '100%' }} key='image'>\n                <div\n                  style={{ height: '220px' }}\n                  ref={this.labelViewportRef}\n                />\n              </Menu.Item>\n            </Menu.SubMenu>\n            {specimenMenu}\n            {equipmentMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID != null) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      throw new Error('Value of option \"images\" have been non-zero length.')\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID != null) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (\n        hasImageFlavor(image, ImageFlavors.VOLUME) ||\n        hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      ) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID != null) {\n          for (const identifier in opticalPathIdentifiers) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n    if (volumeImages.length === 0) {\n      throw new Error('At least one VOLUME image must be provided for a slide.')\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        throw new Error(\n          'All VOLUME images of a slide must have the same number of ' +\n          'Samples per Pixel.'\n        )\n      }\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        throw new Error(\n          'All VOLUME images of a slide must have the same number of ' +\n          'Samples per Pixel.'\n        )\n      }\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n          'image that has not been resampled per optical path'\n        )\n      }\n    }\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      throw new Error(\n        'All images of a slide must have the same Container Identifier.'\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      throw new Error(\n        'All VOLUME images of a slide must have ' +\n        'the same Frame of Reference UID.'\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          throw new Error(\n            `All VOLUME images for optical path \"${identifier}\"` +\n            'must be part of the same multi-resolution pyramid.'\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          throw new Error(\n            `The VOLUME images for optical path \"${identifier}\" ` +\n            'lack the Pyramid UID, while the images for other optical paths ' +\n            'contain it.'\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          throw new Error(\n            `The VOLUME images for optical path \"${identifier}\" ` +\n            'lack the Pyramid UID, while the images for other optical paths ' +\n            'contain it.'\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      throw new Error(\n        'All VOLUME images of a slide must be part of the same  ' +\n        'acquisition and have the same Acquisition UID.'\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) => {\n        return (\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n        )\n      })\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import React from 'react'\nimport {\n  Routes,\n  Route,\n  useLocation,\n  useParams\n} from 'react-router-dom'\nimport {\n  Layout,\n  message,\n  Menu\n} from 'antd'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide, createSlides } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { RouteComponentProps, withRouter } from '../utils/router'\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID, seriesInstanceUID } = useParams()\n  const location = useLocation()\n\n  const selectedSlide = slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string|null|undefined\n  if (!searchParams.has('access_token')) {\n    presentationStateUID = searchParams.get('state')\n    if (presentationStateUID === null) {\n      presentationStateUID = undefined\n    }\n  }\n  let viewer = null\n  if (selectedSlide != null) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\ninterface ViewerState {\n  slides: Slide[]\n  isLoading: boolean\n}\n\nclass Viewer extends React.Component<ViewerProps, ViewerState> {\n  state = {\n    slides: [],\n    isLoading: true\n  }\n\n  constructor (props: ViewerProps) {\n    super(props)\n    this.handleSeriesSelection = this.handleSeriesSelection.bind(this)\n  }\n\n  componentDidMount (): void {\n    this.fetchImageMetadata().then(\n      (metadata: dmv.metadata.VLWholeSlideMicroscopyImage[][]) => {\n        this.setState({\n          slides: createSlides(metadata),\n          isLoading: false\n        })\n      }\n    ).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error(\n        'An error occured. ' +\n          'Image metadata could not be retrieved or decoded.'\n      )\n      console.error(error)\n      this.setState({ isLoading: false })\n    })\n  }\n\n  /**\n   * Fetch metadata for VL Whole Slide Microscopy Image instances of the study.\n   *\n   * @returns Metadata of image instances of the study grouped per series\n   */\n  async fetchImageMetadata (): Promise<dmv.metadata.VLWholeSlideMicroscopyImage[][]> {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    const studyInstanceUID = this.props.studyInstanceUID\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(matchedSeries.map(async (s) => {\n      const { dataset } = dmv.metadata.formatMetadata(s)\n      const loadingSeries = dataset as dmv.metadata.Series\n      console.info(\n        `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n      )\n      const retrievedMetadata = await client.retrieveSeriesMetadata({\n        studyInstanceUID: this.props.studyInstanceUID,\n        seriesInstanceUID: loadingSeries.SeriesInstanceUID\n      })\n\n      const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n      retrievedMetadata.forEach((item, index) => {\n        if (item['00080016'] != null) {\n          const values = item['00080016'].Value\n          if (values != null) {\n            const sopClassUID = values[0]\n            if (sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE) {\n              const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n                metadata: item\n              })\n              seriesImages.push(image)\n            }\n          }\n        }\n      })\n\n      if (seriesImages.length > 0) {\n        images.push(seriesImages)\n      }\n    }))\n\n    return images\n  }\n\n  handleSeriesSelection (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ): void {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${this.props.studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n    if (\n      this.props.location.pathname.includes('/series/') &&\n      this.props.location.search != null\n    ) {\n      urlPath += this.props.location.search\n    }\n    this.props.navigate(urlPath, { replace: true })\n  }\n\n  render (): React.ReactNode {\n    if (this.state.isLoading) {\n      return null\n    }\n\n    if (this.state.slides.length === 0) {\n      return null\n    }\n    const firstSlide = this.state.slides[0] as Slide\n    const volumeInstances = firstSlide.volumeImages\n    if (volumeInstances.length === 0) {\n      return null\n    }\n    const refImage = volumeInstances[0]\n\n    /* If a series is encoded in the path, route the viewer to this series.\n     * Otherwise select the first series correspondent to\n     * the first slide contained in the study.\n     */\n    let selectedSeriesInstanceUID: string\n    if (this.props.location.pathname.includes('series/')) {\n      const fragments = this.props.location.pathname.split('/')\n      selectedSeriesInstanceUID = fragments[4]\n    } else {\n      selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n    }\n\n    let clinicalTrialMenu\n    if (refImage.ClinicalTrialSponsorName != null) {\n      clinicalTrialMenu = (\n        <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n          <ClinicalTrial metadata={refImage} />\n        </Menu.SubMenu>\n      )\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Sider\n          width={300}\n          style={{\n            height: '100%',\n            borderRight: 'solid',\n            borderRightWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n          >\n            <Menu.SubMenu key='patient' title='Patient'>\n              <Patient metadata={refImage} />\n            </Menu.SubMenu>\n            <Menu.SubMenu key='study' title='Study'>\n              <Study metadata={refImage} />\n            </Menu.SubMenu>\n            {clinicalTrialMenu}\n            <Menu.SubMenu key='slides' title='Slides'>\n              <SlideList\n                clients={this.props.clients}\n                metadata={this.state.slides}\n                selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n                onSeriesSelection={this.handleSeriesSelection}\n              />\n            </Menu.SubMenu>\n          </Menu>\n        </Layout.Sider>\n\n        <Routes>\n          <Route\n            path='/series/:seriesInstanceUID'\n            element={\n              <ParametrizedSlideViewer\n                clients={this.props.clients}\n                slides={this.state.slides}\n                preload={this.props.preload}\n                annotations={this.props.annotations}\n                enableAnnotationTools={this.props.enableAnnotationTools}\n                app={this.props.app}\n                user={this.props.user}\n              />\n            }\n          />\n        </Routes>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(Viewer)\n","import React from 'react'\nimport {\n  NavLink\n} from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Menu,\n  Modal,\n  Row,\n  Space\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  UnorderedListOutlined,\n  UserOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    this.state = {\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: true\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = <Menu items={userMenuItems} />\n      user = (\n        <Dropdown overlay={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const handleServerSelectionInput = (\n      event: React.FormEvent<HTMLInputElement>\n    ): void => {\n      const value = event.currentTarget.value\n      let isDisabled = true\n      if (value != null) {\n        try {\n          const url = new URL(value)\n          if (url.protocol.startsWith('http') && url.pathname.length > 0) {\n            isDisabled = false\n          }\n        } catch (TypeError) {}\n      }\n      this.setState({\n        selectedServerUrl: value,\n        isServerSelectionDisabled: isDisabled\n      })\n    }\n\n    const handleServerSelectionCancellation = (event: any): void => {\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const handleServerSelection = (event: any): void => {\n      const url = this.state.selectedServerUrl\n      let closeModal = false\n      if (url != null && url !== '') {\n        if (url.startsWith('http://') || url.startsWith('https://')) {\n          this.props.onServerSelection({ url })\n          closeModal = true\n        }\n      }\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: !closeModal,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row>\n            <Col>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' />\n            <Col>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          visible={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={handleServerSelection}\n          onCancel={handleServerSelectionCancellation}\n        >\n          <Input\n            placeholder='Enter base URL of DICOMweb Study Service'\n            onChange={handleServerSelectionInput}\n            onPressEnter={handleServerSelection}\n            addonAfter={\n              this.state.isServerSelectionDisabled\n                ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n            }\n          />\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport {\n  Button,\n  Input,\n  message,\n  Space,\n  Table,\n  TablePaginationConfig\n} from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map((study) => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('An error occured. Search for studies failed.')\n      console.error(error)\n    })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map((study) => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    }).catch(() => message.error('Request to search for studies failed.'))\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\n\nconst createUser = (userData: UserData): User => {\n  const profile = userData.profile\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      throw Error('Failed to obtain user \"name\" and \"email\".')\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    throw Error('Failed to obtain user profile.')\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        throw Error('Failed to obtain access token.')\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        throw Error('Failed to obtain user information.')\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        throw Error('At least one server needs to be configured.')\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        throw new Error(\n          'Either path or full URL needs to be configured for server.'\n        )\n      }\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      throw new Error('Only one store is supported for now.')\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveStudyMetadata(options)\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveSeriesMetadata(options)\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    return await this.stores[0].client.retrieveInstance(options)\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <CaseViewer\n      clients={clients}\n      user={user}\n      annotations={config.annotations}\n      preload={preload}\n      app={app}\n      enableAnnotationTools={enableAnnotationTools}\n      studyInstanceUID={studyInstanceUID}\n    />\n  )\n}\n\nfunction _createClientMapping ({ baseUri, settings, onError }: {\n  baseUri: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      storageClassMapping.default += 1\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    throw new Error(\n      'Only one default server can be configured without specification ' +\n      'of storage classes.'\n    )\n  }\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      throw new Error(\n        'Only one configured server can specify a given storage class. ' +\n        `Storage class \"${key}\" is specified by more than one ` +\n        'of the configured servers.'\n      )\n    }\n  }\n\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n    clientMapping.default = clientMapping[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n  } else {\n    const client = new DicomWebManager({ baseUri, settings, onError })\n    clientMapping.default = client\n  }\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('User is not authorized to access DICOMweb resources.')\n    }\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error('An unexpected server error occured.')\n        }\n      })\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      throw Error('At least one server needs to be configured.')\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n\n    this.state = {\n      clients: _createClientMapping({\n        baseUri,\n        settings: props.config.servers,\n        onError: this.handleDICOMwebError\n      }),\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    console.info(\n      `handle sign in of user \"${user.name}\" and ` +\n      `update authorization token \"${authorization}\"`\n    )\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath != null) {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch != null) {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error('sign-in failed ', error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Could not sign-in user.')\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path == null) {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","ClinicalTrial","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","Patient","PatientID","PatientName","PatientSex","PatientBirthDate","Study","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","SlideItem","state","isLoading","overviewViewportRef","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","console","info","ContainerIdentifier","dmv","client","clients","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","resizeFactor","render","container","resize","description","style","height","containerIdentifier","ref","seriesInstanceUIDs","SlideList","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","AnnotationItem","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","AnnotationList","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","AnnotationGroupItem","handleMeasurementSelection","handleOpacityChange","handleColorRChange","handleColorGChange","handleColorBChange","getCurrentColor","currentStyle","opacity","defaultStyle","color","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","limitValues","Array","isArray","slice","option","codeComponents","measurement","schemeDesignator","meaning","colorSettings","windowSettings","explorationSettings","AnnotationGroupSequence","findIndex","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","plain","justify","gutter","range","min","max","step","handleLowerLimitChange","handleLimitChange","handleUpperLimitChange","minWidth","defaultValue","settings","isBadgeVisible","direction","placement","content","overlayStyle","type","shape","SettingOutlined","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","AnnotationGroupList","annotationGroups","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupVisibilityChange","onAnnotationGroupStyleChange","Button","handleClick","text","button","Icon","isSelected","tooltip","Equipment","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","Error","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","Report","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","Item","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","SpecimenItem","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","SpecimenList","overflowY","OpticalPathItem","handleRemoval","getCurrentColors","paletteColorLookupTable","previousProps","previousState","opticalPath","opticalPathIdentifier","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","maxValue","Math","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","OpticalPathList","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","SeriesInstanceUID","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","MappingItem","mappingUID","mapping","MappingList","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","SegmentItem","segmentUID","segment","algorithmName","SegmentList","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","warn","_constructViewers","preload","volumeImages","labelViewer","volumeViewer","clientMapping","controls","activateSelectInteraction","labelImages","error","message","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","defaultRoiStyle","stroke","fill","image","circle","radius","roiStyles","selectionColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","rawInstance","instance","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","includes","selectedPresentationStateUID","setPresentationState","presentationStates","Object","catch","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","Set","keys","activateOpticalPath","showOpticalPath","add","searchParams","URLSearchParams","search","set","pathname","replace","getRoiStyle","addAnnotations","COMPREHENSIVE_3D_SR","SOPClassUID","templateSeq","ContentTemplateSequence","TemplateIdentifier","_implementsTID1500","subjectClassValue","retrievedConcept","expectedConcept","_describesSpecimenSubject","debug","measurementGroups","foundRegion","regions","_containsROIAnnotations","FrameOfReferenceUID","doesROIExist","getAllROIs","some","otherROI","a","b","graphicType","graphicData","s1","s2","j","_areROIsEqual","addROI","forceUpdate","addAnnotationGroups","MICROSCOPY_BULK_SIMPLE_ANNOTATION","searchForSeries","matchedSeries","s","series","retrieveSeriesMetadata","retrievedMetadata","filter","ann","refImage","finding","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","addSegmentations","SEGMENTATION","segmentations","seg","addSegments","addParametricMaps","PARAMETRIC_MAP","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","onRoiModified","onWindowResize","onRoiDrawn","detail","payload","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","onRoiSelected","selectedRoi","setROIStyle","isSelectedRoiModalVisible","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingEnded","delete","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","onKeyUp","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","isAnnotationModalVisible","isGoToModalVisible","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","annotation","geometryTypes","_formatRoiStyle","componentSetup","componentCleanup","handleRoiSelectionCancellation","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationVisibilityChange","handleAnnotationGroupVisibilityChange","handleAnnotationGroupStyleChange","handleXCoordinateSelection","handleYCoordinateSelection","handleMagnificationSelection","handleSlidePositionSelection","handleSlidePositionSelectionCancellation","handleReportVerification","handleReportCancellation","handleSegmentVisibilityChange","handleSegmentStyleChange","handleMappingVisibilityChange","handleMappingStyleChange","handleOpticalPathVisibilityChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","boundingBox","generatedReport","isSelectedMagnificationValid","isReportModalVisible","isSelectedXCoordinateValid","isSelectedYCoordinateValid","selectedXCoordinate","validXCoordinateRange","selectedYCoordinate","validYCoordinateRange","selectedMagnification","areRoisHidden","cleanup","isOpticalPathVisible","isOpticalPathActive","document","body","removeEventListener","window","addEventListener","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","target","selectedMarkup","filteredEvaluations","x","Number","start","end","y","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","position","point","log","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","observer","refSpecimen","user","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","app","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","find","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","evidence","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","getROI","showAnnotationGroup","hideAnnotationGroup","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","sort","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areROIsVisible","hideROIs","showROIs","getAllSegments","getAllParameterMappings","getAllAnnotationGroups","annotationMenuItems","openSubMenuItems","geometryTypeOptionsMapping","box","polygon","line","freehandpolygon","freehandline","annotationConfigurations","defaultActiveFirstOption","onClear","specimenMenu","equipmentMenu","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","selectedRoiInformation","cursor","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","hasSider","overflow","visible","onOk","onCancel","okText","maskClosable","footer","placeholder","prefix","onPressEnter","addonAfter","CheckOutlined","StopOutlined","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","setTimeout","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","areSameAcquisition","AcquisitionUID","Slide","options","acquisitionUID","opticalPathIdentifiers","pyramidUIDs","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","THUMBNAIL","PyramidUID","samplesPerPixel","SamplesPerPixel","requirePyramidUID","PhotometricInterpretation","createSlides","slideMetadata","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","imgA","imgB","ParametrizedSlideViewer","presentationStateUID","selectedSlide","get","viewer","Viewer","handleSeriesSelection","fetchImageMetadata","StudyInstanceUID","Promise","all","loadingSeries","seriesImages","volumeInstances","clinicalTrialMenu","borderRight","borderRightWidth","path","element","Header","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleServerSelectionButtonClick","isServerSelectionModalVisible","isServerSelectionDisabled","worklistButton","userMenuItems","onUserLogout","userMenu","overlay","trigger","UserOutlined","e","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","showServerSelectionButton","ApiOutlined","handleServerSelection","url","selectedServerUrl","closeModal","startsWith","onServerSelection","src","process","alt","margin","flex","currentTarget","isDisabled","URL","protocol","TypeError","display","alignItems","justifyContent","subTitle","Worklist","defaultPageSize","handleSearch","confirm","dataIndex","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","marginBottom","SearchOutlined","filterIcon","filtered","fetchData","handleChange","studies","numStudies","pageSize","searchOptions","ModalitiesInStudy","searchForStudies","study","limit","searchCriteria","fuzzymatching","pagination","filters","columns","String","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","record","dataSource","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","args","apply","status","errorMessage","attemptFailedError","open","DicomWebManager","onError","stores","handleError","updateHeaders","fields","f","headers","reject","retrieveStudyMetadata","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","qidoPathPrefix","qidoURLPrefix","wadoPathPrefix","wadoURLPrefix","stowPathPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","errorInterceptor","read","dwc","baseURL","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","_createClientMapping","storageClassMapping","default","storageClasses","server","App","auth","handleDICOMwebError","errorMessages","setting","Authorization","storedPath","localStorage","getItem","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","duration","wasAuthSuccessful","tmpClient","redirectTo","setItem","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}