{"version":3,"file":"static/js/565.397fe53f.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","utils/PubSub.js","utils/CustomError.js","services/NotificationMiddleware.js","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","utils/router.tsx","components/SlideViewer.tsx","data/slides.tsx","components/CaseViewer.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Gender',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","// Use symbols to prevent exposing private attributes\nconst _subscriptions = Symbol('subscriptions')\nconst _lastSubscriptionId = Symbol('lastSubscriptionId')\n\n/**\n * Class to enable implementation of publish/subscribe pattern\n * @class\n * @classdesc Enables publishing/subscribing\n */\nexport default class PubSub {\n  constructor() {\n    this[_subscriptions] = {}\n    this[_lastSubscriptionId] = 0\n  }\n\n  /**\n   * Adds a subscription callback to the provided event name\n   * @param {string} eventName Event name that will trigger the callback\n   * @param {Function} callback Function to be executed when event is published\n   * @returns {void}\n   */\n  subscribe(eventName, callback) {\n    if (eventName === undefined) {\n      throw new Error('Trying to subscribe to an inexistent event')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('The provided callback must be a function')\n    }\n\n    if (!this[_subscriptions].hasOwnProperty(eventName)) {\n      this[_subscriptions][eventName] = {}\n    }\n\n    const subscriptionId = `sub${this[_lastSubscriptionId]++}`\n    this[_subscriptions][eventName][subscriptionId] = callback\n  }\n\n  /**\n   * Removes a subscription callback for the provided event name\n   * @param {string} eventName Event name for the registerd callback\n   * @param {Function} [callback] Function to have its subscription removed\n   * @returns {void}\n   */\n  unsubscribe(eventName, callback) {\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (let subscriptionId in callbacks) {\n      if (!callback) {\n        delete callbacks[subscriptionId]\n      } else if (callbacks[subscriptionId] === callback) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n\n  /**\n   * Trigger all registered subscription callbacks for a specific event name\n   * @param {String} eventName Event name to trigger subscriptions from\n   * @param {any} [payload] Payload that will be passed to the callback fuction\n   * @returns {void}\n   */\n  publish(eventName, ...payload) {\n    if (eventName === undefined) {\n      throw new Error('Trying to publish an inexistent event')\n    }\n\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (let subscriptionId in callbacks) {\n      callbacks[subscriptionId](...payload)\n    }\n  }\n\n  /**\n   * Cleares all subscriptions for current instance\n   * @returns {void}\n   */\n  unsubscribeFromAll() {\n    for (let eventName in this[_subscriptions]) {\n      const callbacks = this[_subscriptions][eventName]\n      for (let subscriptionId in callbacks) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n}\n","const errorTypes = {\n  AUTHENTICATION: 'Authentication',\n  COMMUNICATION: 'Communication',\n  ENCODINGANDDECODING: 'EncodingDecoding',\n  VISUALIZATION: 'Visualization'\n}\n\nclass CustomError extends Error {\n    constructor(type, message) {\n      super();\n      this.message = message;\n      this.stack = new Error().stack;\n      this.type = type\n    }\n}\n  \nexport {errorTypes, CustomError};","import PubSub from '../utils/PubSub'\nimport { notification } from 'antd'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nexport const NotificationMiddlewareEvents = {\n  OnError: 'onError'\n}\n\nexport const NotificationMiddlewareContext = {\n  DICOMWEB: 'dicomweb-client',\n  DMV: 'dicom-microscopy-viewer',\n  DCMJS: 'dcmjs',\n  SLIM: 'slim',\n  AUTH: 'authentication'\n}\n\nconst NotificationType = {\n  TOAST: 'toast',\n  CONSOLE: 'console'\n}\n\n/* Sources of Error:\n  1. 'dicomweb-client': Error while requesting/fetching data, tagged as 'Communication'\n  2. 'slim' and 'dicom-microscopy-viewer' library: Error related to dicom data encoding/decoding,\n  could directly/indirectly impact image-related visualization, tagged as 'Visualization' or\n  'Encoding/Decoding' accordingly\n  3. 'dcmjs' library: Data parsing error, tagged as 'DICOMError'\n  4. 'authentication': Error during user authentication, tagged as 'Authentication'\n  */\nconst NotificationSourceDefinition = {\n  sources: [\n    {\n      category: errorTypes.AUTHENTICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.COMMUNICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.VISUALIZATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.ENCODINGANDDECODING,\n      notificationType: NotificationType.CONSOLE\n    }\n  ]\n}\n\nclass NotificationMiddleware extends PubSub {\n\n  /**\n * Error handling middleware function\n *\n * @param source - source of error - dicomweb-client, dmv, dcmjs or slim itself\n * @param error - error object\n */\n  onError (source, error) {\n    const errorCategory = error.type;\n    const sourceConfig = NotificationSourceDefinition.sources.find(\n      s => s.category === errorCategory\n    )\n    const { notificationType } = sourceConfig\n\n    this.publish(NotificationMiddlewareEvents.OnError, {\n      source,\n      error\n    })\n\n    let notificationMsg\n    if (error instanceof CustomError) {\n      notificationMsg = error.message\n    } else {\n      notificationMsg = String(error)\n    }\n\n    switch (notificationType) {\n      case NotificationType.TOAST:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        return notification.error({\n          message: `${errorCategory} error`,\n          description: notificationMsg,\n          duration: 3\n        })\n\n      case NotificationType.CONSOLE:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        return\n\n      default:\n        return\n    }\n  }\n}\n\nexport default new NotificationMiddleware()\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          metadata: metadata,\n          resizeFactor: 1,\n          errorInterceptor: (error: CustomError) =>\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.DMV,\n              error\n            )\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n    const attributes = []\n    const description = this.props.slide.description\n    if (description != null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ height: '100px' }} ref={this.overviewViewportRef} />\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: ({ roiUID }: { roiUID: string }) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection({ roiUID: object.key })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color,\n          limitValues: this.state.currentStyle.limitValues\n        }\n      })\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value != null && option.children != null) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const measurementOptions = measurementsSequence.map((measurementItem, i) => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      return (\n        <Select.Option\n          key={i}\n          value={`${name.CodingSchemeDesignator}-${name.CodeValue}`}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    })\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        {}\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>\n            Color\n          </Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Red\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Green\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Blue\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues != null) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>\n            Exploration\n          </Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>\n              Measurement\n            </Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible = (\n      this.state.isVisible && this.state.currentStyle.measurement == null\n    )\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Badge\n            offset={[-20, 20]}\n            count={' '}\n            style={{\n              borderStyle: 'solid',\n              borderWidth: '1px',\n              borderColor: 'gray',\n              visibility: isBadgeVisible ? 'visible' : 'hidden',\n              backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n            }}\n          >\n            <Description\n              header={this.props.annotationGroup.label}\n              attributes={attributes}\n              selectable\n              hasLongValues\n            />\n          </Badge>\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<AnnotationGroupListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.ENCODINGANDDECODING,\n        'Content item \"Imaging Measurements\" not found.' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\".'\n      )\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Tracking Unique Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Finding\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Image Region\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: any\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Content item \"Image Region\" has unknown graphic type ' +\n            `\"${regionItem.GraphicType}\". ` +\n            'Content of Comprehensive 3D SR document is not structured ' +\n            'based on TID 1500 \"Measurement Report\" -> ' +\n            'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n          )\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen UID\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Container Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number | null\n  ): void {\n    if (value != null) {\n      const identifier = this.props.opticalPath.identifier\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { opacity: value }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          color: state.currentStyle.color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: value,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    try {\n      specimenDescriptions.forEach(description => {\n        const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] =\n          description.SpecimenPreparationSequence ?? []\n        specimenPreparationSteps.forEach(\n          (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n            step.SpecimenPreparationStepContentItemSequence.forEach((\n              item: (\n                dcmjs.sr.valueTypes.CodeContentItem |\n                dcmjs.sr.valueTypes.TextContentItem |\n                dcmjs.sr.valueTypes.UIDRefContentItem |\n                dcmjs.sr.valueTypes.PNameContentItem |\n                dcmjs.sr.valueTypes.DateTimeContentItem\n              ),\n              index: number\n            ) => {\n              const name = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptNameCodeSequence[0].CodeValue,\n                schemeDesignator:\n                    item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n              })\n              if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n                item = item as dcmjs.sr.valueTypes.CodeContentItem\n                const value = new dcmjs.sr.coding.CodedConcept({\n                  value: item.ConceptCodeSequence[0].CodeValue,\n                  schemeDesignator:\n                      item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                  meaning: item.ConceptCodeSequence[0].CodeMeaning\n                })\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: value.CodeMeaning\n                    })\n                  }\n                }\n              } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n                item = item as dcmjs.sr.valueTypes.TextContentItem\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: item.TextValue\n                    })\n                  }\n                }\n              }\n            })\n          }\n        )\n      })\n    } catch (error: any) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DCMJS,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          error.message\n        )\n      )\n    }\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        mappingUID: this.props.mapping.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: value\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({ currentStyle: { opacity: value } })\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","import React from 'react'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  Descriptions,\n  Divider,\n  InputNumber,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space,\n  Tooltip\n} from 'antd'\nimport { UndoOutlined, CheckOutlined, StopOutlined } from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Equipment from './Equipment'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { findContentItemsByName } from '../utils/sr'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nconst DEFAULT_ROI_STROKE_COLOR: number[] = [0, 126, 163]\nconst DEFAULT_ROI_FILL_COLOR: number[] = [0, 126, 163, 0.2]\nconst DEFAULT_ROI_STROKE_WIDTH: number = 2\nconst DEFAULT_ROI_RADIUS: number = 5\n\nconst _buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    console.warn(`no finding found for ROI ${roi.uid}`)\n    return\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: DEFAULT_ROI_STROKE_COLOR,\n    width: DEFAULT_ROI_STROKE_WIDTH\n  }\n  if (style.stroke != null) {\n    if (style.stroke.color != null) {\n      stroke.color = style.stroke.color\n    }\n    if (style.stroke.width != null) {\n      stroke.width = style.stroke.width\n    }\n  }\n  const fill = {\n    color: DEFAULT_ROI_FILL_COLOR\n  }\n  if (style.fill != null) {\n    if (style.fill.color != null) {\n      fill.color = style.fill.color\n    }\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius != null\n          ? style.radius\n          : Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n\nconst _constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      annotationOptions: {\n        maxZoom: 2.8,\n      },\n      controls: ['overview', 'position'],\n      preload: preload,\n      errorInterceptor: (error: CustomError) =>\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DMV, error\n        )\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical',\n        errorInterceptor: (error: CustomError) =>\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.DMV,\n            error\n          )\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'Failed to instantiate viewer'\n      )\n    )\n    throw error\n  }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface Measurement {\n  name: dcmjs.sr.coding.CodedConcept\n  value?: number\n  unit: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload?: boolean\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n}\n\ninterface SlideViewerState {\n  visibleRoiUIDs: Set<string>\n  visibleSegmentUIDs: Set<string>\n  visibleMappingUIDs: Set<string>\n  visibleAnnotationGroupUIDs: Set<string>\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  selectedRoi?: dmv.roi.ROI\n  selectedRoiUIDs: Set<string>\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isSelectedRoiModalVisible: boolean\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  isGoToModalVisible: boolean\n  isSelectedMagnificationValid: boolean\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  selectedXCoordinate?: number\n  validXCoordinateRange: number[]\n  selectedYCoordinate?: number\n  validYCoordinateRange: number[]\n  selectedMagnification?: number\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n  loadingFrames: Set<string>\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private readonly selectionColor: number[] = [140, 184, 198]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\n    fill: { color: [...this.selectionColor, 0.2] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = _formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n\n    this.onWindowResize = this.onWindowResize.bind(this)\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleRoiSelectionCancellation = this.handleRoiSelectionCancellation.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleGoTo = this.handleGoTo.bind(this)\n    this.handleXCoordinateSelection = this.handleXCoordinateSelection.bind(this)\n    this.handleYCoordinateSelection = this.handleYCoordinateSelection.bind(this)\n    this.handleMagnificationSelection = this.handleMagnificationSelection.bind(this)\n    this.handleSlidePositionSelection = this.handleSlidePositionSelection.bind(this)\n    this.handleSlidePositionSelectionCancellation = this.handleSlidePositionSelectionCancellation.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n\n    const { volumeViewer, labelViewer } = _constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set()\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current != null) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        if (this.labelViewportRef.current != null) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance, index) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                this.props.selectedPresentationStateUID == null\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Presentation State could not be loaded'\n            )\n          )\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Presentation State could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID != null\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key == null) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotations = (): void => {\n    console.info('search for Comprehensive 3D SR instances')\n    const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach(i => {\n        const { dataset } = dmv.metadata.formatMetadata(i)\n        const instance = dataset as dmv.metadata.Instance\n        if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n          console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n          client.retrieveInstance({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: instance.SeriesInstanceUID,\n            sopInstanceUID: instance.SOPInstanceUID\n          }).then((retrievedInstance): void => {\n            const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n            const { dataset } = dmv.metadata.formatMetadata(data.dict)\n            const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n            /*\n             * Perform a couple of checks to ensure the document content of the\n             * report fullfils the requirements of the application.\n             */\n            if (!_implementsTID1500(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it is not structured according to template ' +\n                'TID 1500 \"MeasurementReport\"'\n              )\n              return\n            }\n            if (!_describesSpecimenSubject(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not describe a specimen subject'\n              )\n              return\n            }\n            if (!_containsROIAnnotations(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not contain any suitable ROI annotations'\n              )\n              return\n            }\n\n            const content = new MeasurementReport(report)\n            content.ROIs.forEach(roi => {\n              console.info(`add ROI \"${roi.uid}\"`)\n              const scoord3d = roi.scoord3d\n              const image = this.props.slide.volumeImages[0]\n              if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                /*\n                 * ROIs may get assigned new UIDs upon re-rendering of the\n                 * page and we need to ensure that we don't add them twice.\n                 * The same ROI may be stored in multiple SR documents and\n                 * we don't want them to show up twice.\n                 * TODO: We should probably either \"merge\" measurements and\n                 * quantitative evaluations or pick the ROI from the \"best\"\n                 * available report (COMPLETE and VERIFIED).\n                 */\n                const doesROIExist = this.volumeViewer.getAllROIs().some(\n                  (otherROI: dmv.roi.ROI): boolean => {\n                    return _areROIsEqual(otherROI, roi)\n                  }\n                )\n                if (!doesROIExist) {\n                  try {\n                    // Add ROI without style such that it won't be visible.\n                    this.volumeViewer.addROI(roi, {})\n                  } catch {\n                    console.error(`could not add ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                }\n              } else {\n                console.debug(\n                  `skip ROI \"${roi.uid}\" ` +\n                  `of SR document \"${report.SOPInstanceUID}\"` +\n                  'because it is defined in another frame of reference'\n                )\n              }\n            })\n          }).catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Annotations could not be loaded'\n              )\n            )\n            console.error(\n              'failed to load ROIs ' +\n              `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n              `of series \"${instance.SeriesInstanceUID}\" ` +\n              `of study \"${this.props.studyInstanceUID}\": `,\n              error\n            )\n          })\n          /*\n           * React is not aware of the fact that ROIs have been added via the\n           * viewer (the viewport is a ref object) and won't show the\n           * annotations in the user interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Annotations could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = (): void => {\n    console.info('search for Microscopy Bulk Simple Annotations instances')\n    const client = this.props.clients[\n      StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n    ]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'ANN'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          let annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[]\n          annotations = retrievedMetadata.map(metadata => {\n            return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n              metadata\n            })\n          })\n          annotations = annotations.filter(ann => {\n            const refImage = this.props.slide.volumeImages[0]\n            return (\n              ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              ann.ContainerIdentifier === refImage.ContainerIdentifier\n            )\n          })\n          annotations.forEach(ann => {\n            try {\n              this.volumeViewer.addAnnotationGroups(ann)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Microscopy Bulk Simple Annotations cannot be displayed.'\n                )\n              )\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              console.error('failed to add annotation groups: ', error)\n            }\n            ann.AnnotationGroupSequence.forEach(item => {\n              const annotationGroupUID = item.AnnotationGroupUID\n              const finding = item.AnnotationPropertyTypeCodeSequence[0]\n              const key = _buildKey(finding)\n              const style = this.roiStyles[key]\n              // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n              if (style != null && style.fill != null) {\n                this.volumeViewer.setAnnotationGroupStyle(\n                  annotationGroupUID,\n                  { color: style.fill.color }\n                )\n              }\n            })\n          })\n          /*\n           * React is not aware of the fact that annotation groups have been\n           * added via the viewer (the underlying HTML viewport element is a\n           * ref object) and won't show the annotation groups in the user\n           * interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n              'instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Microscopy Bulk Simple Annotations instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = (): void => {\n    console.info('search for Segmentation instances')\n    const client = this.props.clients[StorageClasses.SEGMENTATION]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SEG'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach((s, i) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const segmentations: dmv.metadata.Segmentation[] = []\n          retrievedMetadata.forEach(metadata => {\n            const seg = new dmv.metadata.Segmentation({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              seg.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              segmentations.push(seg)\n            }\n          })\n          if (segmentations.length > 0) {\n            try {\n              this.volumeViewer.addSegments(segmentations)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Segmentations cannot be displayed'\n                )\n              )\n              console.error('failed to add segments: ', error)\n            }\n            /*\n           * React is not aware of the fact that segments have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the segments in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Segmentation instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Segmentation instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = (): void => {\n    console.info('search for Parametric Map instances')\n    const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'OT'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const parametricMaps: dmv.metadata.ParametricMap[] = []\n          retrievedMetadata.forEach(metadata => {\n            const pm = new dmv.metadata.ParametricMap({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              pm.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              parametricMaps.push(pm)\n            } else {\n              console.warn(\n                `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n              )\n            }\n          })\n          if (parametricMaps.length > 0) {\n            try {\n              this.volumeViewer.addParameterMappings(parametricMaps)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Parametric Map cannot be displayed'\n                )\n              )\n              console.error('failed to add mappings: ', error)\n            }\n            /*\n           * React is not aware of the fact that mappings have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the mappings in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Parametric Map instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Parametric Map instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    this.addAnnotations()\n    this.addAnnotationGroups()\n    this.addSegmentations()\n    this.addParametricMaps()\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer != null) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi != null) {\n      console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n      this.volumeViewer.setROIStyle(selectedRoi.uid, this.selectedRoiStyle)\n      const key = _getRoiKey(selectedRoi)\n      this.volumeViewer.getAllROIs().forEach((roi) => {\n        if (roi.uid !== selectedRoi.uid) {\n          this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n        }\n      })\n      this.setState({\n        selectedRoiUIDs: new Set([selectedRoi.uid]),\n        selectedRoi: selectedRoi,\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        selectedRoi: undefined,\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  handleRoiSelectionCancellation (): void {\n    this.setState({\n      isSelectedRoiModalVisible: false,\n      selectedRoiUIDs: new Set()\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray != null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID == null) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount (): void {\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount (): void {\n    window.addEventListener('beforeunload', this.componentCleanup)\n    this.componentSetup()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection (value: any): void {\n    if (value != null) {\n      const x = Number(value)\n      const start = this.state.validXCoordinateRange[0]\n      const end = this.state.validXCoordinateRange[1]\n      if (x >= start && x <= end) {\n        this.setState({\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedXCoordinate: undefined,\n      isSelectedXCoordinateValid: false\n    })\n  }\n\n  handleYCoordinateSelection (value: any): void {\n    if (value != null) {\n      const y = Number(value)\n      const start = this.state.validYCoordinateRange[0]\n      const end = this.state.validYCoordinateRange[1]\n      if (y >= start && y <= end) {\n        this.setState({\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedYCoordinate: undefined,\n      isSelectedYCoordinateValid: false\n    })\n  }\n\n  handleMagnificationSelection (value: any): void {\n    if (value != null) {\n      if (value > 0 && value <= 40) {\n        this.setState({\n          selectedMagnification: Number(value),\n          isSelectedMagnificationValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedMagnification: undefined,\n      isSelectedMagnificationValid: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection (): void {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n      this.state.selectedXCoordinate != null &&\n      this.state.selectedYCoordinate != null &&\n      this.state.selectedMagnification != null\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation (): void {\n    console.log('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      isSelectedMagnificationValid: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Could not complete annotation configuration'\n        )\n      )\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    // Metadata should be sorted such that the image with the highest\n    // resolution is the last item in the array.\n    const refImage = metadata[metadata.length - 1]\n    // We assume that there is only one specimen (tissue section) per\n    // ontainer (slide). Only the tissue section is tracked with a unique\n    // identifier, even if the section may be composed of different biological\n    // samples.\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'More than one specimen has been described for the slide'\n        )\n      )\n    }\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n    console.debug('create Observation Context')\n    let observer\n    if (this.props.user !== undefined) {\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: this.props.user.name,\n        loginName: this.props.user.email\n      })\n    } else {\n      console.warn('no user information available')\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: 'ANONYMOUS'\n      })\n    }\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121006',\n          schemeDesignator: 'DCM',\n          meaning: 'Person'\n        }),\n        observerIdentifyingAttributes: observer\n      }),\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121007',\n          schemeDesignator: 'DCM',\n          meaning: 'Device'\n        }),\n        observerIdentifyingAttributes:\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\n            uid: this.props.app.uid,\n            manufacturerName: 'MGH Computational Pathology',\n            modelName: this.props.app.name\n          })\n      }),\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\n          value: '121027',\n          schemeDesignator: 'DCM',\n          meaning: 'Specimen'\n        }),\n        subjectClassSpecificContext:\n          new dcmjs.sr.templates.SubjectContextSpecimen({\n            uid: refSpecimen.SpecimenUID,\n            identifier: refSpecimen.SpecimenIdentifier,\n            containerIdentifier: refImage.ContainerIdentifier\n          })\n      })\n    })\n\n    console.debug('encode Imaging Measurements')\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\n    for (let i = 0; i < rois.length; i++) {\n      const roi = rois[i]\n      if (!this.state.visibleRoiUIDs.has(roi.uid)) {\n        continue\n      }\n      let findingType = roi.evaluations.find(\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n        }\n      )\n      if (findingType === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            `No finding type was specified for ROI \"${roi.uid}\"`\n          )\n        )\n      }\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.properties.trackingUID ?? roi.uid,\n          identifier: `ROI #${i + 1}`\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: findingType.ConceptCodeSequence[0].CodeValue,\n          schemeDesignator:\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n        }),\n        qualitativeEvaluations: roi.evaluations.filter(\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n          }\n        ),\n        measurements: roi.measurements\n      })\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\n      measurements[0].ContentTemplateSequence = [{\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }]\n      imagingMeasurements.push(...measurements)\n    }\n\n    console.debug('create Measurement Report document content')\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\n      observationContext: observationContext,\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\n        value: '112703',\n        schemeDesignator: 'DCM',\n        meaning: 'Whole Slide Imaging'\n      }),\n      imagingMeasurements: imagingMeasurements\n    })\n\n    console.info('create Comprehensive 3D SR document')\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n      content: measurementReport[0],\n      evidence: [refImage],\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      seriesNumber: 1,\n      seriesDescription: 'Annotation',\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      instanceNumber: 1,\n      manufacturer: 'MGH Computational Pathology',\n      previousVersions: undefined // TODO\n    })\n\n    this.setState({\n      isReportModalVisible: true,\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Annotations could not be saved'\n          )\n        )\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when an annotation has been selected from the\n   * current list of annotations.\n   */\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\n    console.log(`selected ROI ${roiUID}`)\n    this.setState({ selectedRoiUIDs: new Set([roiUID]) })\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (roi.uid === roiUID) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Failed to show annotation group.'\n          )\n        )\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void {\n    console.log(`change style of annotation group ${annotationGroupUID}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        annotationGroupUID,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of annotation group.'\n        )\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState (): void {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState != null) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Presentation State could not be found'\n          )\n        )\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (this.volumeViewer.areROIsVisible) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    annotationGroups.push(...this.volumeViewer.getAllAnnotationGroups())\n\n    const openSubMenuItems = [\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\n    ]\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map(finding => {\n      return (\n        <Select.Option\n          key={finding.CodeValue}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach(evaluation => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={code.CodeValue}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const equipmentMenu = (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach(instance => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={instance.SOPInstanceUID}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={null}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          {}\n        </Select.Option>\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={<UndoOutlined />}\n                type='primary'\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametric-maps')\n    }\n\n    let annotationGroupMenu\n    if (annotationGroups.length > 0) {\n      const defaultAnnotationGroupStyles: {\n        [annotationGroupUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const annotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    const annotationTools = [\n      <Button\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Button\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Button\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Button\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Button\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Button\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Button\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    let cursor = 'default'\n    if (this.state.isLoading) {\n      cursor = 'progress'\n    }\n\n    let selectedRoiInformation\n    if (this.state.selectedRoi != null) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence != null) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit != null) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      selectedRoiInformation = (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden',\n              cursor: cursor\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            visible={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {annotationConfigurations}\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isSelectedRoiModalVisible}\n            title='Selected ROI'\n            onCancel={this.handleRoiSelectionCancellation}\n            maskClosable\n            footer={null}\n          >\n            <Space align='start' direction='vertical'>\n              {selectedRoiInformation}\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isGoToModalVisible}\n            title='Go to slide position'\n            onOk={this.handleSlidePositionSelection}\n            onCancel={this.handleSlidePositionSelectionCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              <InputNumber\n                placeholder={(\n                  '[' +\n                  `${this.state.validXCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validXCoordinateRange[1]}` +\n                  ']'\n                )}\n                prefix='X Coordinate [mm]'\n                onChange={this.handleXCoordinateSelection}\n                onPressEnter={this.handleXCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedXCoordinateValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validYCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validYCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='Y Coordinate [mm]'\n                onChange={this.handleYCoordinateSelection}\n                onPressEnter={this.handleYCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedYCoordinateValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n              <InputNumber\n                placeholder='[0 - 40]'\n                prefix='Magnification'\n                onChange={this.handleMagnificationSelection}\n                onPressEnter={this.handleMagnificationSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedMagnificationValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n            onOpenChange={() => {\n              // Give menu item time to render before updating viewer size\n              setTimeout(\n                () => {\n                  if (this.labelViewer != null) {\n                    this.labelViewer.resize()\n                  }\n                },\n                100\n              )\n            }}\n          >\n            <Menu.SubMenu key='label' title='Slide label'>\n              <Menu.Item style={{ height: '100%' }} key='image'>\n                <div\n                  style={{ height: '220px' }}\n                  ref={this.labelViewportRef}\n                />\n              </Menu.Item>\n            </Menu.SubMenu>\n            {specimenMenu}\n            {equipmentMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID != null) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null | undefined\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Value of option \"images\" have been non-zero length.'\n        )\n      )\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID != null) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (\n        hasImageFlavor(image, ImageFlavors.VOLUME) ||\n        hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      ) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID != null) {\n          for (const identifier in opticalPathIdentifiers) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n    if (volumeImages.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'At least one VOLUME image must be provided for a slide.'\n        )\n      )\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n            'image that has not been resampled per optical path'\n        )\n      }\n    }\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All images of a slide must have the same Container Identifier.'\n        )\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must have ' +\n          'the same Frame of Reference UID.'\n        )\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `All VOLUME images for optical path \"${identifier}\"` +\n              'must be part of the same multi-resolution pyramid.'\n            )\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must be part of the same  ' +\n          'acquisition and have the same Acquisition UID.'\n        )\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) => {\n        return (\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n        )\n      })\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import React from 'react'\nimport { Routes, Route, useLocation, useParams } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide, createSlides } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID, seriesInstanceUID } = useParams()\n  const location = useLocation()\n\n  const selectedSlide = slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string | null | undefined\n  if (!searchParams.has('access_token')) {\n    presentationStateUID = searchParams.get('state')\n    if (presentationStateUID === null) {\n      presentationStateUID = undefined\n    }\n  }\n  let viewer = null\n  if (selectedSlide != null) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\ninterface ViewerState {\n  slides: Slide[]\n  isLoading: boolean\n}\n\nclass Viewer extends React.Component<ViewerProps, ViewerState> {\n  state = {\n    slides: [],\n    isLoading: true\n  }\n\n  constructor (props: ViewerProps) {\n    super(props)\n    this.handleSeriesSelection = this.handleSeriesSelection.bind(this)\n  }\n\n  componentDidMount (): void {\n    this.fetchImageMetadata().then(\n      (metadata: dmv.metadata.VLWholeSlideMicroscopyImage[][]) => {\n        this.setState({\n          slides: createSlides(metadata),\n          isLoading: false\n        })\n      }\n    ).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Image metadata could not be retrieved or decoded.')\n      )\n      this.setState({ isLoading: false })\n    })\n  }\n\n  /**\n   * Fetch metadata for VL Whole Slide Microscopy Image instances of the study.\n   *\n   * @returns Metadata of image instances of the study grouped per series\n   */\n  async fetchImageMetadata (): Promise<dmv.metadata.VLWholeSlideMicroscopyImage[][]> {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    const studyInstanceUID = this.props.studyInstanceUID\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(matchedSeries.map(async (s) => {\n      const { dataset } = dmv.metadata.formatMetadata(s)\n      const loadingSeries = dataset as dmv.metadata.Series\n      console.info(\n        `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n      )\n      const retrievedMetadata = await client.retrieveSeriesMetadata({\n        studyInstanceUID: this.props.studyInstanceUID,\n        seriesInstanceUID: loadingSeries.SeriesInstanceUID\n      })\n\n      const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n      retrievedMetadata.forEach((item, index) => {\n        if (item['00080016'] != null) {\n          const values = item['00080016'].Value\n          if (values != null) {\n            const sopClassUID = values[0]\n            if (sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE) {\n              const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n                metadata: item\n              })\n              seriesImages.push(image)\n            }\n          }\n        }\n      })\n\n      if (seriesImages.length > 0) {\n        images.push(seriesImages)\n      }\n    }))\n\n    return images\n  }\n\n  handleSeriesSelection (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ): void {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${this.props.studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n    if (\n      this.props.location.pathname.includes('/series/') &&\n      this.props.location.search != null\n    ) {\n      urlPath += this.props.location.search\n    }\n    this.props.navigate(urlPath, { replace: true })\n  }\n\n  render (): React.ReactNode {\n    if (this.state.isLoading) {\n      return null\n    }\n\n    if (this.state.slides.length === 0) {\n      return null\n    }\n    const firstSlide = this.state.slides[0] as Slide\n    const volumeInstances = firstSlide.volumeImages\n    if (volumeInstances.length === 0) {\n      return null\n    }\n    const refImage = volumeInstances[0]\n\n    /* If a series is encoded in the path, route the viewer to this series.\n     * Otherwise select the first series correspondent to\n     * the first slide contained in the study.\n     */\n    let selectedSeriesInstanceUID: string\n    if (this.props.location.pathname.includes('series/')) {\n      const fragments = this.props.location.pathname.split('/')\n      selectedSeriesInstanceUID = fragments[4]\n    } else {\n      selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n    }\n\n    let clinicalTrialMenu\n    if (refImage.ClinicalTrialSponsorName != null) {\n      clinicalTrialMenu = (\n        <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n          <ClinicalTrial metadata={refImage} />\n        </Menu.SubMenu>\n      )\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Sider\n          width={300}\n          style={{\n            height: '100%',\n            borderRight: 'solid',\n            borderRightWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n          >\n            <Menu.SubMenu key='patient' title='Patient'>\n              <Patient metadata={refImage} />\n            </Menu.SubMenu>\n            <Menu.SubMenu key='study' title='Study'>\n              <Study metadata={refImage} />\n            </Menu.SubMenu>\n            {clinicalTrialMenu}\n            <Menu.SubMenu key='slides' title='Slides'>\n              <SlideList\n                clients={this.props.clients}\n                metadata={this.state.slides}\n                selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n                onSeriesSelection={this.handleSeriesSelection}\n              />\n            </Menu.SubMenu>\n          </Menu>\n        </Layout.Sider>\n\n        <Routes>\n          <Route\n            path='/series/:seriesInstanceUID'\n            element={\n              <ParametrizedSlideViewer\n                clients={this.props.clients}\n                slides={this.state.slides}\n                preload={this.props.preload}\n                annotations={this.props.annotations}\n                enableAnnotationTools={this.props.enableAnnotationTools}\n                app={this.props.app}\n                user={this.props.user}\n              />\n            }\n          />\n        </Routes>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(Viewer)\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Menu,\n  Modal,\n  Row,\n  Space,\n  Badge,\n  Collapse\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  UnorderedListOutlined,\n  UserOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport NotificationMiddleware, { NotificationMiddlewareEvents } from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\nimport { v4 as uuidv4 } from 'uuid'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n  errorObj: CustomError[]\n  errorCategory: string[]\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    this.state = {\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: true,\n      errorObj: [],\n      errorCategory: []\n    }\n\n    const onErrorHandler = ({ error }: {\n      category: string\n      error: CustomError\n    }): void => {\n      this.setState({\n        errorObj: [...this.state.errorObj, error],\n        errorCategory: [...this.state.errorCategory, error.type]\n      })\n    }\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnError,\n      onErrorHandler\n    )\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleDebugButtonClick = (): void => {\n    const errorMsgs: {\n      Authentication: string[]\n      Communication: string[]\n      EncodingDecoding: string[]\n      Visualization: string[]\n    } = {\n      Authentication: [],\n      Communication: [],\n      EncodingDecoding: [],\n      Visualization: []\n    }\n\n    type ObjectKey = keyof typeof errorMsgs\n    const errorNum = this.state.errorObj.length\n\n    if (errorNum > 0) {\n      for (let i = 0; i < errorNum; i++) {\n        const category = this.state.errorCategory[i] as ObjectKey\n        errorMsgs[category].push(this.state.errorObj[i].message)\n      }\n    }\n\n    const { Panel } = Collapse\n\n    const showErrorCount = (errcount: number): JSX.Element => (\n      <Badge count={errcount} />\n    )\n\n    Modal.info({\n      title: 'Debug Information\\n (Check console for more information)',\n      width: 800,\n      content: (\n        <Collapse>\n          <Panel\n            header='Communication Error'\n            key='communicationerror'\n            extra={showErrorCount(errorMsgs.Communication.length)}\n          >\n            <ol>\n              {errorMsgs.Communication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Data Encoding/Decoding error'\n            key='encodedecodeerror'\n            extra={showErrorCount(errorMsgs.EncodingDecoding.length)}\n          >\n            <ol>\n              {errorMsgs.EncodingDecoding.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Visualization error'\n            key='visualizationerror'\n            extra={showErrorCount(errorMsgs.Visualization.length)}\n          >\n            <ol>\n              {errorMsgs.Visualization.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Authentication error'\n            key='autherror'\n            extra={showErrorCount(errorMsgs.Authentication.length)}\n          >\n            <ol>\n              {errorMsgs.Authentication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n        </Collapse>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = <Menu items={userMenuItems} />\n      user = (\n        <Dropdown overlay={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    const debugButton = (\n      <Badge count={this.state.errorObj.length}>\n        <Button\n          icon={SettingOutlined}\n          tooltip='Debug info'\n          onClick={this.handleDebugButtonClick}\n        />\n      </Badge>\n    )\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const handleServerSelectionInput = (\n      event: React.FormEvent<HTMLInputElement>\n    ): void => {\n      const value = event.currentTarget.value\n      let isDisabled = true\n      if (value != null) {\n        try {\n          const url = new URL(value)\n          if (url.protocol.startsWith('http') && url.pathname.length > 0) {\n            isDisabled = false\n          }\n        } catch (TypeError) {}\n      }\n      this.setState({\n        selectedServerUrl: value,\n        isServerSelectionDisabled: isDisabled\n      })\n    }\n\n    const handleServerSelectionCancellation = (event: any): void => {\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const handleServerSelection = (event: any): void => {\n      const url = this.state.selectedServerUrl\n      let closeModal = false\n      if (url != null && url !== '') {\n        if (url.startsWith('http://') || url.startsWith('https://')) {\n          this.props.onServerSelection({ url })\n          closeModal = true\n        }\n      }\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: !closeModal,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row>\n            <Col>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' />\n            <Col>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {debugButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          visible={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={handleServerSelection}\n          onCancel={handleServerSelectionCancellation}\n        >\n          <Input\n            placeholder='Enter base URL of DICOMweb Study Service'\n            onChange={handleServerSelectionInput}\n            onPressEnter={handleServerSelection}\n            addonAfter={\n              this.state.isServerSelectionDisabled\n                ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n            }\n          />\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { Button, Input, Space, Table, TablePaginationConfig } from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'An error occured. Search for studies failed.'\n          )\n        )\n      })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Request to search for studies failed.'\n          )\n        )\n      })\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\nimport NotificationMiddleware,\n{ NotificationMiddlewareContext } from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nconst createUser = (userData: UserData | null): User => {\n  let profile\n  if (userData !== null) {\n    profile = userData.profile\n  }\n\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.AUTH,\n        new CustomError(\n          errorTypes.AUTHENTICATION,\n          'Failed to obtain user \"name\" and \"email\".'\n        )\n      )\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.AUTH,\n      new CustomError(\n        errorTypes.AUTHENTICATION,\n        'Failed to obtain user profile.'\n      )\n    )\n  }\n  return {\n    name: undefined,\n    email: undefined\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string|undefined> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user profile.'\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user information.'\n          )\n        )\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'At least one server needs to be configured.'\n          )\n        )\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Either path or full URL needs to be configured for server.'\n          )\n        )\n      }\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one store is supported for now.'\n        )\n      )\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveStudyMetadata(options)\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveSeriesMetadata(options)\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    return await this.stores[0].client.retrieveInstance(options)\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <CaseViewer\n      clients={clients}\n      user={user}\n      annotations={config.annotations}\n      preload={preload}\n      app={app}\n      enableAnnotationTools={enableAnnotationTools}\n      studyInstanceUID={studyInstanceUID}\n    />\n  )\n}\n\nfunction _createClientMapping ({ baseUri, settings, onError }: {\n  baseUri: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      storageClassMapping.default += 1\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.COMMUNICATION,\n        'Only one default server can be configured without specification ' +\n        'of storage classes.'\n      )\n    )\n  }\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one configured server can specify a given storage class. ' +\n          `Storage class \"${key}\" is specified by more than one ` +\n          'of the configured servers.'\n        )\n      )\n    }\n  }\n\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n    clientMapping.default = clientMapping[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n  } else {\n    const client = new DicomWebManager({ baseUri, settings, onError })\n    clientMapping.default = client\n  }\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'User is not authorized to access DICOMweb resources.')\n      )\n    }\n\n    const logServerError = () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'An unexpected server error occured.')\n      )\n    }\n\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          logServerError()\n        }\n      })\n    } else if (error.status === 500) {\n      logServerError()\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'One server needs to be configured.')\n      )\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n\n    this.state = {\n      clients: _createClientMapping({\n        baseUri,\n        settings: props.config.servers,\n        onError: this.handleDICOMwebError\n      }),\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath != null) {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch != null) {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Could not sign-in user.')\n        )\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path == null) {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","PatientID","PatientName","PatientSex","PatientBirthDate","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","_subscriptions","Symbol","_lastSubscriptionId","PubSub","eventName","callback","Error","hasOwnProperty","subscriptionId","callbacks","payload","errorTypes","CustomError","type","message","stack","NotificationMiddlewareEvents","NotificationMiddlewareContext","NotificationType","NotificationSourceDefinition","sources","category","notificationType","source","error","notificationMsg","errorCategory","find","s","publish","String","console","notification","description","duration","state","isLoading","overviewViewportRef","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","info","ContainerIdentifier","dmv","client","clients","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","resizeFactor","errorInterceptor","NotificationMiddleware","render","container","resize","style","height","containerIdentifier","ref","seriesInstanceUIDs","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","handleMeasurementSelection","handleOpacityChange","handleColorRChange","handleColorGChange","handleColorBChange","getCurrentColor","currentStyle","opacity","defaultStyle","color","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","limitValues","Array","isArray","slice","option","codeComponents","measurement","schemeDesignator","meaning","colorSettings","windowSettings","explorationSettings","AnnotationGroupSequence","findIndex","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","plain","justify","gutter","range","min","max","step","handleLowerLimitChange","handleLimitChange","handleUpperLimitChange","minWidth","defaultValue","settings","isBadgeVisible","direction","placement","content","overlayStyle","shape","SettingOutlined","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","annotationGroups","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupVisibilityChange","onAnnotationGroupStyleChange","handleClick","text","button","Icon","isSelected","tooltip","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","overflowY","handleRemoval","getCurrentColors","paletteColorLookupTable","previousProps","previousState","opticalPath","opticalPathIdentifier","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","specimenDescriptions","maxValue","Math","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","SeriesInstanceUID","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","mappingUID","mapping","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","segmentUID","segment","algorithmName","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","warn","_constructViewers","preload","volumeImages","labelViewer","volumeViewer","clientMapping","annotationOptions","maxZoom","controls","activateSelectInteraction","labelImages","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","defaultRoiStyle","stroke","fill","image","circle","radius","roiStyles","selectionColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","rawInstance","instance","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","includes","selectedPresentationStateUID","setPresentationState","presentationStates","Object","catch","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","Set","keys","activateOpticalPath","showOpticalPath","add","searchParams","URLSearchParams","search","set","pathname","replace","getRoiStyle","addAnnotations","COMPREHENSIVE_3D_SR","SOPClassUID","templateSeq","ContentTemplateSequence","TemplateIdentifier","_implementsTID1500","subjectClassValue","retrievedConcept","expectedConcept","_describesSpecimenSubject","debug","measurementGroups","foundRegion","regions","_containsROIAnnotations","FrameOfReferenceUID","doesROIExist","getAllROIs","some","otherROI","a","b","graphicType","graphicData","s1","s2","j","_areROIsEqual","addROI","forceUpdate","addAnnotationGroups","MICROSCOPY_BULK_SIMPLE_ANNOTATION","searchForSeries","matchedSeries","series","retrieveSeriesMetadata","retrievedMetadata","filter","ann","refImage","finding","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","addSegmentations","SEGMENTATION","segmentations","seg","addSegments","addParametricMaps","PARAMETRIC_MAP","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","onRoiModified","onWindowResize","onRoiDrawn","detail","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","onRoiSelected","selectedRoi","setROIStyle","isSelectedRoiModalVisible","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingEnded","delete","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","onKeyUp","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","isAnnotationModalVisible","isGoToModalVisible","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","annotation","geometryTypes","_formatRoiStyle","componentSetup","componentCleanup","handleRoiSelectionCancellation","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationVisibilityChange","handleAnnotationGroupVisibilityChange","handleAnnotationGroupStyleChange","handleXCoordinateSelection","handleYCoordinateSelection","handleMagnificationSelection","handleSlidePositionSelection","handleSlidePositionSelectionCancellation","handleReportVerification","handleReportCancellation","handleSegmentVisibilityChange","handleSegmentStyleChange","handleMappingVisibilityChange","handleMappingStyleChange","handleOpticalPathVisibilityChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","boundingBox","generatedReport","isSelectedMagnificationValid","isReportModalVisible","isSelectedXCoordinateValid","isSelectedYCoordinateValid","selectedXCoordinate","validXCoordinateRange","selectedYCoordinate","validYCoordinateRange","selectedMagnification","areRoisHidden","cleanup","isOpticalPathVisible","isOpticalPathActive","document","body","removeEventListener","window","addEventListener","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","target","selectedMarkup","filteredEvaluations","x","Number","start","end","y","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","position","point","log","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","observer","refSpecimen","user","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","app","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","evidence","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","getROI","showAnnotationGroup","hideAnnotationGroup","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","sort","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areROIsVisible","hideROIs","showROIs","getAllSegments","getAllParameterMappings","getAllAnnotationGroups","annotationMenuItems","openSubMenuItems","geometryTypeOptionsMapping","box","polygon","line","freehandpolygon","freehandline","annotationConfigurations","defaultActiveFirstOption","onClear","specimenMenu","equipmentMenu","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","selectedRoiInformation","cursor","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","hasSider","overflow","visible","onOk","onCancel","okText","maskClosable","footer","placeholder","prefix","onPressEnter","addonAfter","CheckOutlined","StopOutlined","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","setTimeout","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","areSameAcquisition","AcquisitionUID","Slide","options","acquisitionUID","opticalPathIdentifiers","pyramidUIDs","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","THUMBNAIL","PyramidUID","samplesPerPixel","SamplesPerPixel","requirePyramidUID","PhotometricInterpretation","createSlides","slideMetadata","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","imgA","imgB","ParametrizedSlideViewer","presentationStateUID","selectedSlide","get","viewer","handleSeriesSelection","fetchImageMetadata","StudyInstanceUID","Promise","all","loadingSeries","seriesImages","volumeInstances","clinicalTrialMenu","borderRight","borderRightWidth","path","element","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleDebugButtonClick","errorMsgs","Authentication","Communication","EncodingDecoding","Visualization","errorNum","errorObj","Panel","Collapse","showErrorCount","errcount","e","uuidv4","handleServerSelectionButtonClick","isServerSelectionModalVisible","isServerSelectionDisabled","worklistButton","userMenuItems","onUserLogout","userMenu","overlay","trigger","UserOutlined","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","debugButton","showServerSelectionButton","ApiOutlined","handleServerSelection","url","selectedServerUrl","closeModal","startsWith","onServerSelection","src","process","alt","margin","flex","currentTarget","isDisabled","URL","protocol","TypeError","display","alignItems","justifyContent","subTitle","defaultPageSize","handleSearch","confirm","dataIndex","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","marginBottom","SearchOutlined","filterIcon","filtered","fetchData","handleChange","studies","numStudies","pageSize","searchOptions","ModalitiesInStudy","searchForStudies","study","limit","searchCriteria","fuzzymatching","pagination","filters","columns","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","record","dataSource","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","args","apply","status","errorMessage","attemptFailedError","open","DicomWebManager","onError","stores","handleError","updateHeaders","fields","f","headers","reject","retrieveStudyMetadata","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","qidoPathPrefix","qidoURLPrefix","wadoPathPrefix","wadoURLPrefix","stowPathPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","read","dwc","baseURL","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","_createClientMapping","storageClassMapping","default","storageClasses","server","auth","handleDICOMwebError","logServerError","errorMessages","setting","Authorization","storedPath","localStorage","getItem","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","wasAuthSuccessful","tmpClient","redirectTo","setItem","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}