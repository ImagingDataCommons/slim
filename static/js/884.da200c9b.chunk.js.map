{"version":3,"file":"static/js/884.da200c9b.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","data/uids.tsx","utils/router.tsx","components/SlideViewer.tsx","data/slides.tsx","components/CaseViewer.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Gender',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\n\ninterface SlideItemProps {\n  client: DicomWebManager\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.client,\n          metadata: metadata,\n          resizeFactor: 1\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n    const attributes = []\n    const description = this.props.slide.description\n    if (description != null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ height: '100px' }} ref={this.overviewViewportRef} />\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  client: DicomWebManager\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          client={this.props.client}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: ({ roiUID }: { roiUID: string }) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection({ roiUID: object.key })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState({ currentStyle: { opacity: value } })\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value !== undefined) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.annotationGroup.algorithmName\n      }\n    ]\n\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const measurementsSequence = item.MeasurementsSequence ?? []\n\n    const measurementOptions = measurementsSequence.map((measurementItem, i) => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      const key = `${name.CodingSchemeDesignator}-${name.CodeValue}`\n      return (\n        <Select.Option\n          key={i}\n          value={key}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const settings = (\n      <div>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        <Divider plain>\n          Exploration\n        </Divider>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={8}>\n            Measurement\n          </Col>\n          <Col span={16}>\n            <Select\n              style={{ minWidth: '65px', width: '90%' }}\n              onSelect={this.handleMeasurementSelection}\n              key='annotation-group-measurements'\n              defaultValue={undefined}\n            >\n              {measurementOptions}\n            </Select>\n          </Col>\n        </Row>\n      </div>\n    )\n\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.annotationGroup.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n    }\n  }\n  onAnnotationGroupVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<AnnotationGroupListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    throw new Error(\n      'Content item \"Imaging Measurements\" not found.' +\n      'Content of Comprehensive 3D SR document is not structured based on ' +\n      'TID 1500 \"Measurement Report\".'\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Tracking Unique Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Finding\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Image Region\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: dmv.scoord3d.Scoord3D\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        throw new Error(\n          'Content item \"Image Region\" has unknown graphic type ' +\n          `\"${regionItem.GraphicType}\". ` +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen UID\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen Container Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { opacity: value }\n    })\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: value,\n        limitValues: state.currentStyle.limitValues\n      }\n    }))\n  }\n\n  handleColorRChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    specimenDescriptions.forEach(description => {\n      const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] = (\n        description.SpecimenPreparationSequence ?? []\n      )\n      specimenPreparationSteps.forEach(\n        (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n          step.SpecimenPreparationStepContentItemSequence.forEach((\n            item: (\n              dcmjs.sr.valueTypes.CodeContentItem |\n              dcmjs.sr.valueTypes.TextContentItem |\n              dcmjs.sr.valueTypes.UIDRefContentItem |\n              dcmjs.sr.valueTypes.PNameContentItem |\n              dcmjs.sr.valueTypes.DateTimeContentItem\n            ),\n            index: number\n          ) => {\n            const name = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptNameCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n            })\n            if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n              item = item as dcmjs.sr.valueTypes.CodeContentItem\n              const value = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptCodeSequence[0].CodeValue,\n                schemeDesignator:\n                  item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptCodeSequence[0].CodeMeaning\n              })\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                  attributes.push({\n                    name: 'Tissue stain',\n                    value: value.CodeMeaning\n                  })\n                }\n              }\n            } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n              item = item as dcmjs.sr.valueTypes.TextContentItem\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                  attributes.push({\n                    name: 'Tissue stain',\n                    value: item.TextValue\n                  })\n                }\n              }\n            }\n          })\n        }\n      )\n    })\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      mappingUID: this.props.mapping.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState(state => ({\n      currentStyle: {\n        opacity: value\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      segmentUID: this.props.segment.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState({ currentStyle: { opacity: value } })\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","export enum SOPClassUIDs {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","import React from 'react'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  InputNumber,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space,\n  Tooltip\n} from 'antd'\nimport {\n  UndoOutlined,\n  CheckOutlined,\n  StopOutlined\n} from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Equipment from './Equipment'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { Slide } from '../data/slides'\nimport { SOPClassUIDs } from '../data/uids'\nimport { findContentItemsByName } from '../utils/sr'\nimport { RouteComponentProps, withRouter } from '../utils/router'\n\nconst _buildKey = (concept: dcmjs.sr.coding.CodedConcept): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    console.warn(`no finding found for ROI ${roi.uid}`)\n    return\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _formatRoiStyle = (style: {\n  stroke: {\n    color: number[]\n    width: number\n  }\n  fill: {\n    color: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  return {\n    stroke: style.stroke,\n    fill: style.fill,\n    image: {\n      circle: {\n        radius: style.radius != null\n          ? style.radius\n          : Math.max(5 - style.stroke.width, 1),\n        stroke: style.stroke,\n        fill: style.fill\n      }\n    }\n  }\n}\n\nconst _constructViewers = ({ client, slide, preload }: {\n  client: dwc.api.DICOMwebClient\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      client: client,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      preload: preload\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: client,\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical'\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    message.error('Failed to instantiate viewer')\n    throw error\n  }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface Measurement {\n  name: dcmjs.sr.coding.CodedConcept\n  value?: number\n  unit: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  client: DicomWebManager\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload?: boolean\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n}\n\ninterface SlideViewerState {\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  visibleSegmentUIDs: Set<string>\n  visibleMappingUIDs: Set<string>\n  visibleAnnotationGroupUIDs: Set<string>\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  isGoToModalVisible: boolean\n  isSelectedMagnificationValid: boolean\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  selectedXCoordinate?: number\n  validXCoordinateRange: number[]\n  selectedYCoordinate?: number\n  validYCoordinateRange: number[]\n  selectedMagnification?: number\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n  loadingFrames: Set<string>\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: [0, 126, 163],\n      width: 2\n    },\n    fill: {\n      color: [0, 126, 163, 0.1]\n    },\n    image: {\n      circle: {\n        fill: {\n          color: [0, 126, 163]\n        },\n        radius: 5\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private readonly selectionColor: number[] = [140, 184, 198]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\n    fill: { color: [...this.selectionColor, 0.2] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = _formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n\n    this.onWindowResize = this.onWindowResize.bind(this)\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleGoTo = this.handleGoTo.bind(this)\n    this.handleXCoordinateSelection = this.handleXCoordinateSelection.bind(this)\n    this.handleYCoordinateSelection = this.handleYCoordinateSelection.bind(this)\n    this.handleMagnificationSelection = this.handleMagnificationSelection.bind(this)\n    this.handleSlidePositionSelection = this.handleSlidePositionSelection.bind(this)\n    this.handleSlidePositionSelectionCancellation = this.handleSlidePositionSelectionCancellation.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n\n    const { volumeViewer, labelViewer } = _constructViewers({\n      client: this.props.client,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set()\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.client !== previousProps.client\n    ) {\n      if (this.volumeViewportRef.current != null) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        if (this.labelViewportRef.current != null) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        client: this.props.client,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    this.props.client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance, index) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        this.props.client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                this.props.selectedPresentationStateUID == null\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error('Presentation State could not be loaded')\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Presentation State could not be loaded')\n      console.error(error)\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        // FIXME\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID != null\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key == null) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotations = (): void => {\n    console.info('search for Comprehensive 3D SR instances')\n    this.props.client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach(i => {\n        const { dataset } = dmv.metadata.formatMetadata(i)\n        const instance = dataset as dmv.metadata.Instance\n        if (instance.SOPClassUID === SOPClassUIDs.COMPREHENSIVE_3D_SR) {\n          console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n          this.props.client.retrieveInstance({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: instance.SeriesInstanceUID,\n            sopInstanceUID: instance.SOPInstanceUID\n          }).then((retrievedInstance): void => {\n            const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n            const { dataset } = dmv.metadata.formatMetadata(data.dict)\n            const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n            /*\n             * Perform a couple of checks to ensure the document content of the\n             * report fullfils the requirements of the application.\n             */\n            if (!_implementsTID1500(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it is not structured according to template ' +\n                'TID 1500 \"MeasurementReport\"'\n              )\n              return\n            }\n            if (!_describesSpecimenSubject(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not describe a specimen subject'\n              )\n              return\n            }\n            if (!_containsROIAnnotations(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not contain any suitable ROI annotations'\n              )\n              return\n            }\n\n            const content = new MeasurementReport(report)\n            content.ROIs.forEach(roi => {\n              console.info(`add ROI \"${roi.uid}\"`)\n              const scoord3d = roi.scoord3d\n              const image = this.props.slide.volumeImages[0]\n              if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                /*\n                 * ROIs may get assigned new UIDs upon re-rendering of the\n                 * page and we need to ensure that we don't add them twice.\n                 * The same ROI may be stored in multiple SR documents and\n                 * we don't want them to show up twice.\n                 * TODO: We should probably either \"merge\" measurements and\n                 * quantitative evaluations or pick the ROI from the \"best\"\n                 * available report (COMPLETE and VERIFIED).\n                 */\n                const doesROIExist = this.volumeViewer.getAllROIs().some(\n                  (otherROI: dmv.roi.ROI): boolean => {\n                    return _areROIsEqual(otherROI, roi)\n                  }\n                )\n                if (!doesROIExist) {\n                  try {\n                    // Add ROI without style such that it won't be visible.\n                    this.volumeViewer.addROI(roi, {})\n                  } catch {\n                    console.error(`could not add ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                }\n              } else {\n                console.debug(\n                  `skip ROI \"${roi.uid}\" ` +\n                  `of SR document \"${report.SOPInstanceUID}\"` +\n                  'because it is defined in another frame of reference'\n                )\n              }\n            })\n          }).catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            message.error('Annotations could not be loaded')\n            console.error(\n              'failed to load ROIs ' +\n              `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n              `of series \"${instance.SeriesInstanceUID}\" ` +\n              `of study \"${this.props.studyInstanceUID}\": `,\n              error\n            )\n          })\n          /*\n           * React is not aware of the fact that ROIs have been added via the\n           * viewer (the viewport is a ref object) and won't show the\n           * annotations in the user interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Annotations could not be loaded')\n      console.error(error)\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = (): void => {\n    console.info('search for Microscopy Bulk Simple Annotations instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'ANN'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          let annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[]\n          annotations = retrievedMetadata.map(metadata => {\n            return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n              metadata\n            })\n          })\n          annotations = annotations.filter(ann => {\n            const refImage = this.props.slide.volumeImages[0]\n            return (\n              ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              ann.ContainerIdentifier === refImage.ContainerIdentifier\n            )\n          })\n          annotations.forEach(ann => {\n            try {\n              this.volumeViewer.addAnnotationGroups(ann)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error(\n                'Microscopy Bulk Simple Annotations cannot be displayed.'\n              )\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              console.error('failed to add annotation groups: ', error)\n            }\n          })\n          /*\n           * React is not aware of the fact that annotation groups have been\n           * added via the viewer (the underlying HTML viewport element is a\n           * ref object) and won't show the annotation groups in the user\n           * interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n            'instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of ' +\n            'Microscopy Bulk Simple Annotations instances: ',\n            error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error(\n        'Search for Microscopy Bulk Simple Annotations instances failed.'\n      )\n      console.error(\n        'failed to search for Microscopy Bulk Simple Annotations instances: ',\n        error\n      )\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = (): void => {\n    console.info('search for Segmentation instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SEG'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach((s, i) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const segmentations: dmv.metadata.Segmentation[] = []\n          retrievedMetadata.forEach(metadata => {\n            const seg = new dmv.metadata.Segmentation({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              seg.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              segmentations.push(seg)\n            }\n          })\n          if (segmentations.length > 0) {\n            try {\n              this.volumeViewer.addSegments(segmentations)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error('Segmentations cannot be displayed')\n              console.error('failed to add segments: ', error)\n            }\n            /*\n           * React is not aware of the fact that segments have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the segments in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Segmentation instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of Segmentation instances: ',\n            error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Search for Segmentation instances failed.')\n      console.error('failed to search for Segmentation instances: ', error)\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = (): void => {\n    console.info('search for Parametric Map instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'OT'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const parametricMaps: dmv.metadata.ParametricMap[] = []\n          retrievedMetadata.forEach(metadata => {\n            const pm = new dmv.metadata.ParametricMap({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              pm.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              parametricMaps.push(pm)\n            } else {\n              console.warn(\n                `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n              )\n            }\n          })\n          if (parametricMaps.length > 0) {\n            try {\n              this.volumeViewer.addParameterMappings(parametricMaps)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error('Parametric Map cannot be displayed')\n              console.error('failed to add mappings: ', error)\n            }\n            /*\n           * React is not aware of the fact that mappings have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the mappings in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Parametric Map instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of Parametric Map instances: ', error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Search for Parametric Map instances failed.')\n      console.error('failed to search for Parametric Map instances: ', error)\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    this.addAnnotations()\n    this.addAnnotationGroups()\n    this.addSegmentations()\n    this.addParametricMaps()\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer != null) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi !== null) {\n      console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n      this.volumeViewer.setROIStyle(selectedRoi.uid, this.selectedRoiStyle)\n      const key = _getRoiKey(selectedRoi)\n      this.volumeViewer.getAllROIs().forEach((roi) => {\n        if (roi.uid !== selectedRoi.uid) {\n          this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n        }\n      })\n      this.setState({ selectedRoiUIDs: new Set([selectedRoi.uid]) })\n    } else {\n      this.setState({ selectedRoiUIDs: new Set() })\n    }\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === SOPClassUIDs.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray != null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID == null) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount (): void {\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount (): void {\n    window.addEventListener('beforeunload', this.componentCleanup)\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection (value: any): void {\n    if (value != null) {\n      const x = Number(value)\n      const start = this.state.validXCoordinateRange[0]\n      const end = this.state.validXCoordinateRange[1]\n      if (x >= start && x <= end) {\n        this.setState({\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedXCoordinate: undefined,\n      isSelectedXCoordinateValid: false\n    })\n  }\n\n  handleYCoordinateSelection (value: any): void {\n    if (value != null) {\n      const y = Number(value)\n      const start = this.state.validYCoordinateRange[0]\n      const end = this.state.validYCoordinateRange[1]\n      if (y >= start && y <= end) {\n        this.setState({\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedYCoordinate: undefined,\n      isSelectedYCoordinateValid: false\n    })\n  }\n\n  handleMagnificationSelection (value: any): void {\n    if (value != null) {\n      if (value > 0 && value <= 40) {\n        this.setState({\n          selectedMagnification: Number(value),\n          isSelectedMagnificationValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedMagnification: undefined,\n      isSelectedMagnificationValid: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection (): void {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n      this.state.selectedXCoordinate != null &&\n      this.state.selectedYCoordinate != null &&\n      this.state.selectedMagnification != null\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation (): void {\n    console.log('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      isSelectedMagnificationValid: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      console.error('could not complete annotation configuration')\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    // Metadata should be sorted such that the image with the highest\n    // resolution is the last item in the array.\n    const refImage = metadata[metadata.length - 1]\n    // We assume that there is only one specimen (tissue section) per\n    // ontainer (slide). Only the tissue section is tracked with a unique\n    // identifier, even if the section may be composed of different biological\n    // samples.\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\n      console.error('more than one specimen has been described for the slide')\n    }\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n    console.debug('create Observation Context')\n    let observer\n    if (this.props.user !== undefined) {\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: this.props.user.name,\n        loginName: this.props.user.email\n      })\n    } else {\n      console.warn('no user information available')\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: 'ANONYMOUS'\n      })\n    }\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121006',\n          schemeDesignator: 'DCM',\n          meaning: 'Person'\n        }),\n        observerIdentifyingAttributes: observer\n      }),\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121007',\n          schemeDesignator: 'DCM',\n          meaning: 'Device'\n        }),\n        observerIdentifyingAttributes:\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\n            uid: this.props.app.uid,\n            manufacturerName: 'MGH Computational Pathology',\n            modelName: this.props.app.name\n          })\n      }),\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\n          value: '121027',\n          schemeDesignator: 'DCM',\n          meaning: 'Specimen'\n        }),\n        subjectClassSpecificContext:\n          new dcmjs.sr.templates.SubjectContextSpecimen({\n            uid: refSpecimen.SpecimenUID,\n            identifier: refSpecimen.SpecimenIdentifier,\n            containerIdentifier: refImage.ContainerIdentifier\n          })\n      })\n    })\n\n    console.debug('encode Imaging Measurements')\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\n    for (let i = 0; i < rois.length; i++) {\n      const roi = rois[i]\n      if (!this.state.visibleRoiUIDs.has(roi.uid)) {\n        continue\n      }\n      let findingType = roi.evaluations.find(\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n        }\n      )\n      if (findingType === undefined) {\n        throw new Error(`No finding type was specified for ROI \"${roi.uid}\"`)\n      }\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.properties.trackingUID ?? roi.uid,\n          identifier: `ROI #${i + 1}`\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: findingType.ConceptCodeSequence[0].CodeValue,\n          schemeDesignator:\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n        }),\n        qualitativeEvaluations: roi.evaluations.filter(\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n          }\n        ),\n        measurements: roi.measurements\n      })\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\n      measurements[0].ContentTemplateSequence = [{\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }]\n      imagingMeasurements.push(...measurements)\n    }\n\n    console.debug('create Measurement Report document content')\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\n      observationContext: observationContext,\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\n        value: '112703',\n        schemeDesignator: 'DCM',\n        meaning: 'Whole Slide Imaging'\n      }),\n      imagingMeasurements: imagingMeasurements\n    })\n\n    console.info('create Comprehensive 3D SR document')\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n      content: measurementReport[0],\n      evidence: [refImage],\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      seriesNumber: 1,\n      seriesDescription: 'Annotation',\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      instanceNumber: 1,\n      manufacturer: 'MGH Computational Pathology',\n      previousVersions: undefined // TODO\n    })\n\n    this.setState({\n      isReportModalVisible: true,\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      this.props.client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Annotations could not be saved')\n        console.error(error)\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when an annotation has been selected from the\n   * current list of annotations.\n   */\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\n    console.log(`selected ROI ${roiUID}`)\n    this.setState({ selectedRoiUIDs: new Set([roiUID]) })\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (roi.uid === roiUID) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of annotation group ${annotationGroupUID}`)\n    this.volumeViewer.setAnnotationGroupStyle(annotationGroupUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState (): void {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState != null) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Presentation State could not be found')\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (this.volumeViewer.areROIsVisible) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    annotationGroups.push(...this.volumeViewer.getAllAnnotationGroups())\n\n    const openSubMenuItems = [\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\n    ]\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map(finding => {\n      return (\n        <Select.Option\n          key={finding.CodeValue}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach(evaluation => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={code.CodeValue}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const equipmentMenu = (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach(instance => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={instance.SOPInstanceUID}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={null}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          {}\n        </Select.Option>\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={<UndoOutlined />}\n                type='primary'\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametric-maps')\n    }\n\n    let annotationGroupMenu\n    if (annotationGroups.length > 0) {\n      const defaultAnnotationGroupStyles: {\n        [annotationGroupUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const annotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    const annotationTools = [\n      <Button\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Button\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Button\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Button\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Button\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Button\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Button\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    let cursor = 'default'\n    if (this.state.isLoading) {\n      cursor = 'progress'\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden',\n              cursor: cursor\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            visible={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {annotationConfigurations}\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isGoToModalVisible}\n            title='Go to slide position'\n            onOk={this.handleSlidePositionSelection}\n            onCancel={this.handleSlidePositionSelectionCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              <InputNumber\n                placeholder={(\n                  '[' +\n                  `${this.state.validXCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validXCoordinateRange[1]}` +\n                  ']'\n                )}\n                prefix='X Coordinate [mm]'\n                onChange={this.handleXCoordinateSelection}\n                onPressEnter={this.handleXCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedXCoordinateValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validYCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validYCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='Y Coordinate [mm]'\n                onChange={this.handleYCoordinateSelection}\n                onPressEnter={this.handleYCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedYCoordinateValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n              <InputNumber\n                placeholder='[0 - 40]'\n                prefix='Magnification'\n                onChange={this.handleMagnificationSelection}\n                onPressEnter={this.handleMagnificationSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedMagnificationValid\n                    ? <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                    : <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n            onOpenChange={() => {\n              // Give menu item time to render before updating viewer size\n              setTimeout(\n                () => {\n                  if (this.labelViewer != null) {\n                    this.labelViewer.resize()\n                  }\n                },\n                100\n              )\n            }}\n          >\n            <Menu.SubMenu key='label' title='Slide label'>\n              <Menu.Item style={{ height: '100%' }} key='image'>\n                <div\n                  style={{ height: '220px' }}\n                  ref={this.labelViewportRef}\n                />\n              </Menu.Item>\n            </Menu.SubMenu>\n            {specimenMenu}\n            {equipmentMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID != null) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      throw new Error('Value of option \"images\" have been non-zero length.')\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (hasImageFlavor(image, ImageFlavors.VOLUME)) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.THUMBNAIL)) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n    if (volumeImages.length === 0) {\n      throw new Error('At least one volume image must be provided for a slide.')\n    } else {\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        throw new Error(\n          'All volume images of a slide must have the same number of ' +\n          'Samples per Pixel.'\n        )\n      }\n    }\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n    if (containerIdentifiers.size !== 1) {\n      throw new Error(\n        'All images of a slide must have the same Container Identifier.'\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      throw new Error(\n        'All VOLUME images of a slide must have ' +\n        'the same Frame of Reference UID.'\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) => {\n        return (\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n        )\n      })\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import React from 'react'\nimport {\n  Routes,\n  Route,\n  useLocation,\n  useParams\n} from 'react-router-dom'\nimport {\n  Layout,\n  message,\n  Menu\n} from 'antd'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide, createSlides } from '../data/slides'\nimport { SOPClassUIDs } from '../data/uids'\nimport { RouteComponentProps, withRouter } from '../utils/router'\n\nfunction ParametrizedSlideViewer ({\n  client,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  client: DicomWebManager\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID, seriesInstanceUID } = useParams()\n  const location = useLocation()\n\n  const selectedSlide = slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string|null|undefined\n  if (!searchParams.has('access_token')) {\n    presentationStateUID = searchParams.get('state')\n    if (presentationStateUID === null) {\n      presentationStateUID = undefined\n    }\n  }\n  let viewer = null\n  if (selectedSlide != null) {\n    viewer = (\n      <SlideViewer\n        client={client}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  client: DicomWebManager\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\ninterface ViewerState {\n  slides: Slide[]\n  isLoading: boolean\n}\n\nclass Viewer extends React.Component<ViewerProps, ViewerState> {\n  state = {\n    slides: [],\n    isLoading: true\n  }\n\n  constructor (props: ViewerProps) {\n    super(props)\n    this.handleSeriesSelection = this.handleSeriesSelection.bind(this)\n  }\n\n  componentDidMount (): void {\n    this.fetchImageMetadata().then(\n      (metadata: dmv.metadata.VLWholeSlideMicroscopyImage[][]) => {\n        this.setState({\n          slides: createSlides(metadata),\n          isLoading: false\n        })\n      }\n    ).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error(\n        'An error occured. ' +\n          'Image metadata could not be retrieved or decoded.'\n      )\n      console.error(error)\n      this.setState({ isLoading: false })\n    })\n  }\n\n  /**\n   * Fetch metadata for VL Whole Slide Microscopy Image instances of the study.\n   *\n   * @returns Metadata of image instances of the study grouped per series\n   */\n  async fetchImageMetadata (): Promise<dmv.metadata.VLWholeSlideMicroscopyImage[][]> {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    const studyInstanceUID = this.props.studyInstanceUID\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n    const matchedSeries = await this.props.client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(matchedSeries.map(async (s) => {\n      const { dataset } = dmv.metadata.formatMetadata(s)\n      const loadingSeries = dataset as dmv.metadata.Series\n      console.info(\n        `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n      )\n      const retrievedMetadata = await this.props.client.retrieveSeriesMetadata({\n        studyInstanceUID: this.props.studyInstanceUID,\n        seriesInstanceUID: loadingSeries.SeriesInstanceUID\n      })\n\n      const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n      retrievedMetadata.forEach((item, index) => {\n        if (item['00080016'] != null) {\n          const values = item['00080016'].Value\n          if (values != null) {\n            const sopClassUID = values[0]\n            if (sopClassUID === SOPClassUIDs.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE) {\n              const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n                metadata: item\n              })\n              seriesImages.push(image)\n            }\n          }\n        }\n      })\n\n      if (seriesImages.length > 0) {\n        images.push(seriesImages)\n      }\n    }))\n\n    return images\n  }\n\n  handleSeriesSelection (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ): void {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${this.props.studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n    if (\n      this.props.location.pathname.includes('/series/') &&\n      this.props.location.search != null\n    ) {\n      urlPath += this.props.location.search\n    }\n    this.props.navigate(urlPath, { replace: true })\n  }\n\n  render (): React.ReactNode {\n    if (this.state.isLoading) {\n      return null\n    }\n\n    if (this.state.slides.length === 0) {\n      return null\n    }\n    const firstSlide = this.state.slides[0] as Slide\n    const volumeInstances = firstSlide.volumeImages\n    if (volumeInstances.length === 0) {\n      return null\n    }\n    const refImage = volumeInstances[0]\n\n    /* If a series is encoded in the path, route the viewer to this series.\n     * Otherwise select the first series correspondent to\n     * the first slide contained in the study.\n     */\n    let selectedSeriesInstanceUID: string\n    if (this.props.location.pathname.includes('series/')) {\n      const fragments = this.props.location.pathname.split('/')\n      selectedSeriesInstanceUID = fragments[4]\n    } else {\n      selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n    }\n\n    let clinicalTrialMenu\n    if (refImage.ClinicalTrialSponsorName != null) {\n      clinicalTrialMenu = (\n        <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n          <ClinicalTrial metadata={refImage} />\n        </Menu.SubMenu>\n      )\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Sider\n          width={300}\n          style={{\n            height: '100%',\n            borderRight: 'solid',\n            borderRightWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n          >\n            <Menu.SubMenu key='patient' title='Patient'>\n              <Patient metadata={refImage} />\n            </Menu.SubMenu>\n            <Menu.SubMenu key='study' title='Study'>\n              <Study metadata={refImage} />\n            </Menu.SubMenu>\n            {clinicalTrialMenu}\n            <Menu.SubMenu key='slides' title='Slides'>\n              <SlideList\n                client={this.props.client}\n                metadata={this.state.slides}\n                selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n                onSeriesSelection={this.handleSeriesSelection}\n              />\n            </Menu.SubMenu>\n          </Menu>\n        </Layout.Sider>\n\n        <Routes>\n          <Route\n            path='/series/:seriesInstanceUID'\n            element={\n              <ParametrizedSlideViewer\n                client={this.props.client}\n                slides={this.state.slides}\n                preload={this.props.preload}\n                annotations={this.props.annotations}\n                enableAnnotationTools={this.props.enableAnnotationTools}\n                app={this.props.app}\n                user={this.props.user}\n              />\n            }\n          />\n        </Routes>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(Viewer)\n","import React from 'react'\nimport {\n  NavLink\n} from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Menu,\n  Modal,\n  Row,\n  Space\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  UnorderedListOutlined,\n  UserOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    this.state = {\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: true\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = <Menu items={userMenuItems} />\n      user = (\n        <Dropdown overlay={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const handleServerSelectionInput = (\n      event: React.FormEvent<HTMLInputElement>\n    ): void => {\n      const value = event.currentTarget.value\n      let isDisabled = true\n      if (value != null) {\n        try {\n          const url = new URL(value)\n          if (url.protocol.startsWith('http') && url.pathname.length > 0) {\n            isDisabled = false\n          }\n        } catch (TypeError) {}\n      }\n      this.setState({\n        selectedServerUrl: value,\n        isServerSelectionDisabled: isDisabled\n      })\n    }\n\n    const handleServerSelectionCancellation = (event: any): void => {\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const handleServerSelection = (event: any): void => {\n      const url = this.state.selectedServerUrl\n      let closeModal = false\n      if (url != null && url !== '') {\n        if (url.startsWith('http://') || url.startsWith('https://')) {\n          this.props.onServerSelection({ url })\n          closeModal = true\n        }\n      }\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: !closeModal,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row>\n            <Col>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' />\n            <Col>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          visible={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={handleServerSelection}\n          onCancel={handleServerSelectionCancellation}\n        >\n          <Input\n            placeholder='Enter base URL of DICOMweb Study Service'\n            onChange={handleServerSelectionInput}\n            onPressEnter={handleServerSelection}\n            addonAfter={\n              this.state.isServerSelectionDisabled\n                ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n            }\n          />\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport {\n  Button,\n  Input,\n  message,\n  Space,\n  Table,\n  TablePaginationConfig\n} from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\n\ninterface WorklistProps extends RouteComponentProps {\n  client: DicomWebManager\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    this.props.client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map((study) => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('An error occured. Search for studies failed.')\n      console.error(error)\n    })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.client !== previousProps.client) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    this.props.client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map((study) => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    }).catch(() => message.error('Request to search for studies failed.'))\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\n\nconst createUser = (userData: UserData): User => {\n  const profile = userData.profile\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      throw Error('Failed to obtain user \"name\" and \"email\".')\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    throw Error('Failed to obtain user profile.')\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        throw Error('Failed to obtain access token.')\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        throw Error('Failed to obtain user information.')\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        throw Error('At least one server needs to be configured.')\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        throw new Error(\n          'Either path or full URL needs to be configured for server.'\n        )\n      }\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      throw new Error('Only one store is supported for now.')\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveStudyMetadata(options)\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveSeriesMetadata(options)\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    return await this.stores[0].client.retrieveInstance(options)\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { joinUrl } from './utils/url'\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport DicomWebManager from './DicomWebManager'\n\nfunction ParametrizedCaseViewer ({ client, user, app, config }: {\n  client: DicomWebManager\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <CaseViewer\n      client={client}\n      user={user}\n      annotations={config.annotations}\n      preload={preload}\n      app={app}\n      enableAnnotationTools={enableAnnotationTools}\n      studyInstanceUID={studyInstanceUID}\n    />\n  )\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  client: DicomWebManager\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    }\n    if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('User is not authorized to access DICOMweb resources.')\n    }\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach(\n        ({ status, message }: ErrorMessageSettings) => {\n          if (error.status === status) {\n            this.setState({\n              error: {\n                status: error.status,\n                message\n              }\n            })\n          }\n        }\n      )\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      throw Error('One server needs to be configured.')\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n\n    this.state = {\n      client: new DicomWebManager({\n        baseUri: baseUri,\n        settings: props.config.servers,\n        onError: this.handleDICOMwebError\n      }),\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    const client = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    client.updateHeaders(this.state.client.headers)\n    this.setState({ client })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    console.info(\n      `handle sign in of user \"${user.name}\" and ` +\n      `update authorization token \"${authorization}\"`\n    )\n    const client = this.state.client\n    client.updateHeaders({ Authorization: authorization })\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath != null) {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch != null) {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({\n      user: user,\n      client: client\n    })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error('sign-in failed ', error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Could not sign-in user.')\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path == null) {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist client={this.state.client} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      client={this.state.client}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","ClinicalTrial","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","Patient","PatientID","PatientName","PatientSex","PatientBirthDate","Study","AccessionNumber","StudyID","StudyDate","StudyTime","SlideItem","state","isLoading","overviewViewportRef","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","console","info","ContainerIdentifier","dmv","client","resizeFactor","render","container","resize","description","style","height","containerIdentifier","ref","seriesInstanceUIDs","SlideList","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","AnnotationItem","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","AnnotationList","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","AnnotationGroupItem","handleMeasurementSelection","handleOpacityChange","currentStyle","opacity","defaultStyle","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","option","codeComponents","measurement","schemeDesignator","meaning","propertyType","propertyCategory","algorithmName","AnnotationGroupSequence","findIndex","AnnotationGroupUID","measurementOptions","MeasurementsSequence","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","settings","justify","gutter","range","min","max","step","plain","minWidth","defaultValue","direction","placement","content","overlayStyle","type","shape","SettingOutlined","AnnotationGroupList","annotationGroups","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupVisibilityChange","onAnnotationGroupStyleChange","Button","handleClick","text","button","Icon","isSelected","tooltip","Equipment","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","Error","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","GraphicType","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","slice","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","Report","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","Item","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","SpecimenItem","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","SpecimenList","overflowY","OpticalPathItem","handleLimitChange","handleLowerLimitChange","handleUpperLimitChange","handleColorRChange","handleColorGChange","handleColorBChange","handleRemoval","getCurrentColors","color","paletteColorLookupTable","limitValues","previousProps","previousState","opticalPath","opticalPathIdentifier","Array","isArray","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","maxValue","Math","pow","BitsAllocated","isMonochromatic","colorSettings","windowSettings","colors","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","OpticalPathList","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","SeriesInstanceUID","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","MappingItem","mappingUID","mapping","MappingList","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","SegmentItem","segmentUID","segment","SegmentList","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","SOPClassUIDs","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","warn","_constructViewers","preload","volumeImages","labelViewer","volumeViewer","controls","activateSelectInteraction","labelImages","error","message","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","defaultRoiStyle","stroke","fill","image","circle","radius","roiStyles","selectionColor","selectedRoiStyle","loadPresentationStates","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","rawInstance","instance","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","includes","selectedPresentationStateUID","setPresentationState","presentationStates","Object","catch","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","Set","keys","activateOpticalPath","showOpticalPath","add","searchParams","URLSearchParams","search","set","pathname","replace","getRoiStyle","addAnnotations","SOPClassUID","COMPREHENSIVE_3D_SR","templateSeq","ContentTemplateSequence","TemplateIdentifier","_implementsTID1500","subjectClassValue","retrievedConcept","expectedConcept","_describesSpecimenSubject","debug","measurementGroups","foundRegion","regions","_containsROIAnnotations","FrameOfReferenceUID","doesROIExist","getAllROIs","some","otherROI","a","b","graphicType","graphicData","s1","s2","j","_areROIsEqual","addROI","forceUpdate","addAnnotationGroups","searchForSeries","matchedSeries","s","series","retrieveSeriesMetadata","retrievedMetadata","filter","ann","refImage","addSegmentations","segmentations","seg","addSegments","addParametricMaps","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","onRoiModified","onWindowResize","onRoiDrawn","detail","payload","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","onRoiSelected","selectedRoi","setROIStyle","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingEnded","delete","sopClassUID","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","onKeyUp","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","isAnnotationModalVisible","isGoToModalVisible","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","annotation","finding","geometryTypes","componentSetup","componentCleanup","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationVisibilityChange","handleAnnotationGroupVisibilityChange","handleAnnotationGroupStyleChange","handleXCoordinateSelection","handleYCoordinateSelection","handleMagnificationSelection","handleSlidePositionSelection","handleSlidePositionSelectionCancellation","handleReportVerification","handleReportCancellation","handleSegmentVisibilityChange","handleSegmentStyleChange","handleMappingVisibilityChange","handleMappingStyleChange","handleOpticalPathVisibilityChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","boundingBox","generatedReport","isSelectedMagnificationValid","isReportModalVisible","isSelectedXCoordinateValid","isSelectedYCoordinateValid","selectedXCoordinate","validXCoordinateRange","selectedYCoordinate","validYCoordinateRange","selectedMagnification","areRoisHidden","cleanup","isOpticalPathVisible","isOpticalPathActive","document","body","removeEventListener","window","addEventListener","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","target","selectedMarkup","filteredEvaluations","x","Number","start","end","y","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","position","point","log","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","observer","refSpecimen","user","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","app","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","find","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","evidence","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","getROI","showAnnotationGroup","hideAnnotationGroup","setAnnotationGroupStyle","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","sort","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areROIsVisible","hideROIs","showROIs","getAllSegments","getAllParameterMappings","getAllAnnotationGroups","annotationMenuItems","openSubMenuItems","geometryTypeOptionsMapping","box","polygon","line","freehandpolygon","freehandline","annotationConfigurations","defaultActiveFirstOption","onClear","specimenMenu","equipmentMenu","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","cursor","hasSider","overflow","visible","onOk","onCancel","okText","placeholder","prefix","onPressEnter","addonAfter","CheckOutlined","StopOutlined","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","setTimeout","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","areSameAcquisition","AcquisitionUID","Slide","options","opticalPathIdentifiers","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","THUMBNAIL","samplesPerPixel","SamplesPerPixel","PhotometricInterpretation","createSlides","slideMetadata","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","imgA","imgB","ParametrizedSlideViewer","presentationStateUID","selectedSlide","get","viewer","Viewer","handleSeriesSelection","fetchImageMetadata","StudyInstanceUID","Promise","all","loadingSeries","seriesImages","volumeInstances","clinicalTrialMenu","borderRight","borderRightWidth","path","element","Header","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleServerSelectionButtonClick","isServerSelectionModalVisible","isServerSelectionDisabled","worklistButton","userMenuItems","onUserLogout","userMenu","overlay","trigger","UserOutlined","e","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","showServerSelectionButton","ApiOutlined","handleServerSelection","url","selectedServerUrl","closeModal","startsWith","onServerSelection","src","process","alt","margin","flex","currentTarget","isDisabled","URL","protocol","TypeError","display","alignItems","justifyContent","subTitle","Worklist","defaultPageSize","handleSearch","confirm","dataIndex","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","marginBottom","SearchOutlined","filterIcon","filtered","fetchData","handleChange","studies","numStudies","pageSize","searchOptions","ModalitiesInStudy","searchForStudies","study","limit","searchCriteria","fuzzymatching","pagination","filters","columns","String","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","record","dataSource","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","args","apply","status","errorMessage","attemptFailedError","open","DicomWebManager","onError","stores","handleError","updateHeaders","fields","f","headers","reject","retrieveStudyMetadata","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","qidoPathPrefix","qidoURLPrefix","wadoPathPrefix","wadoURLPrefix","stowPathPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","errorInterceptor","read","dwc","baseURL","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","App","auth","handleDICOMwebError","errorMessages","Authorization","storedPath","localStorage","getItem","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","duration","wasAuthSuccessful","redirectTo","setItem","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}