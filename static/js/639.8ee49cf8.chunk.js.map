{"version":3,"file":"static/js/639.8ee49cf8.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","utils/CustomError.js","utils/PubSub.js","services/NotificationMiddleware.js","data/slides.tsx","services/fetchImageMetadata.ts","hooks/useSlides.ts","contexts/ValidationContext.tsx","components/ValidationWarning.tsx","components/SlideItem.tsx","components/SlideList.tsx","utils/router.tsx","utils/sr.tsx","services/RoiToAnnotationAdapter.ts","components/SlideViewer/AnnotationModal.tsx","components/SlideViewer/SelectedRoiModal.tsx","components/SlideViewer/GoToModal.tsx","components/SlideViewer/ReportModal.tsx","components/SlideViewer/SlideViewerModals.tsx","components/ColorSlider.tsx","components/OpacitySlider.tsx","components/ColorSettingsMenu.tsx","components/AnnotationCategoryItem.tsx","components/AnnotationCategoryList.tsx","components/SlideViewer/SlideViewerSidebar.tsx","components/SlideViewer/SlideViewerContent.tsx","components/SlideViewer/utils/roiUtils.ts","utils/segmentColors.ts","components/SlideViewer/utils/viewerUtils.ts","components/SlideViewer/constants.ts","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Report.tsx","components/HoveredRoiTooltip.tsx","utils/generateReport.ts","utils/pubSubServiceInterface.ts","utils/createSeriesMetadata.ts","utils/createStudyMetadata.ts","services/DICOMMetadataStore.ts","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/Equipment.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/Button.tsx","utils/logger.ts","components/SlideViewer.tsx","components/CaseViewer.tsx","components/DicomTagBrowser/dicomTagUtils.ts","utils/formatDicomDate.ts","components/DicomTagBrowser/DicomTagBrowser.tsx","hooks/useDebounce.ts","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Sex',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3',\n  OPTICAL_PATH = '1.2.840.10008.5.1.4.1.1.88.21'\n}\n","const errorTypes = {\n  AUTHENTICATION: 'Authentication',\n  COMMUNICATION: 'Communication',\n  ENCODINGANDDECODING: 'EncodingDecoding',\n  VISUALIZATION: 'Visualization'\n}\n\nclass CustomError extends Error {\n  constructor (type, message) {\n    super()\n    this.message = message\n    this.stack = new Error().stack\n    this.type = type\n  }\n}\n\nexport { errorTypes, CustomError }\n","// Use symbols to prevent exposing private attributes\nconst _subscriptions = Symbol('subscriptions')\nconst _lastSubscriptionId = Symbol('lastSubscriptionId')\n\n/**\n * Class to enable implementation of publish/subscribe pattern\n * @class\n * @classdesc Enables publishing/subscribing\n */\nexport default class PubSub {\n  constructor () {\n    this[_subscriptions] = {}\n    this[_lastSubscriptionId] = 0\n  }\n\n  /**\n   * Adds a subscription callback to the provided event name\n   * @param {string} eventName Event name that will trigger the callback\n   * @param {Function} callback Function to be executed when event is published\n   * @returns {void}\n   */\n  subscribe (eventName, callback) {\n    if (eventName === undefined) {\n      throw new Error('Trying to subscribe to an inexistent event')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('The provided callback must be a function')\n    }\n\n    if (!this[_subscriptions].hasOwnProperty(eventName)) {\n      this[_subscriptions][eventName] = {}\n    }\n\n    const subscriptionId = `sub${this[_lastSubscriptionId]++}`\n    this[_subscriptions][eventName][subscriptionId] = callback\n  }\n\n  /**\n   * Removes a subscription callback for the provided event name\n   * @param {string} eventName Event name for the registerd callback\n   * @param {Function} [callback] Function to have its subscription removed\n   * @returns {void}\n   */\n  unsubscribe (eventName, callback) {\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      if (!callback) {\n        delete callbacks[subscriptionId]\n      } else if (callbacks[subscriptionId] === callback) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n\n  /**\n   * Trigger all registered subscription callbacks for a specific event name\n   * @param {String} eventName Event name to trigger subscriptions from\n   * @param {any} [payload] Payload that will be passed to the callback fuction\n   * @returns {void}\n   */\n  publish (eventName, ...payload) {\n    if (eventName === undefined) {\n      throw new Error('Trying to publish an inexistent event')\n    }\n\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      callbacks[subscriptionId](...payload)\n    }\n  }\n\n  /**\n   * Cleares all subscriptions for current instance\n   * @returns {void}\n   */\n  unsubscribeFromAll () {\n    for (const eventName in this[_subscriptions]) {\n      const callbacks = this[_subscriptions][eventName]\n      for (const subscriptionId in callbacks) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n}\n","import PubSub from '../utils/PubSub'\nimport { notification } from 'antd'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nexport const NotificationMiddlewareEvents = {\n  OnError: 'onError',\n  OnWarning: 'onWarning'\n}\n\nexport const NotificationMiddlewareContext = {\n  DICOMWEB: 'dicomweb-client',\n  DMV: 'dicom-microscopy-viewer',\n  DCMJS: 'dcmjs',\n  SLIM: 'slim',\n  AUTH: 'authentication'\n}\n\nconst NotificationType = {\n  TOAST: 'toast',\n  CONSOLE: 'console'\n}\n\n/* Sources of Error:\n  1. 'dicomweb-client': Error while requesting/fetching data, tagged as 'Communication'\n  2. 'slim' and 'dicom-microscopy-viewer' library: Error related to dicom data encoding/decoding,\n  could directly/indirectly impact image-related visualization, tagged as 'Visualization' or\n  'Encoding/Decoding' accordingly\n  3. 'dcmjs' library: Data parsing error, tagged as 'DICOMError'\n  4. 'authentication': Error during user authentication, tagged as 'Authentication'\n  */\nconst NotificationSourceDefinition = {\n  sources: [\n    {\n      category: errorTypes.AUTHENTICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.COMMUNICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.VISUALIZATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.ENCODINGANDDECODING,\n      notificationType: NotificationType.CONSOLE\n    },\n    {\n      category: 'Warning',\n      notificationType: NotificationType.TOAST\n    }\n  ]\n}\n\nclass NotificationMiddleware extends PubSub {\n  constructor () {\n    super()\n\n    const outerContext = (args) => {\n      this.publish(NotificationMiddlewareEvents.OnWarning, Array.from(args).join(' '))\n    }\n\n    (function () {\n      const warn = console.warn\n      console.warn = function () {\n        if (!JSON.stringify(arguments).includes('request')) {\n          outerContext(arguments)\n        }\n        warn.apply(this, Array.prototype.slice.call(arguments))\n      }\n    }())\n  }\n\n  /**\n   * Error handling middleware function\n   *\n   * @param source - source of error - dicomweb-client, dmv, dcmjs or slim itself\n   * @param error - error object\n   */\n  onError (source, error) {\n    const errorCategory = error.type\n    const sourceConfig = NotificationSourceDefinition.sources.find(\n      s => s.category === errorCategory\n    )\n\n    const { notificationType } = sourceConfig\n\n    this.publish(NotificationMiddlewareEvents.OnError, {\n      source,\n      error\n    })\n\n    let notificationMsg\n    if (error instanceof CustomError) {\n      notificationMsg = error.message\n    } else {\n      notificationMsg = String(error)\n    }\n\n    switch (notificationType) {\n      case NotificationType.TOAST:\n        // Only log errors in development environment\n        if (process.env.NODE_ENV === 'development') {\n          console.error(`A ${errorCategory} error occurred: `, error)\n        }\n        return notification.error({\n          message: `${errorCategory} error`,\n          description: notificationMsg,\n          duration: 3\n        })\n\n      case NotificationType.CONSOLE:\n        // Only log errors in development environment\n        if (process.env.NODE_ENV === 'development') {\n          console.error(`A ${errorCategory} error occurred: `, error)\n        }\n        break\n\n      default:\n    }\n  }\n}\n\nexport default new NotificationMiddleware()\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID !== null && image.AcquisitionUID !== undefined) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  thumbnailImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null | undefined\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly thumbnailImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Value of option \"images\" have been non-zero length.'\n        )\n      )\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const thumbnailImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID !== null && image.AcquisitionUID !== undefined) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (hasImageFlavor(image, ImageFlavors.VOLUME) || hasImageFlavor(image, ImageFlavors.THUMBNAIL)) {\n        if (hasImageFlavor(image, ImageFlavors.THUMBNAIL)) {\n          thumbnailImages.push(image)\n        }\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID !== null && image.PyramidUID !== undefined) {\n          for (const identifier of Object.keys(opticalPathIdentifiers)) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n\n    if (volumeImages.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'At least one VOLUME image must be provided for a slide.'\n        )\n      )\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n            'image that has not been resampled per optical path'\n        )\n      }\n    }\n\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n    this.thumbnailImages = thumbnailImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All images of a slide must have the same Container Identifier.'\n        )\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must have ' +\n          'the same Frame of Reference UID.'\n        )\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `All VOLUME images for optical path \"${identifier}\"` +\n              'must be part of the same multi-resolution pyramid.'\n            )\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must be part of the same  ' +\n          'acquisition and have the same Acquisition UID.'\n        )\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter(\n        (image) =>\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      )\n      const thumbnailImages = series.filter(\n        (image) => hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      )\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages,\n            thumbnailImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n          slideMetadataItem.thumbnailImages.push(...thumbnailImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './NotificationMiddleware'\nimport { createSlides, Slide } from '../data/slides'\n\ninterface FetchImageMetadataParams {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  onSuccess: (slides: Slide[]) => void\n  onError: (error: Error) => void\n}\n\nexport const fetchImageMetadata = async ({\n  clients,\n  studyInstanceUID,\n  onSuccess,\n  onError\n}: FetchImageMetadataParams): Promise<void> => {\n  try {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n\n    const client = clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(\n      matchedSeries.map(async (s) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const loadingSeries = dataset as dmv.metadata.Series\n        console.info(\n          `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n        )\n        const retrievedMetadata = await client.retrieveSeriesMetadata({\n          studyInstanceUID: studyInstanceUID,\n          seriesInstanceUID: loadingSeries.SeriesInstanceUID\n        })\n\n        const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n        retrievedMetadata.forEach((item) => {\n          if (\n            item['00080016']?.Value?.[0] ===\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        })\n\n        if (seriesImages.length > 0) {\n          images.push(seriesImages)\n        }\n      })\n    )\n    const newSlides = createSlides(images)\n    onSuccess(newSlides)\n  } catch (err) {\n    console.error(err)\n    const customError = new CustomError(\n      errorTypes.ENCODINGANDDECODING,\n      'Image metadata could not be retrieved or decoded.'\n    )\n    onError(customError)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      customError\n    )\n  }\n}\n","import { useState, useEffect, useMemo } from 'react'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\nimport { fetchImageMetadata } from '../services/fetchImageMetadata'\n\ninterface UseSlidesProps {\n  clients?: { [key: string]: DicomWebManager }\n  studyInstanceUID?: string\n}\n\ninterface UseSlidesReturn {\n  slides: Slide[]\n  isLoading: boolean\n  error: Error | null\n}\n\nconst slidesCache = new Map<string, Slide[]>()\nconst pendingRequests = new Map<string, Promise<Slide[]>>()\nconst cacheTimestamps = new Map<string, number>()\n\n// Cache expiration time: 30 minutes\nconst CACHE_EXPIRATION_TIME = 30 * 60 * 1000\n\n// Clean up expired cache entries\nconst cleanupExpiredCache = (): void => {\n  const now = Date.now()\n  for (const [key, timestamp] of cacheTimestamps.entries()) {\n    if (now - timestamp > CACHE_EXPIRATION_TIME) {\n      slidesCache.delete(key)\n      cacheTimestamps.delete(key)\n    }\n  }\n}\n\n// Utility functions for cache management\nexport const clearSlidesCache = (studyInstanceUID?: string): void => {\n  if (studyInstanceUID !== null && studyInstanceUID !== undefined && studyInstanceUID !== '' && studyInstanceUID.length > 0) {\n    slidesCache.delete(studyInstanceUID)\n    cacheTimestamps.delete(studyInstanceUID)\n    pendingRequests.delete(studyInstanceUID)\n  } else {\n    slidesCache.clear()\n    cacheTimestamps.clear()\n    pendingRequests.clear()\n  }\n}\n\nexport const getCachedSlides = (studyInstanceUID: string): Slide[] | undefined => {\n  return slidesCache.get(studyInstanceUID)\n}\n\nexport const isSlidesCached = (studyInstanceUID: string): boolean => {\n  return slidesCache.has(studyInstanceUID)\n}\n\n/**\n * Hook to fetch and manage whole slide microscopy images for a given study.\n * Values are cached so they can be reused if props are not provided.\n * If no arguments are provided, returns the most recently cached slides.\n *\n * @param props - Hook configuration props (optional)\n * @param props.clients - Map of DICOM web clients keyed by storage class\n * @param props.studyInstanceUID - Study instance UID to fetch slides for\n */\nexport const useSlides = ({ clients, studyInstanceUID }: UseSlidesProps = {}): UseSlidesReturn => {\n  const [slides, setSlides] = useState<Slide[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    // Clean up expired cache entries periodically\n    cleanupExpiredCache()\n\n    // If no arguments provided, return cached slides if available\n    if ((clients === null || clients === undefined) || (studyInstanceUID === null || studyInstanceUID === undefined) || studyInstanceUID === '' || studyInstanceUID.length === 0) {\n      // Get the most recently cached slides (last entry in the cache)\n      const cachedEntries = Array.from(slidesCache.entries())\n      if (cachedEntries.length > 0) {\n        const lastCachedSlides = cachedEntries[cachedEntries.length - 1][1]\n        setSlides(lastCachedSlides)\n        setIsLoading(false)\n        setError(null)\n      } else {\n        setSlides([])\n        setIsLoading(false)\n        setError(null)\n      }\n      return\n    }\n\n    const cachedData = slidesCache.get(studyInstanceUID)\n    if (cachedData !== undefined) {\n      setSlides(cachedData)\n      setIsLoading(false)\n      setError(null)\n      return\n    }\n\n    setIsLoading(true)\n    setError(null)\n\n    const fetchSlides = async (): Promise<void> => {\n      // Check if there's already a pending request for this study\n      let pendingRequest = pendingRequests.get(studyInstanceUID)\n\n      if (pendingRequest === undefined) {\n        // Create a new promise for this request\n        pendingRequest = new Promise<Slide[]>((resolve, reject): void => {\n          fetchImageMetadata({\n            clients,\n            studyInstanceUID,\n            onSuccess: (newSlides) => {\n              slidesCache.set(studyInstanceUID, newSlides)\n              cacheTimestamps.set(studyInstanceUID, Date.now())\n              resolve(newSlides)\n            },\n            onError: (err) => {\n              reject(err)\n            }\n          }).catch((err) => {\n            reject(err)\n          })\n        })\n        pendingRequests.set(studyInstanceUID, pendingRequest)\n      }\n\n      try {\n        const newSlides = await pendingRequest\n        setSlides(newSlides)\n        setError(null)\n      } catch (err) {\n        setError(err as Error)\n        setSlides([])\n      } finally {\n        pendingRequests.delete(studyInstanceUID)\n        setIsLoading(false)\n      }\n    }\n\n    void fetchSlides()\n  }, [clients, studyInstanceUID])\n\n  // Memoize the return value to prevent unnecessary re-renders\n  const result = useMemo(() => ({\n    slides,\n    isLoading,\n    error\n  }), [slides, isLoading, error])\n\n  return result\n}\n","import React, { createContext, useContext, useState, useCallback, useEffect, useMemo } from 'react'\nimport { Modal } from 'antd'\nimport { useSlides } from '../hooks/useSlides'\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\ninterface ValidationResult {\n  isValid: boolean\n  message?: string\n  type: 'warning' | 'error' | 'info'\n}\n\ninterface ValidationContextType {\n  runValidations: (options: { dialog?: boolean, context: { annotationGroup?: dmv.annotation.AnnotationGroup, slide?: Slide } }) => ValidationResult\n}\n\nconst ValidationContext = createContext<ValidationContextType | undefined>(undefined)\n\n/**\n * Global validation function for class components\n */\nlet globalValidationContext: ValidationContextType | null = null\n\nfunction setGlobalValidationContext (context: ValidationContextType): void {\n  globalValidationContext = context\n}\n\ninterface ValidationProviderProps {\n  children: React.ReactNode\n  clients?: { [key: string]: DicomWebManager }\n  studyInstanceUID?: string\n}\n\n/**\n * ValidationProvider - Provides validation context for running validations and showing dialogs\n *\n * Usage:\n * 1. Wrap your component tree with ValidationProvider\n * 2. Use useValidation hook to access validation functions\n *\n * Example:\n * ```tsx\n * // Simple usage - just call runValidations with options\n * const { runValidations } = useValidation()\n *\n * const handleAction = () => {\n *   const result = runValidations({\n *     dialog: true,\n *     context: { annotationGroup, slide }\n *   })\n *   if (result.isValid) {\n *     // proceed with action\n *   }\n * }\n * ```\n */\nexport const ValidationProvider: React.FC<ValidationProviderProps> = ({\n  children,\n  clients,\n  studyInstanceUID\n}) => {\n  const [isDialogVisible, setIsDialogVisible] = useState(false)\n  const [currentValidationResult, setCurrentValidationResult] = useState<ValidationResult | null>(null)\n  const { slides } = useSlides({ clients, studyInstanceUID })\n\n  // Memoize slides to prevent unnecessary re-renders when slides array reference changes but content is the same\n  const memoizedSlides = useMemo(() => {\n    // Only update if slides actually changed (deep comparison would be expensive, so we use a simple approach)\n    // For now, we'll use the slides directly but memoize the validation functions more efficiently\n    return slides\n  }, [slides])\n\n  // Memoize the slides length and existence to avoid unnecessary validation function recreations\n  const slidesInfo = useMemo(() => {\n    const slidesLength = slides?.length\n    let hasSlides = false\n    if (slides !== null && slides !== undefined && typeof slidesLength === 'number' && !Number.isNaN(slidesLength)) {\n      hasSlides = slidesLength !== 0\n    }\n    return {\n      hasSlides,\n      slidesLength: slidesLength ?? 0\n    }\n  }, [slides])\n\n  const showValidationDialog = useCallback((result: ValidationResult) => {\n    setCurrentValidationResult(result)\n    setIsDialogVisible(true)\n  }, [])\n\n  const validateMultiResolutionPyramid = useCallback((slide: Slide): ValidationResult => {\n    if ((slide?.volumeImages?.length ?? 0) <= 1) {\n      return {\n        isValid: false,\n        message: 'This slide is missing a multi-resolution pyramid. Display and performance may be degraded.',\n        type: 'warning'\n      }\n    }\n    return { isValid: true, type: 'info' }\n  }, [])\n\n  const validateAnnotationGroupAssociation = useCallback((annotationGroup?: dmv.annotation.AnnotationGroup): ValidationResult => {\n    if (annotationGroup !== null && annotationGroup !== undefined && slidesInfo.hasSlides) {\n      const checkSlideMatch = (slide: Slide): boolean => {\n        const checkImageMatch = (volumeImage: dmv.metadata.VLWholeSlideMicroscopyImage): boolean =>\n          volumeImage.SOPInstanceUID !== null && volumeImage.SOPInstanceUID !== undefined &&\n          volumeImage.SOPInstanceUID === (annotationGroup as dmv.annotation.AnnotationGroup & { referencedSOPInstanceUID: string }).referencedSOPInstanceUID\n\n        const hasMatchingImage = slide.volumeImages?.some(checkImageMatch)\n        return hasMatchingImage\n      }\n\n      const hasMatchingSlide = memoizedSlides.some(checkSlideMatch)\n\n      if (!hasMatchingSlide) {\n        return {\n          isValid: false,\n          message: 'The annotation group is not associated with any slide.',\n          type: 'warning'\n        }\n      }\n    }\n    return { isValid: true, type: 'info' }\n  }, [memoizedSlides, slidesInfo.hasSlides])\n\n  const runValidations = useCallback((options: { dialog?: boolean, context: { annotationGroup?: dmv.annotation.AnnotationGroup, slide?: Slide } }): ValidationResult => {\n    const { dialog = false, context } = options\n    const { annotationGroup, slide } = context\n\n    if (slide !== null && slide !== undefined) {\n      const pyramidValidation = validateMultiResolutionPyramid(slide)\n      if (!pyramidValidation.isValid) {\n        if (dialog) {\n          showValidationDialog(pyramidValidation)\n        }\n        return pyramidValidation\n      }\n    }\n\n    const associationValidation = validateAnnotationGroupAssociation(annotationGroup)\n    if (!associationValidation.isValid) {\n      if (dialog) {\n        showValidationDialog(associationValidation)\n      }\n      return associationValidation\n    }\n\n    return { isValid: true, type: 'info' }\n  }, [validateMultiResolutionPyramid, validateAnnotationGroupAssociation, showValidationDialog])\n\n  /**\n   * Set global validation context for class components\n   */\n  useEffect(() => {\n    const context: ValidationContextType = {\n      runValidations\n    }\n    setGlobalValidationContext(context)\n  }, [runValidations])\n\n  const handleDialogClose = useCallback((): void => {\n    setIsDialogVisible(false)\n    setCurrentValidationResult(null)\n  }, [])\n\n  function getModalType (type: ValidationResult['type']): { error?: boolean, warning?: boolean, info?: boolean } {\n    switch (type) {\n      case 'error':\n        return { error: true }\n      case 'warning':\n        return { warning: true }\n      case 'info':\n        return { info: true }\n      default:\n        return { info: true }\n    }\n  }\n\n  const value: ValidationContextType = {\n    runValidations\n  }\n\n  return (\n    <ValidationContext.Provider value={value}>\n      {children}\n      {(currentValidationResult !== null && currentValidationResult !== undefined) && (\n        <Modal\n          open={isDialogVisible}\n          onCancel={handleDialogClose}\n          onOk={handleDialogClose}\n          title={`Validation ${currentValidationResult.type.charAt(0).toUpperCase() + currentValidationResult.type.slice(1)}`}\n          okText='OK'\n          cancelButtonProps={{ style: { display: 'none' } }}\n          {...getModalType(currentValidationResult.type)}\n        >\n          <p>{currentValidationResult.message}</p>\n        </Modal>\n      )}\n    </ValidationContext.Provider>\n  )\n}\n\nexport const useValidation = (): ValidationContextType => {\n  const context = useContext(ValidationContext)\n  if (context === undefined) {\n    throw new Error('useValidation must be used within a ValidationProvider')\n  }\n  return context\n}\n\nexport const runValidations = (options: { dialog?: boolean, context: { annotationGroup?: dmv.annotation.AnnotationGroup, slide?: Slide } }): ValidationResult => {\n  if (globalValidationContext === null || globalValidationContext === undefined) {\n    console.warn('Validation context not available. Make sure ValidationProvider is mounted.')\n    return { isValid: true, type: 'info' }\n  }\n  return globalValidationContext.runValidations(options)\n}\n","import React, { useState, useEffect } from 'react'\nimport { FaExclamationTriangle } from 'react-icons/fa'\nimport { Tooltip } from 'antd'\nimport { useValidation } from '../contexts/ValidationContext'\nimport { Slide } from '../data/slides'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\ninterface ValidationWarningProps {\n  annotationGroup?: dmv.annotation.AnnotationGroup\n  onEvent?: () => void\n  slide?: Slide\n  iconColor?: string\n  iconSize?: string\n  style?: React.CSSProperties\n  position?: {\n    top?: string\n    right?: string\n  }\n}\n\nconst ValidationWarning: React.FC<ValidationWarningProps> = ({\n  slide,\n  annotationGroup,\n  iconColor = '#e69500',\n  iconSize = '1.3em',\n  position = { top: '4px', right: '4px' },\n  style\n}) => {\n  const [show, setShow] = useState(false)\n  const [tooltipText, setTooltipText] = useState<string | undefined>(undefined)\n\n  const { runValidations } = useValidation()\n\n  useEffect(() => {\n    const validationResult = runValidations({\n      dialog: false,\n      context: { annotationGroup, slide }\n    })\n    if (!validationResult.isValid) {\n      setShow(true)\n      setTooltipText(validationResult.message)\n      // Only log warnings in development environment\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(validationResult.message)\n      }\n    } else {\n      setShow(false)\n      setTooltipText(undefined)\n    }\n  }, [slide, annotationGroup, runValidations])\n\n  if (!show) {\n    return null\n  }\n\n  return (\n    <Tooltip title={tooltipText}>\n      <div style={{\n        ...style,\n        position: 'absolute',\n        top: position.top,\n        right: position.right,\n        zIndex: 2,\n        pointerEvents: 'auto'\n      }}\n      >\n        <FaExclamationTriangle style={{\n          color: iconColor,\n          fontSize: iconSize,\n          textShadow: '0 2px 6px rgba(0,0,0,0.25), 0 0px 2px #fff'\n        }}\n        />\n      </div>\n    </Tooltip>\n  )\n}\n\nexport default ValidationWarning\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport ValidationWarning from './ValidationWarning'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n\n    /* Use OVERVIEW if available, otherwise fall back to THUMBNAIL */\n    const previewImages = this.props.slide.overviewImages.length > 0\n      ? this.props.slide.overviewImages\n      : this.props.slide.thumbnailImages\n\n    if (previewImages.length > 0) {\n      const metadata = previewImages[0]\n      if (this.overviewViewportRef.current !== null && this.overviewViewportRef.current !== undefined) {\n        this.overviewViewportRef.current.innerHTML = ''\n        const imageType = this.props.slide.overviewImages.length > 0 ? 'OVERVIEW' : 'THUMBNAIL'\n        console.info(\n          `instantiate viewer for ${imageType} image of slide ` +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        const resizeFactor = 1\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          disableInteractions: true,\n          metadata,\n          resizeFactor,\n          errorInterceptor: (error: CustomError) => {\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.DMV,\n              error\n            )\n          }\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n\n    const attributes = []\n    const description = this.props.slide.description\n    if (description !== null && description !== undefined && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ position: 'relative', height: '100px' }}>\n            {(this.props.slide.overviewImages.length > 0 || this.props.slide.thumbnailImages.length > 0)\n              ? (\n                <div\n                  ref={this.overviewViewportRef}\n                  style={{ height: '100%' }}\n                />\n                )\n              : (\n                <div style={{\n                  height: '100%',\n                  textAlign: 'center',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  fontSize: '1.5rem',\n                  fontWeight: 300,\n                  color: '#8F9BA8',\n                  letterSpacing: '0.1em'\n                }}\n                >\n                  SM\n                </div>\n                )}\n            <ValidationWarning slide={this.props.slide} />\n          </div>\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== null && this.state.selectedSeriesInstanceUID !== undefined) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { AnnotationCategoryAndType } from '../components/AnnotationCategoryList'\n\nexport const adaptRoiToAnnotation = (roi: dmv.roi.ROI): AnnotationCategoryAndType => {\n  const { uid, evaluations } = roi\n\n  const result = {\n    category: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    },\n    type: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    }\n  }\n\n  evaluations.forEach((\n    item: (\n      dcmjs.sr.valueTypes.TextContentItem |\n      dcmjs.sr.valueTypes.CodeContentItem\n    )\n  ) => {\n    const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n    if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n      const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n      const value = codeContentItem.ConceptCodeSequence[0]\n      // For consistency with Segment and Annotation Group\n      if (nameValue === '276214006') {\n        result.category = { ...value }\n      } else if (nameValue === '121071') {\n        result.type = { ...value }\n      }\n    }\n  })\n\n  return {\n    ...result,\n    uid\n  }\n}\n","import React from 'react'\nimport { Modal, Space } from 'antd'\n\ninterface AnnotationModalProps {\n  isVisible: boolean\n  onOk: () => void\n  onCancel: () => void\n  isOkDisabled: boolean\n  children: React.ReactNode\n}\n\n/**\n * Modal component for configuring annotations\n */\nconst AnnotationModal: React.FC<AnnotationModalProps> = ({\n  isVisible,\n  onOk,\n  onCancel,\n  isOkDisabled,\n  children\n}) => {\n  return (\n    <Modal\n      open={isVisible}\n      title='Configure annotations'\n      onOk={onOk}\n      okButtonProps={{ disabled: isOkDisabled }}\n      onCancel={onCancel}\n      okText='Select'\n    >\n      <Space align='start' direction='vertical'>\n        {children}\n      </Space>\n    </Modal>\n  )\n}\n\nexport default AnnotationModal\n","import React from 'react'\nimport { Modal, Space } from 'antd'\n\ninterface SelectedRoiModalProps {\n  isVisible: boolean\n  onCancel: () => void\n  children: React.ReactNode\n}\n\n/**\n * Modal component for displaying selected ROI information\n */\nconst SelectedRoiModal: React.FC<SelectedRoiModalProps> = ({\n  isVisible,\n  onCancel,\n  children\n}) => {\n  return (\n    <Modal\n      open={isVisible}\n      title='Selected ROI'\n      onCancel={onCancel}\n      maskClosable\n      footer={null}\n    >\n      <Space align='start' direction='vertical'>\n        {children}\n      </Space>\n    </Modal>\n  )\n}\n\nexport default SelectedRoiModal\n","import React, { useCallback } from 'react'\nimport { Modal, Space, InputNumber } from 'antd'\nimport { CheckOutlined, StopOutlined } from '@ant-design/icons'\n\ninterface GoToModalProps {\n  isVisible: boolean\n  onOk: () => void\n  onCancel: () => void\n  validXCoordinateRange: number[]\n  validYCoordinateRange: number[]\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  isSelectedMagnificationValid: boolean\n  onXCoordinateSelection: (value: number | string | null) => void\n  onYCoordinateSelection: (value: number | string | null) => void\n  onMagnificationSelection: (value: number | string | null) => void\n}\n\n/**\n * Modal component for navigating to specific slide positions\n */\nconst GoToModal: React.FC<GoToModalProps> = ({\n  isVisible,\n  onOk,\n  onCancel,\n  validXCoordinateRange,\n  validYCoordinateRange,\n  isSelectedXCoordinateValid,\n  isSelectedYCoordinateValid,\n  isSelectedMagnificationValid,\n  onXCoordinateSelection,\n  onYCoordinateSelection,\n  onMagnificationSelection\n}) => {\n  const handleXCoordinateEnter = useCallback((event: React.KeyboardEvent<HTMLInputElement>): void => {\n    const target = event.target as HTMLInputElement\n    onXCoordinateSelection(target.value !== '' ? Number(target.value) : null)\n  }, [onXCoordinateSelection])\n\n  const handleYCoordinateEnter = useCallback((event: React.KeyboardEvent<HTMLInputElement>): void => {\n    const target = event.target as HTMLInputElement\n    onYCoordinateSelection(target.value !== '' ? Number(target.value) : null)\n  }, [onYCoordinateSelection])\n\n  const handleMagnificationEnter = useCallback((event: React.KeyboardEvent<HTMLInputElement>): void => {\n    const target = event.target as HTMLInputElement\n    onMagnificationSelection(target.value !== '' ? Number(target.value) : null)\n  }, [onMagnificationSelection])\n\n  return (\n    <Modal\n      open={isVisible}\n      title='Go to slide position'\n      onOk={onOk}\n      onCancel={onCancel}\n      okText='Select'\n    >\n      <Space align='start' direction='vertical'>\n        <InputNumber\n          placeholder={\n            '[' +\n            `${validXCoordinateRange[0]}` +\n            ', ' +\n            `${validXCoordinateRange[1]}` +\n            ']'\n          }\n          prefix='X Coordinate [mm]'\n          onChange={onXCoordinateSelection}\n          onPressEnter={handleXCoordinateEnter}\n          controls={false}\n          addonAfter={\n            isSelectedXCoordinateValid\n              ? (\n                <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n              : (\n                <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n          }\n        />\n        <InputNumber\n          placeholder={\n            '[' +\n            `${validYCoordinateRange[0]}` +\n            ', ' +\n            `${validYCoordinateRange[1]}` +\n            ']'\n          }\n          prefix='Y Coordinate [mm]'\n          onChange={onYCoordinateSelection}\n          onPressEnter={handleYCoordinateEnter}\n          controls={false}\n          addonAfter={\n            isSelectedYCoordinateValid\n              ? (\n                <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n              : (\n                <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n          }\n        />\n        <InputNumber\n          placeholder='[0 - 40]'\n          prefix='Magnification'\n          onChange={onMagnificationSelection}\n          onPressEnter={handleMagnificationEnter}\n          controls={false}\n          addonAfter={\n            isSelectedMagnificationValid\n              ? (\n                <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n              : (\n                <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                )\n          }\n        />\n      </Space>\n    </Modal>\n  )\n}\n\nexport default GoToModal\n","import React from 'react'\nimport { Modal } from 'antd'\n\ninterface ReportModalProps {\n  isVisible: boolean\n  onOk: () => void\n  onCancel: () => void\n  children: React.ReactNode\n}\n\n/**\n * Modal component for verifying and saving reports\n */\nconst ReportModal: React.FC<ReportModalProps> = ({\n  isVisible,\n  onOk,\n  onCancel,\n  children\n}) => {\n  return (\n    <Modal\n      open={isVisible}\n      title='Verify and save report'\n      onOk={onOk}\n      onCancel={onCancel}\n      okText='Save'\n    >\n      {children}\n    </Modal>\n  )\n}\n\nexport default ReportModal\n","import React from 'react'\nimport AnnotationModal from './AnnotationModal'\nimport SelectedRoiModal from './SelectedRoiModal'\nimport GoToModal from './GoToModal'\nimport ReportModal from './ReportModal'\n\ninterface SlideViewerModalsProps {\n  // Annotation Modal\n  isAnnotationModalVisible: boolean\n  onAnnotationConfigurationCompletion: () => void\n  onAnnotationConfigurationCancellation: () => void\n  isAnnotationOkDisabled: boolean\n  annotationConfigurations: React.ReactNode\n\n  // Selected ROI Modal\n  isSelectedRoiModalVisible: boolean\n  onRoiSelectionCancellation: () => void\n  selectedRoiInformation: React.ReactNode\n\n  // Go To Modal\n  isGoToModalVisible: boolean\n  onSlidePositionSelection: () => void\n  onSlidePositionSelectionCancellation: () => void\n  validXCoordinateRange: number[]\n  validYCoordinateRange: number[]\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  isSelectedMagnificationValid: boolean\n  onXCoordinateSelection: (value: number | string | null) => void\n  onYCoordinateSelection: (value: number | string | null) => void\n  onMagnificationSelection: (value: number | string | null) => void\n\n  // Report Modal\n  isReportModalVisible: boolean\n  onReportVerification: () => void\n  onReportCancellation: () => void\n  report: React.ReactNode\n}\n\n/**\n * Component that renders all modals for the SlideViewer\n */\nconst SlideViewerModals: React.FC<SlideViewerModalsProps> = ({\n  // Annotation Modal\n  isAnnotationModalVisible,\n  onAnnotationConfigurationCompletion,\n  onAnnotationConfigurationCancellation,\n  isAnnotationOkDisabled,\n  annotationConfigurations,\n\n  // Selected ROI Modal\n  isSelectedRoiModalVisible,\n  onRoiSelectionCancellation,\n  selectedRoiInformation,\n\n  // Go To Modal\n  isGoToModalVisible,\n  onSlidePositionSelection,\n  onSlidePositionSelectionCancellation,\n  validXCoordinateRange,\n  validYCoordinateRange,\n  isSelectedXCoordinateValid,\n  isSelectedYCoordinateValid,\n  isSelectedMagnificationValid,\n  onXCoordinateSelection,\n  onYCoordinateSelection,\n  onMagnificationSelection,\n\n  // Report Modal\n  isReportModalVisible,\n  onReportVerification,\n  onReportCancellation,\n  report\n}) => {\n  return (\n    <>\n      <AnnotationModal\n        isVisible={isAnnotationModalVisible}\n        onOk={onAnnotationConfigurationCompletion}\n        onCancel={onAnnotationConfigurationCancellation}\n        isOkDisabled={isAnnotationOkDisabled}\n      >\n        {annotationConfigurations}\n      </AnnotationModal>\n\n      <SelectedRoiModal\n        isVisible={isSelectedRoiModalVisible}\n        onCancel={onRoiSelectionCancellation}\n      >\n        {selectedRoiInformation}\n      </SelectedRoiModal>\n\n      <GoToModal\n        isVisible={isGoToModalVisible}\n        onOk={onSlidePositionSelection}\n        onCancel={onSlidePositionSelectionCancellation}\n        validXCoordinateRange={validXCoordinateRange}\n        validYCoordinateRange={validYCoordinateRange}\n        isSelectedXCoordinateValid={isSelectedXCoordinateValid}\n        isSelectedYCoordinateValid={isSelectedYCoordinateValid}\n        isSelectedMagnificationValid={isSelectedMagnificationValid}\n        onXCoordinateSelection={onXCoordinateSelection}\n        onYCoordinateSelection={onYCoordinateSelection}\n        onMagnificationSelection={onMagnificationSelection}\n      />\n\n      <ReportModal\n        isVisible={isReportModalVisible}\n        onOk={onReportVerification}\n        onCancel={onReportCancellation}\n      >\n        {report}\n      </ReportModal>\n    </>\n  )\n}\n\nexport default SlideViewerModals\n","import React, { useCallback } from 'react'\nimport { Col, InputNumber, Row, Slider } from 'antd'\n\ninterface ColorSliderProps {\n  color: number[]\n  onChange: (color: number[]) => void\n}\n\nconst ColorSlider: React.FC<ColorSliderProps> = ({ color, onChange }) => {\n  const handleColorChange = useCallback((index: number, value: number | null): void => {\n    if (value !== null) {\n      const newColor = [...color]\n      newColor[index] = value\n      onChange(newColor)\n    }\n  }, [color, onChange])\n\n  const createChangeHandler = useCallback((index: number) => {\n    return (value: number | null) => handleColorChange(index, value)\n  }, [handleColorChange])\n\n  const colorLabels = ['Red', 'Green', 'Blue']\n\n  return (\n    <>\n      {colorLabels.map((colorLabel, index) => (\n        <Row key={colorLabel} justify='center' align='middle' gutter={[8, 8]}>\n          <Col span={5}>\n            {colorLabel}\n          </Col>\n          <Col span={14}>\n            <Slider\n              range={false}\n              min={0}\n              max={255}\n              step={1}\n              value={color[index]}\n              onChange={createChangeHandler(index)}\n            />\n          </Col>\n          <Col span={5}>\n            <InputNumber\n              min={0}\n              max={255}\n              size='small'\n              style={{ width: '65px' }}\n              value={color[index]}\n              onChange={createChangeHandler(index)}\n            />\n          </Col>\n        </Row>\n      ))}\n    </>\n  )\n}\n\nexport default ColorSlider\n","import React from 'react'\nimport { Col, InputNumber, Row, Slider } from 'antd'\n\ninterface OpacitySliderProps {\n  opacity: number\n  onChange: (opacity: number | null) => void\n  label?: string\n}\n\nconst OpacitySlider: React.FC<OpacitySliderProps> = ({ opacity, onChange, label = 'Opacity' }) => {\n  return (\n    <Row justify='center' align='middle'>\n      <Col span={6}>\n        {label}\n      </Col>\n      <Col span={12}>\n        <Slider\n          range={false}\n          min={0}\n          max={1}\n          step={0.01}\n          value={opacity}\n          onChange={onChange}\n        />\n      </Col>\n      <Col span={6}>\n        <InputNumber\n          min={0}\n          max={1}\n          size='small'\n          step={0.1}\n          style={{ width: '65px' }}\n          value={opacity}\n          onChange={onChange}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default OpacitySlider\n","import React from 'react'\nimport { Checkbox, Divider, Row } from 'antd'\n\nimport ColorSlider from './ColorSlider'\nimport OpacitySlider from './OpacitySlider'\n\ninterface ColorSettingsMenuProps {\n  annotationGroupsUIDs: string[]\n  defaultStyle: {\n    opacity: number\n    color: number[]\n    contourOnly: boolean\n  }\n  onStyleChange: Function\n}\n\ninterface ColorSettingsMenuState {\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    contourOnly: boolean\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass ColorSettingsMenu extends React.Component<\nColorSettingsMenuProps,\nColorSettingsMenuState\n> {\n  constructor (props: ColorSettingsMenuProps) {\n    super(props)\n    this.state = {\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        contourOnly: this.props.defaultStyle.contourOnly\n      }\n    }\n  }\n\n  handleColorChange = (color: number[]): void => {\n    this.updateCurrentStyle({ color })\n    this.props.annotationGroupsUIDs.forEach((uid) => {\n      this.props.onStyleChange({\n        uid,\n        styleOptions: {\n          color,\n          opacity: this.state.currentStyle.opacity,\n          contourOnly: this.state.currentStyle.contourOnly\n        }\n      })\n    })\n  }\n\n  handleOpacityChange = (opacity: number | null): void => {\n    if (opacity !== null) {\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: this.state.currentStyle.color,\n            opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n      this.updateCurrentStyle({ opacity })\n    }\n  }\n\n  handleShowOutlineOnly = (value: boolean): void => {\n    this.updateCurrentStyle({ contourOnly: value })\n\n    this.props.annotationGroupsUIDs.forEach((uid) => {\n      this.props.onStyleChange({\n        uid,\n        styleOptions: {\n          color: this.state.currentStyle.color,\n          opacity: this.state.currentStyle.opacity,\n          contourOnly: value\n        }\n      })\n    })\n  }\n\n  getCurrentColor = (): string => {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color !== null && this.state.currentStyle.color !== undefined) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  updateCurrentStyle = ({\n    color,\n    opacity,\n    contourOnly\n  }: {\n    color?: number[]\n    opacity?: number\n    contourOnly?: boolean\n  }): void => {\n    this.setState((state) => ({\n      currentStyle: {\n        opacity: opacity ?? state.currentStyle.opacity,\n        color: color ?? state.currentStyle.color,\n        contourOnly: contourOnly ?? state.currentStyle.contourOnly\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    let colorSettings\n    if (this.state.currentStyle.color !== null && this.state.currentStyle.color !== undefined) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <ColorSlider\n            color={this.state.currentStyle.color}\n            onChange={this.handleColorChange}\n          />\n          <Divider plain />\n        </>\n      )\n    }\n\n    return (\n      <div>\n        {colorSettings}\n        <OpacitySlider\n          opacity={this.state.currentStyle.opacity}\n          onChange={this.handleOpacityChange}\n        />\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Checkbox\n            value={this.state.currentStyle.contourOnly}\n            onChange={(event) =>\n              this.handleShowOutlineOnly(event.target.checked)}\n          >\n            Show outline only\n          </Checkbox>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default ColorSettingsMenu\n","import React from 'react'\nimport { Menu, Space, Checkbox, Tooltip, Popover, Button } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { Category, Type } from './AnnotationCategoryList'\nimport ColorSettingsMenu from './ColorSettingsMenu'\n\nconst AnnotationCategoryItem = ({\n  category,\n  onChange,\n  checkedAnnotationUids,\n  onStyleChange,\n  defaultAnnotationStyles,\n  ...props\n}: {\n  category: Category\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const { types } = category\n\n  const onCheckCategoryChange = (e: any): void => {\n    const isVisible = e.target.checked\n    types.forEach((type: Type) => {\n      handleChangeCheckedType({ type, isVisible })\n    })\n  }\n\n  const checkAll = types.every((type: Type) =>\n    type.uids.every((uid: string) => checkedAnnotationUids.has(uid))\n  )\n  const indeterminate =\n    !checkAll &&\n    types.some((type: Type) =>\n      type.uids.some((uid: string) => checkedAnnotationUids.has(uid))\n    )\n\n  const handleChangeCheckedType = ({\n    type,\n    isVisible\n  }: {\n    type: Type\n    isVisible: boolean\n  }): void => {\n    type.uids.forEach((uid: string) => {\n      onChange({ roiUID: uid, isVisible })\n    })\n  }\n\n  return (\n    <Menu.Item\n      style={{ height: '100%', paddingLeft: '3px' }}\n      {...props}\n    >\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px', color: 'black' }}>\n          <Space direction='vertical' align='end'>\n            <Checkbox\n              indeterminate={indeterminate}\n              checked={checkAll}\n              onChange={onCheckCategoryChange}\n            >\n              <Tooltip\n                title={`${category.CodeValue}:${category.CodingSchemeDesignator}`}\n                mouseEnterDelay={1}\n              >\n                {category.CodeMeaning}\n              </Tooltip>\n              <Popover\n                placement='topLeft'\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n                content={() => (\n                  <ColorSettingsMenu\n                    annotationGroupsUIDs={types.reduce(\n                      (acc: string[], type) => {\n                        return [...acc, ...type.uids]\n                      },\n                      []\n                    )}\n                    onStyleChange={onStyleChange}\n                    defaultStyle={\n                      defaultAnnotationStyles[types[0].uids[0]]\n                    }\n                  />\n                )}\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  style={{ marginLeft: '10px' }}\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Checkbox>\n          </Space>\n          {types.map((type: Type) => {\n            const { CodeMeaning, CodingSchemeDesignator, CodeValue, uids } =\n              type\n            const shortenedCodeMeaning = CodeMeaning.slice(0, 22)\n            const displayCodeMeaning = shortenedCodeMeaning === CodeMeaning ? CodeMeaning : `${shortenedCodeMeaning}...`\n            const isChecked = uids.every((uid: string) =>\n              checkedAnnotationUids.has(uid)\n            )\n            const indeterminateType =\n              !isChecked &&\n              uids.some((uid: string) => checkedAnnotationUids.has(uid))\n            return (\n              <div\n                key={`${type.CodingSchemeDesignator}:${type.CodeMeaning}`}\n                style={{\n                  paddingLeft: '25px',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'row'\n                }}\n              >\n                <Checkbox\n                  indeterminate={indeterminateType}\n                  checked={isChecked}\n                  onChange={(e: any) =>\n                    handleChangeCheckedType({\n                      type,\n                      isVisible: e.target.checked\n                    })}\n                />\n                <div style={{ paddingLeft: '5px' }}>\n                  <Tooltip\n                    title={`${CodeValue}:${CodingSchemeDesignator}`}\n                    mouseEnterDelay={1}\n                  >\n                    {displayCodeMeaning}\n                  </Tooltip>\n                  <Popover\n                    placement='topLeft'\n                    overlayStyle={{ width: '350px' }}\n                    title='Display Settings'\n                    content={() => (\n                      <ColorSettingsMenu\n                        annotationGroupsUIDs={type.uids}\n                        onStyleChange={onStyleChange}\n                        defaultStyle={defaultAnnotationStyles[type.uids[0]]}\n                      />\n                    )}\n                  >\n                    <Button\n                      type='primary'\n                      shape='circle'\n                      style={{ marginLeft: '10px' }}\n                      icon={<SettingOutlined />}\n                    />\n                  </Popover>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </Space>\n    </Menu.Item>\n  )\n}\n\nexport default AnnotationCategoryItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport AnnotationCategoryItem from './AnnotationCategoryItem'\n\nexport interface AnnotationCategoryAndType {\n  uid: string\n  type: Omit<Type, 'uids'>\n  category: Omit<Category, 'types'>\n}\nexport interface Type {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  uids: string[]\n}\nexport interface Category {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  types: Type[]\n}\n\nconst getCategories = (annotations: any): Record<string, Category> => {\n  const categories = annotations?.reduce(\n    (\n      categoriesAcc: Record<string, Category & { types: Record<string, Type> }>,\n      annotation: AnnotationCategoryAndType\n    ) => {\n      const { category, type, uid } = annotation\n      const categoryKey = category.CodeMeaning\n      const typeKey = type.CodeMeaning\n\n      const oldCategory = categoriesAcc[categoryKey] ?? {\n        ...category,\n        types: {}\n      }\n      const oldType = oldCategory.types[typeKey] ?? {\n        ...type,\n        uids: []\n      }\n\n      return {\n        ...categoriesAcc,\n        [categoryKey]: {\n          ...oldCategory,\n          types: {\n            ...oldCategory.types,\n            [typeKey]: { ...oldType, uids: [...oldType.uids, uid] }\n          }\n        }\n      }\n    },\n    {}\n  )\n\n  // Normalizing types so that it's an array instead of an object:\n  Object.keys(categories).forEach((categoryKey: string) => {\n    const category = categories[categoryKey]\n    const { types } = category\n    const typesArr = Object.keys(types).map(\n      (typeKey: string) => types[typeKey]\n    )\n    categories[categoryKey].types = typesArr\n  })\n\n  return categories\n}\n\nconst AnnotationCategoryList = ({\n  annotations,\n  onChange,\n  onStyleChange,\n  defaultAnnotationStyles,\n  checkedAnnotationUids\n}: {\n  annotations: AnnotationCategoryAndType[]\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const categories: Record<string, Category> = getCategories(annotations)\n\n  if (Object.keys(categories).length === 0) {\n    return <></>\n  }\n\n  const items = Object.keys(categories).map((categoryKey: string) => {\n    const category = categories[categoryKey]\n    return (\n      <AnnotationCategoryItem\n        key={category.CodeMeaning !== '' ? category.CodeMeaning : `category-${categoryKey}`}\n        category={category}\n        onChange={onChange}\n        onStyleChange={onStyleChange}\n        defaultAnnotationStyles={defaultAnnotationStyles}\n        checkedAnnotationUids={checkedAnnotationUids}\n      />\n    )\n  })\n\n  return <Menu selectable={false}>{items}</Menu>\n}\nexport default AnnotationCategoryList\n","import React, { useCallback } from 'react'\nimport { Layout, Menu } from 'antd'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport AnnotationCategoryList from '../AnnotationCategoryList'\nimport { AnnotationCategoryAndType } from '../../types/annotations'\nimport { StyleOptions } from './types'\n\ninterface SlideViewerSidebarProps {\n  labelViewportRef: React.RefObject<HTMLDivElement>\n  labelViewer?: dmv.viewer.LabelImageViewer\n  openSubMenuItems: string[]\n  specimenMenu: React.ReactNode\n  iccProfilesMenu: React.ReactNode\n  segmentationInterpolationMenu: React.ReactNode\n  equipmentMenu: React.ReactNode\n  opticalPathMenu: React.ReactNode\n  presentationStateMenu: React.ReactNode\n  annotationMenuItems: React.ReactNode\n  annotationGroupMenu: React.ReactNode\n  segmentationMenu: React.ReactNode\n  parametricMapMenu: React.ReactNode\n  annotations: AnnotationCategoryAndType[]\n  visibleRoiUIDs: Set<string>\n  onAnnotationVisibilityChange: ({ roiUID, isVisible }: { roiUID: string, isVisible: boolean }) => void\n  onRoiStyleChange: ({ uid, styleOptions }: { uid: string, styleOptions: StyleOptions }) => void\n  defaultAnnotationStyles: { [annotationUID: string]: StyleOptions }\n}\n\n/**\n * Sidebar component for the SlideViewer containing all menu items\n */\nconst SlideViewerSidebar: React.FC<SlideViewerSidebarProps> = ({\n  labelViewportRef,\n  labelViewer,\n  openSubMenuItems,\n  specimenMenu,\n  iccProfilesMenu,\n  segmentationInterpolationMenu,\n  equipmentMenu,\n  opticalPathMenu,\n  presentationStateMenu,\n  annotationMenuItems,\n  annotationGroupMenu,\n  segmentationMenu,\n  parametricMapMenu,\n  annotations,\n  visibleRoiUIDs,\n  onAnnotationVisibilityChange,\n  onRoiStyleChange,\n  defaultAnnotationStyles\n}) => {\n  const handleMenuOpenChange = useCallback((): void => {\n    // Give menu item time to render before updating viewer size\n    const resizeViewer = (): void => {\n      if (labelViewer !== null && labelViewer !== undefined) {\n        labelViewer.resize()\n      }\n    }\n    setTimeout(resizeViewer, 100)\n  }, [labelViewer])\n\n  return (\n    <Layout.Sider\n      width={300}\n      reverseArrow\n      style={{\n        borderLeft: 'solid',\n        borderLeftWidth: 0.25,\n        overflow: 'hidden',\n        background: 'none'\n      }}\n    >\n      <Menu\n        mode='inline'\n        defaultOpenKeys={openSubMenuItems}\n        style={{ height: '100%' }}\n        inlineIndent={14}\n        forceSubMenuRender\n        onOpenChange={handleMenuOpenChange}\n      >\n        {labelViewportRef.current !== null && (\n          <Menu.SubMenu key='label' title='Slide label'>\n            <Menu.Item style={{ height: '100%' }} key='image'>\n              <div\n                style={{ height: '220px' }}\n                ref={labelViewportRef}\n              />\n            </Menu.Item>\n          </Menu.SubMenu>\n        )}\n        {specimenMenu}\n        {iccProfilesMenu}\n        {segmentationInterpolationMenu}\n        {equipmentMenu}\n        {opticalPathMenu}\n        {presentationStateMenu}\n        <Menu.SubMenu key='annotations' title='Annotations'>\n          {annotationMenuItems}\n        </Menu.SubMenu>\n        {annotationGroupMenu}\n        {annotations.length === 0\n          ? null\n          : (\n            <Menu.SubMenu\n              key='annotation-categories'\n              title='Annotation Categories'\n            >\n              <AnnotationCategoryList\n                annotations={annotations}\n                onChange={onAnnotationVisibilityChange}\n                checkedAnnotationUids={visibleRoiUIDs}\n                onStyleChange={onRoiStyleChange}\n                defaultAnnotationStyles={defaultAnnotationStyles}\n              />\n            </Menu.SubMenu>\n            )}\n        {segmentationMenu}\n        {parametricMapMenu}\n      </Menu>\n    </Layout.Sider>\n  )\n}\n\nexport default SlideViewerSidebar\n","import React from 'react'\nimport { Layout } from 'antd'\n\ninterface SlideViewerContentProps {\n  toolbar: React.ReactNode\n  toolbarHeight: string\n  cursor: string\n  volumeViewportRef: React.RefObject<HTMLDivElement>\n  children: React.ReactNode\n}\n\n/**\n * Main content area component for the SlideViewer\n */\nconst SlideViewerContent: React.FC<SlideViewerContentProps> = ({\n  toolbar,\n  toolbarHeight,\n  cursor,\n  volumeViewportRef,\n  children\n}) => {\n  return (\n    <Layout.Content style={{ height: '100%' }}>\n      {toolbar}\n\n      <div\n        style={{\n          height: `calc(100% - ${toolbarHeight})`,\n          overflow: 'hidden',\n          cursor\n        }}\n        ref={volumeViewportRef}\n      />\n\n      {children}\n    </Layout.Content>\n  )\n}\n\nexport default SlideViewerContent\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { findContentItemsByName } from '../../../utils/sr'\n\n/**\n * Builds a key for a concept based on its coding scheme and value\n */\nexport const buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\n/**\n * Gets the ROI key from a ROI object\n */\nexport const getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    console.warn(`no finding found for ROI ${roi.uid}`)\n    return\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return buildKey(findingName)\n}\n\n/**\n * Compares two ROIs for equality based on their spatial coordinates\n */\nexport const areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\n/**\n * Formats ROI style options\n */\nexport const formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: style.stroke?.color ?? [255, 234, 0],\n    width: style.stroke?.width ?? 2\n  }\n  const fill = {\n    color: style.fill?.color ?? [255, 234, 0, 0.2]\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius ?? Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n","/**\n * Utility functions for handling segment colors\n */\n\nimport dcmjs from 'dcmjs'\n\n/**\n * Type guard to check if a value is defined and not null\n */\nconst isDefined = <T>(value: T | undefined | null): value is T => {\n  return value !== undefined && value !== null\n}\n\n/**\n * Convert RGB values to hex color string\n */\nexport const rgbToHex = (rgb: number[]): string => {\n  const r = Math.max(0, Math.min(255, Math.round(rgb[0])))\n  const g = Math.max(0, Math.min(255, Math.round(rgb[1])))\n  const b = Math.max(0, Math.min(255, Math.round(rgb[2])))\n  return `#${(0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)}`\n}\n\n/**\n * Convert hex color string to RGB values\n */\nexport const hexToRgb = (hex: string): number[] => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  if (result !== null) {\n    return [\n      parseInt(result[1], 16),\n      parseInt(result[2], 16),\n      parseInt(result[3], 16)\n    ]\n  }\n  return [0, 0, 0]\n}\n\n/**\n * Check if a color is light or dark for determining text contrast\n */\nexport const isLightColor = (rgb: number[]): boolean => {\n  const brightness = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000\n  return brightness > 128\n}\n\n/**\n * Get contrasting text color (black or white) for a given background color\n */\nexport const getContrastColor = (rgb: number[]): number[] => {\n  return isLightColor(rgb) ? [0, 0, 0] : [255, 255, 255]\n}\n\n/**\n * Extract color hints from DICOM segment metadata\n * Looks for RecommendedDisplayCIELabValue in the Segment Sequence\n */\nexport const extractSegmentColorFromMetadata = (\n  segmentMetadata: Record<string, unknown>,\n  segmentNumber: number\n): number[] | null => {\n  try {\n    /** Look for SegmentSequence in the metadata */\n    if (segmentMetadata.SegmentSequence !== undefined && Array.isArray(segmentMetadata.SegmentSequence)) {\n      const segment = (segmentMetadata.SegmentSequence as Array<Record<string, unknown>>).find(\n        (seg: Record<string, unknown>) => seg.SegmentNumber === segmentNumber\n      )\n\n      if (isDefined(segment) && isDefined(segment.RecommendedDisplayCIELabValue) && Array.isArray(segment.RecommendedDisplayCIELabValue)) {\n        /** Convert CIELab to RGB using dcmjs */\n        const labValues = segment.RecommendedDisplayCIELabValue as number[]\n        if (labValues.length >= 3) {\n          try {\n            /** Use dcmjs's dicomlab2RGB function for accurate DICOM CIELAB to RGB conversion */\n            const rgb = dcmjs.data.Colors.dicomlab2RGB(labValues)\n            /** Convert from 0-1 range to 0-255 range and round to integers */\n            const result = [\n              Math.max(0, Math.min(255, Math.round(rgb[0] * 255))),\n              Math.max(0, Math.min(255, Math.round(rgb[1] * 255))),\n              Math.max(0, Math.min(255, Math.round(rgb[2] * 255)))\n            ]\n            return result\n          } catch (error) {\n            /** Failed to convert CIELab to RGB using dcmjs */\n            console.warn('Failed to convert CIELab to RGB using dcmjs:', error)\n            return null\n          }\n        }\n      }\n    }\n  } catch (error) {\n    /** Failed to extract color from segment metadata */\n    console.warn(`Failed to extract color from segment ${segmentNumber}:`, error)\n  }\n\n  return null\n}\n\n/**\n * Get the best color for a segment, either from DICOM metadata or generated\n */\nexport const getSegmentColor = (\n  segmentMetadata: Record<string, unknown>,\n  segmentNumber: number\n): number[] | null => {\n  /** First try to get color from DICOM metadata */\n  const metadataColor = extractSegmentColorFromMetadata(segmentMetadata, segmentNumber)\n  if (metadataColor !== null) {\n    return metadataColor\n  }\n  return null\n}\n\n/**\n * Get segmentation type from metadata\n * Returns the SegmentationType from DICOM metadata or defaults to 'BINARY'\n */\nexport const getSegmentationType = (\n  segmentMetadata: Record<string, unknown> | undefined | null\n): string => {\n  if (segmentMetadata?.SegmentationType !== undefined && segmentMetadata?.SegmentationType !== null) {\n    return segmentMetadata.SegmentationType as string\n  }\n  return 'BINARY'\n}\n","// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { Slide } from '../../../data/slides'\nimport { StorageClasses } from '../../../data/uids'\nimport { CustomError, errorTypes } from '../../../utils/CustomError'\nimport { findContentItemsByName } from '../../../utils/sr'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../../../services/NotificationMiddleware'\n\n/**\n * Constructs volume and label viewers for the slide\n */\nexport const constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      skipThumbnails: true,\n      preload,\n      errorInterceptor: (error: CustomError) => {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DMV, error\n        )\n      }\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical',\n        errorInterceptor: (error: CustomError) => {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.DMV,\n            error\n          )\n        }\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'Failed to instantiate viewer'\n      )\n    )\n    throw error\n  }\n}\n\n/**\n * Checks if a report implements TID1500\n */\nexport const implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Checks if a report describes a specimen subject\n */\nexport const describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  return retrievedConcept.equals(expectedConcept)\n}\n\n/**\n * Checks if a report contains appropriate graphic ROI annotations.\n */\nexport const containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n","/**\n * Default ROI stroke color\n */\nexport const DEFAULT_ROI_STROKE_COLOR = [255, 234, 0] // [0, 126, 163]\n\n/**\n * Default ROI fill color\n */\nexport const DEFAULT_ROI_FILL_COLOR = [255, 234, 0, 0.2] // [0, 126, 163, 0.2]\n\n/**\n * Default ROI stroke width\n */\nexport const DEFAULT_ROI_STROKE_WIDTH = 2\n\n/**\n * Default ROI radius\n */\nexport const DEFAULT_ROI_RADIUS = 5\n\n/**\n * Default annotation opacity\n */\nexport const DEFAULT_ANNOTATION_OPACITY = 0.4\n\n/**\n * Default annotation stroke color\n */\nexport const DEFAULT_ANNOTATION_STROKE_COLOR = [0, 0, 0]\n\n/**\n * Default annotation color palette\n */\nexport const DEFAULT_ANNOTATION_COLOR_PALETTE = [\n  [255, 0, 0],\n  [0, 255, 0],\n  [0, 0, 255],\n  [255, 255, 0],\n  [0, 255, 255],\n  [0, 0, 0]\n]\n\n/**\n * Selection stroke color\n */\nexport const SELECTION_STROKE_COLOR = [0, 153, 255]\n\n/**\n * Selection fill color\n */\nexport const SELECTION_FILL_COLOR = [255, 255, 255]\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: (uid: string) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection(object.key)\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React, { useCallback } from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport type { SelectProps } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\nimport ValidationWarning from './ValidationWarning'\nimport ColorSlider from './ColorSlider'\nimport OpacitySlider from './OpacitySlider'\n\n// Helper function components\nfunction AnnotationGroupControls ({\n  isVisible,\n  onVisibilityChange,\n  settings\n}: {\n  isVisible: boolean\n  onVisibilityChange: (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => void\n  settings: React.ReactNode\n}): React.ReactElement {\n  return (\n    <Space direction='vertical' align='end'>\n      <Switch\n        size='small'\n        onChange={onVisibilityChange}\n        checked={isVisible}\n        checkedChildren={<FaEye />}\n        unCheckedChildren={<FaEyeSlash />}\n      />\n      <Popover\n        placement='left'\n        content={settings}\n        overlayStyle={{ width: '350px' }}\n        title='Display Settings'\n      >\n        <Button type='primary' shape='circle' icon={<SettingOutlined />} />\n      </Popover>\n    </Space>\n  )\n}\n\nfunction AnnotationGroupBadgeDescription ({\n  annotationGroup,\n  onClick,\n  isBadgeVisible,\n  color,\n  label,\n  attributes\n}: {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  onClick: () => void\n  isBadgeVisible: boolean\n  color: string\n  label: string\n  attributes: Array<{ name: string, value: string }>\n}): React.ReactElement {\n  const handleKeyDown = useCallback((event: React.KeyboardEvent): void => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault()\n      onClick()\n    }\n  }, [onClick])\n\n  return (\n    <div\n      onClick={onClick}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}\n      role='button'\n      aria-label={`Annotation group ${label}`}\n    >\n      <Badge\n        offset={[-20, 20]}\n        count={' '}\n        style={{\n          borderStyle: 'solid',\n          borderWidth: '1px',\n          borderColor: 'gray',\n          visibility: isBadgeVisible ? 'visible' : 'hidden',\n          backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n        }}\n      >\n        <ValidationWarning\n          annotationGroup={annotationGroup}\n          style={{ padding: '0.3rem' }}\n        />\n        <Description\n          header={label}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      </Badge>\n    </div>\n  )\n}\n\n// Interfaces\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onAnnotationGroupClick: (annotationGroupUID: string) => void\n  onVisibilityChange: ({\n    annotationGroupUID,\n    isVisible\n  }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({\n    uid,\n    styleOptions\n  }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n// Class\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<\nAnnotationGroupItemProps,\nAnnotationGroupItemState\n> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange = (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleColorChange = (color: number[]): void => {\n    this.setState((state) => ({\n      currentStyle: {\n        color,\n        opacity: state.currentStyle.opacity,\n        limitValues: state.currentStyle.limitValues\n      }\n    }))\n    this.props.onStyleChange({\n      uid: this.props.annotationGroup.uid,\n      styleOptions: { color }\n    })\n  }\n\n  handleOpacityChange = (opacity: number | null): void => {\n    if (opacity !== null) {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          opacity\n        }\n      })\n      this.setState({\n        currentStyle: {\n          opacity,\n          color: this.state.currentStyle.color,\n          limitValues: this.state.currentStyle.limitValues\n        }\n      })\n    }\n  }\n\n  getCurrentColor = (): string => {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color !== null && this.state.currentStyle.color !== undefined) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange = (value: number | null): void => {\n    if (value !== null && value !== undefined && this.state.currentStyle.limitValues !== undefined) {\n      this.setState((state) => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [value, this.state.currentStyle.limitValues[1]]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange = (value: number | null): void => {\n    if (value !== null && value !== undefined && this.state.currentStyle.limitValues !== undefined) {\n      this.setState((state) => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [this.state.currentStyle.limitValues[0], value]\n        }\n      })\n    }\n  }\n\n  handleLimitChange = (values: number[]): void => {\n    this.setState((state) => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      uid: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleAnnotationGroupClick = (): void => {\n    this.props.onAnnotationGroupClick(this.props.annotationGroup.uid)\n  }\n\n  handleMeasurementSelection: SelectProps['onChange'] = (value, option) => {\n    if (value !== null && value !== undefined && option !== null && option !== undefined && Array.isArray(option) && option.length > 0 && option[0] !== null && option[0] !== undefined && option[0].children !== null && option[0].children !== undefined) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: Array.isArray(option[0].children) ? String(option[0].children[0]) : String(option[0].children)\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState((state) => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState((state) => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      (item) => item.AnnotationGroupUID === this.props.annotationGroup.uid\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      },\n      {\n        name: 'Annotation coordinate type',\n        value: this.props.metadata.AnnotationCoordinateType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const createMeasurementOption = (measurementItem: { ConceptNameCodeSequence: Array<{ CodingSchemeDesignator: string, CodeValue: string, CodeMeaning: string }> }): React.ReactElement => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      const key = `${name.CodingSchemeDesignator}-${name.CodeValue}`\n      return (\n        <Select.Option\n          key={key}\n          value={key}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    }\n    const measurementOptions = measurementsSequence.map(createMeasurementOption)\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        {null}\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color !== null && this.state.currentStyle.color !== undefined && this.state.currentStyle.color.length === 3) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <ColorSlider\n            color={this.state.currentStyle.color}\n            onChange={this.handleColorChange}\n          />\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues !== null && this.state.currentStyle.limitValues !== undefined) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>Values of interest</Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>Exploration</Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>Measurement</Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <OpacitySlider\n          opacity={this.state.currentStyle.opacity}\n          onChange={this.handleOpacityChange}\n        />\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible =\n      this.state.isVisible && this.state.currentStyle.measurement === null\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onAnnotationGroupClick,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <AnnotationGroupControls\n              isVisible={this.props.isVisible}\n              onVisibilityChange={this.handleVisibilityChange}\n              settings={settings}\n            />\n          </div>\n          <AnnotationGroupBadgeDescription\n            onClick={this.handleAnnotationGroupClick}\n            annotationGroup={this.props.annotationGroup}\n            isBadgeVisible={isBadgeVisible}\n            color={color}\n            label={this.props.annotationGroup.label}\n            attributes={attributes}\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu, Switch } from 'antd'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupClick: (annotationGroupUID: string) => void\n  onAnnotationGroupVisibilityChange: ({\n    annotationGroupUID,\n    isVisible\n  }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({\n    uid,\n    styleOptions\n  }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<\nAnnotationGroupListProps,\nunknown\n> {\n  handleVisibilityChange = (checked: boolean): void => {\n    if (checked) {\n      this.props.annotationGroups.forEach((annotationGroup) => {\n        this.props.onAnnotationGroupVisibilityChange({\n          annotationGroupUID: annotationGroup.uid,\n          isVisible: checked\n        })\n      })\n      return\n    }\n\n    this.props.visibleAnnotationGroupUIDs.forEach((annotationGroupUID) => {\n      this.props.onAnnotationGroupVisibilityChange({\n        annotationGroupUID,\n        isVisible: checked\n      })\n    })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          onAnnotationGroupClick={this.props.onAnnotationGroupClick}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <>\n        <div\n          style={{\n            paddingLeft: '14px',\n            paddingTop: '7px',\n            paddingBottom: '7px'\n          }}\n        >\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleAnnotationGroupUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu selectable={false}>{items}</Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.ENCODINGANDDECODING,\n        'Content item \"Imaging Measurements\" not found.' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\".'\n      )\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Tracking Unique Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Finding\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Image Region\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: any\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Content item \"Image Region\" has unknown graphic type ' +\n            `\"${regionItem.GraphicType}\". ` +\n            'Content of Comprehensive 3D SR document is not structured ' +\n            'based on TID 1500 \"Measurement Report\" -> ' +\n            'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n          )\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen UID\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Container Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","const HoveredRoiTooltip = ({\n  xPosition,\n  yPosition,\n  rois\n}: {\n  xPosition: number\n  yPosition: number\n  rois: Array<{ index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n}): JSX.Element => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: `${yPosition}px`,\n        left: `${xPosition}px`,\n        backgroundColor: 'rgba(230, 230, 230, 0.65)',\n        minWidth: '150px',\n        minHeight: '60px',\n        padding: '20px',\n        fontWeight: 'bold',\n        pointerEvents: 'none'\n      }}\n    >\n      {rois.map((roi, i) => {\n        const attributes = roi.attributes\n        return (\n          <div key={roi.roiUid}>\n            <span>ROI {roi.index}</span>\n            {attributes.map((attr) => {\n              return (\n                <div key={attr.name + roi.roiUid}>\n                  {attr.name}: <span style={{ fontWeight: 500 }}>{attr.value}</span>\n                </div>\n              )\n            })}\n          </div>\n\n        )\n      })}\n    </div>\n  )\n}\n\nexport default HoveredRoiTooltip\n","import { roi, metadata } from 'dicom-microscopy-viewer'\nimport { sr, data } from 'dcmjs'\n\nimport { CustomError, errorTypes } from './CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { User } from '../auth'\n\ninterface AppInfo {\n  name: string\n  version: string\n  uid: string\n  organization?: string\n}\n\nconst generateReport = ({\n  rois,\n  metadata,\n  user,\n  app,\n  visibleRoiUIDs\n}: {\n  rois: roi.ROI[]\n  metadata: metadata.VLWholeSlideMicroscopyImage[]\n  user: User | undefined\n  app: AppInfo\n  visibleRoiUIDs: Set<string>\n}): { isReportModalVisible: boolean, generatedReport: metadata.Comprehensive3DSR } => {\n  // Metadata should be sorted such that the image with the highest\n  // resolution is the last item in the array.\n  const refImage = metadata[metadata.length - 1]\n  // We assume that there is only one specimen (tissue section) per\n  // ontainer (slide). Only the tissue section is tracked with a unique\n  // identifier, even if the section may be composed of different biological\n  // samples.\n  if ((refImage.SpecimenDescriptionSequence?.length ?? 0) > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'More than one specimen has been described for the slide'\n      )\n    )\n  }\n  const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n  console.debug('create Observation Context')\n  let observer\n\n  if (user !== undefined) {\n    observer = new sr.templates.PersonObserverIdentifyingAttributes({\n      name: user.name ?? 'ANONYMOUS',\n      loginName: user.email ?? ''\n    })\n  } else {\n    console.warn('no user information available')\n    observer = new sr.templates.PersonObserverIdentifyingAttributes({\n      name: 'ANONYMOUS'\n    })\n  }\n\n  const observationContext = new sr.templates.ObservationContext({\n    observerPersonContext: new sr.templates.ObserverContext({\n      observerType: new sr.coding.CodedConcept({\n        value: '121006',\n        schemeDesignator: 'DCM',\n        meaning: 'Person'\n      }),\n      observerIdentifyingAttributes: observer\n    }),\n    observerDeviceContext: new sr.templates.ObserverContext({\n      observerType: new sr.coding.CodedConcept({\n        value: '121007',\n        schemeDesignator: 'DCM',\n        meaning: 'Device'\n      }),\n      observerIdentifyingAttributes: new sr.templates.DeviceObserverIdentifyingAttributes({\n        uid: app.uid,\n        manufacturerName: 'MGH Computational Pathology',\n        modelName: app.name\n      })\n    }),\n    subjectContext: new sr.templates.SubjectContext({\n      subjectClass: new sr.coding.CodedConcept({\n        value: '121027',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen'\n      }),\n      subjectClassSpecificContext: new sr.templates.SubjectContextSpecimen({\n        uid: refSpecimen.SpecimenUID,\n        identifier: refSpecimen.SpecimenIdentifier,\n        containerIdentifier: refImage.ContainerIdentifier\n      })\n    })\n  })\n\n  console.debug('encode Imaging Measurements')\n  const imagingMeasurements: sr.valueTypes.ContainerContentItem[] = []\n  for (let i = 0; i < rois.length; i++) {\n    const roi = rois[i]\n    if (!visibleRoiUIDs.has(roi.uid)) {\n      continue\n    }\n\n    let findingType = roi.evaluations.find((item: sr.valueTypes.ContentItem) => {\n      return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n    })\n\n    if (findingType === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          `No finding type was specified for ROI \"${String(roi.uid)}\"`\n        )\n      )\n    }\n\n    findingType = findingType as sr.valueTypes.CodeContentItem\n\n    const trackingIdentifier = new sr.templates.TrackingIdentifier({\n      uid: roi.properties.trackingUID ?? roi.uid,\n      identifier: `ROI #${i + 1}`\n    })\n\n    const group = new sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n      trackingIdentifier,\n      referencedRegion: new sr.contentItems.ImageRegion3D({\n        graphicType: roi.scoord3d.graphicType,\n        graphicData: roi.scoord3d.graphicData,\n        frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n      }),\n      findingType: new sr.coding.CodedConcept({\n        value: findingType.ConceptCodeSequence[0].CodeValue,\n        schemeDesignator: findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n        meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n      }),\n      qualitativeEvaluations: roi.evaluations.filter((item: sr.valueTypes.ContentItem) => {\n        return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n      }),\n      measurements: roi.measurements\n    })\n\n    const measurements = group as sr.valueTypes.ContainerContentItem[]\n    measurements[0].ContentTemplateSequence = [\n      {\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }\n    ]\n    imagingMeasurements.push(...measurements)\n  }\n\n  console.debug('create Measurement Report document content')\n  const measurementReport = new sr.templates.MeasurementReport({\n    languageOfContentItemAndDescendants: new sr.templates.LanguageOfContentItemAndDescendants(\n      {}\n    ),\n    observationContext,\n    procedureReported: new sr.coding.CodedConcept({\n      value: '112703',\n      schemeDesignator: 'DCM',\n      meaning: 'Whole Slide Imaging'\n    }),\n    imagingMeasurements\n  })\n\n  console.info('create Comprehensive 3D SR document')\n  const dataset = new sr.documents.Comprehensive3DSR({\n    content: measurementReport[0],\n    evidence: [refImage],\n    seriesInstanceUID: data.DicomMetaDictionary.uid(),\n    seriesNumber: 1,\n    seriesDescription: 'Annotation',\n    sopInstanceUID: data.DicomMetaDictionary.uid(),\n    instanceNumber: 1,\n    manufacturer: 'MGH Computational Pathology',\n    previousVersions: undefined // TODO\n  })\n\n  return {\n    isReportModalVisible: true,\n    generatedReport: dataset as metadata.Comprehensive3DSR\n  }\n}\n\nexport default generateReport\n","import { v4 as generateUUID } from 'uuid'\n\n/**\n * Consumer must implement:\n * this.listeners = {}\n * this.EVENTS = { \"EVENT_KEY\": \"EVENT_VALUE\" }\n */\nconst pubSubInterface = {\n  subscribe,\n  _broadcastEvent,\n  _unsubscribe,\n  _isValidEvent\n}\n\nexport default pubSubInterface\n\n/**\n * Subscribe to updates.\n *\n * @param {string} eventName The name of the event\n * @param {Function} callback Events callback\n * @return {Object} Observable object with actions\n */\nfunction subscribe (this: PubSubService, eventName: string, callback: Function): { unsubscribe: () => any } {\n  if (this._isValidEvent(eventName)) {\n    const listenerId = generateUUID()\n    const subscription = { id: listenerId, callback }\n\n    // console.info(`Subscribing to '${eventName}'.`);\n    if (Array.isArray(this.listeners[eventName])) {\n      this.listeners[eventName].push(subscription)\n    } else {\n      this.listeners[eventName] = [subscription]\n    }\n\n    return {\n      unsubscribe: () => this._unsubscribe(eventName, listenerId)\n    }\n  } else {\n    throw new Error(`Event ${eventName} not supported.`)\n  }\n}\n\n/**\n * Unsubscribe to measurement updates.\n *\n * @param {string} eventName The name of the event\n * @param {string} listenerId The listeners id\n * @return void\n */\nfunction _unsubscribe (this: PubSubService, eventName: string, listenerId: string): void {\n  if (this.listeners[eventName] === undefined) {\n    return\n  }\n\n  const listeners = this.listeners[eventName]\n  if (Array.isArray(listeners)) {\n    this.listeners[eventName] = listeners.filter(({ id }) => id !== listenerId)\n  } else {\n    this.listeners[eventName] = []\n  }\n}\n\n/**\n * Check if a given event is valid.\n *\n * @param {string} eventName The name of the event\n * @return {boolean} Event name validation\n */\nfunction _isValidEvent (this: PubSubService, eventName: string): boolean {\n  return Object.values(this.EVENTS).includes(eventName)\n}\n\n/**\n * Broadcasts changes.\n *\n * @param {string} eventName - The event name\n * @param {func} callbackProps - Properties to pass callback\n * @return void\n */\nfunction _broadcastEvent (this: PubSubService, eventName: string, callbackProps: any): void {\n  const hasListeners = Object.keys(this.listeners).length > 0\n  const hasCallbacks = Array.isArray(this.listeners[eventName])\n\n  if (hasListeners && hasCallbacks) {\n    this.listeners[eventName].forEach((listener: { id: string, callback: Function }) => {\n      listener.callback(callbackProps)\n    })\n  }\n}\n\n/** Export a PubSubService class to be used instead of the individual items */\nexport class PubSubService {\n  EVENTS: any\n  subscribe: (\n    eventName: string,\n    callback: Function\n  ) => { unsubscribe: () => any }\n\n  _broadcastEvent: (eventName: string, callbackProps: any) => void\n  _unsubscribe: (eventName: string, listenerId: string) => void\n  _isValidEvent: (eventName: string) => boolean\n  listeners: { [key: string]: Array<{ id: string, callback: Function }> }\n  unsubscriptions: any[]\n  constructor (EVENTS: Record<string, string>) {\n    this.EVENTS = EVENTS\n    this.subscribe = subscribe\n    this._broadcastEvent = _broadcastEvent\n    this._unsubscribe = _unsubscribe\n    this._isValidEvent = _isValidEvent\n    this.listeners = {}\n    this.unsubscriptions = []\n  }\n\n  reset (): void {\n    this.unsubscriptions.forEach((unsub) => unsub())\n    this.unsubscriptions = []\n  }\n\n  /**\n   * Creates an event that records whether or not someone\n   * has consumed it.  Call eventData.consume() to consume the event.\n   * Check eventData.isConsumed to see if it is consumed or not.\n   * @param props - to include in the event\n   */\n  protected createConsumableEvent (props: Record<string, any>): Record<string, any> {\n    return {\n      ...props,\n      isConsumed: false,\n      consume: function Consume () {\n        this.isConsumed = true\n      }\n    }\n  }\n}\n","import { Instance, Series } from '../services/DICOMMetadataStore'\n\nfunction createSeriesMetadata (SeriesInstanceUID: string, defaultInstances?: Instance[]): Series {\n  const instances: Instance[] = []\n  const instancesMap = new Map<string, Instance>()\n\n  return {\n    SeriesInstanceUID,\n    Modality: '',\n    SeriesNumber: 0,\n    SeriesDescription: '',\n    SeriesDate: '',\n    SeriesTime: '',\n    ...defaultInstances?.[0],\n    instances,\n    addInstance: function (newInstance: Instance) {\n      this.addInstances([newInstance])\n    },\n    addInstances: function (newInstances: Instance[]) {\n      for (let i = 0, len = newInstances.length; i < len; i++) {\n        const instance = newInstances[i]\n\n        if (!instancesMap.has(instance.SOPInstanceUID)) {\n          instancesMap.set(instance.SOPInstanceUID, instance)\n          instances.push(instance)\n        }\n      }\n    },\n    getInstance: function (SOPInstanceUID: string) {\n      return instancesMap.get(SOPInstanceUID)\n    }\n  }\n}\n\nexport default createSeriesMetadata\n","import createSeriesMetadata from './createSeriesMetadata'\n\nimport { Study, Series, Instance } from '../services/DICOMMetadataStore'\n\nfunction createStudyMetadata (StudyInstanceUID: string): Study {\n  return {\n    StudyInstanceUID,\n    StudyDescription: '',\n    PatientID: '',\n    PatientName: '',\n    StudyDate: '',\n    AccessionNumber: '',\n    NumInstances: 0,\n    ModalitiesInStudy: [],\n    isLoaded: false,\n    series: [] as Series[],\n    /**\n     * @param {object} instance\n     */\n    addInstanceToSeries: function (instance: Instance) {\n      this.addInstancesToSeries([instance])\n    },\n    /**\n     * @param {object[]} instances\n     * @param {string} instances[].SeriesInstanceUID\n     * @param {string} instances[].StudyDescription\n     */\n    addInstancesToSeries: function (instances: Instance[]) {\n      const { SeriesInstanceUID } = instances[0]\n\n      if (this.StudyDescription !== '' && this.StudyDescription !== undefined) {\n        this.StudyDescription = instances[0].StudyDescription\n      }\n\n      let series = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (series == null) {\n        series = createSeriesMetadata(SeriesInstanceUID, instances)\n        this.series.push(series)\n      }\n\n      series.addInstances(instances)\n    },\n\n    setSeriesMetadata: function (\n      SeriesInstanceUID: string,\n      seriesMetadata: any\n    ) {\n      let existingSeries = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (existingSeries != null) {\n        existingSeries = Object.assign(existingSeries, seriesMetadata)\n      } else {\n        const series = createSeriesMetadata(SeriesInstanceUID)\n        this.series.push(Object.assign(series, seriesMetadata))\n      }\n    }\n  }\n}\n\nexport default createStudyMetadata\n","import dcmjs from 'dcmjs'\n\nimport pubSubServiceInterface from '../utils/pubSubServiceInterface'\nimport createStudyMetadata from '../utils/createStudyMetadata'\n\nexport const EVENTS = {\n  STUDY_ADDED: 'event::dicomMetadataStore:studyAdded',\n  INSTANCES_ADDED: 'event::dicomMetadataStore:instancesAdded',\n  SERIES_ADDED: 'event::dicomMetadataStore:seriesAdded',\n  SERIES_UPDATED: 'event::dicomMetadataStore:seriesUpdated'\n}\n\nexport interface Instance {\n  SOPInstanceUID: string\n  SOPClassUID: string\n  Rows: number\n  Columns: number\n  PatientSex: string\n  Modality: string\n  InstanceNumber: string\n  imageId?: string\n  [key: string]: any // For dynamic metadata properties\n}\n\nexport interface Series {\n  Modality: string\n  SeriesInstanceUID: string\n  SeriesNumber: number\n  SeriesDate: string\n  SeriesTime: string\n  SeriesDescription: string\n  instances: Instance[]\n  addInstance: (newInstance: Instance) => void\n  addInstances: (newInstances: Instance[]) => void\n  getInstance: (SOPInstanceUID: string) => Instance | undefined\n}\n\nexport interface Study {\n  StudyInstanceUID: string\n  StudyDescription: string\n  PatientID: string\n  PatientName: string\n  StudyDate: string\n  AccessionNumber: string\n  NumInstances: number\n  ModalitiesInStudy: any[]\n  NumberOfStudyRelatedSeries?: number\n  isLoaded: boolean\n  series: Series[]\n  addInstanceToSeries: (instance: Instance) => void\n  addInstancesToSeries: (instances: Instance[]) => void\n  setSeriesMetadata: (SeriesInstanceUID: string, metadata: any) => void\n}\n\ninterface Model {\n  studies: Study[]\n}\n\nconst _model: Model = {\n  studies: []\n}\n\nfunction _getStudyInstanceUIDs (): string[] {\n  return _model.studies.map((aStudy) => aStudy.StudyInstanceUID)\n}\n\nfunction _getStudy (StudyInstanceUID: string): Study | undefined {\n  return _model.studies.find(\n    (aStudy) => aStudy.StudyInstanceUID === StudyInstanceUID\n  )\n}\n\nfunction _getSeries (StudyInstanceUID: string, SeriesInstanceUID: string): Series | undefined {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  return study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n}\n\nfunction _getInstance (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  SOPInstanceUID: string\n): Instance | undefined {\n  const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n\n  if (series == null) {\n    return\n  }\n\n  return series.getInstance(SOPInstanceUID)\n}\n\nfunction _getInstanceByImageId (imageId: string): Instance | undefined {\n  for (const study of _model.studies) {\n    for (const series of study.series) {\n      for (const instance of series.instances) {\n        if (instance.imageId === imageId) {\n          return instance\n        }\n      }\n    }\n  }\n}\n\n/**\n * Update the metadata of a specific series\n * @param {*} StudyInstanceUID\n * @param {*} SeriesInstanceUID\n * @param {*} metadata metadata inform of key value pairs\n * @returns\n */\nfunction _updateMetadataForSeries (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  metadata: Record<string, any>\n): void {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  const series = study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n\n  if (series == null) {\n    return\n  }\n\n  const { instances } = series\n  instances.forEach((instance) => {\n    Object.keys(metadata).forEach((key) => {\n      if (typeof metadata[key] === 'object') {\n        instance[key] = { ...instance[key], ...metadata[key] }\n      } else {\n        instance[key] = metadata[key]\n      }\n    })\n  })\n}\n\ninterface BaseImplementationType {\n  EVENTS: typeof EVENTS\n  listeners: Record<string, any>\n  addInstance: (dicomJSONDatasetOrP10ArrayBuffer: ArrayBuffer | Record<string, any>) => void\n  addInstances: (instances: Instance[], madeInClient?: boolean) => void\n  updateSeriesMetadata: (seriesMetadata: Record<string, any>) => void\n  addSeriesMetadata: (seriesSummaryMetadata: Array<Record<string, any>>, madeInClient?: boolean) => void\n  addStudy: (study: Record<string, any>) => void\n  getStudyInstanceUIDs: typeof _getStudyInstanceUIDs\n  getStudy: typeof _getStudy\n  getSeries: typeof _getSeries\n  getInstance: typeof _getInstance\n  getInstanceByImageId: typeof _getInstanceByImageId\n  updateMetadataForSeries: typeof _updateMetadataForSeries\n  _broadcastEvent: (eventName: string, data: any) => void\n}\n\nconst BaseImplementation: BaseImplementationType = {\n  EVENTS,\n  listeners: {},\n  addInstance (dicomJSONDatasetOrP10ArrayBuffer) {\n    let dicomJSONDataset\n\n    // If Arraybuffer, parse to DICOMJSON before naturalizing.\n    if (dicomJSONDatasetOrP10ArrayBuffer instanceof ArrayBuffer) {\n      const dicomData = dcmjs.data.DicomMessage.readFile(\n        dicomJSONDatasetOrP10ArrayBuffer\n      )\n\n      dicomJSONDataset = dicomData.dict\n    } else {\n      dicomJSONDataset = dicomJSONDatasetOrP10ArrayBuffer\n    }\n\n    let naturalizedDataset: Instance\n\n    if (!('SeriesInstanceUID' in dicomJSONDataset)) {\n      naturalizedDataset =\n        dcmjs.data.DicomMetaDictionary.naturalizeDataset(dicomJSONDataset) as Instance\n    } else {\n      naturalizedDataset = dicomJSONDataset as unknown as Instance\n    }\n\n    const { StudyInstanceUID } = naturalizedDataset\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstanceToSeries(naturalizedDataset)\n  },\n  addInstances (instances, madeInClient = false) {\n    const { StudyInstanceUID, SeriesInstanceUID } = instances[0]\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstancesToSeries(instances)\n\n    // Broadcast an event even if we used cached data.\n    // This is because the mode needs to listen to instances that are added to build up its active displaySets.\n    // It will see there are cached displaySets and end early if this Series has already been fired in this\n    // Mode session for some reason.\n    this._broadcastEvent(EVENTS.INSTANCES_ADDED, {\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      madeInClient\n    })\n  },\n  updateSeriesMetadata (seriesMetadata) {\n    const { StudyInstanceUID, SeriesInstanceUID } = seriesMetadata\n    const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n    if (series == null) {\n      return\n    }\n\n    const study = _getStudy(StudyInstanceUID)\n    if (study != null) {\n      study.setSeriesMetadata(SeriesInstanceUID, seriesMetadata)\n    }\n  },\n  addSeriesMetadata (seriesSummaryMetadata, madeInClient = false) {\n    if (\n      seriesSummaryMetadata === undefined ||\n      seriesSummaryMetadata.length === 0 ||\n      seriesSummaryMetadata[0] === undefined\n    ) {\n      return\n    }\n\n    const { StudyInstanceUID } = seriesSummaryMetadata[0]\n    let study = _getStudy(StudyInstanceUID)\n    if (study == null) {\n      study = createStudyMetadata(StudyInstanceUID)\n      // Will typically be undefined with a compliant DICOMweb server, reset later\n      study.StudyDescription = seriesSummaryMetadata[0].StudyDescription\n      seriesSummaryMetadata?.forEach((item) => {\n        if (study !== undefined && !study.ModalitiesInStudy?.includes(item.Modality)) {\n          study.ModalitiesInStudy?.push(item.Modality)\n        }\n      })\n      study.NumberOfStudyRelatedSeries = seriesSummaryMetadata.length\n      _model.studies.push(study)\n    }\n\n    seriesSummaryMetadata.forEach((series) => {\n      const { SeriesInstanceUID } = series\n      study?.setSeriesMetadata(SeriesInstanceUID, series)\n    })\n\n    this._broadcastEvent(EVENTS.SERIES_ADDED, {\n      StudyInstanceUID,\n      seriesSummaryMetadata,\n      madeInClient\n    })\n  },\n  addStudy (study) {\n    const { StudyInstanceUID } = study\n\n    const existingStudy = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (existingStudy == null) {\n      const newStudy = createStudyMetadata(StudyInstanceUID)\n\n      newStudy.PatientID = study.PatientID\n      newStudy.PatientName = study.PatientName\n      newStudy.StudyDate = study.StudyDate\n      newStudy.ModalitiesInStudy = study.ModalitiesInStudy\n      newStudy.StudyDescription = study.StudyDescription\n      newStudy.AccessionNumber = study.AccessionNumber\n      newStudy.NumInstances = study.NumInstances // todo: Correct naming?\n\n      _model.studies.push(newStudy)\n    }\n  },\n  getStudyInstanceUIDs: _getStudyInstanceUIDs,\n  getStudy: _getStudy,\n  getSeries: _getSeries,\n  getInstance: _getInstance,\n  getInstanceByImageId: _getInstanceByImageId,\n  updateMetadataForSeries: _updateMetadataForSeries,\n  _broadcastEvent (eventName: string, data: any): void {\n  }\n}\n\ninterface DicomMetadataStoreType extends BaseImplementationType {\n  subscribe: (event: string, callback: (data: any) => void) => { unsubscribe: () => any }\n  unsubscribe: (event: string, callback: (data: any) => void) => void\n}\n\nconst DicomMetadataStore = Object.assign(\n  {},\n  BaseImplementation,\n  pubSubServiceInterface\n) as unknown as DicomMetadataStoreType\n\nexport { DicomMetadataStore }\nexport default DicomMetadataStore\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport ColorSlider from './ColorSlider'\nimport OpacitySlider from './OpacitySlider'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange = (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange = (\n    value: number | null\n  ): void => {\n    if (value != null) {\n      const identifier = this.props.opticalPath.identifier\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { opacity: value }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          color: state.currentStyle.color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: value,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n    }\n  }\n\n  handleColorChange = (color: number[]): void => {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: state.currentStyle.limitValues\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { color }\n    })\n  }\n\n  getCurrentColors = (): string[] => {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange = (\n    value: number | null\n  ): void => {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange = (\n    value: number | null\n  ): void => {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange = (\n    values: number[]\n  ): void => {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval = (): void => {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    try {\n      specimenDescriptions.forEach(description => {\n        const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] =\n          description.SpecimenPreparationSequence ?? []\n        specimenPreparationSteps.forEach(\n          (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n            step.SpecimenPreparationStepContentItemSequence.forEach((\n              item: (\n                dcmjs.sr.valueTypes.CodeContentItem |\n                dcmjs.sr.valueTypes.TextContentItem |\n                dcmjs.sr.valueTypes.UIDRefContentItem |\n                dcmjs.sr.valueTypes.PNameContentItem |\n                dcmjs.sr.valueTypes.DateTimeContentItem\n              ),\n              index: number\n            ) => {\n              const name = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptNameCodeSequence[0].CodeValue,\n                schemeDesignator:\n                    item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n              })\n              if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n                item = item as dcmjs.sr.valueTypes.CodeContentItem\n                const value = new dcmjs.sr.coding.CodedConcept({\n                  value: item.ConceptCodeSequence[0].CodeValue,\n                  schemeDesignator:\n                      item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                  meaning: item.ConceptCodeSequence[0].CodeMeaning\n                })\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: value.CodeMeaning\n                    })\n                  }\n                }\n              } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n                item = item as dcmjs.sr.valueTypes.TextContentItem\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: item.TextValue\n                    })\n                  }\n                }\n              }\n            })\n          }\n        )\n      })\n    } catch (error: any) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DCMJS,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          error.message\n        )\n      )\n    }\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <ColorSlider\n              color={this.state.currentStyle.color}\n              onChange={this.handleColorChange}\n            />\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <OpacitySlider\n            opacity={this.state.currentStyle.opacity}\n            onChange={this.handleOpacityChange}\n          />\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <OpacitySlider\n            opacity={this.state.currentStyle.opacity}\n            onChange={this.handleOpacityChange}\n          />\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Menu,\n  Popover,\n  Space,\n  Switch,\n  Divider\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\nimport ColorSlider from './ColorSlider'\nimport OpacitySlider from './OpacitySlider'\nimport { rgbToHex, getSegmentationType } from '../utils/segmentColors'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n      color?: number[]\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color: number[]\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n\n    /** Initialize with default color if not provided */\n    const defaultColor = this.props.defaultStyle.color ?? [255, 255, 0] // Default yellow\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: defaultColor\n      }\n    }\n  }\n\n  handleVisibilityChange = (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleColorChange = (newColor: number[]): void => {\n    this.setState(prevState => {\n      const newStyle = { ...prevState.currentStyle, color: newColor }\n      return { currentStyle: newStyle }\n    }, () => {\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: this.state.currentStyle.opacity,\n          color: newColor\n        }\n      })\n    })\n  }\n\n  handleOpacityChange = (opacity: number | null): void => {\n    if (opacity !== null) {\n      this.setState(prevState => {\n        const newStyle = { ...prevState.currentStyle, opacity }\n        return { currentStyle: newStyle }\n      }, () => {\n        this.props.onStyleChange({\n          segmentUID: this.props.segment.uid,\n          styleOptions: {\n            opacity,\n            color: this.state.currentStyle.color\n          }\n        })\n      })\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    /** Get segmentation type from metadata */\n    const segmentationMetadata = this.props.metadata?.[0] as any\n    const segmentationType = getSegmentationType(segmentationMetadata)\n\n    const settings = (\n      <div>\n        {segmentationType !== 'FRACTIONAL' && (\n          <>\n            <Divider plain>Color</Divider>\n            <ColorSlider\n              color={this.state.currentStyle.color}\n              onChange={this.handleColorChange}\n            />\n            <Divider plain />\n          </>\n        )}\n        <OpacitySlider\n          opacity={this.state.currentStyle.opacity}\n          onChange={this.handleOpacityChange}\n        />\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='center'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {/* Color indicator - only show for non-fractional segmentation */}\n              {segmentationType !== 'FRACTIONAL' && (\n                <div\n                  style={{\n                    width: '20px',\n                    height: '20px',\n                    backgroundColor: rgbToHex(this.state.currentStyle.color),\n                    border: '1px solid #d9d9d9',\n                    borderRadius: '50%',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center'\n                  }}\n                  title={`Segment color: ${rgbToHex(this.state.currentStyle.color)}`}\n                />\n              )}\n            </Space>\n          </div>\n          <div style={{ flex: 1 }}>\n            <Description\n              header={this.props.segment.label}\n              attributes={attributes}\n              selectable\n              hasLongValues\n            />\n          </div>\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n      color?: number[]\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n      color?: number[]\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Menu,\n  Popover,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\nimport OpacitySlider from './OpacitySlider'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange = (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange = (opacity: number | null): void => {\n    if (opacity !== null) {\n      this.props.onStyleChange({\n        mappingUID: this.props.mapping.uid,\n        styleOptions: {\n          opacity\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <OpacitySlider\n          opacity={this.state.currentStyle.opacity}\n          onChange={this.handleOpacityChange}\n        />\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\nimport { IconType } from 'react-icons'\n\ninterface ButtonProps {\n  icon: IconType | React.ComponentType<Record<string, never>> | React.ForwardRefExoticComponent<object>\n  tooltip?: string\n  label?: string\n  onClick?: (options: React.SyntheticEvent) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","/**\n * Logger utility that wraps console logging and can be configured for different environments\n */\n\nexport enum LogLevel {\n  DEBUG = 0,\n  LOG = 1,\n  WARN = 2,\n  ERROR = 3,\n  NONE = 4\n}\n\ninterface LoggerConfig {\n  level: LogLevel\n  enableInProduction: boolean\n  enableInDevelopment: boolean\n}\n\nexport class Logger {\n  public config: LoggerConfig\n\n  constructor () {\n    // Get logger config from global config\n    const globalConfig = window.config?.logger\n    let configLevel = 'DEBUG'\n    if (globalConfig?.level !== undefined && globalConfig?.level !== null && globalConfig?.level !== '') {\n      configLevel = globalConfig.level as string\n    } else if (process.env.NODE_ENV === 'production') {\n      configLevel = 'ERROR'\n    }\n\n    this.config = {\n      level: this.parseLogLevel(configLevel),\n      enableInProduction: Boolean(globalConfig?.enableInProduction),\n      enableInDevelopment: globalConfig?.enableInDevelopment !== false\n    }\n  }\n\n  /**\n   * Parse log level string to LogLevel enum\n   */\n  public parseLogLevel (level: string): LogLevel {\n    switch (level.toUpperCase()) {\n      case 'DEBUG':\n        return LogLevel.DEBUG\n      case 'LOG':\n        return LogLevel.LOG\n      case 'WARN':\n        return LogLevel.WARN\n      case 'ERROR':\n        return LogLevel.ERROR\n      case 'NONE':\n        return LogLevel.NONE\n      default:\n        return LogLevel.DEBUG\n    }\n  }\n\n  /**\n   * Configure the logger\n   */\n  configure (config: Partial<LoggerConfig>): void {\n    this.config = { ...this.config, ...config }\n  }\n\n  /**\n   * Check if logging is enabled for the current environment and level\n   */\n  private shouldLog (level: LogLevel): boolean {\n    if (level < this.config.level) {\n      return false\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return this.config.enableInProduction\n    }\n\n    return this.config.enableInDevelopment\n  }\n\n  /**\n   * Log debug messages\n   */\n  debug (...args: unknown[]): void {\n    if (this.shouldLog(LogLevel.DEBUG)) {\n      console.debug(...args)\n    }\n  }\n\n  /**\n   * Log info messages\n   */\n  log (...args: unknown[]): void {\n    if (this.shouldLog(LogLevel.LOG)) {\n      console.log(...args)\n    }\n  }\n\n  /**\n   * Log warning messages\n   */\n  warn (...args: unknown[]): void {\n    if (this.shouldLog(LogLevel.WARN)) {\n      console.warn(...args)\n    }\n  }\n\n  /**\n   * Log error messages\n   */\n  error (...args: unknown[]): void {\n    if (this.shouldLog(LogLevel.ERROR)) {\n      console.error(...args)\n    }\n  }\n}\n\n// Export a singleton instance\nexport const logger = new Logger()\n\n// Export convenience functions\nexport const debug = (...args: unknown[]): void => logger.debug(...args)\nexport const log = (...args: unknown[]): void => logger.log(...args)\nexport const warn = (...args: unknown[]): void => logger.warn(...args)\nexport const error = (...args: unknown[]): void => logger.error(...args)\n","import React from 'react'\nimport { Layout, Space, Checkbox, Descriptions, Divider, Select, Tooltip, message, Menu, Row } from 'antd'\nimport { CheckboxChangeEvent } from 'antd/es/checkbox'\nimport { UndoOutlined } from '@ant-design/icons'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { withRouter } from '../utils/router'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport { findContentItemsByName } from '../utils/sr'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { adaptRoiToAnnotation } from '../services/RoiToAnnotationAdapter'\nimport { AnnotationSettings, AnnotationCategoryAndType } from '../types/annotations'\nimport {\n  SlideViewerProps,\n  SlideViewerState,\n  StyleOptions,\n  EvaluationOptions,\n  Evaluation,\n  Measurement\n} from './SlideViewer/types'\nimport SlideViewerModals from './SlideViewer/SlideViewerModals'\nimport SlideViewerSidebar from './SlideViewer/SlideViewerSidebar'\nimport SlideViewerContent from './SlideViewer/SlideViewerContent'\nimport {\n  buildKey,\n  getRoiKey,\n  areROIsEqual,\n  formatRoiStyle\n} from './SlideViewer/utils/roiUtils'\nimport { getSegmentColor, getSegmentationType } from '../utils/segmentColors'\nimport {\n  constructViewers,\n  implementsTID1500,\n  describesSpecimenSubject,\n  containsROIAnnotations\n} from './SlideViewer/utils/viewerUtils'\nimport {\n  DEFAULT_ROI_STROKE_COLOR,\n  DEFAULT_ROI_FILL_COLOR,\n  DEFAULT_ROI_STROKE_WIDTH,\n  DEFAULT_ROI_RADIUS,\n  DEFAULT_ANNOTATION_OPACITY,\n  DEFAULT_ANNOTATION_STROKE_COLOR,\n  DEFAULT_ANNOTATION_COLOR_PALETTE\n} from './SlideViewer/constants'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Report, { MeasurementReport } from './Report'\nimport HoveredRoiTooltip from './HoveredRoiTooltip'\nimport generateReport from '../utils/generateReport'\nimport { runValidations } from '../contexts/ValidationContext'\nimport DicomMetadataStore from '../services/DICOMMetadataStore'\nimport SpecimenList from './SpecimenList'\nimport Equipment from './Equipment'\nimport OpticalPathList from './OpticalPathList'\nimport SegmentList from './SegmentList'\nimport MappingList from './MappingList'\nimport Btn from './Button'\nimport { logger } from '../utils/logger'\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private hoveredRois = [] as dmv.roi.ROI[]\n\n  private lastPixel = [0, 0] as [number, number]\n\n  private readonly keysDown = new Set<string>()\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private defaultAnnotationStyles: {\n    [annotationUID: string]: StyleOptions\n  } = {}\n\n  private readonly selectionStrokeColor: number[] = [0, 153, 255]\n  private readonly selectionFillColor: number[] = [255, 255, 255]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionStrokeColor, 1], width: 3 },\n    fill: { color: [...this.selectionFillColor, 0.5] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionStrokeColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    logger.log(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style !== null && annotation.style !== undefined) {\n        this.roiStyles[key] = formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    const { volumeViewer, labelViewer } = constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isHoveredRoiTooltipVisible: false,\n      hoveredRoiTooltipX: 0,\n      hoveredRoiTooltipY: 0,\n      hoveredRoiAttributes: [],\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      selectedSeriesInstanceUID: undefined,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set(),\n      isICCProfilesEnabled: true,\n      isSegmentationInterpolationEnabled: false,\n      customizedSegmentColors: {}\n    }\n  }\n\n  /**\n   * Create a palette color lookup table for a segment.\n   *\n   * @param {number[]} segmentColor - RGB color triplet [r, g, b]\n   * @param {dmv.viewer.VolumeImageViewer} viewer - Volume image viewer\n   * @returns {color.PaletteColorLookupTable} Palette color lookup table\n   * @private\n   */\n  private static readonly createSegmentPaletteColorLookupTable = (segmentColor: number[]): dmv.color.PaletteColorLookupTable => {\n    /** Create a simple palette with the segment color\n     * For binary segments, we typically have 2 values: background (0) and segment (1) */\n    const paletteData = [\n      [0, 0, 0], /** Background (black/transparent) */\n      segmentColor /** Segment color */\n    ]\n\n    const palette = dmv.color.buildPaletteColorLookupTable({\n      data: paletteData,\n      firstValueMapped: 0\n    })\n\n    return palette\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current !== null && this.volumeViewportRef.current !== undefined) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer !== null && this.labelViewer !== undefined) {\n        if (this.labelViewportRef.current !== null && this.labelViewportRef.current !== undefined) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    logger.log('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances: dwc.api.Instance[] | null): void => {\n      if (matchedInstances === null || matchedInstances === undefined) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance: dwc.api.Instance, index: number) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        logger.log(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance: dwc.api.Dataset): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              logger.log(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                (this.props.selectedPresentationStateUID === null ||\n                 this.props.selectedPresentationStateUID === undefined)\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            logger.log(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Presentation State could not be loaded'\n            )\n          )\n          logger.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      logger.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Presentation State could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    logger.log(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence !== null && blendingItem.PaletteColorLookupTableSequence !== undefined) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID !== null && cpLUTItem.PaletteColorLookupTableUID !== undefined\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData !== null && cpLUTItem.RedPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData !== null && cpLUTItem.GreenPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData !== null && cpLUTItem.BluePaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData !== null && cpLUTItem.SegmentedRedPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData !== null && cpLUTItem.SegmentedGreenPaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData !== null && cpLUTItem.SegmentedBluePaletteColorLookupTableData !== undefined)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence !== null && blendingItem.SoftcopyVOILUTSequence !== undefined) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions !== null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key === null || key === undefined) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  loadDerivedDataset = (derivedDataset: dmv.metadata.Dataset): void => {\n    logger.debug('Loading derived dataset')\n    const Comprehensive3DSR = StorageClasses.COMPREHENSIVE_3D_SR\n    const ComprehensiveSR = StorageClasses.COMPREHENSIVE_SR\n    const MicroscopyBulkSimpleAnnotation = StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n    const Segmentation = StorageClasses.SEGMENTATION\n    const ParametricMap = StorageClasses.PARAMETRIC_MAP\n    const OpticalPath = StorageClasses.OPTICAL_PATH\n    const AdvancedBlendingPresentationState = StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    const ColorSoftcopyPresentationState = StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE\n    const GrayscaleSoftcopyPresentationState = StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE\n    const PseudocolorSoftcopyPresentationState = StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n\n    if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Comprehensive3DSR) {\n      const allRois = this.volumeViewer.getAllROIs()\n      allRois.forEach((roi) => {\n        this.handleAnnotationVisibilityChange({ roiUID: roi.uid, isVisible: true })\n      })\n      logger.debug('Loading Comprehensive 3D SR')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === MicroscopyBulkSimpleAnnotation) {\n      const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      allAnnotationGroups.forEach((annotationGroup) => {\n        this.handleAnnotationGroupVisibilityChange({ annotationGroupUID: annotationGroup.uid, isVisible: true })\n      })\n      logger.debug('Loading Microscopy Bulk Simple Annotation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Segmentation) {\n      const allSegments = this.volumeViewer.getAllSegments()\n      allSegments.forEach((segment) => {\n        this.handleSegmentVisibilityChange({ segmentUID: segment.uid, isVisible: true })\n      })\n      logger.debug('Loading Segmentation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === ParametricMap) {\n      const allParameterMappings = this.volumeViewer.getAllParameterMappings()\n      allParameterMappings.forEach((parameterMapping) => {\n        this.handleMappingVisibilityChange({ mappingUID: parameterMapping.uid, isVisible: true })\n      })\n      logger.debug('Loading Parametric Map')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === OpticalPath) {\n      const allOpticalPaths = this.volumeViewer.getAllOpticalPaths()\n      allOpticalPaths.forEach((opticalPath) => {\n        this.handleOpticalPathVisibilityChange({ opticalPathIdentifier: opticalPath.identifier, isVisible: true })\n      })\n      logger.debug('Loading Optical Path')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === ComprehensiveSR) {\n      logger.debug('TODO: Loading Comprehensive SR')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === AdvancedBlendingPresentationState) {\n      logger.debug('TODO: Loading Advanced Blending Presentation State')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === ColorSoftcopyPresentationState) {\n      logger.debug('TODO: Loading Color Softcopy Presentation State')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === GrayscaleSoftcopyPresentationState) {\n      logger.debug('TODO: Loading Grayscale Softcopy Presentation State')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === PseudocolorSoftcopyPresentationState) {\n      logger.debug('TODO: Loading Pseudocolor Softcopy Presentation State')\n    }\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  async addAnnotations (): Promise<void> {\n    return await new Promise<void>((resolve, reject) => {\n      logger.log('search for Comprehensive 3D SR instances')\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.searchForInstances({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SR'\n        }\n      }).then((matchedInstances): void => {\n        if (matchedInstances === null || matchedInstances === undefined) {\n          matchedInstances = []\n        }\n        matchedInstances.forEach(i => {\n          const { dataset } = dmv.metadata.formatMetadata(i)\n          const instance = dataset as dmv.metadata.Instance\n          if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n            logger.log(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n            client.retrieveInstance({\n              studyInstanceUID: this.props.studyInstanceUID,\n              seriesInstanceUID: instance.SeriesInstanceUID,\n              sopInstanceUID: instance.SOPInstanceUID\n            }).then((retrievedInstance): void => {\n              const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n              const { dataset } = dmv.metadata.formatMetadata(data.dict)\n              const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n              /*\n              * Perform a couple of checks to ensure the document content of the\n              * report fullfils the requirements of the application.\n              */\n              if (!implementsTID1500(report)) {\n                logger.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it is not structured according to template ' +\n                  'TID 1500 \"MeasurementReport\"'\n                )\n                return\n              }\n              if (!describesSpecimenSubject(report)) {\n                logger.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not describe a specimen subject'\n                )\n                return\n              }\n              if (!containsROIAnnotations(report)) {\n                logger.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not contain any suitable ROI annotations'\n                )\n                return\n              }\n\n              const content = new MeasurementReport(report)\n              content.ROIs.forEach(roi => {\n                logger.log(`add ROI \"${roi.uid}\"`)\n                const scoord3d = roi.scoord3d\n                const image = this.props.slide.volumeImages[0]\n                if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                  /*\n                  * ROIs may get assigned new UIDs upon re-rendering of the\n                  * page and we need to ensure that we don't add them twice.\n                  * The same ROI may be stored in multiple SR documents and\n                  * we don't want them to show up twice.\n                  * TODO: We should probably either \"merge\" measurements and\n                  * quantitative evaluations or pick the ROI from the \"best\"\n                  * available report (COMPLETE and VERIFIED).\n                  */\n                  const doesROIExist = this.volumeViewer.getAllROIs().some(\n                    (otherROI: dmv.roi.ROI): boolean => {\n                      return areROIsEqual(otherROI, roi)\n                    }\n                  )\n                  if (!doesROIExist) {\n                    try {\n                      // Add ROI without style such that it won't be visible.\n                      this.volumeViewer.addROI(roi, {})\n                      const roiAsAnnotation = adaptRoiToAnnotation(roi)\n                      this.formatAnnotation(roiAsAnnotation)\n                    } catch {\n                      logger.error(`could not add ROI \"${roi.uid}\"`)\n                    }\n                  } else {\n                    logger.debug(`skip already existing ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  logger.debug(\n                    `skip ROI \"${roi.uid}\" ` +\n                    `of SR document \"${report.SOPInstanceUID}\"` +\n                    'because it is defined in another frame of reference'\n                  )\n                }\n              })\n\n              resolve()\n            }).catch((error) => {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Annotations could not be loaded'\n                )\n              )\n              logger.error(\n                'failed to load ROIs ' +\n                `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n                `of series \"${instance.SeriesInstanceUID}\" ` +\n                `of study \"${this.props.studyInstanceUID}\": `,\n                error\n              )\n            })\n            /*\n            * React is not aware of the fact that ROIs have been added via the\n            * viewer (the viewport is a ref object) and won't show the\n            * annotations in the user interface unless an update is forced.\n            */\n            this.forceUpdate()\n          }\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Annotations could not be loaded'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error as unknown)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      logger.log('search for Microscopy Bulk Simple Annotations instances')\n      const client = this.props.clients[\n        StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n      ]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'ANN'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries === null || matchedSeries === undefined) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[] = retrievedMetadata.map(metadata => {\n              return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n                metadata\n              })\n            })\n            // annotations = annotations.filter(ann => {\n            //   const refImage = this.props.slide.volumeImages[0]\n            //   return (\n            //     ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n            //     ann.ContainerIdentifier === refImage.ContainerIdentifier\n            //   )\n            // })\n            annotations.forEach(ann => {\n              try {\n                this.volumeViewer.addAnnotationGroups(ann)\n              } catch (error: unknown) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Microscopy Bulk Simple Annotations cannot be displayed.'\n                  )\n                )\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                logger.error('failed to add annotation groups:', error)\n              }\n              ann.AnnotationGroupSequence.forEach(item => {\n                const annotationGroupUID = item.AnnotationGroupUID\n                const finding = item.AnnotationPropertyTypeCodeSequence[0]\n                const key = buildKey(finding)\n                const style = this.roiStyles[key]\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                if (style !== null && style !== undefined && style.fill !== null && style.fill !== undefined) {\n                  this.volumeViewer.setAnnotationGroupStyle(\n                    annotationGroupUID,\n                    { color: style.fill.color }\n                  )\n                }\n              })\n            })\n            /*\n            * React is not aware of the fact that annotation groups have been\n            * added via the viewer (the underlying HTML viewport element is a\n            * ref object) and won't show the annotation groups in the user\n            * interface unless an update is forced.\n            */\n            this.forceUpdate()\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n                'instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Microscopy Bulk Simple Annotations instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error as unknown)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Segmentation instances')\n      const client = this.props.clients[StorageClasses.SEGMENTATION]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SEG'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries === null || matchedSeries === undefined) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach((s, i) => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const segmentations: dmv.metadata.Segmentation[] = []\n            retrievedMetadata.forEach(metadata => {\n              const seg = new dmv.metadata.Segmentation({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                seg.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                segmentations.push(seg)\n              }\n            })\n            if (segmentations.length > 0) {\n              try {\n                this.volumeViewer.addSegments(segmentations)\n              } catch (error: unknown) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Segmentations cannot be displayed'\n                  )\n                )\n                console.error('failed to add segments: ', error)\n              }\n              /*\n              * React is not aware of the fact that segments have been added via\n              * the viewer (the underlying HTML viewport element is a ref object)\n              * and won't show the segments in the user interface unless an update\n              * is forced.\n              */\n              this.forceUpdate()\n            }\n\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Segmentation instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Segmentation instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error as unknown)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Parametric Map instances')\n      const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'OT'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries === null || matchedSeries === undefined) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const parametricMaps: dmv.metadata.ParametricMap[] = []\n            retrievedMetadata.forEach(metadata => {\n              const pm = new dmv.metadata.ParametricMap({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                pm.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                parametricMaps.push(pm)\n              } else {\n                console.warn(\n                  `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n                )\n              }\n            })\n            if (parametricMaps.length > 0) {\n              try {\n                this.volumeViewer.addParameterMappings(parametricMaps)\n              } catch (error: unknown) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Parametric Map cannot be displayed'\n                  )\n                )\n                console.error('failed to add mappings: ', error)\n              }\n              /*\n               * React is not aware of the fact that mappings have been added via\n               * the viewer (the underlying HTML viewport element is a ref object)\n               * and won't show the mappings in the user interface unless an update\n               * is forced.\n               */\n              this.forceUpdate()\n            }\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Parametric Map instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Parametric Map instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error as unknown)))\n      })\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current !== null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current !== null &&\n      this.labelViewer !== null && this.labelViewer !== undefined\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    // Handle promises properly with catch blocks\n    void this.addAnnotations()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotations:', error)\n      })\n\n    void this.addAnnotationGroups()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotation groups:', error)\n      })\n\n    void this.addSegmentations()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add segmentations:', error)\n      })\n\n    void this.addParametricMaps()\n      .then(() => {\n        if (this.props.derivedDataset !== null && this.props.derivedDataset !== undefined) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add parametric maps:', error)\n      })\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer !== null && this.labelViewer !== undefined) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      logger.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      logger.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiDoubleClicked = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi !== null) {\n      this.setState({\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  setHoveredRoiAttributes = (hoveredRois: dmv.roi.ROI[]): void => {\n    const rois = this.volumeViewer.getAllROIs()\n    if (rois.length === 0) {\n      this.setState({ hoveredRoiAttributes: [] })\n      return\n    }\n\n    const result = hoveredRois.map((roi) => {\n      const attributes: Array<{ name: string, value: string }> = []\n      const evaluations = roi.evaluations\n      evaluations.forEach((\n        item: (\n          dcmjs.sr.valueTypes.TextContentItem |\n          dcmjs.sr.valueTypes.CodeContentItem\n        )\n      ) => {\n        const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n        const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n        const name = `${nameMeaning}`\n        if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n          const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n          // For consistency with Segment and Annotation Group\n          if (nameValue === '276214006') {\n            attributes.push({\n              name: 'Property category',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '121071') {\n            attributes.push({\n              name: 'Property type',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '111001') {\n            attributes.push({\n              name: 'Algorithm Name',\n              value: `${valueMeaning}`\n            })\n          } else {\n            attributes.push({\n              name: name,\n              value: `${valueMeaning}`\n            })\n          }\n        } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n          const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n          attributes.push({\n            name: name,\n            value: textContentItem.TextValue\n          })\n        }\n      })\n\n      const index = (rois.findIndex((r) => r.uid === roi.uid) ?? 0) + 1\n      return { index, roiUid: roi.uid, attributes }\n    }, [] as Array<dcmjs.sr.valueTypes.CodeContentItem | dcmjs.sr.valueTypes.TextContentItem>)\n\n    this.setState({ hoveredRoiAttributes: result })\n  }\n\n  clearHoveredRois = (): void => {\n    this.hoveredRois = [] as any\n  }\n\n  getUniqueHoveredRois = (newRoi: dmv.roi.ROI | null): dmv.roi.ROI[] => {\n    if (newRoi === null || newRoi === undefined) {\n      return this.hoveredRois\n    }\n    const allRois = [...this.hoveredRois, newRoi]\n    const uniqueIds = Array.from(new Set(allRois.map(roi => roi.uid)))\n    return uniqueIds.map(id => allRois.find(roi => roi.uid === id))\n      .filter((roi): roi is dmv.roi.ROI => roi !== undefined)\n  }\n\n  isSamePixelAsLast = (event: MouseEvent): boolean => {\n    return event.clientX === this.lastPixel[0] && event.clientY === this.lastPixel[1]\n  }\n\n  onPointerMove = (event: CustomEventInit): void => {\n    const { feature: hoveredRoi, event: evt } = event.detail.payload\n    const originalEvent = evt.originalEvent\n\n    if (!this.isSamePixelAsLast(originalEvent)) {\n      this.lastPixel = [originalEvent.clientX, originalEvent.clientY]\n      this.clearHoveredRois()\n    }\n\n    this.hoveredRois = this.getUniqueHoveredRois(hoveredRoi)\n\n    if (this.hoveredRois.length > 0) {\n      this.setHoveredRoiAttributes(this.hoveredRois)\n      this.setState({\n        isHoveredRoiTooltipVisible: true,\n        hoveredRoiTooltipX: originalEvent.clientX,\n        hoveredRoiTooltipY: originalEvent.clientY\n      })\n    } else {\n      this.setState({\n        isHoveredRoiTooltipVisible: false\n      })\n    }\n  }\n\n  getUpdatedSelectedRois = (newSelectedRoiUid?: string): { selectedRoiUIDs: Set<string>, selectedRoi?: dmv.roi.ROI} => {\n    const selectedRoiUid = newSelectedRoiUid\n    const emptySelection = {\n      selectedRoiUIDs: new Set<string>(),\n      selectedRoi: undefined\n    }\n\n    if (selectedRoiUid === undefined) {\n      return emptySelection\n    }\n\n    const selectedRoi = this.volumeViewer.getROI(selectedRoiUid)\n    if (selectedRoi === undefined) {\n      return emptySelection\n    }\n\n    logger.debug(`selected ROI \"${selectedRoi.uid}\"`)\n\n    if (!this.keysDown.has('Shift')) {\n      return {\n        selectedRoiUIDs: new Set([selectedRoi.uid]),\n        selectedRoi\n      }\n    }\n\n    const oldSelectedRois = Array.from(this.state.selectedRoiUIDs)\n    return {\n      selectedRoiUIDs: new Set([...oldSelectedRois, selectedRoi.uid]),\n      selectedRoi\n    }\n  }\n\n  resetUnselectedRoiStyles = (selectionState: { selectedRoiUIDs: Set<string> }): void => {\n    this.volumeViewer.getAllROIs().forEach(roi => {\n      const uid = roi.uid\n      if (selectionState.selectedRoiUIDs.has(uid) || !this.state.visibleRoiUIDs.has(uid)) {\n        return\n      }\n      const key = getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(uid, style)\n    })\n  }\n\n  onMapClicked = (event: CustomEventInit): void => {\n    const roisClicked = (event.detail?.payload?.rois ?? []) as dmv.roi.ROI[]\n\n    if (roisClicked.length !== 0) {\n      return\n    }\n\n    const updatedSelectedRois = this.getUpdatedSelectedRois()\n    this.setState(updatedSelectedRois)\n\n    // @ts-expect-error\n    this.volumeViewer.clearSelections()\n\n    this.resetUnselectedRoiStyles(updatedSelectedRois)\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoiUid = event.detail?.payload?.uid as string\n    const updatedSelectedRois = this.getUpdatedSelectedRois(selectedRoiUid)\n    this.setState(updatedSelectedRois)\n\n    this.resetUnselectedRoiStyles(updatedSelectedRois)\n  }\n\n  handleAnnotationSelection = (uid: string): void => {\n    // @ts-expect-error\n    this.volumeViewer.clearSelections()\n    const updatedSelectedRois = this.getUpdatedSelectedRois(uid)\n    this.setState(updatedSelectedRois)\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (updatedSelectedRois.selectedRoiUIDs.has(roi.uid)) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  handleRoiSelectionCancellation = (): void => {\n    logger.log('cancel ROI selection')\n    this.setState({\n      isSelectedRoiModalVisible: false\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load frame')\n  }\n\n  onLoadingError = (event: CustomEventInit): void => {\n    const message = (event.detail?.payload?.message ?? 'Failed to load data') as string\n    console.error(message)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        message\n      ) as any\n    )\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray !== null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] !== null && stats[opticalPathIdentifier] !== undefined) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID === null) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    logger.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup = (): void => {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_viewport_clicked',\n      this.onMapClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyDown\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer !== null && this.labelViewer !== undefined) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyDown = (event: KeyboardEvent): void => {\n    this.keysDown.add(event.key)\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    this.keysDown.delete(event.key)\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        logger.log('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        logger.log('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        logger.log('deactivate translation of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount = (): void => {\n    this.volumeViewer.cleanup()\n    if (this.labelViewer !== null && this.labelViewer !== undefined) {\n      this.labelViewer.cleanup()\n    }\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup = (): void => {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_viewport_clicked',\n      this.onMapClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_error',\n      this.onLoadingError\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_error',\n      this.onFrameLoadingError\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    document.body.addEventListener(\n      'keydown',\n      this.onKeyDown\n    )\n    window.addEventListener('beforeunload', this.componentCleanup)\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount = (): void => {\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile === null || metadataItem.ICCProfile === undefined) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection = (\n    value: string,\n    _option: { label: React.ReactNode }\n  ): void => {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection = (value: string, _option: { label: string }): void => {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation = (event: CheckboxChangeEvent): void => {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection = (\n    value: string,\n    option: { label: dcmjs.sr.coding.CodedConcept }\n  ): void => {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance = (): void => {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection = (value: number | string | null): void => {\n    if (value !== null && value !== undefined) {\n      const x = Number(value)\n      this.setState(state => {\n        const isValid = x >= state.validXCoordinateRange[0] && x <= state.validXCoordinateRange[1]\n        return {\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: isValid\n        }\n      })\n    } else {\n      this.setState({\n        selectedXCoordinate: undefined,\n        isSelectedXCoordinateValid: false\n      })\n    }\n  }\n\n  handleYCoordinateSelection = (value: number | string | null): void => {\n    if (value !== null && value !== undefined) {\n      const y = Number(value)\n      this.setState(state => {\n        const isValid = y >= state.validYCoordinateRange[0] && y <= state.validYCoordinateRange[1]\n        return {\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: isValid\n        }\n      })\n    } else {\n      this.setState({\n        selectedYCoordinate: undefined,\n        isSelectedYCoordinateValid: false\n      })\n    }\n  }\n\n  handleMagnificationSelection = (value: number | string | null): void => {\n    if (value !== null && value !== undefined) {\n      const magnification = Number(value)\n      this.setState(() => {\n        const isValid = magnification >= 0 && magnification <= 40\n        return {\n          selectedMagnification: magnification,\n          isSelectedMagnificationValid: isValid\n        }\n      })\n    } else {\n      this.setState({\n        selectedMagnification: undefined,\n        isSelectedMagnificationValid: false\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection = (): void => {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n              this.state.selectedXCoordinate !== null && this.state.selectedXCoordinate !== undefined &&\n        this.state.selectedYCoordinate !== null && this.state.selectedYCoordinate !== undefined &&\n        this.state.selectedMagnification !== null && this.state.selectedMagnification !== undefined\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation = (): void => {\n    console.info('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion = (): void => {\n    logger.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Could not complete annotation configuration'\n        )\n      )\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation = (): void => {\n    logger.log('cancel annotation configuration')\n    this.volumeViewer.activateSelectInteraction({})\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration = (): void => {\n    logger.log('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    this.setState((prevState) => {\n      const report = generateReport({\n        rois,\n        metadata,\n        user: this.props.user,\n        app: this.props.app,\n        visibleRoiUIDs: prevState.visibleRoiUIDs\n      })\n      return {\n        isReportModalVisible: report.isReportModalVisible,\n        generatedReport: report.generatedReport\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification = (): void => {\n    logger.log('verify report generation')\n    if (this.state.generatedReport !== undefined) {\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      // The Comprehensive3DSR object should have a write method or similar\n      // For now, let's try to access it as an ArrayBuffer directly\n      client.storeInstances({ datasets: [(this.state.generatedReport as unknown as dcmjs.data.DicomDict).write()] }).then(\n        () => message.info('Annotations were saved.')\n      ).catch((error) => {\n        logger.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Annotations could not be saved'\n          )\n        )\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation = (): void => {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange = ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void => {\n    if (isVisible) {\n      logger.log(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(roi.uid, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      logger.log(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange = ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void => {\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const annotationGroup = allAnnotationGroups.find(ag => ag.uid === annotationGroupUID)\n    if (annotationGroup !== null && annotationGroup !== undefined) {\n      runValidations({\n        dialog: true,\n        context: { annotationGroup, slide: this.props.slide }\n      })\n    }\n\n    logger.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      logger.log(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Failed to show annotation group.'\n          )\n        )\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      logger.log(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange = ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void => {\n    logger.log(`change style of annotation group ${uid}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        uid,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of annotation group.'\n        )\n      )\n      throw error\n    }\n  }\n\n  generateRoiStyle = (\n    styleOptions: StyleOptions): dmv.viewer.ROIStyleOptions => {\n    const opacity = styleOptions.opacity ?? DEFAULT_ANNOTATION_OPACITY\n    const strokeColor = styleOptions.color ?? DEFAULT_ANNOTATION_STROKE_COLOR\n    const fillColor = styleOptions.contourOnly ? [0, 0, 0, 0] : strokeColor.map((c) => Math.min(c + 25, 255))\n    const style = formatRoiStyle({\n      fill: { color: [...fillColor, opacity] },\n      stroke: { color: [...strokeColor, opacity] },\n      radius: this.defaultRoiStyle.stroke?.width\n    })\n    return style\n  }\n\n  handleRoiStyleChange = ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: StyleOptions\n  }): void => {\n    logger.log(`change style of ROI ${uid}`)\n    try {\n      this.defaultAnnotationStyles[uid] = styleOptions\n      const style = this.generateRoiStyle(styleOptions)\n      const roi = this.volumeViewer.getROI(uid)\n      const key = getRoiKey(roi) as string\n      this.roiStyles[key] = style\n      this.volumeViewer.setROIStyle(uid, style)\n      this.state.visibleRoiUIDs.add(uid)\n    } catch (error) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of ROI.'\n        )\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange = ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void => {\n    logger.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      logger.log(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      logger.log(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange = ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n    }\n  }): void => {\n    logger.log(`change style of segment ${segmentUID}`)\n\n    /** Track user customization if color is provided */\n    if (styleOptions.color !== undefined) {\n      const color = styleOptions.color\n      this.setState(state => ({\n        customizedSegmentColors: {\n          ...state.customizedSegmentColors,\n          [segmentUID]: color\n        }\n      }))\n    }\n\n    /** If color is provided, create a palette color lookup table */\n    let paletteColorLookupTable\n    if (styleOptions.color !== undefined) {\n      paletteColorLookupTable = SlideViewer.createSegmentPaletteColorLookupTable(styleOptions.color)\n    }\n\n    this.volumeViewer.setSegmentStyle(segmentUID, {\n      opacity: styleOptions.opacity,\n      paletteColorLookupTable\n    })\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange = ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void => {\n    logger.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      logger.log(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      logger.log(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange = ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void => {\n    logger.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange = ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void => {\n    logger.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      logger.log(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      logger.log(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange = ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void => {\n    logger.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange = ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void => {\n    logger.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      logger.log(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      logger.log(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState = (): void => {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID !== null && item.paletteColorLookupTableUID !== undefined) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats !== null && stats !== undefined) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset = (): void => {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection = (\n    value?: string,\n    _option?: unknown\n  ): void => {\n    if (value !== null) {\n      console.info(`select Presentation State instance \"${value ?? 'undefined'}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState !== null && presentationState !== undefined) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value ?? ''}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Presentation State could not be found'\n          )\n        )\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value ?? 'undefined'}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing = (): void => {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification = (): void => {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation = (): void => {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo = (): void => {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval = (): void => {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange = (): void => {\n    console.info('toggle visibility of ROIs')\n    if (!this.state.areRoisHidden) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  handleAnnotationGroupClick = (annotationGroupUID: string): void => {\n    this.volumeViewer.zoomToROI(annotationGroupUID)\n  }\n\n  handleAnnotationGroupSelection = (value: string): void => {\n    // Hide all currently visible annotation groups when selection changes\n    this.state.visibleAnnotationGroupUIDs.forEach(annotationGroupUID => {\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n    })\n\n    // Reset the visible annotation groups state\n    this.setState({\n      selectedSeriesInstanceUID: value,\n      visibleAnnotationGroupUIDs: new Set()\n    })\n  }\n\n  getSeriesDescription = (seriesInstanceUID: string): string => {\n    // Get the study from DicomMetadataStore\n    const study = DicomMetadataStore.getStudy(this.props.studyInstanceUID)\n\n    if ((study?.series) !== null && study !== null && study !== undefined) {\n      // Find the series that matches this series instance UID\n      const series = study.series.find(s => s.SeriesInstanceUID === seriesInstanceUID)\n\n      if (series?.SeriesDescription !== undefined && series.SeriesDescription !== '') {\n        return series.SeriesDescription\n      }\n    }\n\n    // Fallback to truncated UID if no description found\n    return `Series ${seriesInstanceUID.slice(0, 8)}...`\n  }\n\n  /**\n   * Handler that will toggle the ICC profile color management, i.e., either\n   * enable or disable it, depending on its current state.\n   */\n  handleICCProfilesToggle = (event: CheckboxChangeEvent): void => {\n    const checked = event.target.checked\n    this.setState({ isICCProfilesEnabled: checked })\n    this.volumeViewer.toggleICCProfiles()\n  }\n\n  /**\n   * Handler that will toggle the segmentation interpolation, i.e., either\n   * enable or disable it, depending on its current state.\n   */\n  handleSegmentationInterpolationToggle = (event: CheckboxChangeEvent): void => {\n    const checked = event.target.checked\n    this.setState({ isSegmentationInterpolationEnabled: checked })\n    ;(this.volumeViewer as any).toggleSegmentationInterpolation()\n  }\n\n  formatAnnotation = (annotation: AnnotationCategoryAndType): void => {\n    const roi = this.volumeViewer.getROI(annotation.uid)\n    const key = getRoiKey(roi) as string\n    const color = this.roiStyles[key] !== undefined\n      ? this.roiStyles[key].stroke?.color.slice(0, 3)\n      : DEFAULT_ANNOTATION_COLOR_PALETTE[\n        Object.keys(this.roiStyles).length % DEFAULT_ANNOTATION_COLOR_PALETTE.length\n      ]\n    this.defaultAnnotationStyles[annotation.uid] = {\n      color: color as number[],\n      opacity: DEFAULT_ANNOTATION_OPACITY,\n      contourOnly: false\n    }\n    this.roiStyles[key] = this.generateRoiStyle(\n      this.defaultAnnotationStyles[annotation.uid]\n    )\n  }\n\n  private readonly getDataFromViewer = (): {\n    rois: dmv.roi.ROI[]\n    segments: dmv.segment.Segment[]\n    mappings: dmv.mapping.ParameterMapping[]\n    annotationGroups: dmv.annotation.AnnotationGroup[]\n    annotations: AnnotationCategoryAndType[]\n  } => {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const filteredAnnotationGroups = allAnnotationGroups?.filter((annotationGroup) =>\n      annotationGroup.referencedSeriesInstanceUID === this.props.seriesInstanceUID\n    )\n    annotationGroups.push(...filteredAnnotationGroups)\n\n    const annotations = rois.map(roi => adaptRoiToAnnotation(roi))\n\n    return { rois, segments, mappings, annotationGroups, annotations }\n  }\n\n  private static getOpenSubMenuItems (): string[] {\n    return ['specimens', 'optical-paths', 'annotations', 'presentation-states']\n  }\n\n  private readonly getReport = (): React.ReactNode => {\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      return <Report dataset={dataset} />\n    }\n    return undefined\n  }\n\n  private readonly getAnnotationMenuItems = (rois: dmv.roi.ROI[]): React.ReactNode => {\n    if (rois.length > 0) {\n      return (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n    return undefined\n  }\n\n  private readonly getFindingOptions = (): React.ReactNode[] => {\n    return this.findingOptions.map((finding, index) => {\n      return (\n        <Select.Option\n          key={(finding.CodeValue !== undefined && finding.CodeValue !== '') ? finding.CodeValue : `finding-${index}`}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n  }\n\n  private static getGeometryTypeOptionsMapping (): { [key: string]: React.ReactNode } {\n    return {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n  }\n\n  private readonly getAnnotationConfigurations = (): React.ReactNode[] => {\n    const findingOptions = this.getFindingOptions()\n    const geometryTypeOptionsMapping = SlideViewer.getGeometryTypeOptionsMapping()\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n          placeholder='Select finding'\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach((evaluation, index) => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={(code.CodeValue !== undefined && code.CodeValue !== '') ? code.CodeValue : `evaluation-${index}`}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n            placeholder='Select geometry type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    return annotationConfigurations\n  }\n\n  private readonly getSpecimenMenu = (): React.ReactNode => {\n    return (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n  }\n\n  private readonly getEquipmentMenu = (): React.ReactNode => {\n    return (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n  }\n\n  private readonly getOpticalPathMenu = (): React.ReactNode => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    return (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n  }\n\n  private readonly getPresentationStateMenu = (): React.ReactNode => {\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach((instance, index) => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={(instance.SOPInstanceUID !== undefined && instance.SOPInstanceUID !== '') ? instance.SOPInstanceUID : `presentation-state-${index}`}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription !== undefined && instance.ContentDescription !== '' ? instance.ContentDescription : 'Untitled'}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={undefined}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          {null}\n        </Select.Option>\n      )\n      return (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={UndoOutlined}\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getSegmentationMenu = (segments: dmv.segment.Segment[]): React.ReactNode => {\n    if (segments.length === 0 || this.volumeViewer === null || this.volumeViewer === undefined) {\n      return undefined\n    }\n\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n          color?: number[]\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      segments.forEach((segment, index) => {\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n        if (getSegmentationType(segmentMetadata[segment.uid][0] as any) !== 'BINARY') {\n          const defaultStyle = this.volumeViewer.getSegmentStyle(segment.uid)\n          defaultSegmentStyles[segment.uid] = {\n            opacity: defaultStyle.opacity,\n            color: undefined // Non-BINARY segments don't have explicit colors\n          }\n        } else {\n          const defaultStyle = this.volumeViewer.getSegmentStyle(segment.uid)\n\n          /** Get the best color for this segment (from DICOM metadata or generated) */\n          const segmentColor = getSegmentColor(\n            (segmentMetadata[segment.uid]?.[0] as unknown) as Record<string, unknown> ?? {},\n            segment.number\n          )\n\n          /** Use customized color if user has set one, otherwise use DICOM/generated color */\n          const finalColor = this.state.customizedSegmentColors[segment.uid] ?? segmentColor\n\n          defaultSegmentStyles[segment.uid] = {\n            opacity: defaultStyle.opacity,\n            color: finalColor\n          }\n\n          this.volumeViewer.setSegmentStyle(segment.uid, {\n            opacity: defaultSegmentStyles[segment.uid].opacity,\n            paletteColorLookupTable: (defaultSegmentStyles[segment.uid].color != null)\n              ? SlideViewer.createSegmentPaletteColorLookupTable(defaultSegmentStyles[segment.uid].color as number[])\n              : undefined\n          })\n        }\n      })\n      return (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getParametricMapMenu = (mappings: dmv.mapping.ParameterMapping[]): React.ReactNode => {\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      return (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getAnnotationGroupMenu = (annotationGroups: dmv.annotation.AnnotationGroup[]): React.ReactNode => {\n    if (annotationGroups.length > 0) {\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const defaultAnnotationGroupStyles: {\n        [annotationUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n\n      // Group annotation groups by seriesInstanceUID\n      const annotationGroupsBySeries: { [seriesInstanceUID: string]: dmv.annotation.AnnotationGroup[] } = {}\n      annotationGroups.forEach(annotationGroup => {\n        const seriesUID = annotationGroup.seriesInstanceUID\n        if (!(seriesUID in annotationGroupsBySeries)) {\n          annotationGroupsBySeries[seriesUID] = []\n        }\n        annotationGroupsBySeries[seriesUID].push(annotationGroup)\n      })\n\n      // Initialize selected series if not set\n      if (this.state.selectedSeriesInstanceUID === undefined && annotationGroups.length !== 0) {\n        this.setState({ selectedSeriesInstanceUID: 'all' })\n      }\n\n      // Create dropdown options for series\n      const dropdownOptions = [\n        {\n          value: 'all',\n          label: 'All'\n        },\n        ...Object.keys(annotationGroupsBySeries).map((seriesUID) => ({\n          value: seriesUID,\n          label: `${this.getSeriesDescription(seriesUID)} (${annotationGroupsBySeries[seriesUID]?.length ?? 0} groups)`\n        }))\n      ]\n\n      // Get annotation groups for the selected series or all series\n      const selectedSeriesAnnotationGroups = this.state.selectedSeriesInstanceUID === 'all'\n        ? annotationGroups\n        : (this.state.selectedSeriesInstanceUID !== undefined\n            ? annotationGroupsBySeries[this.state.selectedSeriesInstanceUID] ?? []\n            : [])\n\n      return (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          {/* Series Selection Dropdown */}\n          <div\n            style={{\n              paddingLeft: '14px',\n              paddingRight: '14px',\n              paddingTop: '7px',\n              paddingBottom: '7px'\n            }}\n          >\n            <Select\n              style={{ width: '100%' }}\n              placeholder='Select a series'\n              value={this.state.selectedSeriesInstanceUID}\n              onChange={this.handleAnnotationGroupSelection}\n              options={dropdownOptions}\n            />\n          </div>\n\n          {/* Display annotation groups for the selected series */}\n          {selectedSeriesAnnotationGroups.length > 0 && (\n            <AnnotationGroupList\n              annotationGroups={selectedSeriesAnnotationGroups}\n              metadata={annotationGroupMetadata}\n              onAnnotationGroupClick={this.handleAnnotationGroupClick}\n              defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n              visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n              onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n              onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n            />\n          )}\n        </Menu.SubMenu>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getToolbar = (): { toolbar: React.ReactNode, toolbarHeight: string } => {\n    const annotationTools = [\n      <Btn\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Btn\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Btn\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Btn\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Btn\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Btn\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Btn\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n\n    let toolbar: React.ReactNode\n    let toolbarHeight = '0px'\n\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    return { toolbar, toolbarHeight }\n  }\n\n  private readonly getCursor = (): string => {\n    if (this.state.isLoading) {\n      return 'progress'\n    }\n    return 'default'\n  }\n\n  private readonly getSelectedRoiInformation = (): React.ReactNode => {\n    if (this.state.selectedRoi !== null && this.state.selectedRoi !== undefined) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence !== null && item.ContentSequence !== undefined) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit !== null && item.unit !== undefined) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      return (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n    return undefined\n  }\n\n  private readonly getICCProfilesMenu = (): React.ReactNode => {\n    return this.volumeViewer.getICCProfiles().length > 0 && (\n      <div style={{ margin: '0.9rem' }}>\n        <Checkbox\n          checked={this.state.isICCProfilesEnabled}\n          onChange={this.handleICCProfilesToggle}\n        >\n          ICC Profiles\n        </Checkbox>\n      </div>\n    )\n  }\n\n  private readonly getSegmentationInterpolationMenu = (): React.ReactNode => {\n    const segments = this.volumeViewer.getAllSegments()\n    return segments.length > 0 && (\n      <div style={{ margin: '0.9rem' }}>\n        <Checkbox\n          checked={this.state.isSegmentationInterpolationEnabled}\n          onChange={this.handleSegmentationInterpolationToggle}\n        >\n          Segmentation Interpolation\n        </Checkbox>\n      </div>\n    )\n  }\n\n  render = (): React.ReactNode => {\n    const { rois, segments, mappings, annotationGroups, annotations } = this.getDataFromViewer()\n\n    const openSubMenuItems = SlideViewer.getOpenSubMenuItems()\n    const report = this.getReport()\n    const annotationMenuItems = this.getAnnotationMenuItems(rois)\n    const annotationConfigurations = this.getAnnotationConfigurations()\n    const specimenMenu = this.getSpecimenMenu()\n    const equipmentMenu = this.getEquipmentMenu()\n    const opticalPathMenu = this.getOpticalPathMenu()\n    const presentationStateMenu = this.getPresentationStateMenu()\n    const segmentationMenu = this.getSegmentationMenu(segments)\n    const parametricMapMenu = this.getParametricMapMenu(mappings)\n    const annotationGroupMenu = this.getAnnotationGroupMenu(annotationGroups)\n    const { toolbar, toolbarHeight } = this.getToolbar()\n    const cursor = this.getCursor()\n    const selectedRoiInformation = this.getSelectedRoiInformation()\n    const iccProfilesMenu = this.getICCProfilesMenu()\n    const segmentationInterpolationMenu = this.getSegmentationInterpolationMenu()\n\n    if (segmentationMenu !== null && segmentationMenu !== undefined) {\n      openSubMenuItems.push('segmentations')\n    }\n    if (parametricMapMenu !== null && parametricMapMenu !== undefined) {\n      openSubMenuItems.push('parametric-maps')\n    }\n    if (annotationGroupMenu !== null && annotationGroupMenu !== undefined) {\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    annotations?.forEach?.(this.formatAnnotation)\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <SlideViewerContent\n          toolbar={toolbar}\n          toolbarHeight={toolbarHeight}\n          cursor={cursor}\n          volumeViewportRef={this.volumeViewportRef}\n        >\n          <SlideViewerModals\n            isAnnotationModalVisible={this.state.isAnnotationModalVisible}\n            onAnnotationConfigurationCompletion={this.handleAnnotationConfigurationCompletion}\n            onAnnotationConfigurationCancellation={this.handleAnnotationConfigurationCancellation}\n            isAnnotationOkDisabled={!(this.state.selectedFinding !== undefined && this.state.selectedGeometryType !== undefined)}\n            annotationConfigurations={annotationConfigurations}\n            isSelectedRoiModalVisible={this.state.isSelectedRoiModalVisible}\n            onRoiSelectionCancellation={this.handleRoiSelectionCancellation}\n            selectedRoiInformation={selectedRoiInformation}\n            isGoToModalVisible={this.state.isGoToModalVisible}\n            onSlidePositionSelection={this.handleSlidePositionSelection}\n            onSlidePositionSelectionCancellation={this.handleSlidePositionSelectionCancellation}\n            validXCoordinateRange={this.state.validXCoordinateRange}\n            validYCoordinateRange={this.state.validYCoordinateRange}\n            isSelectedXCoordinateValid={this.state.isSelectedXCoordinateValid}\n            isSelectedYCoordinateValid={this.state.isSelectedYCoordinateValid}\n            isSelectedMagnificationValid={this.state.isSelectedMagnificationValid}\n            onXCoordinateSelection={this.handleXCoordinateSelection}\n            onYCoordinateSelection={this.handleYCoordinateSelection}\n            onMagnificationSelection={this.handleMagnificationSelection}\n            isReportModalVisible={this.state.isReportModalVisible}\n            onReportVerification={this.handleReportVerification}\n            onReportCancellation={this.handleReportCancellation}\n            report={report}\n          />\n        </SlideViewerContent>\n\n        <SlideViewerSidebar\n          labelViewportRef={this.labelViewportRef}\n          labelViewer={this.labelViewer}\n          openSubMenuItems={openSubMenuItems}\n          specimenMenu={specimenMenu}\n          iccProfilesMenu={iccProfilesMenu}\n          segmentationInterpolationMenu={segmentationInterpolationMenu}\n          equipmentMenu={equipmentMenu}\n          opticalPathMenu={opticalPathMenu}\n          presentationStateMenu={presentationStateMenu}\n          annotationMenuItems={annotationMenuItems}\n          annotationGroupMenu={annotationGroupMenu}\n          segmentationMenu={segmentationMenu}\n          parametricMapMenu={parametricMapMenu}\n          annotations={annotations}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onAnnotationVisibilityChange={this.handleAnnotationVisibilityChange}\n          onRoiStyleChange={this.handleRoiStyleChange}\n          defaultAnnotationStyles={this.defaultAnnotationStyles}\n        />\n\n        {this.state.isHoveredRoiTooltipVisible &&\n        this.state.hoveredRoiAttributes.length > 0\n          ? (\n            <HoveredRoiTooltip\n              xPosition={this.state.hoveredRoiTooltipX}\n              yPosition={this.state.hoveredRoiTooltipY}\n              rois={this.state.hoveredRoiAttributes}\n            />\n            )\n          : null}\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import { Routes, Route, useLocation, useParams } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\nimport { useEffect, useState } from 'react'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide } from '../data/slides'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { useSlides } from '../hooks/useSlides'\nimport { StorageClasses } from '../data/uids'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface NaturalizedInstance {\n  SeriesInstanceUID: string\n  SOPInstanceUID: string\n  ReferencedSeriesSequence?: Array<{\n    SeriesInstanceUID: string\n  }>\n  ContentSequence?: Array<{\n    ConceptNameCodeSequence: Array<{\n      CodeValue: string\n    }>\n    ContentSequence?: Array<{\n      ContentSequence: Array<{\n        ReferencedSOPSequence: Array<{\n          ReferencedSOPInstanceUID: string\n        }>\n      }>\n    }>\n  }>\n}\n\ninterface ReferencedSlideResult {\n  slide: Slide | undefined\n  metadata: NaturalizedInstance\n}\n\nconst findSeriesSlide = (slides: Slide[], seriesInstanceUID: string): Slide | undefined => {\n  return slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n}\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID = '', seriesInstanceUID = '' } = useParams<{ studyInstanceUID: string, seriesInstanceUID: string }>()\n  const location = useLocation()\n\n  const [selectedSlide, setSelectedSlide] = useState(findSeriesSlide(slides, seriesInstanceUID))\n  const [derivedDataset, setDerivedDataset] = useState<NaturalizedInstance | null>(null)\n\n  useEffect(() => {\n    const seriesSlide = findSeriesSlide(slides, seriesInstanceUID)\n    if (seriesSlide !== null) {\n      setSelectedSlide(seriesSlide)\n    }\n  }, [seriesInstanceUID, slides])\n\n  useEffect(() => {\n    const findReferencedSlide = async ({ clients, studyInstanceUID, seriesInstanceUID }: {\n      clients: { [key: string]: DicomWebManager }\n      studyInstanceUID: string\n      seriesInstanceUID: string\n    }): Promise<ReferencedSlideResult | null> => await new Promise<ReferencedSlideResult | null>((resolve, reject) => {\n      try {\n        const allClients = Object.values(StorageClasses).map((storageClass) => clients[storageClass])\n        Promise.all(allClients.map(async (client) => {\n          const seriesMetadata = await client.retrieveSeriesMetadata({\n            studyInstanceUID: studyInstanceUID,\n            seriesInstanceUID: seriesInstanceUID\n          })\n          const [naturalizedSeriesMetadata] = seriesMetadata.map((metadata) => naturalizeDataset(metadata)) as NaturalizedInstance[]\n\n          if (naturalizedSeriesMetadata.ReferencedSeriesSequence != null) {\n            const referencedSeriesInstanceUID = naturalizedSeriesMetadata.ReferencedSeriesSequence[0].SeriesInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.seriesInstanceUIDs.find((uid: string) => {\n                return uid === referencedSeriesInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n\n          const IMAGE_LIBRARY_CONCEPT_NAME_CODE = '111028'\n          const imageLibrary = naturalizedSeriesMetadata.ContentSequence?.find(\n            contentItem => contentItem.ConceptNameCodeSequence[0].CodeValue === IMAGE_LIBRARY_CONCEPT_NAME_CODE\n          )\n          if ((imageLibrary?.ContentSequence?.[0]?.ContentSequence?.[0]?.ReferencedSOPSequence?.[0]) != null) {\n            const referencedSOPInstanceUID = imageLibrary.ContentSequence[0].ContentSequence[0].ReferencedSOPSequence[0].ReferencedSOPInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.volumeImages.find((image: { SOPInstanceUID: string }) => {\n                return image.SOPInstanceUID === referencedSOPInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n        })).catch(reject)\n      } catch (error) {\n        reject(error)\n      }\n    })\n\n    if (selectedSlide === null || selectedSlide === undefined) {\n      void findReferencedSlide({ clients, studyInstanceUID, seriesInstanceUID }).then((result: ReferencedSlideResult | null) => {\n        if (result !== null && result !== undefined) {\n          setSelectedSlide(result.slide)\n          setDerivedDataset(result.metadata)\n        }\n      }).catch(error => {\n        console.error('Error finding referenced slide:', error)\n      })\n    }\n  }, [slides, clients, studyInstanceUID, seriesInstanceUID, selectedSlide])\n\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string | undefined\n  if (!searchParams.has('access_token')) {\n    const stateParam = searchParams.get('state')\n    presentationStateUID = stateParam !== null ? stateParam : undefined\n  }\n\n  let viewer = null\n  if (selectedSlide != null && selectedSlide !== undefined) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n        derivedDataset={derivedDataset ?? undefined}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\nfunction Viewer (props: ViewerProps): JSX.Element | null {\n  const { clients, studyInstanceUID, location, navigate } = props\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n\n  const handleSeriesSelection = ({ seriesInstanceUID }: { seriesInstanceUID: string }): void => {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n\n    if (location.pathname.includes('/projects/')) {\n      urlPath = location.pathname\n      if (!location.pathname.includes('/series/')) {\n        urlPath += `/series/${seriesInstanceUID}`\n      } else {\n        urlPath = urlPath.replace(/\\/series\\/[^/]+/, `/series/${seriesInstanceUID}`)\n      }\n    }\n\n    if (\n      location.pathname.includes('/series/') &&\n      location.search != null\n    ) {\n      urlPath += location.search\n    }\n\n    navigate(urlPath, { replace: true })\n  }\n\n  if (isLoading) {\n    return null\n  }\n\n  if (slides.length === 0) {\n    return null\n  }\n\n  const firstSlide = slides[0]\n  const volumeInstances = firstSlide.volumeImages\n  if (volumeInstances.length === 0) {\n    return null\n  }\n  const refImage = volumeInstances[0]\n\n  /* If a series is encoded in the path, route the viewer to this series.\n   * Otherwise select the first series correspondent to\n   * the first slide contained in the study.\n   */\n  let selectedSeriesInstanceUID: string\n  if (location.pathname.includes('series/')) {\n    const seriesFragment = location.pathname.split('series/')[1]\n    selectedSeriesInstanceUID = seriesFragment.includes('/') ? seriesFragment.split('/')[0] : seriesFragment\n  } else {\n    selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n  }\n\n  let clinicalTrialMenu\n  if (refImage.ClinicalTrialSponsorName != null) {\n    clinicalTrialMenu = (\n      <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n        <ClinicalTrial metadata={refImage} />\n      </Menu.SubMenu>\n    )\n  }\n\n  return (\n    <Layout style={{ height: '100%' }} hasSider>\n      <Layout.Sider\n        width={300}\n        style={{\n          height: '100%',\n          borderRight: 'solid',\n          borderRightWidth: 0.25,\n          overflow: 'hidden',\n          background: 'none'\n        }}\n      >\n        <Menu\n          mode='inline'\n          defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n          style={{ height: '100%' }}\n          inlineIndent={14}\n        >\n          <Menu.SubMenu key='patient' title='Patient'>\n            <Patient metadata={refImage} />\n          </Menu.SubMenu>\n          <Menu.SubMenu key='study' title='Study'>\n            <Study metadata={refImage} />\n          </Menu.SubMenu>\n          {clinicalTrialMenu}\n          <Menu.SubMenu key='slides' title='Slides'>\n            <SlideList\n              clients={props.clients}\n              metadata={slides}\n              selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n              onSeriesSelection={handleSeriesSelection}\n            />\n          </Menu.SubMenu>\n        </Menu>\n      </Layout.Sider>\n\n      <Routes>\n        <Route\n          path='/series/:seriesInstanceUID'\n          element={\n            <ParametrizedSlideViewer\n              clients={props.clients}\n              slides={slides}\n              preload={props.preload}\n              annotations={props.annotations}\n              enableAnnotationTools={props.enableAnnotationTools}\n              app={props.app}\n              user={props.user}\n            />\n          }\n        />\n      </Routes>\n    </Layout>\n  )\n}\n\nexport default withRouter(Viewer)\n","import dcmjs from 'dcmjs'\n\nconst { DicomMetaDictionary } = dcmjs.data\n\ninterface TagInfo {\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TagInfo[]\n  level: number\n}\n\nexport interface DicomTag {\n  name: string\n  vr: string\n  Value?: any[]\n  [key: string]: any\n}\n\nconst formatValue = (val: any): string => {\n  if (typeof val === 'object' && val !== null) {\n    return JSON.stringify(val)\n  }\n  return String(val)\n}\n\nexport const formatTagValue = (tag: DicomTag): string => {\n  if (tag.Value == null) return ''\n\n  if (Array.isArray(tag.Value)) {\n    return tag.Value.map(formatValue).join(', ')\n  }\n\n  return formatValue(tag.Value)\n}\n\n/**\n * Processes DICOM metadata and returns a flattened array of tag information\n * @param metadata - The DICOM metadata object to process\n * @param depth - The current depth level for nested sequences (default: 0)\n * @returns Array of processed tag information\n */\nexport function getRows (metadata: Record<string, any>, depth = 0): TagInfo[] {\n  if (metadata === undefined || metadata === null) return []\n  const keywords = Object.keys(metadata).filter(key => key !== '_vrMap')\n\n  return keywords.flatMap(keyword => {\n    // @ts-expect-error\n    const tagInfo = DicomMetaDictionary.nameMap[keyword] as TagInfo | undefined\n    let value = metadata[keyword]\n\n    // Handle private or unknown tags\n    if (tagInfo === undefined) {\n      const regex = /[0-9A-Fa-f]{6}/g\n      if (keyword.match(regex) == null) return []\n\n      return [{\n        tag: `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`,\n        vr: '',\n        keyword: 'Private Tag',\n        value: value?.toString() ?? '',\n        level: depth\n      }]\n    }\n\n    // Handle sequence values (SQ VR)\n    if (tagInfo.vr === 'SQ' && value !== undefined) {\n      const sequenceItems = Array.isArray(value) ? value : [value]\n\n      // Create a parent sequence node\n      const sequenceNode: TagInfo = {\n        tag: tagInfo.tag,\n        vr: tagInfo.vr,\n        keyword,\n        value: `Sequence with ${sequenceItems.length} item(s)`,\n        level: depth,\n        children: []\n      }\n\n      // Create individual nodes for each sequence item\n      sequenceNode.children = sequenceItems.map((item, index) => {\n        const itemNode: TagInfo = {\n          tag: `${tagInfo.tag}.${index + 1}`,\n          vr: 'Item',\n          keyword: `Item ${index + 1}`,\n          value: `Sequence Item ${index + 1}`,\n          level: depth + 1,\n          children: getRows(item, depth + 2)\n        }\n        return itemNode\n      })\n\n      return [sequenceNode]\n    }\n\n    // Handle array values\n    if (Array.isArray(value)) {\n      value = value.map(formatValue).join('\\\\')\n    } else if (typeof value === 'object' && value !== null) {\n      value = formatValue(value)\n    }\n\n    return [{\n      tag: tagInfo.tag,\n      vr: tagInfo.vr,\n      keyword: keyword.replace('RETIRED_', ''),\n      value: value?.toString() ?? '',\n      level: depth\n    }]\n  })\n}\n\n/**\n * Sorts DICOM tags alphabetically by tag value\n * @param metadata - The DICOM metadata object to process\n * @returns Sorted array of tag information\n */\nexport function getSortedTags (metadata: Record<string, any>): TagInfo[] {\n  const tagList = getRows(metadata)\n\n  // Add bulkdataReferences as a special tag if it exists\n  if (metadata.bulkdataReferences !== undefined && metadata.bulkdataReferences !== null) {\n    const bulkdataRefs = metadata.bulkdataReferences\n    const bulkdataTag: TagInfo = {\n      tag: 'bulkdataReferences',\n      vr: 'OB',\n      keyword: 'bulkdataReferences',\n      value: `Object with ${Object.keys(bulkdataRefs).length} bulk data reference(s)`,\n      level: 0,\n      children: Object.keys(bulkdataRefs).map(key => ({\n        tag: `bulkdataReferences.${key}`,\n        vr: 'OB',\n        keyword: key,\n        value: JSON.stringify(bulkdataRefs[key]),\n        level: 1\n      }))\n    }\n    tagList.push(bulkdataTag)\n  }\n\n  return tagList.sort((a, b) => a.tag.localeCompare(b.tag))\n}\n","/**\n * Formats a DICOM datetime string (YYYYMMDD:HHmmss) into a human-readable format\n *\n * @param dateStr - DICOM datetime string in format \"YYYYMMDD:HHmmss\"\n * @returns Formatted date string (e.g., \"Mon, Jan 1 2024\")\n * @example\n * formatDicomDate(\"20240101:120000\") // Returns \"Mon, Jan 1 2024\"\n * formatDicomDate(\"invalid\") // Returns \"invalid\"\n */\nexport const formatDicomDate = (dateStr: string): string => {\n  // Parse YYYYMMDD:HHmmss format\n  const match = dateStr.match(/^(\\d{4})(\\d{2})(\\d{2}):(\\d{2})(\\d{2})(\\d{2})/)\n  if (match == null) return dateStr\n\n  const [, year, month, day, hour, minute, second] = match\n\n  // Validate month and day\n  const monthNum = parseInt(month)\n  const dayNum = parseInt(day)\n  if (monthNum < 1 || monthNum > 12 || dayNum < 1 || dayNum > 31) {\n    return dateStr\n  }\n\n  const date = new Date(\n    parseInt(year),\n    monthNum - 1, // months are 0-based\n    dayNum,\n    parseInt(hour),\n    parseInt(minute),\n    parseInt(second)\n  )\n\n  // Check if the date is invalid or if the month/day combination is invalid\n  // This catches cases like February 31st where the date rolls over to March\n  if (\n    date.getMonth() !== monthNum - 1 || // month rolled over\n    date.getDate() !== dayNum // day rolled over\n  ) {\n    return dateStr\n  }\n\n  // Format parts separately to avoid the extra comma\n  const weekday = date.toLocaleDateString('en-US', { weekday: 'short' })\n  const monthName = date.toLocaleDateString('en-US', { month: 'short' })\n  const dayFormatted = date.getDate()\n  const yearNum = date.getFullYear()\n\n  return `${weekday}, ${monthName} ${dayFormatted} ${yearNum}`\n}\n","import { useState, useMemo, useEffect } from 'react'\nimport { Select, Input, Slider, Typography, Table } from 'antd'\nimport { SearchOutlined } from '@ant-design/icons'\n\nimport DicomWebManager from '../../DicomWebManager'\nimport './DicomTagBrowser.css'\nimport { useSlides } from '../../hooks/useSlides'\nimport { getSortedTags } from './dicomTagUtils'\nimport { formatDicomDate } from '../../utils/formatDicomDate'\nimport DicomMetadataStore, { Series, Study } from '../../services/DICOMMetadataStore'\nimport { useDebounce } from '../../hooks/useDebounce'\n\nconst { Option } = Select\n\ninterface DisplaySet {\n  displaySetInstanceUID: number\n  SeriesDate?: string\n  SeriesTime?: string\n  SeriesNumber: string\n  SeriesDescription?: string\n  SeriesInstanceUID?: string\n  Modality: string\n  images: any[]\n}\n\ninterface TableDataItem {\n  key: string\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TableDataItem[]\n}\n\ninterface DicomTagBrowserProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\nconst DicomTagBrowser = ({ clients, studyInstanceUID }: DicomTagBrowserProps): JSX.Element => {\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n  const [study, setStudy] = useState<Study | undefined>(undefined)\n\n  const [displaySets, setDisplaySets] = useState<DisplaySet[]>([])\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] = useState(0)\n  const [instanceNumber, setInstanceNumber] = useState(1)\n  const [filterValue, setFilterValue] = useState('')\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([])\n  const [searchInput, setSearchInput] = useState('')\n\n  const debouncedSearchValue = useDebounce(searchInput, 300)\n\n  useEffect(() => {\n    if (debouncedSearchValue === '') {\n      setFilterValue('')\n      setExpandedKeys([])\n    } else {\n      setFilterValue(debouncedSearchValue)\n    }\n  }, [debouncedSearchValue])\n\n  useEffect(() => {\n    const handler = (event: any): void => {\n      const study: Study | undefined = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n      setStudy(study)\n    }\n    const seriesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.SERIES_ADDED, handler)\n    const instancesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.INSTANCES_ADDED, handler)\n\n    const study = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n    setStudy(study)\n\n    return () => {\n      seriesAddedSubscription.unsubscribe()\n      instancesAddedSubscription.unsubscribe()\n    }\n  }, [studyInstanceUID])\n\n  useEffect(() => {\n    let displaySets: DisplaySet[] = []\n    let derivedDisplaySets: DisplaySet[] = []\n    const processedSeries: string[] = []\n    let index = 0\n\n    if (slides.length > 0) {\n      displaySets = slides\n        .map((slide): DisplaySet[] => {\n          const slideDisplaySets: DisplaySet[] = []\n\n          // Helper function to process any image type\n          const processImageType = (\n            images: any[] | undefined,\n            imageType: string\n          ): void => {\n            if (images?.[0] !== undefined) {\n              console.info(`Found ${images.length} ${imageType} image(s) for slide ${slide.containerIdentifier}`)\n\n              const {\n                SeriesDate,\n                SeriesTime,\n                SeriesNumber,\n                SeriesInstanceUID,\n                SeriesDescription,\n                Modality\n              } = images[0]\n\n              processedSeries.push(SeriesInstanceUID)\n\n              const ds: DisplaySet = {\n                displaySetInstanceUID: index,\n                SeriesDate,\n                SeriesTime,\n                SeriesInstanceUID,\n                SeriesNumber: String(SeriesNumber),\n                SeriesDescription,\n                Modality,\n                images\n              }\n              slideDisplaySets.push(ds)\n              index++\n            }\n          }\n\n          // Process all image types\n          processImageType(slide.volumeImages, 'volume')\n          processImageType(slide.overviewImages, 'overview')\n          processImageType(slide.labelImages, 'label')\n\n          return slideDisplaySets\n        })\n        .flat()\n        .filter((set): set is DisplaySet => set !== null && set !== undefined)\n    }\n\n    if (study !== undefined && study.series?.length > 0) {\n      derivedDisplaySets = study.series.filter(s => !processedSeries.includes(s.SeriesInstanceUID))\n        .map((series: Series): DisplaySet => {\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate: series.SeriesDate,\n            SeriesTime: series.SeriesTime,\n            SeriesNumber: String(series.SeriesNumber),\n            SeriesDescription: series.SeriesDescription,\n            SeriesInstanceUID: series.SeriesInstanceUID,\n            Modality: series.Modality,\n            images: series?.instances?.length > 0 ? series.instances : [series]\n          }\n          index++\n          return ds\n        })\n    }\n\n    setDisplaySets([...displaySets, ...derivedDisplaySets])\n  }, [slides, study])\n\n  const displaySetList = useMemo(() => {\n    displaySets.sort((a, b) => Number(a.SeriesNumber) - Number(b.SeriesNumber))\n    return displaySets.map((displaySet, index) => {\n      const {\n        SeriesDate = '',\n        SeriesTime = '',\n        SeriesNumber = '',\n        SeriesDescription = '',\n        Modality = ''\n      } = displaySet\n\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0]\n      const displayDate = formatDicomDate(dateStr)\n\n      return {\n        value: index,\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\n        description: displayDate\n      }\n    })\n  }, [displaySets])\n\n  const showInstanceList =\n    displaySets[selectedDisplaySetInstanceUID]?.images.length > 1\n\n  const instanceSliderMarks = useMemo(() => {\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return {}\n    const totalInstances = displaySets[selectedDisplaySetInstanceUID].images.length\n\n    // Create marks for first, middle, and last instances\n    const marks: Record<number, string> = {\n      1: '1', // First\n      [Math.ceil(totalInstances / 2)]: String(Math.ceil(totalInstances / 2)), // Middle\n      [totalInstances]: String(totalInstances) // Last\n    }\n\n    return marks\n  }, [selectedDisplaySetInstanceUID, displaySets])\n\n  const columns = [\n    {\n      title: 'Tag',\n      dataIndex: 'tag',\n      key: 'tag',\n      width: '30%'\n    },\n    {\n      title: 'VR',\n      dataIndex: 'vr',\n      key: 'vr',\n      width: '5%'\n    },\n    {\n      title: 'Keyword',\n      dataIndex: 'keyword',\n      key: 'keyword',\n      width: '30%'\n    },\n    {\n      title: 'Value',\n      dataIndex: 'value',\n      key: 'value',\n      width: '40%'\n    }\n  ]\n\n  const tableData = useMemo(() => {\n    const transformTagsToTableData = (tags: any[], parentKey = ''): TableDataItem[] => {\n      return tags.map((tag, index) => {\n        // Create a unique key using tag value if available, otherwise use index\n        const keyBase: string = tag.tag !== '' ? tag.tag.replace(/[(),]/g, '') : index.toString()\n        const currentKey: string = parentKey !== '' ? `${parentKey}-${keyBase}` : keyBase\n\n        const item: TableDataItem = {\n          key: currentKey,\n          tag: tag.tag,\n          vr: tag.vr,\n          keyword: tag.keyword,\n          value: tag.value\n        }\n\n        if (tag.children !== undefined && tag.children.length > 0) {\n          item.children = transformTagsToTableData(tag.children, currentKey)\n        }\n\n        return item\n      })\n    }\n\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return []\n    const images = displaySets[selectedDisplaySetInstanceUID]?.images\n    const sortedMetadata = Array.isArray(images)\n      ? [...images].sort((a, b) => {\n          if (a.InstanceNumber !== undefined && b.InstanceNumber !== undefined) {\n            return Number(a.InstanceNumber) - Number(b.InstanceNumber)\n          }\n          return 0 // keep original order if either is missing InstanceNumber\n        })\n      : []\n    const metadata = sortedMetadata[instanceNumber - 1]\n    const tags = getSortedTags(metadata)\n    return transformTagsToTableData(tags)\n  }, [instanceNumber, selectedDisplaySetInstanceUID, displaySets])\n\n  const filteredData = useMemo(() => {\n    if (filterValue === undefined || filterValue === '') return tableData\n\n    const searchLower = filterValue.toLowerCase()\n    const matchedKeys = new Set<string>()\n\n    const nodeMatches = (node: TableDataItem): boolean => {\n      return (\n        (node.tag?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.vr?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.keyword?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.value?.toString().toLowerCase() ?? '').includes(searchLower)\n      )\n    }\n\n    // First pass: find all matching nodes and their parent paths\n    const findMatchingPaths = (\n      node: TableDataItem,\n      parentPath: TableDataItem[] = []\n    ): TableDataItem[][] => {\n      const currentPath = [...parentPath, node]\n      let matchingPaths: TableDataItem[][] = []\n\n      if (nodeMatches(node)) {\n        matchingPaths.push(currentPath)\n      }\n\n      if (node.children != null) {\n        node.children.forEach(child => {\n          const childPaths = findMatchingPaths(child, currentPath)\n          matchingPaths = [...matchingPaths, ...childPaths]\n        })\n      }\n\n      return matchingPaths\n    }\n\n    // Find all paths that contain matches\n    const matchingPaths = tableData.flatMap(node => findMatchingPaths(node))\n\n    // Second pass: reconstruct the tree with matching paths\n    const reconstructTree = (\n      paths: TableDataItem[][],\n      level = 0\n    ): TableDataItem[] => {\n      if (paths.length === 0 || level >= paths[0].length) return []\n\n      const nodesAtLevel = new Map<string, {\n        node: TableDataItem\n        childPaths: TableDataItem[][]\n      }>()\n\n      paths.forEach(path => {\n        if (level < path.length) {\n          const node = path[level]\n          if (!nodesAtLevel.has(node.key)) {\n            nodesAtLevel.set(node.key, {\n              node: { ...node },\n              childPaths: []\n            })\n          }\n          if (level + 1 < path.length) {\n            nodesAtLevel.get(node.key)?.childPaths.push(path)\n          }\n        }\n      })\n\n      return Array.from(nodesAtLevel.values()).map(({ node, childPaths }) => {\n        matchedKeys.add(node.key)\n        const children = reconstructTree(childPaths, level + 1)\n        return children.length > 0 ? { ...node, children } : node\n      })\n    }\n\n    const filtered = reconstructTree(matchingPaths)\n    setExpandedKeys(Array.from(matchedKeys))\n\n    return filtered\n  }, [tableData, filterValue])\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div className='dicom-tag-browser'>\n      <div\n        style={{\n          width: '100%',\n          padding: '16px 20px 20px'\n        }}\n      >\n        <div style={{ display: 'flex', gap: '24px', marginBottom: '32px' }}>\n          <div style={{ flex: 1 }}>\n            <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>Series</Typography.Text>\n            <Select\n              style={{ width: '100%' }}\n              value={selectedDisplaySetInstanceUID}\n              onChange={(value) => {\n                setSelectedDisplaySetInstanceUID(value)\n                setInstanceNumber(1)\n              }}\n              optionLabelProp='label'\n              optionFilterProp='label'\n            >\n              {displaySetList.map((item) => (\n                <Option key={item.value} value={item.value} label={item.label}>\n                  <div>\n                    <div>{item.label}</div>\n                    <div\n                      style={{ fontSize: '12px', color: 'rgba(0, 0, 0, 0.45)' }}\n                    >\n                      {item.description}\n                    </div>\n                  </div>\n                </Option>\n              ))}\n            </Select>\n          </div>\n\n          {showInstanceList && (\n            <div style={{ flex: 1 }}>\n              <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>\n                Instance Number: {instanceNumber}\n              </Typography.Text>\n              <Slider\n                min={1}\n                max={displaySets[selectedDisplaySetInstanceUID]?.images.length}\n                value={instanceNumber}\n                onChange={(value) => setInstanceNumber(value)}\n                marks={instanceSliderMarks}\n                tooltip={{\n                  formatter: (value: number | undefined) => value !== undefined ? `Instance ${value}` : ''\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        <Input\n          style={{ marginBottom: '20px' }}\n          placeholder='Search DICOM tags...'\n          prefix={<SearchOutlined />}\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n        />\n\n        <Table\n          columns={columns}\n          dataSource={filteredData}\n          pagination={false}\n          expandable={{\n            expandedRowKeys: expandedKeys,\n            onExpandedRowsChange: (keys) => setExpandedKeys(keys as string[])\n          }}\n          size='small'\n          scroll={{ y: 500 }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default DicomTagBrowser\n","import { useState, useEffect } from 'react'\n\n/**\n * A hook that delays updating a value for the specified time\n * @param value The value to debounce\n * @param delay The delay time in milliseconds\n * @returns The debounced value\n * @example\n * const debouncedSearchTerm = useDebounce(searchTerm, 300)\n */\nexport const useDebounce = <T,>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Modal,\n  Row,\n  Space,\n  Badge,\n  Collapse,\n  Radio,\n  Tooltip\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  FileSearchOutlined,\n  UnorderedListOutlined,\n  UserOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport NotificationMiddleware, { NotificationMiddlewareEvents } from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\nimport { v4 as uuidv4 } from 'uuid'\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser'\nimport DicomWebManager from '../DicomWebManager'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  clients?: { [key: string]: DicomWebManager }\n  defaultClients?: { [key: string]: DicomWebManager }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface ExtendedCustomError extends CustomError {\n  source: string\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n  errorObj: ExtendedCustomError[]\n  errorCategory: string[]\n  warnings: string[]\n  serverSelectionMode: 'default' | 'custom'\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')?.trim()\n    const cachedMode = window.localStorage.getItem('slim_server_selection_mode') as 'default' | 'custom' | null\n\n    this.state = {\n      errorObj: [],\n      errorCategory: [],\n      warnings: [],\n      selectedServerUrl: cachedServerUrl ?? '',\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl),\n      serverSelectionMode: cachedMode === 'custom' && cachedServerUrl !== null && cachedServerUrl !== undefined && cachedServerUrl !== '' ? 'custom' : 'default'\n    }\n\n    const onErrorHandler = ({ source, error }: {\n      source: string\n      error: CustomError\n    }): void => {\n      this.setState(state => ({\n        ...state,\n        errorObj: [...state.errorObj, { ...error, source }],\n        errorCategory: [...state.errorCategory, error.type]\n      }))\n    }\n\n    const onWarningHandler = (warning: string): void => {\n      this.setState(state => ({\n        ...state,\n        warnings: [...state.warnings, warning]\n      }))\n    }\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnError,\n      onErrorHandler\n    )\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnWarning,\n      onWarningHandler\n    )\n  }\n\n  componentDidUpdate (prevProps: Readonly<HeaderProps>, prevState: Readonly<HeaderState>): void {\n    if (((prevState.warnings.length > 0) || (prevState.errorObj.length > 0)) && this.props.location.pathname !== prevProps.location.pathname) {\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true,\n        errorObj: [],\n        errorCategory: [],\n        warnings: []\n      })\n    }\n  }\n\n  isValidServerUrl = (url: string | null | undefined): boolean => {\n    if (url == null || url === '') {\n      return false\n    }\n    const trimmedUrl = url.trim()\n    if (trimmedUrl === '') {\n      return false\n    }\n    try {\n      const urlObj = new URL(trimmedUrl)\n      return urlObj.protocol.startsWith('http') && urlObj.pathname.length > 0\n    } catch (TypeError) {\n      return false\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleDicomTagBrowserButtonClick = (): void => {\n    const width = window.innerWidth - 200\n    Modal.info({\n      title: 'DICOM Tag Browser',\n      width,\n      content: <DicomTagBrowser\n        clients={this.props.clients ?? {}}\n        studyInstanceUID={this.props.params.studyInstanceUID ?? ''}\n               />,\n      onOk (): void {}\n    })\n  }\n\n  handleDebugButtonClick = (): void => {\n    const errorMsgs: {\n      Authentication: string[]\n      Communication: string[]\n      EncodingDecoding: string[]\n      Visualization: string[]\n    } = {\n      Authentication: [],\n      Communication: [],\n      EncodingDecoding: [],\n      Visualization: []\n    }\n\n    type ObjectKey = keyof typeof errorMsgs\n    const errorNum = this.state.errorObj.length\n\n    if (errorNum > 0) {\n      for (let i = 0; i < errorNum; i++) {\n        const category = this.state.errorCategory[i] as ObjectKey\n        errorMsgs[category].push(`${this.state.errorObj[i].message as string} (Source: ${this.state.errorObj[i].source})`)\n      }\n    }\n\n    const { Panel } = Collapse\n\n    const showErrorCount = (errcount: number): JSX.Element => (\n      <Badge count={errcount} />\n    )\n\n    const showWarningCount = (warncount: number): JSX.Element => (\n      <Badge color='green' count={warncount} />\n    )\n\n    Modal.info({\n      title: 'Debug Information\\n (Check console for more information)',\n      width: 800,\n      content: (\n        <Collapse>\n          <Panel\n            header='Communication Error'\n            key='communicationerror'\n            extra={showErrorCount(errorMsgs.Communication.length)}\n          >\n            <ol>\n              {errorMsgs.Communication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Data Encoding/Decoding error'\n            key='encodedecodeerror'\n            extra={showErrorCount(errorMsgs.EncodingDecoding.length)}\n          >\n            <ol>\n              {errorMsgs.EncodingDecoding.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Visualization error'\n            key='visualizationerror'\n            extra={showErrorCount(errorMsgs.Visualization.length)}\n          >\n            <ol>\n              {errorMsgs.Visualization.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Authentication error'\n            key='autherror'\n            extra={showErrorCount(errorMsgs.Authentication.length)}\n          >\n            <ol>\n              {errorMsgs.Authentication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Warning'\n            key='warning'\n            extra={showWarningCount(this.state.warnings.length)}\n          >\n            <ol>\n              {this.state.warnings.map(warning => (\n                <li key={uuidv4()}>{warning}</li>\n              ))}\n            </ol>\n          </Panel>\n        </Collapse>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  handleServerSelectionInput = (\n    event: React.FormEvent<HTMLInputElement>\n  ): void => {\n    const value = event.currentTarget.value.trim()\n    this.setState({\n      selectedServerUrl: value,\n      isServerSelectionDisabled: !this.isValidServerUrl(value)\n    })\n  }\n\n  handleServerSelectionCancellation = (): void => {\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')?.trim()\n    this.setState({\n      serverSelectionMode: cachedServerUrl !== null && cachedServerUrl !== undefined && cachedServerUrl !== '' ? 'custom' : 'default',\n      selectedServerUrl: cachedServerUrl ?? undefined,\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl)\n    })\n  }\n\n  handleServerSelectionModeChange = (e: any): void => {\n    const mode = e.target.value\n    this.setState({ serverSelectionMode: mode })\n  }\n\n  handleServerSelection = (): void => {\n    window.localStorage.setItem('slim_server_selection_mode', this.state.serverSelectionMode)\n\n    if (this.state.serverSelectionMode === 'default') {\n      this.props.onServerSelection({ url: '' })\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: false\n      })\n      return\n    }\n\n    const url = this.state.selectedServerUrl?.trim()\n    let closeModal = false\n    if (url != null && url !== '') {\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        this.props.onServerSelection({ url })\n        closeModal = true\n      }\n    }\n    this.setState({\n      isServerSelectionModalVisible: !closeModal,\n      isServerSelectionDisabled: !closeModal\n    })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = { items: userMenuItems }\n      user = (\n        <Dropdown menu={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    const debugButton = (\n      <Badge count={this.state.errorObj.length} style={{ zIndex: 1000 }}>\n        <Badge color='green' count={this.state.warnings.length} style={{ zIndex: 1001 }}>\n          <Button\n            icon={SettingOutlined}\n            tooltip='Debug info'\n            onClick={this.handleDebugButtonClick}\n          />\n        </Badge>\n      </Badge>\n    )\n\n    const showDicomTagBrowser = this.props.location.pathname.includes('/studies/')\n\n    const dicomTagBrowserButton = showDicomTagBrowser\n      ? (\n        <Button\n          icon={FileSearchOutlined}\n          tooltip='Dicom Tag Browser'\n          onClick={this.handleDicomTagBrowserButtonClick}\n        />\n        )\n      : null\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    const selectedServerUrl = this.state.serverSelectionMode === 'custom'\n      ? this.state.selectedServerUrl?.trim()\n      : this.props.clients?.default?.baseURL ?? this.props.defaultClients?.default?.baseURL\n\n    const urlInfo = selectedServerUrl != null && selectedServerUrl !== ''\n      ? (\n        <Tooltip title={selectedServerUrl}>\n          <div\n            style={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap',\n              paddingRight: '20px',\n              paddingLeft: '20px'\n            }}\n            title={selectedServerUrl}\n          >\n            {selectedServerUrl}\n          </div>\n        </Tooltip>\n        )\n      : null\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row style={{ flexWrap: 'nowrap' }}>\n            <Col style={{ flexShrink: 0 }}>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' style={{ minWidth: 0, overflow: 'hidden' }}>\n              <div style={{ width: '100%', overflow: 'hidden' }}>\n                {this.props.showServerSelectionButton ? urlInfo : ''}\n              </div>\n            </Col>\n            <Col style={{ flexShrink: 0 }}>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {debugButton}\n                {dicomTagBrowserButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          open={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={this.handleServerSelection}\n          onCancel={this.handleServerSelectionCancellation}\n        >\n          <Radio.Group\n            value={this.state.serverSelectionMode}\n            onChange={this.handleServerSelectionModeChange}\n            style={{ marginBottom: '16px' }}\n          >\n            <Radio value='default'>Use default server</Radio>\n            <Radio value='custom'>Use custom server</Radio>\n          </Radio.Group>\n\n          {this.state.serverSelectionMode === 'custom' && (\n            <Tooltip title={this.state.selectedServerUrl?.trim()}>\n              <Input\n                placeholder='Enter base URL of DICOMweb Study Service'\n                value={this.state.selectedServerUrl}\n                onChange={this.handleServerSelectionInput}\n                onPressEnter={this.handleServerSelection}\n                addonAfter={\n                this.state.isServerSelectionDisabled\n                  ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                  : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n            </Tooltip>\n          )}\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { Button, Input, Space, Table, TablePaginationConfig } from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\n// Standalone function for row key generation\nconst getRowKey = (record: dmv.metadata.Study): string => {\n  return record.StudyInstanceUID\n}\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'An error occured. Search for studies failed.'\n          )\n        )\n      })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick = (event: React.SyntheticEvent, study: dmv.metadata.Study): void => {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData = ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void => {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Request to search for studies failed.'\n          )\n        )\n      })\n  }\n\n  handleChange = (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void => {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null && filters[dataIndex] !== undefined) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  handleRowProps = (record: dmv.metadata.Study): object => {\n    return {\n      onClick: (event: React.SyntheticEvent): void => {\n        return this.handleClick(event, record)\n      }\n    }\n  }\n\n  handlePressEnter = (selectedKeys: React.Key[], confirm: (params?: FilterConfirmProps) => void, dataIndex: string): void => {\n    this.handleSearch(selectedKeys, confirm, dataIndex)\n  }\n\n  static handleInputChange (e: React.ChangeEvent<HTMLInputElement>, setSelectedKeys: (selectedKeys: React.Key[]) => void): void {\n    setSelectedKeys(e.target.value !== undefined ? [e.target.value] : [])\n  }\n\n  static getFilterInputChangeHandler (setSelectedKeys: (selectedKeys: React.Key[]) => void) {\n    return (e: React.ChangeEvent<HTMLInputElement>) => Worklist.handleInputChange(e, setSelectedKeys)\n  }\n\n  getFilterPressEnterHandler = (selectedKeys: React.Key[], confirm: (params?: FilterConfirmProps) => void, dataIndex: string) => {\n    return () => this.handlePressEnter(selectedKeys, confirm, dataIndex)\n  }\n\n  getFilterSearchHandler = (selectedKeys: React.Key[], confirm: (params?: FilterConfirmProps) => void, dataIndex: string) => {\n    return () => this.handleSearch(selectedKeys, confirm, dataIndex)\n  }\n\n  getFilterResetHandler = (clearFilters: () => void) => {\n    return () => this.handleReset(clearFilters)\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={getRowKey}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={this.handleRowProps}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => {\n    return {\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n        setSelectedKeys: (selectedKeys: React.Key[]) => void\n        selectedKeys: React.Key[]\n        confirm: (params?: FilterConfirmProps) => void\n        clearFilters: () => void\n      }) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            placeholder='Search'\n            value={selectedKeys[0]}\n            onChange={Worklist.getFilterInputChangeHandler(setSelectedKeys)}\n            onPressEnter={this.getFilterPressEnterHandler(selectedKeys, confirm, dataIndex)}\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\n          />\n          <Space>\n            <Button\n              type='primary'\n              onClick={this.getFilterSearchHandler(selectedKeys, confirm, dataIndex)}\n              icon={<SearchOutlined />}\n              size='small'\n              style={{ width: 90 }}\n            >\n              Search\n            </Button>\n            <Button\n              onClick={this.getFilterResetHandler(clearFilters)}\n              size='small'\n              style={{ width: 90 }}\n            >\n              Reset\n            </Button>\n          </Space>\n        </div>\n      ),\n      filterIcon: (filtered: boolean) => (\n        <SearchOutlined\n          style={{ color: filtered ? '#1890ff' : undefined }}\n        />\n      )\n    }\n  }\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\nimport NotificationMiddleware,\n{ NotificationMiddlewareContext } from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nconst createUser = (userData: UserData | null): User => {\n  let profile\n  if (userData !== null) {\n    profile = userData.profile\n  }\n\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.AUTH,\n        new CustomError(\n          errorTypes.AUTHENTICATION,\n          'Failed to obtain user \"name\" and \"email\".'\n        )\n      )\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.AUTH,\n      new CustomError(\n        errorTypes.AUTHENTICATION,\n        'Failed to obtain user profile.'\n      )\n    )\n  }\n  return {\n    name: undefined,\n    email: undefined\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData === undefined || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string|undefined> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null && userData !== undefined) {\n        return userData.access_token\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user profile.'\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null || userData === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user information.'\n          )\n        )\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n// skipcq: JS-C1003\nimport * as dcmjs from 'dcmjs'\n// skipcq: JS-C1003\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\nimport DicomMetadataStore, { Instance } from './services/DICOMMetadataStore'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        // Only log errors in development environment\n        if (process.env.NODE_ENV === 'development') {\n          console.error(error, serverSettings)\n        }\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'At least one server needs to be configured.'\n          )\n        )\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Either path or full URL needs to be configured for server.'\n          )\n        )\n      }\n\n      const hasHttpsUrl = (url?: string): boolean => url?.startsWith('https') ?? false\n\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n\n      const shouldUpgradeInsecure = serverSettings.upgradeInsecureRequests === true && [\n        serviceUrl,\n        serverSettings.qidoPathPrefix,\n        serverSettings.wadoPathPrefix,\n        serverSettings.stowPathPrefix\n      ].some(hasHttpsUrl)\n\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n\n      if (shouldUpgradeInsecure) {\n        clientSettings.headers = {\n          ...clientSettings.headers,\n          'Content-Security-Policy': 'upgrade-insecure-requests'\n        }\n      }\n\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one store is supported for now.'\n        )\n      )\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const studySummaryMetadata = await this.stores[0].client.retrieveStudyMetadata(options)\n    const naturalized = naturalizeDataset(studySummaryMetadata)\n    DicomMetadataStore.addStudy(naturalized)\n    return studySummaryMetadata\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const seriesSummaryMetadata = await this.stores[0].client.retrieveSeriesMetadata(options)\n    const naturalized = seriesSummaryMetadata.map(naturalizeDataset)\n    DicomMetadataStore.addSeriesMetadata(naturalized, true)\n    return seriesSummaryMetadata\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    const instance = await this.stores[0].client.retrieveInstance(options)\n    const data = dcmjs.data.DicomMessage.readFile(instance)\n    const { dataset } = dmv.metadata.formatMetadata(data.dict)\n    DicomMetadataStore.addInstances([dataset as Instance])\n    return instance\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\n// skipcq: JS-C1003\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\nimport { ValidationProvider } from './contexts/ValidationContext'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <ValidationProvider clients={clients} studyInstanceUID={studyInstanceUID}>\n      <CaseViewer\n        clients={clients}\n        user={user}\n        annotations={config.annotations}\n        preload={preload}\n        app={app}\n        enableAnnotationTools={enableAnnotationTools}\n        studyInstanceUID={studyInstanceUID}\n      />\n    </ValidationProvider>\n  )\n}\n\nfunction _createClientMapping ({ baseUri, gcpBaseUrl, settings, onError }: {\n  baseUri: string\n  gcpBaseUrl: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      if (window.location.pathname.includes('/projects/')) {\n        const pathname = window.location.pathname.split('/study/')[0]\n        const pathUrl = `${gcpBaseUrl}${pathname}/dicomWeb`\n        serverSettings.url = pathUrl\n      }\n\n      storageClassMapping.default += 1\n      clientMapping.default = new DicomWebManager({\n        baseUri,\n        settings: [serverSettings],\n        onError\n      })\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.COMMUNICATION,\n        'Only one default server can be configured without specification ' +\n        'of storage classes.'\n      )\n    )\n  }\n\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one configured server can specify a given storage class. ' +\n          `Storage class \"${key}\" is specified by more than one ` +\n          'of the configured servers.'\n        )\n      )\n    }\n  }\n\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n  }\n\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  defaultClients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'User is not authorized to access DICOMweb resources.')\n      )\n    }\n\n    const logServerError = (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'An unexpected server error occured.'\n        )\n      )\n    }\n\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          logServerError()\n        }\n      })\n    } else if (error.status === 500) {\n      logServerError()\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    // Only log in development environment\n    if (process.env.NODE_ENV === 'development') {\n      console.info('instatiate app')\n      console.info(`app is located at \"${props.config.path}\"`)\n    }\n\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      if (process.env.NODE_ENV === 'development') {\n        console.info(\n          'app uses the following OIDC configuration: ',\n          props.config.oidc\n        )\n      }\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'One server needs to be configured.')\n      )\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      console.info(\n        'app uses the following DICOMweb server configuration: ',\n        props.config.servers\n      )\n    }\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n    this.addGcpSecondaryAnnotationServer(props.config)\n\n    const defaultClients = _createClientMapping({\n      baseUri,\n      gcpBaseUrl: props.config.gcpBaseUrl ?? 'https://healthcare.googleapis.com/v1',\n      settings: props.config.servers,\n      onError: this.handleDICOMwebError\n    })\n\n    this.state = {\n      clients: defaultClients,\n      defaultClients,\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  addGcpSecondaryAnnotationServer (config: AppProps['config']): void {\n    const serverId = 'gcp_secondary_annotation_server'\n    const urlParams = new URLSearchParams(window.location.search)\n    const url = urlParams.get('gcp')\n    const gcpSecondaryAnnotationServer = config.servers.find(\n      (server) => server.id === serverId\n    )\n    if (gcpSecondaryAnnotationServer === undefined && typeof url === 'string') {\n      config.servers.push({\n        id: serverId,\n        write: true,\n        url,\n        storageClasses: [\n          StorageClasses.COMPREHENSIVE_SR,\n          StorageClasses.COMPREHENSIVE_3D_SR,\n          StorageClasses.SEGMENTATION,\n          StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION,\n          StorageClasses.PARAMETRIC_MAP,\n          StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE,\n          StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n        ]\n      })\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    const trimmedUrl = url.trim()\n    console.info('select DICOMweb server: ', trimmedUrl)\n    if (trimmedUrl === '' || window.localStorage.getItem('slim_server_selection_mode') === 'default') {\n      this.setState({ clients: this.state.defaultClients })\n      return\n    }\n    window.localStorage.setItem('slim_selected_server', trimmedUrl)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url: trimmedUrl,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath !== null && storedPath !== '') {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch !== null && storedSearch !== '') {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Could not sign-in user.')\n        )\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path === null || path === undefined || path === '') {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n\n    // Restore cached server selection if it exists\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    if (cachedServerUrl !== null && cachedServerUrl !== undefined && cachedServerUrl !== '') {\n      this.handleServerSelection({ url: cachedServerUrl })\n    }\n\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n              clients={this.state.clients}\n              defaultClients={this.state.defaultClients}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/projects/:project/locations/:location/datasets/:dataset/dicomStores/:dicomStore/study/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","PatientID","PatientName","PatientSex","PatientBirthDate","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","errorTypes","CustomError","type","message","stack","Error","_subscriptions","Symbol","_lastSubscriptionId","PubSub","eventName","callback","hasOwnProperty","subscriptionId","callbacks","payload","NotificationMiddlewareEvents","NotificationMiddlewareContext","NotificationType","NotificationSourceDefinition","sources","category","notificationType","NotificationMiddleware","outerContext","args","publish","Array","from","warn","console","JSON","stringify","arguments","includes","apply","prototype","slice","call","source","error","notificationMsg","errorCategory","find","s","String","notification","description","duration","ImageFlavors","hasImageFlavor","image","imageFlavor","ImageType","areSameAcquisition","refImage","AcquisitionUID","Slide","options","acquisitionUID","frameOfReferenceUID","containerIdentifier","seriesInstanceUIDs","opticalPathIdentifiers","pyramidUIDs","areVolumeImagesMonochrome","volumeImages","labelImages","overviewImages","thumbnailImages","images","length","Set","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","forEach","add","ContainerIdentifier","SeriesInstanceUID","OpticalPathSequence","OpticalPathIdentifier","THUMBNAIL","FrameOfReferenceUID","PyramidUID","Object","keys","identifier","samplesPerPixel","SamplesPerPixel","filter","requirePyramidUID","PhotometricInterpretation","createSlides","slideMetadata","series","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","findIndex","slide","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","sort","a","b","imgA","imgB","Number","fetchImageMetadata","clients","studyInstanceUID","onSuccess","onError","info","client","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","searchForSeries","queryParams","Modality","StudyInstanceUID","matchedSeries","Promise","all","dmv","dataset","loadingSeries","retrieveSeriesMetadata","seriesInstanceUID","retrievedMetadata","seriesImages","Value","newSlides","customError","slidesCache","Map","pendingRequests","cacheTimestamps","cleanupExpiredCache","now","Date","entries","key","delete","useSlides","useState","setSlides","isLoading","setIsLoading","setError","useEffect","cachedData","get","fetchSlides","pendingRequest","resolve","reject","set","err","catch","cachedEntries","lastCachedSlides","result","useMemo","ValidationContext","createContext","globalValidationContext","ValidationProvider","isDialogVisible","setIsDialogVisible","currentValidationResult","setCurrentValidationResult","memoizedSlides","slidesInfo","slidesLength","hasSlides","isNaN","showValidationDialog","useCallback","validateMultiResolutionPyramid","isValid","validateAnnotationGroupAssociation","annotationGroup","some","volumeImage","SOPInstanceUID","referencedSOPInstanceUID","runValidations","dialog","context","pyramidValidation","associationValidation","setGlobalValidationContext","handleDialogClose","Provider","open","onCancel","onOk","charAt","toUpperCase","okText","cancelButtonProps","style","display","warning","getModalType","iconColor","iconSize","position","top","right","show","setShow","tooltipText","setTooltipText","useContext","useValidation","validationResult","zIndex","pointerEvents","color","fontSize","textShadow","SlideItem","state","overviewViewportRef","overviewViewer","setState","previewImages","current","innerHTML","imageType","disableInteractions","resizeFactor","errorInterceptor","render","container","resize","height","ref","textAlign","alignItems","justifyContent","letterSpacing","selectedSeriesInstanceUID","onSeriesSelection","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","keyPath","domEvent","toString","mode","inlineIndent","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","findContentItemsByName","content","concept","ConceptNameCodeSequence","CodeValue","CodingSchemeDesignator","hasName","adaptRoiToAnnotation","roi","evaluations","CodeMeaning","nameValue","ValueType","dcmjs","ConceptCodeSequence","isVisible","isOkDisabled","okButtonProps","disabled","align","direction","maskClosable","footer","validXCoordinateRange","validYCoordinateRange","isSelectedXCoordinateValid","isSelectedYCoordinateValid","isSelectedMagnificationValid","onXCoordinateSelection","onYCoordinateSelection","onMagnificationSelection","handleXCoordinateEnter","event","target","handleYCoordinateEnter","handleMagnificationEnter","placeholder","prefix","onChange","onPressEnter","controls","addonAfter","CheckOutlined","StopOutlined","isAnnotationModalVisible","onAnnotationConfigurationCompletion","onAnnotationConfigurationCancellation","isAnnotationOkDisabled","annotationConfigurations","isSelectedRoiModalVisible","onRoiSelectionCancellation","selectedRoiInformation","isGoToModalVisible","onSlidePositionSelection","onSlidePositionSelectionCancellation","isReportModalVisible","onReportVerification","onReportCancellation","report","handleColorChange","newColor","createChangeHandler","colorLabel","justify","gutter","range","min","max","step","opacity","updateCurrentStyle","annotationGroupsUIDs","onStyleChange","styleOptions","currentStyle","contourOnly","handleOpacityChange","handleShowOutlineOnly","getCurrentColor","values","defaultStyle","colorSettings","plain","checked","checkedAnnotationUids","defaultAnnotationStyles","types","checkAll","every","uids","has","indeterminate","handleChangeCheckedType","roiUID","paddingLeft","e","mouseEnterDelay","placement","overlayStyle","reduce","acc","shape","marginLeft","SettingOutlined","shortenedCodeMeaning","displayCodeMeaning","isChecked","indeterminateType","flexDirection","annotations","categories","categoriesAcc","annotation","categoryKey","typeKey","oldCategory","oldType","typesArr","getCategories","labelViewportRef","labelViewer","openSubMenuItems","specimenMenu","iccProfilesMenu","segmentationInterpolationMenu","equipmentMenu","opticalPathMenu","presentationStateMenu","annotationMenuItems","annotationGroupMenu","segmentationMenu","parametricMapMenu","visibleRoiUIDs","onAnnotationVisibilityChange","onRoiStyleChange","handleMenuOpenChange","setTimeout","reverseArrow","borderLeft","borderLeftWidth","overflow","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","toolbar","toolbarHeight","cursor","volumeViewportRef","buildKey","codingScheme","codeValue","getRoiKey","matches","meaning","schemeDesignator","findingName","areROIsEqual","scoord3d","graphicType","graphicData","s1","s2","toPrecision","j","formatRoiStyle","stroke","fill","circle","radius","Math","isDefined","rgbToHex","rgb","r","round","g","getSegmentColor","segmentMetadata","segmentNumber","metadataColor","SegmentSequence","isArray","segment","seg","SegmentNumber","RecommendedDisplayCIELabValue","labValues","extractSegmentColorFromMetadata","getSegmentationType","SegmentationType","constructViewers","preload","volumeViewer","clientMapping","skipThumbnails","activateSelectInteraction","orientation","implementsTID1500","templateSeq","ContentTemplateSequence","TemplateIdentifier","describesSpecimenSubject","ContentSequence","subjectClassValue","retrievedConcept","expectedConcept","equals","containsROIAnnotations","measurements","measurementGroups","foundRegion","group","regions","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","DEFAULT_ANNOTATION_STROKE_COLOR","DEFAULT_ANNOTATION_COLOR_PALETTE","handleVisibilityChange","bind","onVisibilityChange","otherProps","nameMeaning","valueMeaning","textContentItem","TextValue","seq","MeasuredValueSequence","NumericValue","unit","MeasurementUnitsCodeSequence","checkedChildren","unCheckedChildren","handleMenuItemSelection","rois","object","onSelection","paddingTop","paddingBottom","selectedRoiUIDs","onClick","AnnotationGroupControls","settings","AnnotationGroupBadgeDescription","isBadgeVisible","handleKeyDown","preventDefault","onKeyDown","tabIndex","role","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","padding","annotationGroupUID","limitValues","handleLowerLimitChange","handleUpperLimitChange","handleLimitChange","handleAnnotationGroupClick","onAnnotationGroupClick","handleMeasurementSelection","option","codeComponents","measurement","windowSettings","explorationSettings","AnnotationGroupSequence","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","AnnotationCoordinateType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","dropdownMatchSelectWidth","minWidth","defaultValue","annotationGroups","onAnnotationGroupVisibilityChange","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupStyleChange","hasValueType","valueType","getROIs","measurementsItem","measurementGroupItems","observerType","trackingUIDItem","algorithmNameItem","algorithmVersionItem","regionItem","ReferencedFrameOfReferenceUID","coordinates","GraphicData","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","containerAttrs","specimenAttrs","observerAttrs","id","attrs","xPosition","yPosition","left","backgroundColor","minHeight","attr","roiUid","user","app","SpecimenDescriptionSequence","observer","refSpecimen","debug","sr","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","generatedReport","evidence","data","seriesNumber","seriesDescription","sopInstanceUID","instanceNumber","manufacturer","previousVersions","subscribe","_broadcastEvent","_unsubscribe","_isValidEvent","listenerId","subscription","listeners","unsubscribe","EVENTS","callbackProps","hasListeners","hasCallbacks","listener","defaultInstances","instances","instancesMap","SeriesNumber","SeriesDescription","SeriesDate","SeriesTime","addInstance","newInstance","addInstances","newInstances","len","instance","getInstance","StudyDescription","NumInstances","ModalitiesInStudy","isLoaded","addInstanceToSeries","addInstancesToSeries","createSeriesMetadata","setSeriesMetadata","seriesMetadata","existingSeries","assign","STUDY_ADDED","INSTANCES_ADDED","SERIES_ADDED","SERIES_UPDATED","_model","studies","_getStudy","aStudy","_getSeries","study","aSeries","BaseImplementation","dicomJSONDatasetOrP10ArrayBuffer","dicomJSONDataset","naturalizedDataset","ArrayBuffer","dict","createStudyMetadata","madeInClient","updateSeriesMetadata","addSeriesMetadata","seriesSummaryMetadata","NumberOfStudyRelatedSeries","addStudy","existingStudy","newStudy","getStudyInstanceUIDs","getStudy","getSeries","getInstanceByImageId","imageId","updateMetadataForSeries","pubSubServiceInterface","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","specimenDescription","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","showstain","overflowY","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","OpticalPathItem","opticalPath","opticalPathIdentifier","paletteColorLookupTable","getCurrentColors","rgb2hex","handleRemoval","onRemoval","previousProps","previousState","illuminationWaveLength","illuminationColor","specimenDescriptions","maxValue","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","opticalPathItem","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","allowClear","AppstoreAddOutlined","segmentUID","prevState","defaultColor","algorithmName","segmentationMetadata","segmentationType","border","borderRadius","flex","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","mappingUID","mapping","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","handleClick","text","button","Icon","isSelected","tooltip","LogLevel","logger","config","globalConfig","window","configLevel","level","parseLogLevel","enableInProduction","Boolean","enableInDevelopment","DEBUG","LOG","WARN","ERROR","NONE","shouldLog","log","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","hoveredRois","lastPixel","keysDown","defaultRoiStyle","roiStyles","selectionStrokeColor","selectionFillColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","then","matchedInstances","rawInstance","retrieveInstance","retrievedInstance","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","selectedPresentationStateUID","setPresentationState","presentationStates","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","activateOpticalPath","showOpticalPath","searchParams","URLSearchParams","search","pathname","replace","getRoiStyle","loadDerivedDataset","derivedDataset","Comprehensive3DSR","COMPREHENSIVE_3D_SR","ComprehensiveSR","COMPREHENSIVE_SR","MicroscopyBulkSimpleAnnotation","MICROSCOPY_BULK_SIMPLE_ANNOTATION","Segmentation","SEGMENTATION","ParametricMap","PARAMETRIC_MAP","OpticalPath","OPTICAL_PATH","AdvancedBlendingPresentationState","ColorSoftcopyPresentationState","COLOR_SOFTCOPY_PRESENTATION_STATE","GrayscaleSoftcopyPresentationState","GRAYSCALE_SOFTCOPY_PRESENTATION_STATE","PseudocolorSoftcopyPresentationState","PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE","SOPClassUID","getAllROIs","handleAnnotationVisibilityChange","getAllAnnotationGroups","handleAnnotationGroupVisibilityChange","getAllSegments","handleSegmentVisibilityChange","getAllParameterMappings","parameterMapping","handleMappingVisibilityChange","handleOpticalPathVisibilityChange","addAnnotationGroups","ann","finding","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","forceUpdate","addSegmentations","segmentations","addSegments","addParametricMaps","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","addAnnotations","onRoiModified","onWindowResize","onRoiDrawn","detail","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","addROI","onRoiDoubleClicked","setHoveredRoiAttributes","hoveredRoiAttributes","clearHoveredRois","getUniqueHoveredRois","newRoi","allRois","isSamePixelAsLast","clientX","clientY","onPointerMove","hoveredRoi","feature","originalEvent","isHoveredRoiTooltipVisible","hoveredRoiTooltipX","hoveredRoiTooltipY","getUpdatedSelectedRois","newSelectedRoiUid","selectedRoiUid","emptySelection","selectedRoi","getROI","oldSelectedRois","resetUnselectedRoiStyles","selectionState","setROIStyle","onMapClicked","updatedSelectedRois","clearSelections","onRoiSelected","handleAnnotationSelection","handleRoiSelectionCancellation","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingError","onLoadingError","onFrameLoadingEnded","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","componentCleanup","document","body","removeEventListener","onKeyUp","cleanup","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","componentWillUnmount","componentSetup","addEventListener","componentDidMount","hasICCProfile","metadataItem","ICCProfile","bulkdataReferences","handleAnnotationFindingSelection","_option","handleAnnotationGeometryTypeSelection","selectedGeometryType","handleAnnotationMeasurementActivation","selectedMarkup","handleAnnotationEvaluationSelection","filteredEvaluations","handleAnnotationEvaluationClearance","handleXCoordinateSelection","x","selectedXCoordinate","handleYCoordinateSelection","y","selectedYCoordinate","handleMagnificationSelection","magnification","selectedMagnification","handleSlidePositionSelection","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","indexOf","point","handleSlidePositionSelectionCancellation","handleAnnotationConfigurationCompletion","geometryType","markup","activateDrawInteraction","handleAnnotationConfigurationCancellation","getOpticalPathMetadata","generateReport","handleReportVerification","storeInstances","datasets","write","handleReportCancellation","ag","showAnnotationGroup","hideAnnotationGroup","handleAnnotationGroupStyleChange","generateRoiStyle","strokeColor","fillColor","c","handleRoiStyleChange","showSegment","hideSegment","handleSegmentStyleChange","customizedSegmentColors","createSegmentPaletteColorLookupTable","setSegmentStyle","showParameterMapping","hideParameterMapping","handleMappingStyleChange","setParameterMappingStyle","handleOpticalPathStyleChange","handleOpticalPathActivityChange","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","handlePresentationStateReset","urlPath","handlePresentationStateSelection","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areRoisHidden","showROIs","hideROIs","zoomToROI","handleAnnotationGroupSelection","getSeriesDescription","DicomMetadataStore","handleICCProfilesToggle","isICCProfilesEnabled","toggleICCProfiles","handleSegmentationInterpolationToggle","isSegmentationInterpolationEnabled","toggleSegmentationInterpolation","formatAnnotation","getDataFromViewer","allAnnotationGroups","filteredAnnotationGroups","referencedSeriesInstanceUID","getReport","getAnnotationMenuItems","getFindingOptions","getAnnotationConfigurations","geometryTypeOptionsMapping","getGeometryTypeOptionsMapping","defaultActiveFirstOption","onClear","getSpecimenMenu","getEquipmentMenu","getOpticalPathMenu","opticalPathMetadata","getPresentationStateMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","getSegmentationMenu","getSegmentMetadata","getSegmentStyle","segmentColor","number","finalColor","getParametricMapMenu","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","getAnnotationGroupMenu","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","annotationGroupsBySeries","seriesUID","dropdownOptions","selectedSeriesAnnotationGroups","paddingRight","getToolbar","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","getCursor","getSelectedRoiInformation","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","getICCProfilesMenu","getICCProfiles","margin","getSegmentationInterpolationMenu","getOpenSubMenuItems","hasSider","geometryTypes","boundingBox","isOpticalPathVisible","isOpticalPathActive","otherROI","roiAsAnnotation","box","polygon","line","freehandpolygon","freehandline","paletteData","firstValueMapped","naturalizeDataset","findSeriesSlide","ParametrizedSlideViewer","selectedSlide","setSelectedSlide","setDerivedDataset","seriesSlide","findReferencedSlide","allClients","storageClass","naturalizedSeriesMetadata","ReferencedSeriesSequence","referencedSlide","imageLibrary","contentItem","presentationStateUID","stateParam","viewer","volumeInstances","clinicalTrialMenu","seriesFragment","borderRight","borderRightWidth","path","element","DicomMetaDictionary","formatValue","val","getRows","depth","keywords","flatMap","keyword","tagInfo","nameMap","match","tag","vr","sequenceItems","sequenceNode","getSortedTags","tagList","bulkdataRefs","bulkdataTag","setStudy","displaySets","setDisplaySets","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","expandedKeys","setExpandedKeys","searchInput","setSearchInput","debouncedSearchValue","delay","debouncedValue","setDebouncedValue","timer","clearTimeout","useDebounce","handler","seriesAddedSubscription","instancesAddedSubscription","derivedDisplaySets","processedSeries","slideDisplaySets","processImageType","ds","displaySetInstanceUID","flat","displaySetList","displaySet","displayDate","dateStr","hour","minute","second","monthNum","parseInt","dayNum","date","getMonth","getDate","weekday","toLocaleDateString","monthName","dayFormatted","yearNum","getFullYear","formatDicomDate","showInstanceList","instanceSliderMarks","totalInstances","tableData","transformTagsToTableData","tags","parentKey","keyBase","currentKey","InstanceNumber","filteredData","searchLower","toLowerCase","matchedKeys","nodeMatches","node","findMatchingPaths","parentPath","currentPath","matchingPaths","child","childPaths","filtered","reconstructTree","paths","nodesAtLevel","className","gap","marginBottom","strong","optionLabelProp","optionFilterProp","marks","formatter","SearchOutlined","columns","dataIndex","dataSource","pagination","expandable","expandedRowKeys","onExpandedRowsChange","scroll","Header","isValidServerUrl","url","trimmedUrl","trim","urlObj","URL","protocol","startsWith","TypeError","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleDicomTagBrowserButtonClick","innerWidth","handleDebugButtonClick","errorMsgs","Authentication","Communication","EncodingDecoding","Visualization","errorNum","errorObj","warncount","Panel","Collapse","showErrorCount","errcount","uuidv4","warnings","handleServerSelectionButtonClick","isServerSelectionModalVisible","handleServerSelectionInput","currentTarget","selectedServerUrl","isServerSelectionDisabled","handleServerSelectionCancellation","cachedServerUrl","localStorage","getItem","serverSelectionMode","handleServerSelectionModeChange","handleServerSelection","setItem","onServerSelection","closeModal","cachedMode","prevProps","worklistButton","userMenuItems","onUserLogout","userMenu","menu","trigger","UserOutlined","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","debugButton","dicomTagBrowserButton","FileSearchOutlined","showServerSelectionButton","ApiOutlined","default","baseURL","defaultClients","urlInfo","textOverflow","flexWrap","flexShrink","src","process","alt","subTitle","getRowKey","record","Worklist","defaultPageSize","fetchData","limit","searchCriteria","fuzzymatching","searchOptions","searchForStudies","handleChange","filters","pageSize","handleSearch","confirm","handleReset","clearFilters","handleRowProps","handlePressEnter","getFilterPressEnterHandler","getFilterSearchHandler","getFilterResetHandler","getColumnSearchProps","filterDropdown","setSelectedKeys","getFilterInputChangeHandler","filterIcon","numStudies","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","onRow","loading","handleInputChange","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","status","errorMessage","attemptFailedError","DicomWebManager","stores","handleError","updateHeaders","fields","f","headers","retrieveStudyMetadata","studySummaryMetadata","naturalized","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","shouldUpgradeInsecure","upgradeInsecureRequests","qidoPathPrefix","wadoPathPrefix","stowPathPrefix","qidoURLPrefix","wadoURLPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","read","dwc","ParametrizedCaseViewer","disableAnnotationTools","CaseViewer","App","auth","handleDICOMwebError","logServerError","errorMessages","setting","Authorization","storedPath","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","addGcpSecondaryAnnotationServer","gcpBaseUrl","storageClassMapping","storageClasses","pathUrl","server","_createClientMapping","wasAuthSuccessful","serverId","tmpClient","redirectTo","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}