{"version":3,"file":"static/js/499.f82db3a7.chunk.js","mappings":"qTA4BMA,EAAW,qGAqDd,OArDc,8BACf,WACE,IAAIC,EAAoC,aACpCC,EAAkB,YAEWC,IAA7BC,KAAKC,MAAMC,eAA+BF,KAAKC,MAAMC,gBACvDL,EAAS,WACTC,EAAkB,QAEpB,IAAMK,EAAQH,KAAKC,MAAMG,WAAWC,KAAI,SAACC,EAAiBC,GACxD,IAAMC,GAAMC,EAAAA,EAAAA,KACZ,OACE,SAAC,SAAiB,CAEhBC,MAAOJ,EAAKK,KACZC,WAAY,CACVC,WAAYf,GAEdgB,aAAc,CACZC,WAAY,IACZC,WAAY,WACZH,WAjBkB,QAmBpBI,KAAM,EAAE,SAEPX,EAAKY,OAZDV,EAeX,IACIW,EAAO,KAIX,YAHwBpB,IAApBC,KAAKC,MAAMkB,OACbA,GAAO,cAAMlB,MAAMkB,KAAI,MAGvB,UAAC,IAAI,CACHC,MAAOpB,KAAKC,MAAMoB,OAClBC,MAAOH,EACPI,KAAK,QACLC,UAAWxB,KAAKC,MAAMwB,WACtBC,cAAgC3B,IAAtBC,KAAKC,MAAMoB,OACrBM,QAAS3B,KAAKC,MAAM2B,QAAQ,WAE5B,SAAC,IAAY,CACXC,OAAQ,EACRN,KAAK,QACL1B,OAAQA,EACR6B,UAAU,EAAM,SAEfvB,IAEFH,KAAKC,MAAM6B,WAGlB,KAAC,EArDc,CAASC,EAAAA,WAwD1B,UC/BA,QAxCmB,qGAqChB,OArCgB,8BACjB,WACE,IAAM3B,EAAa,GAkCnB,OAjCoD,MAAhDJ,KAAKC,MAAM+B,SAASC,0BAEtB7B,EAAW8B,KAAI,MAAf9B,EACK,CACD,CACEO,KAAM,eACNO,MAAOlB,KAAKC,MAAM+B,SAASC,0BAE7B,CACEtB,KAAM,cACNO,MAAOlB,KAAKC,MAAM+B,SAASG,yBAE7B,CACExB,KAAM,gBACNO,MAAOlB,KAAKC,MAAM+B,SAASI,2BAE7B,CACEzB,KAAM,YACNO,MAAOlB,KAAKC,MAAM+B,SAASK,yBAKiB,MAAhDrC,KAAKC,MAAM+B,SAASM,0BAEtBlC,EAAW8B,KACT,CACEvB,KAAM,gBACNO,MAAOlB,KAAKC,MAAM+B,SAASM,4BAK1B,SAAC,EAAW,CAAClC,WAAYA,GAClC,KAAC,EArCgB,CAAS2B,EAAAA,WCX5B,SAASQ,EAAWrB,GAClB,MAAqB,kBAAVA,GAAgC,OAAVA,QAA4BnB,IAAVmB,QACxBnB,IAArBmB,EAAMsB,WACDtB,EAAMsB,WAAWC,MAAM,KAAKC,KAAK,KAIrC,EACT,CAEA,SAASC,EAAWzB,GAClB,GAAc,OAAVA,QAA4BnB,IAAVmB,EAAqB,CACzC,IAAM0B,EAAO1B,EAAM2B,UAAU,EAAG,GAC1BC,EAAQ5B,EAAM2B,UAAU,EAAG,GAC3BE,EAAM7B,EAAM2B,UAAU,EAAG,GAC/B,MAAM,GAAN,OAAUD,EAAI,YAAIE,EAAK,YAAIC,EAC7B,CACA,MAAO,EACT,CAEA,SAASC,EAAW9B,GAClB,GAAc,OAAVA,QAA4BnB,IAAVmB,EAAqB,CACzC,IAAM+B,EAAQ/B,EAAM2B,UAAU,EAAG,GAC3BK,EAAUhC,EAAM2B,UAAU,EAAG,GAC7BM,EAAUjC,EAAM2B,UAAU,EAAG,GACnC,MAAM,GAAN,OAAUI,EAAK,YAAIC,EAAO,YAAIC,EAChC,CACA,MAAO,EACT,CAeA,SAASC,EAAUlC,GAMjB,OAAc,OAAVA,QAA4BnB,IAAVmB,EALiB,CACrCmC,EAAG,SACHC,EAAG,OACHC,EAAG,SAGQrC,GAEN,EACT,CCdA,QA1Ba,qGAuBV,OAvBU,8BACX,WACE,IAAMd,EAAa,CACjB,CACEO,KAAM,KACNO,MAAOlB,KAAKC,MAAM+B,SAASwB,WAE7B,CACE7C,KAAM,OACNO,MAAOqB,EAAUvC,KAAKC,MAAM+B,SAASyB,cAEvC,CACE9C,KAAM,MACNO,MAAOkC,EAASpD,KAAKC,MAAM+B,SAAS0B,aAEtC,CACE/C,KAAM,YACNO,MAAOyB,EAAU3C,KAAKC,MAAM+B,SAAS2B,oBAGzC,OACE,SAAC,EAAW,CAACvD,WAAYA,GAE7B,KAAC,EAvBU,CAAS2B,EAAAA,WCuBtB,QAxBW,qGAqBR,OArBQ,8BACT,WACE,IAAM3B,EAAa,CACjB,CACEO,KAAM,cACNO,MAAOlB,KAAKC,MAAM+B,SAAS4B,iBAE7B,CACEjD,KAAM,KACNO,MAAOlB,KAAKC,MAAM+B,SAAS6B,SAE7B,CACElD,KAAM,OACNO,MAAOyB,EAAU3C,KAAKC,MAAM+B,SAAS8B,YAEvC,CACEnD,KAAM,OACNO,MAAO8B,EAAUhD,KAAKC,MAAM+B,SAAS+B,aAGzC,OAAO,SAAC,EAAW,CAAC3D,WAAYA,GAClC,KAAC,EArBQ,CAAS2B,EAAAA,W,ICdRiC,E,qBAWX,SAXWA,GAAAA,EAAc,iEAAdA,EAAc,iDAAdA,EAAc,oDAAdA,EAAc,4CAAdA,EAAc,iEAAdA,EAAc,4CAAdA,EAAc,oEAAdA,EAAc,iEAAdA,EAAc,qEAAdA,EAAc,uEAWzB,CAXWA,IAAAA,EAAc,KCC1B,IAAMC,EAAiBC,OAAO,iBACxBC,EAAsBD,OAAO,sBAOdE,EAAM,WACzB,cAAgB,eACdpE,KAAKiE,GAAkB,CAAC,EACxBjE,KAAKmE,GAAuB,CAC9B,CAsEC,OApED,iCAMA,SAAWE,EAAWC,GACpB,QAAkBvE,IAAdsE,EACF,MAAM,IAAIE,MAAM,8CAGlB,GAAwB,oBAAbD,EACT,MAAM,IAAIC,MAAM,4CAGbvE,KAAKiE,GAAgBO,eAAeH,KACvCrE,KAAKiE,GAAgBI,GAAa,CAAC,GAGrC,IAAMI,EAAc,aAASzE,KAAKmE,MAClCnE,KAAKiE,GAAgBI,GAAWI,GAAkBH,CACpD,GAEA,yBAMA,SAAaD,EAAWC,GACtB,IAAMI,EAAY1E,KAAKiE,GAAgBI,IAAc,CAAC,EACtD,IAAK,IAAMI,KAAkBC,EACtBJ,EAEMI,EAAUD,KAAoBH,UAChCI,EAAUD,UAFVC,EAAUD,EAKvB,GAEA,qBAMA,SAASJ,GACP,QAAkBtE,IAAdsE,EACF,MAAM,IAAIE,MAAM,yCAGqC,IAAvD,IAAMG,EAAY1E,KAAKiE,GAAgBI,IAAc,CAAC,EAAC,mBALlCM,EAAO,iCAAPA,EAAO,kBAM5B,IAAK,IAAMF,KAAkBC,EAC3BA,EAAUD,GAAe,MAAzBC,EAA6BC,EAEjC,GAEA,gCAIA,WACE,IAAK,IAAMN,KAAarE,KAAKiE,GAAiB,CAC5C,IAAMS,EAAY1E,KAAKiE,GAAgBI,GACvC,IAAK,IAAMI,KAAkBC,SACpBA,EAAUD,EAErB,CACF,KAAC,EA1EwB,G,oBCTrBG,EACY,iBADZA,EAEW,gBAFXA,EAGiB,mBAHjBA,EAIW,gBAGXC,EAAW,0CACf,WAAaC,EAAMC,GAAU,IAAD,EAIV,OAJU,gBAC1B,gBACKA,QAAUA,EACf,EAAKC,OAAQ,IAAIT,OAAQS,MACzB,EAAKF,KAAOA,EAAI,CAClB,CAAC,iBANc,EAMd,OANuBP,QCHbU,EACF,UADEA,EAEA,YAGAC,EACD,kBADCA,EAEN,0BAFMA,EAGJ,QAHIA,EAIL,OAJKA,EAKL,iBAGFC,EACG,QADHA,EAEK,UAWLC,GAA+B,CACnCC,QAAS,CACP,CACEC,SAAUV,EACVW,iBAAkBJ,GAEpB,CACEG,SAAUV,EACVW,iBAAkBJ,GAEpB,CACEG,SAAUV,EACVW,iBAAkBJ,GAEpB,CACEG,SAAUV,EACVW,iBAAkBJ,GAEpB,CACEG,SAAU,UACVC,iBAAkBJ,KAoExB,aA/D4B,0CAC1B,aAAgB,IAAD,kBACb,eAEA,IAAMK,EAAe,SAACC,GACpB,EAAKC,QAAQT,EAAwCU,MAAMC,KAAKH,GAAM/C,KAAK,KAC7E,EAUI,OARH,WACC,IAAMmD,EAAOC,QAAQD,KACrBC,QAAQD,KAAO,WACRE,KAAKC,UAAUC,WAAWC,SAAS,YACtCV,EAAaS,WAEfJ,EAAKM,MAAMnG,KAAM2F,MAAMS,UAAUC,MAAMC,KAAKL,WAC9C,CACD,CARA,GAQG,CACN,CA2CC,OAzCD,+BAMA,SAASM,EAAQC,GACf,IAYIC,EAZEC,EAAgBF,EAAM1B,KAKpBS,EAJaH,GAA6BC,QAAQsB,MACxD,SAAAC,GAAC,OAAIA,EAAEtB,WAAaoB,CAAa,IAG3BnB,iBAcR,OAZAvF,KAAK0F,QAAQT,EAAsC,CACjDsB,OAAAA,EACAC,MAAAA,IAKAC,EADED,aAAiB3B,EACD2B,EAAMzB,QAEN8B,OAAOL,GAGnBjB,GACN,KAAKJ,EAEH,OADAW,QAAQU,MAAM,KAAD,OAAME,EAAa,qBAAqBF,GAC9CM,EAAAA,EAAAA,MAAmB,CACxB/B,QAAQ,GAAD,OAAK2B,EAAa,UACzBK,YAAaN,EACbO,SAAU,IAGd,KAAK7B,EACHW,QAAQU,MAAM,KAAD,OAAME,EAAa,qBAAqBF,GAK3D,KAAC,EA5DyB,CAASpC,IC8ErC,SAvGe,0CAOb,WAAanE,GAAwB,IAAD,EAEH,OAFG,gBAClC,cAAMA,IAPRgH,MAAQ,CAAEC,WAAW,GAAO,EAEXC,oBAAsBpF,EAAAA,YAAiC,EAEhEqF,oBAAc,EAIpB,EAAKA,oBAAiBrH,EAAS,CACjC,CA0FC,OA1FA,yCAED,WAEE,GADAC,KAAKqH,SAAS,CAAEH,WAAW,IACvBlH,KAAKC,MAAMqH,MAAMC,eAAeC,OAAS,EAAG,CAC9C,IAAMxF,EAAWhC,KAAKC,MAAMqH,MAAMC,eAAe,GACR,OAArCvH,KAAKmH,oBAAoBM,UAC3BzH,KAAKmH,oBAAoBM,QAAQC,UAAY,GAC7C5B,QAAQ6B,KACN,kDAAiD,WAC7C3F,EAAS4F,oBAAmB,MAElC5H,KAAKoH,eAAiB,IAAIS,EAAAA,OAAAA,oBAA+B,CACvDC,OAAQ9H,KAAKC,MAAM8H,QACjB/D,EAAegE,iCAEjBC,qBAAqB,EACrBjG,SAAAA,EACAkG,aAAc,EACdC,iBAAkB,SAAC3B,GACjB4B,GAAAA,QACElD,EACAsB,EAEJ,IAEFxG,KAAKoH,eAAeiB,OAAO,CACzBC,UAAWtI,KAAKmH,oBAAoBM,UAG1C,CAEAzH,KAAKqH,SAAS,CAAEH,WAAW,GAC7B,GAAC,oBAED,gBAC8BnH,IAAxBC,KAAKoH,gBACPpH,KAAKoH,eAAemB,SAGtB,IAAMnI,EAAa,GACb2G,EAAc/G,KAAKC,MAAMqH,MAAMP,YAQrC,OAPoB,OAAhBA,GAAwC,KAAhBA,GAC1B3G,EAAW8B,KAAK,CACdvB,KAAM,cACNO,MAAO6F,IAIP/G,KAAKiH,MAAMC,WACL,SAAC,MAAS,KAOlB,SAAC,UAAS,gBACRsB,MAAO,CAAEC,OAAQ,SAEbzI,KAAKC,OAAK,cAEd,SAAC,EAAW,CACVoB,OAAQrB,KAAKC,MAAMqH,MAAMoB,oBACzBtI,WAAYA,EACZqB,YAAU,WAETzB,KAAKC,MAAMqH,MAAMC,eAAeC,OAAS,GAEtC,gBAAKgB,MAAO,CAAEC,OAAQ,SAAWE,IAAK3I,KAAKmH,uBAG3C,gBAAKqB,MAAO,CACVC,OAAQ,QACRG,UAAW,SACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,SAAU,SACVjI,WAAY,IACZkI,MAAO,UACPC,cAAe,SACf,oBAvBHlJ,KAAKC,MAAMqH,MAAM6B,mBAAmB,GA+B/C,KAAC,EApGY,CAASpH,EAAAA,WCmDxB,SA1De,qJAGZ,OAHY,oCACbkF,MAAQ,CACNmC,0BAA2B,EAAKnJ,MAAMmJ,2BACvC,EAoDA,OApDA,yCAED,WACEpJ,KAAKC,MAAMoJ,kBAAkB,CAC3BC,kBAAmBtJ,KAAKiH,MAAMmC,2BAElC,GAAC,oBAED,WAGE,IAH0B,IAAD,OACnBG,EAAYvJ,KAAKC,MAAM+B,SACvBwH,EAAgB,GACbC,EAAI,EAAGA,EAAIF,EAAU/B,SAAUiC,EAAG,CACzC,IAAMnC,EAAQiC,EAAUE,GAClBC,GACJ,SAAC,GAAS,CAERpC,MAAOA,EACPS,QAAS/H,KAAKC,MAAM8H,SAFfT,EAAM6B,mBAAmB,IAMlCK,EAActH,KAAKwH,EACrB,CAEA,IAWIC,EAMJ,YAL6C5J,IAAzCC,KAAKiH,MAAMmC,2BAC4B,OAAzCpJ,KAAKiH,MAAMmC,4BACXO,EAAe,CAAC3J,KAAKiH,MAAMmC,6BAI3B,SAAC,IAAI,CACHZ,MAAO,CAAEoB,MAAO,QAChBD,aAAcA,EACdE,SArB4B,SAAH,GAKhB,IALsBC,EAAG,EAAHA,IAAY,EAAPC,QAAiB,EAARC,SAAsB,EAAZL,aAMzD7D,QAAQ6B,KAAK,iBAAD,OAAkBmC,EAAG,MACjC,EAAKzC,SAAS,CAAE+B,0BAA2BU,EAAIG,aAC/C,EAAKhK,MAAMoJ,kBAAkB,CAAEC,kBAAmBQ,EAAIG,YACxD,EAaIC,KAAK,SACLC,aAAc,EAAE,SAEfX,GAGP,KAAC,EAvDY,CAASzH,EAAAA,W,+MCuGxB,SAzGoB,0CAClB,WAAa9B,GAA6B,IAAD,EAE6B,OAF7B,gBACvC,cAAMA,IACDmK,uBAAyB,EAAKA,uBAAuBC,MAAK,WAAK,CACtE,CAkGC,OAlGA,8CAED,SACEC,EACAC,GAEAvK,KAAKC,MAAMuK,mBAAmB,CAC5BC,OAAQzK,KAAKC,MAAMyK,IAAIlK,IACvBmK,UAAWL,GAEf,GAAC,oBAED,WACE,IAAMM,EAAU,cAAU5K,KAAKC,MAAMM,MAAQ,GACvCH,EAAqD,GAK3D,EAAyDJ,KAAKC,MAApB4K,GAAzB,EAATF,UAA6B,EAAlBH,oBAAiC,eAsDpD,OArDAxK,KAAKC,MAAMyK,IAAII,YAAYC,SAAQ,SACjCzK,GAKA,IAAM0K,EAAY1K,EAAK2K,wBAAwB,GAAGC,UAC5CC,EAAc7K,EAAK2K,wBAAwB,GAAGG,YAC9CzK,EAAI,UAAMwK,GAChB,GAAI7K,EAAK+K,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAC1D,IACMC,EADkBjL,EACakL,oBAAoB,GAAGJ,YAE1C,cAAdJ,EACF5K,EAAW8B,KAAK,CACdvB,KAAM,oBACNO,MAAM,GAAD,OAAKqK,KAEW,WAAdP,EACT5K,EAAW8B,KAAK,CACdvB,KAAM,gBACNO,MAAM,GAAD,OAAKqK,KAEW,WAAdP,EACT5K,EAAW8B,KAAK,CACdvB,KAAM,iBACNO,MAAM,GAAD,OAAKqK,KAGZnL,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAM,GAAD,OAAKqK,IAGhB,MAAO,GAAIjL,EAAK+K,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CACjE,IAAMG,EAAkBnL,EACxBF,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAOuK,EAAgBC,WAE3B,CACF,IACA1L,KAAKC,MAAMyK,IAAIiB,aAAaZ,SAAQ,SAAAzK,GAClC,IAAM6K,EAAc7K,EAAK2K,wBAAwB,GAAGG,YAC9CzK,EAAI,UAAMwK,GACVS,EAAMtL,EAAKuL,sBAAsB,GACjC3K,EAAQ0K,EAAIE,aAAaC,YAAY,GACrCC,EAAOJ,EAAIK,6BAA6B,GAAGf,UACjD9K,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAM,GAAD,OAAKA,EAAK,YAAI8K,IAEvB,KAEE,UAAC,KAAK,CAACE,MAAM,QAAO,WAClB,gBAAK1D,MAAO,CAAE2D,YAAa,QAAS,UAClC,SAAC,KAAM,CACL5K,KAAK,QACL6K,SAAUpM,KAAKoK,uBACfE,QAAStK,KAAKC,MAAM0K,UACpB0B,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,SAGlC,SAAC,UAAS,gBACR9D,MAAO,CAAEC,OAAQ,OAAQ0D,YAAa,QAElCtB,GAAU,cAEd,SAAC,EAAW,CACVxJ,OAAQuJ,EACRxK,WAAYA,EACZqB,YAAU,EACVvB,eAAa,MAPVF,KAAKC,MAAMyK,IAAIlK,OAY5B,KAAC,EAtGiB,CAASuB,EAAAA,WC6D7B,SA5DoB,0CAClB,WAAa9B,GAA6B,IAAD,EAG6B,OAH7B,gBACvC,cAAMA,IACDsM,wBAA0B,EAAKA,wBAAwBlC,MAAK,WACjE,EAAKD,uBAAyB,EAAKA,uBAAuBC,MAAK,WAAK,CACtE,CAoDC,OApDA,8CAED,SACEC,EACAC,GACO,IAAD,OACFD,EACFtK,KAAKC,MAAMuM,KAAKzB,SAAQ,SAAAL,GACtB,EAAKzK,MAAMuK,mBAAmB,CAAEC,OAAQC,EAAIlK,IAAKmK,UAAWL,GAC9D,IAEAtK,KAAKC,MAAMwM,eAAe1B,SAAQ,SAAAN,GAChC,EAAKxK,MAAMuK,mBAAmB,CAAEC,OAAAA,EAAQE,UAAWL,GACrD,GAEJ,GAAC,qCAED,SAAyBoC,GACvB1M,KAAKC,MAAM0M,YAAYD,EAAO5C,IAChC,GAAC,oBAED,WAA4B,IAAD,OACnB3J,EAAQH,KAAKC,MAAMuM,KAAKnM,KAAI,SAACqK,EAAKnK,GAAK,OAC3C,SAAC,GAAc,CAEbmK,IAAKA,EACLnK,MAAOA,EACPoK,UAAW,EAAK1K,MAAMwM,eAAeG,IAAIlC,EAAIlK,KAC7CgK,mBAAoB,EAAKvK,MAAMuK,oBAJ1BE,EAAIlK,IAKT,IAGJ,OACE,iCACE,gBAAKgI,MAAO,CAAE2D,YAAa,OAAQU,WAAY,MAAOC,cAAe,OAAQ,UAC3E,SAAC,KAAM,CACLvL,KAAK,QACL6K,SAAUpM,KAAKoK,uBACfE,QAAStK,KAAKC,MAAMwM,eAAelL,KAAO,EAC1C8K,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,SAGlC,SAAC,IAAI,CACH3C,cAAY,QAAM3J,KAAKC,MAAM8M,gBAAgBC,UAC7CnD,SAAU7J,KAAKuM,wBACfU,QAASjN,KAAKuM,wBAAwB,SAErCpM,MAIT,KAAC,EAzDiB,CAAS4B,EAAAA,W,4JCC7B,SAASmL,GAAuB,GAWR,IAVtBvC,EAAS,EAATA,UACAH,EAAkB,EAAlBA,mBACA2C,EAAQ,EAARA,SASA,OACE,UAAC,KAAK,CAACC,UAAU,WAAWlB,MAAM,MAAK,WACrC,SAAC,KAAM,CACL3K,KAAK,QACL6K,SAAU5B,EACVF,QAASK,EACT0B,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,OAEhC,SAAC,KAAO,CACNe,UAAU,OACVC,QAASH,EACTI,aAAc,CAAE3D,MAAO,SACvBxI,MAAM,mBAAkB,UAExB,SAAC,KAAM,CAAC0D,KAAK,UAAU0I,MAAM,SAASrM,MAAM,SAACsM,GAAA,EAAe,UAIpE,CAEA,SAASC,GAA+B,GAUhB,IATtBC,EAAc,EAAdA,eACA1E,EAAK,EAALA,MACAvI,EAAK,EAALA,MACAN,EAAU,EAAVA,WAOA,OACE,SAAC,KAAK,CACJwN,OAAQ,EAAE,GAAI,IACdC,MAAO,IACPrF,MAAO,CACLsF,YAAa,QACbC,YAAa,MACbC,YAAa,OACbC,WAAYN,EAAiB,UAAY,SACzCO,gBAAgB,8BAAD,OAAgCjF,EAAK,aAAKA,IACzD,UAEF,SAAC,EAAW,CACV5H,OAAQX,EACRN,WAAYA,EACZqB,YAAU,EACVvB,eAAa,KAIrB,CAujBA,SAxgByB,0CAIvB,WAAaD,GAAkC,IAAD,EAe3C,OAf2C,gBAC5C,cAAMA,IAiBRmK,uBAAyB,SACvBE,EACAC,GAEA,EAAKtK,MAAMuK,mBAAmB,CAC5B2D,mBAAoB,EAAKlO,MAAMmO,gBAAgB5N,IAC/CmK,UAAWL,IAEb,EAAKjD,SAAS,CAAEsD,UAAWL,GAC7B,EAAC,EA4KD+D,2BAA6B,WAC3B,EAAKpO,MAAMqO,uBAAuB,EAAKrO,MAAMmO,gBAAgB5N,IAC/D,EAvME,EAAK+N,2BACH,EAAKA,2BAA2BlE,MAAK,WACvC,EAAKmE,oBAAsB,EAAKA,oBAAoBnE,MAAK,WACzD,EAAKoE,mBAAqB,EAAKA,mBAAmBpE,MAAK,WACvD,EAAKqE,mBAAqB,EAAKA,mBAAmBrE,MAAK,WACvD,EAAKsE,mBAAqB,EAAKA,mBAAmBtE,MAAK,WACvD,EAAKuE,gBAAkB,EAAKA,gBAAgBvE,MAAK,WACjD,EAAKpD,MAAQ,CACX0D,UAAW,EAAK1K,MAAM0K,UACtBkE,aAAc,CACZC,QAAS,EAAK7O,MAAM8O,aAAaD,QACjC7F,MAAO,EAAKhJ,MAAM8O,aAAa9F,QAElC,CACH,CAifC,OAjfA,2CAaD,SAAqB/H,GACN,MAATA,IACFlB,KAAKC,MAAM+O,cAAc,CACvBxO,IAAKR,KAAKC,MAAMmO,gBAAgB5N,IAChCyO,aAAc,CACZH,QAAS5N,KAGblB,KAAKqH,SAAS,CACZwH,aAAc,CACZC,QAAS5N,EACT+H,MAAOjJ,KAAKiH,MAAM4H,aAAa5F,MAC/BiG,YAAalP,KAAKiH,MAAM4H,aAAaK,eAI7C,GAAC,gCAED,SAAoBhO,GAClB,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAM4H,aAAa5F,MAAqB,CAChE,IAAMA,EAAQ,CACZtD,MAAMwJ,QAAQjO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,IAEhCjJ,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxB4H,aAAc,CACZ5F,MAAOA,EACP6F,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAajI,EAAM4H,aAAaK,aAEnC,IACDlP,KAAKC,MAAM+O,cAAc,CACvBxO,IAAKR,KAAKC,MAAMmO,gBAAgB5N,IAChCyO,aAAc,CAAEhG,MAAOA,IAE3B,CACF,GAAC,gCAED,SAAoB/H,GAClB,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAM4H,aAAa5F,MAAqB,CAChE,IAAMA,EAAQ,CACZjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BtD,MAAMwJ,QAAQjO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAM4H,aAAa5F,MAAM,IAEhCjJ,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxB4H,aAAc,CACZ5F,MAAOA,EACP6F,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAajI,EAAM4H,aAAaK,aAEnC,IACDlP,KAAKC,MAAM+O,cAAc,CACvBxO,IAAKR,KAAKC,MAAMmO,gBAAgB5N,IAChCyO,aAAc,CAAEhG,MAAOA,IAE3B,CACF,GAAC,gCAED,SAAoB/H,GAClB,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAM4H,aAAa5F,MAAqB,CAChE,IAAMA,EAAQ,CACZjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BtD,MAAMwJ,QAAQjO,GAASA,EAAM,GAAKA,GAEpClB,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxB4H,aAAc,CACZ5F,MAAOA,EACP6F,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAajI,EAAM4H,aAAaK,aAEnC,IACDlP,KAAKC,MAAM+O,cAAc,CACvBxO,IAAKR,KAAKC,MAAMmO,gBAAgB5N,IAChCyO,aAAc,CAAEhG,MAAOA,IAE3B,CACF,GAAC,6BAED,WACE,IAAiB+D,EAOjB,OAAqC,MAAjChN,KAAKiH,MAAM4H,aAAa5F,MAHnB,KAAO,WAJC+D,EAQAhN,KAAKiH,MAAM4H,aAAa5F,OAPtB,IAGe,KAFtB+D,EAAO,IAE2B,GADlCA,EAAO,IACmC/C,SAAS,IAAI5D,MAAM,GAMhE,OAEX,GAAC,oCAED,SAAwBnF,GACT,MAATA,QAAyDnB,IAAxCC,KAAKiH,MAAM4H,aAAaK,cAC3ClP,KAAKqH,UAAS,SAACJ,GACb,YAAuClH,IAAnCkH,EAAM4H,aAAaK,YACd,CACLL,aAAc,CACZ5F,MAAOhC,EAAM4H,aAAa5F,MAC1B6F,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAa,CAAChO,EAAO+F,EAAM4H,aAAaK,YAAY,MAIjD,CACLL,aAAc,CACZ5F,MAAOhC,EAAM4H,aAAa5F,MAC1B6F,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAajI,EAAM4H,aAAaK,aAIxC,IACAlP,KAAKC,MAAM+O,cAAc,CACvBxO,IAAKR,KAAKC,MAAMmO,gBAAgB5N,IAChCyO,aAAc,CACZC,YAAa,CAAChO,EAAOlB,KAAKiH,MAAM4H,aAAaK,YAAY,OAIjE,GAAC,oCAED,SAAwBhO,GACT,MAATA,QAAyDnB,IAAxCC,KAAKiH,MAAM4H,aAAaK,cAC3ClP,KAAKqH,UAAS,SAACJ,GACb,YAAuClH,IAAnCkH,EAAM4H,aAAaK,YACd,CACLL,aAAc,CACZ5F,MAAOhC,EAAM4H,aAAa5F,MAC1B6F,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAa,CAACjI,EAAM4H,aAAaK,YAAY,GAAIhO,KAI9C,CACL2N,aAAc,CACZ5F,MAAOhC,EAAM4H,aAAa5F,MAC1B6F,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAajI,EAAM4H,aAAaK,aAIxC,IACAlP,KAAKC,MAAM+O,cAAc,CACvBxO,IAAKR,KAAKC,MAAMmO,gBAAgB5N,IAChCyO,aAAc,CACZC,YAAa,CAAClP,KAAKiH,MAAM4H,aAAaK,YAAY,GAAIhO,MAI9D,GAAC,+BAED,SAAmB8L,GACjBhN,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxB4H,aAAc,CACZ5F,MAAOhC,EAAM4H,aAAa5F,MAC1B6F,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAalC,GAEhB,IACDhN,KAAKC,MAAM+O,cAAc,CACvBxO,IAAKR,KAAKC,MAAMmO,gBAAgB5N,IAChCyO,aAAc,CAAEC,YAAalC,IAEjC,GAAC,wCAMD,SAA4B9L,EAAgBkO,GAAqB,IAAD,OAC9D,GAAa,MAATlO,GAAoC,MAAnBkO,EAAOtN,SAAkB,CAC5C,IAAMuN,EAAiBnO,EAAMuB,MAAM,KAC7B6M,EAAc,IAAIhE,EAAAA,GAAAA,OAAAA,aAA6B,CACnDpK,MAAOmO,EAAe,GACtBE,iBAAkBF,EAAe,GACjCG,QAASJ,EAAOtN,WAElB9B,KAAKC,MAAM+O,cAAc,CACvBxO,IAAKR,KAAKC,MAAMmO,gBAAgB5N,IAChCyO,aAAc,CAAEK,YAAAA,KAElBtP,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxB4H,aAAc,CACZC,QAAS7H,EAAM4H,aAAaC,QAC5BQ,YAAAA,GAEH,GACH,MACEtP,KAAKC,MAAM+O,cAAc,CACvBxO,IAAKR,KAAKC,MAAMmO,gBAAgB5N,IAChCyO,aAAc,CACZhG,MAAOjJ,KAAKC,MAAM8O,aAAa9F,SAGnCjJ,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxB4H,aAAc,CACZC,QAAS7H,EAAM4H,aAAaC,QAC5B7F,MAAO,EAAKhJ,MAAM8O,aAAa9F,MAC/BiG,iBAAanP,GAEhB,GAEL,GAAC,oBAED,WAA4B,IAAD,EA0DrB0P,EAiFAC,EACAC,EA5IqB,OACnBpP,EAAQP,KAAKC,MAAM+B,SAAS4N,wBAAwBC,WACxD,SAACvP,GAAI,OAAKA,EAAKwP,qBAAuB,EAAK7P,MAAMmO,gBAAgB5N,GAAG,IAEhEF,EAAON,KAAKC,MAAM+B,SAAS4N,wBAAwBrP,GACnDH,EAAqD,CACzD,CACEO,KAAM,gBACNO,MAAOlB,KAAKC,MAAMmO,gBAAgB2B,aAAa3E,aAEjD,CACEzK,KAAM,oBACNO,MAAOlB,KAAKC,MAAMmO,gBAAgB4B,iBAAiB5E,aAMrD,CACEzK,KAAM,eACNO,MAAOZ,EAAK2P,aAEd,CACEtP,KAAM,6BACNO,MAAOlB,KAAKC,MAAM+B,SAASkO,2BAIzBC,EAAgD,QAA5B,EAAG7P,EAAK8P,4BAAoB,QAAI,GACpDC,EAAqBF,EAAqB9P,KAC9C,SAACiQ,GACC,IAAM3P,EAAO2P,EAAgBrF,wBAAwB,GAC/CnB,EAAG,UAAMnJ,EAAK4P,uBAAsB,YAAI5P,EAAKuK,WACnD,OACE,SAAC,YAAa,CAEZhK,MAAO4I,EACP0G,0BAA0B,EAC1BjP,KAAK,QACLkP,UAAW,EAAKxQ,MAAM0K,UAAU,SAE/BhK,EAAKyK,aANDtB,EASX,IAiGF,GA/FAuG,EAAmBnO,MACjB,SAAC,YAAa,CAEZhB,WAAOnB,EACPyQ,0BAA0B,EAC1BjP,KAAK,QACLkP,UAAWzQ,KAAKC,MAAM0K,UAAU,UAEhC,yBANI,MAW6B,MAAjC3K,KAAKiH,MAAM4H,aAAa5F,QAC1BwG,GACE,iCACE,SAAC,KAAO,CAACiB,OAAK,sBACd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,kBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9P,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAKyO,wBAGnB,SAAC,KAAG,CAACxN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,IACLxP,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAKyO,2BAKrB,UAAC,KAAG,CAACkC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,oBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9P,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK0O,wBAGnB,SAAC,KAAG,CAACzN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,IACLxP,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK0O,2BAKrB,UAAC,KAAG,CAACiC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,mBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9P,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK2O,wBAGnB,SAAC,KAAG,CAAC1N,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,IACLxP,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK2O,2BAIrB,SAAC,KAAO,CAAC+B,OAAK,QAOhBP,EAAqB3I,OAAS,EAAG,CACnC,GAA2C,MAAvCxH,KAAKiH,MAAM4H,aAAaK,YAAqB,CAI/CQ,GACE,iCACE,SAAC,KAAO,CAACgB,OAAK,mCACd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK/Q,KAAKiH,MAAM4H,aAAaK,YAAY,GACzC3N,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAaK,YAAY,GAC3C9C,SAAUpM,KAAKiR,4BAGnB,SAAC,KAAG,CAAChQ,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAK,EACLC,IAnBO,EAoBPC,IAnBO,IAoBPC,KAAM,EACN9P,MAAO,CACLlB,KAAKiH,MAAM4H,aAAaK,YAAY,GACpClP,KAAKiH,MAAM4H,aAAaK,YAAY,IAEtC9C,SAAUpM,KAAKkR,uBAGnB,SAAC,KAAG,CAACjQ,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK9Q,KAAKiH,MAAM4H,aAAaK,YAAY,GACzC6B,IA/BO,IAgCPxP,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAaK,YAAY,GAC3C9C,SAAUpM,KAAKmR,gCAM3B,CACAxB,GACE,iCACE,SAAC,KAAO,CAACe,OAAK,4BACd,UAAC,KAAG,CAACC,QAAQ,QAAQzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WACjD,SAAC,KAAG,CAAC3P,KAAM,EAAE,0BACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACLuH,MAAO,CAAE4I,SAAU,OAAQxH,MAAO,OAClCC,SAAU7J,KAAKuO,2BAEf8C,kBAActR,EAAU,SAEvBsQ,GAHG,wCAShB,CAEA,IAAMlD,GACJ,2BACGsC,EACAC,GACD,UAAC,KAAG,CAACiB,QAAQ,QAAQzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WACjD,SAAC,KAAG,CAAC3P,KAAM,EAAE,sBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACN9P,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,yBAGnB,SAAC,KAAG,CAACvN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,EACLxP,KAAK,QACLyP,KAAM,GACNxI,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,2BAIpBmB,KAIC1G,EAAQjJ,KAAK4O,kBACbjB,EACJ3N,KAAKiH,MAAM0D,WAAoD,MAAvC3K,KAAKiH,MAAM4H,aAAaS,YAClD,EAQItP,KAAKC,MADJ4K,GANY,EAAfuD,gBACY,EAAZW,aACS,EAATpE,UACQ,EAAR3I,SACkB,EAAlBwI,mBACa,EAAbwE,eACa,eAEf,OACE,SAAC,UAAS,gBACRxG,MAAO,CAAEC,OAAQ,OAAQ0D,YAAa,OAEtCc,QAASjN,KAAKqO,4BACVxD,GAAU,cAEd,UAAC,KAAK,CAACqB,MAAM,QAAO,WAClB,gBAAK1D,MAAO,CAAE2D,YAAa,QAAS,UAClC,SAACe,GAAuB,CACtBvC,UAAW3K,KAAKC,MAAM0K,UACtBH,mBAAoBxK,KAAKoK,uBACzB+C,SAAUA,OAGd,SAACO,GAA+B,CAC9BC,eAAgBA,EAChB1E,MAAOA,EACPvI,MAAOV,KAAKC,MAAMmO,gBAAgB1N,MAClCN,WAAYA,SAhBXJ,KAAKC,MAAMmO,gBAAgB5N,IAqBtC,KAAC,EArgBsB,CAASuB,EAAAA,WC3BlC,SA/DyB,qJAqBtB,OArBsB,oCAIvBqI,uBAAyB,SAACE,GACpBA,EACF,EAAKrK,MAAMqR,iBAAiBvG,SAAQ,SAACqD,GACnC,EAAKnO,MAAMsR,kCAAkC,CAC3CpD,mBAAoBC,EAAgB5N,IACpCmK,UAAWL,GAEf,IAIF,EAAKrK,MAAMuR,2BAA2BzG,SAAQ,SAACoD,GAC7C,EAAKlO,MAAMsR,kCAAkC,CAC3CpD,mBAAAA,EACAxD,UAAWL,GAEf,GACF,EAAC,EAuCA,OAvCA,8BAED,WAA4B,IAAD,OACnBnK,EAAQH,KAAKC,MAAMqR,iBAAiBjR,KAAI,SAAC+N,EAAiB7N,GAC9D,IAAMC,EAAM4N,EAAgB5N,IAC5B,OACE,SAAC,GAAmB,CAElB4N,gBAAiBA,EACjBE,uBAAwB,EAAKrO,MAAMqO,uBACnCtM,SAAU,EAAK/B,MAAM+B,SAASxB,GAC9BmK,UAAW,EAAK1K,MAAMuR,2BAA2B5E,IAAIpM,GACrDuO,aAAc,EAAK9O,MAAMwR,6BAA6BjR,GACtDgK,mBAAoB,EAAKvK,MAAMsR,kCAC/BvC,cAAe,EAAK/O,MAAMyR,8BAPrBtD,EAAgB5N,IAU3B,IAEA,OACE,iCACE,gBACEgI,MAAO,CACL2D,YAAa,OACbU,WAAY,MACZC,cAAe,OACf,UAEF,SAAC,KAAM,CACLvL,KAAK,QACL6K,SAAUpM,KAAKoK,uBACfE,QAAStK,KAAKC,MAAMuR,2BAA2BjQ,KAAO,EACtD8K,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,SAGlC,SAAC,IAAI,CAAC7K,YAAY,EAAM,SAAEtB,MAGhC,KAAC,EA5DsB,CAAS4B,EAAAA,WCmClC,SAjEY,0CACV,WAAa9B,GAAqB,IAAD,EAEe,OAFf,gBAC/B,cAAMA,IACD0R,YAAc,EAAKA,YAAYtH,MAAK,WAAK,CAChD,CA0DC,OA1DA,mCAED,SAAaE,QACgBxK,IAAvBC,KAAKC,MAAMgN,SACbjN,KAAKC,MAAMgN,QAAQ1C,EAEvB,GAAC,oBAED,WAA4B,IAAD,EAMrBqH,EAUAC,EAfEC,EAAO9R,KAAKC,MAAMkB,KACxB,YAAapB,IAAT+R,EACK,MAIe,MAApB9R,KAAKC,MAAMS,QACbkR,GACE,iCACE,SAAC,KAAO,CAAC9M,KAAK,aACb9E,KAAKC,MAAMS,UAOhBmR,EADuB,QAAzB,EAAI7R,KAAKC,MAAM8R,kBAAU,UAErB,SAAC,KAAG,CACF9E,QAASjN,KAAK2R,YACdxQ,MAAM,SAAC2Q,EAAI,IACXhN,KAAK,UACL0D,MAAO,CAAE3H,WAAY,OAAQ,SAE5B+Q,KAKH,SAAC,KAAG,CACF3E,QAASjN,KAAK2R,YACdxQ,MAAM,SAAC2Q,EAAI,IACXhN,KAAK,UACL0D,MAAO,CAAE3H,WAAY,OAAQ,SAE5B+Q,SAKoB7R,IAAvBC,KAAKC,MAAM+R,SAEX,SAAC,KAAO,CAAC5Q,MAAOpB,KAAKC,MAAM+R,QAAQ,SAChCH,IAIEA,EAEX,KAAC,EA9DS,CAAS9P,EAAAA,WC+BrB,SAjCe,qGA8BZ,OA9BY,8BACb,WACE,QAA4BhC,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAET,IAAM5B,EAAa,CACjB,CACEO,KAAM,eACNO,MAAOlB,KAAKC,MAAM+B,SAASiQ,cAE7B,CACEtR,KAAM,aACNO,MAAOlB,KAAKC,MAAM+B,SAASkQ,uBAE7B,CACEvR,KAAM,uBACNO,MAAOlB,KAAKC,MAAM+B,SAASmQ,oBAE7B,CACExR,KAAM,oBACNO,MAAOlB,KAAKC,MAAM+B,SAASoQ,mBAS/B,OAN2C,MAAvCpS,KAAKC,MAAM+B,SAASqQ,iBACtBjS,EAAW8B,KAAK,CACdvB,KAAM,mBACNO,MAAOlB,KAAKC,MAAM+B,SAASqQ,mBAGxB,SAAC,EAAW,CAACjS,WAAYA,EAAYF,eAAa,GAC3D,KAAC,EA9BY,CAAS6B,EAAAA,WCHxB,IAmCauQ,GAAyB,SAAH,GAKM,IAJrChF,EAAO,EAAPA,QAAS3M,EAAI,EAAJA,KAKLR,EAA2C,GAMjD,OALAmN,EAAQvC,SAAQ,SAAAtB,IA1CF,SACdnJ,EACAK,GAEA,IAAM4R,EAAUjS,EAAK2K,wBAAwB,GAC7C,OACEsH,EAAQrH,YAAcvK,EAAKuK,WAC3BqH,EAAQhC,yBAA2B5P,EAAK4P,sBAE5C,EAkCQiC,CAAQ/I,EAAG9I,IACbR,EAAM+B,KAAKuH,EAEf,IACOtJ,CACT,EC1CasS,GAAe,SAC1BnS,EACAoS,GAEA,OAAOpS,EAAK+K,YAAcqH,CAC5B,EA4BMC,GAAU,SAACC,GAEf,IAAMC,EAAUP,GAAuB,CACrChF,QAASsF,EAAOE,gBAChBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,2BAGU,IAAnBqD,EAAQrL,QACVY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,oJAMN,IAAMmO,EAAmBF,EAAQ,GAE3BG,EAAwBV,GAAuB,CACnDhF,QAASyF,EAAiBD,gBAC1BnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,wBAIPhD,EAAsB,GAwK5B,OAvKAwG,EAAsBjI,SAAQ,SAACzK,GAC7B,IACI2S,EADEnI,EAAc,GAEdoI,EAAQ5S,EACVH,EAAQmS,GAAuB,CACjChF,QAAS4F,EAAMJ,gBACfnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,iCAGQ,IAAjBrP,EAAMqH,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,6NAON,IAAMuO,EAAkBhT,EAAM,GA+B9B,GArBqB,KARrBA,EAAQmS,GAAuB,CAC7BhF,QAAS4F,EAAMJ,gBACfnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,eAGHhI,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,0MAgBe,KARrBzE,EAAQmS,GAAuB,CAC7BhF,QAAS4F,EAAMJ,gBACfnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,sBAGHhI,OAAc,CACtB,IAAM4L,EAAoBjT,EAAM,GAChC2K,EAAY5I,KAAKkR,GACjBH,EAAe,QACjB,MACEA,EAAe,SAWjB,GAAqB,KARrB9S,EAAQmS,GAAuB,CAC7BhF,QAAS4F,EAAMJ,gBACfnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,yBAGHhI,OAAc,CACtB,IAAM6L,EAAuBlT,EAAM,GACnC2K,EAAY5I,KAAKmR,EACnB,CAUqB,KARrBlT,EAAQmS,GAAuB,CAC7BhF,QAAS4F,EAAMJ,gBACfnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,oBAGHhI,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,+MAON,IACI0O,EADEC,EAAapT,EAAM,GAEzB,GAA+B,UAA3BoT,EAAWtD,YACbqD,EAAW,IAAIzL,EAAAA,SAAAA,MAAmB,CAChC2L,oBAAqBD,EAAWE,8BAChCC,YAAaH,EAAWI,kBAErB,CAEL,IADA,IAAMD,EAA0B,GACvBjK,EAAI,EAAGA,EAAI8J,EAAWI,YAAYnM,OAAQiC,GAAK,EACtDiK,EAAYxR,KAAKqR,EAAWI,YAAYtN,MAAMoD,EAAGA,EAAI,IAExB,YAA3B8J,EAAWtD,YACbqD,EAAW,IAAIzL,EAAAA,SAAAA,QAAqB,CAClC2L,oBAAqBD,EAAWE,8BAChCC,YAAaA,IAEqB,eAA3BH,EAAWtD,YACpBqD,EAAW,IAAIzL,EAAAA,SAAAA,WAAwB,CACrC2L,oBAAqBD,EAAWE,8BAChCC,YAAaA,IAEqB,aAA3BH,EAAWtD,YACpBqD,EAAW,IAAIzL,EAAAA,SAAAA,SAAsB,CACnC2L,oBAAqBD,EAAWE,8BAChCC,YAAaA,IAEqB,YAA3BH,EAAWtD,YACpBqD,EAAW,IAAIzL,EAAAA,SAAAA,QAAqB,CAClC2L,oBAAqBD,EAAWE,8BAChCC,YAAaA,IAEqB,cAA3BH,EAAWtD,YACpBqD,EAAW,IAAIzL,EAAAA,SAAAA,UAAuB,CACpC2L,oBAAqBD,EAAWE,8BAChCC,YAAaA,IAGftL,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,wDAAuD,WACnD2O,EAAWtD,YAAW,OAD1B,uKAQR,CAEAnF,EAAY5I,KAAI,MAAhB4I,GAAW,QAlMa,SAAH,GAEoB,IADzCwC,EAAO,EAAPA,QAEInN,EAA+C,GAOrD,OANAmN,EAAQvC,SAAQ,SAAAtB,GACd,GAAIgJ,GAAahJ,EAAG6B,EAAAA,GAAAA,WAAAA,WAAAA,MAAsC,CACxD,IAAMsI,EAAanK,EACnBtJ,EAAM+B,KAAK0R,EACb,CACF,IACOzT,CACT,CAwLS0T,CAAoB,CAAEvG,QAAS4F,EAAMJ,oBAE1C,IAAMnH,EAlNmB,SAAH,GAEkB,IADxC2B,EAAO,EAAPA,QAEInN,EAA8C,GAOpD,OANAmN,EAAQvC,SAAQ,SAAAtB,GACd,GAAIgJ,GAAahJ,EAAG6B,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CACvD,IAAMgE,EAAc7F,EACpBtJ,EAAM+B,KAAKoN,EACb,CACF,IACOnP,CACT,CAuMyB2T,CAAqB,CACxCxG,QAAS4F,EAAMJ,kBAGXpI,EAAM,IAAI7C,EAAAA,IAAAA,IAAY,CAC1ByL,SAAUA,EACV9S,KAAKC,EAAAA,EAAAA,KACLsT,WAAY,CACVC,YAAab,EAAgBc,IAC7BhB,aAAcA,EACdnI,YAAaA,EACba,aAAcA,KAGlBa,EAAKtK,KAAKwI,EACZ,IACO8B,CACT,EAEM0H,IAAiB,QAiBrB,WAAatB,IAAyC,oBAhB/CuB,wBAAkB,OAElBC,6BAAuB,OAEvBC,uBAAiB,OAEjBC,wBAAkB,OAElBC,iBAAW,OAEXC,wBAAkB,OAElB5M,yBAAmB,OAEnB6M,KAAsB,GAG3B,IAAItU,EAAQmS,GAAuB,CACjChF,QAASsF,EAAOE,gBAChBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,mBAGQ,IAAjBrP,EAAMqH,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,qPAON,IAAM8P,EACJvU,EAAM,GAERH,KAAKuU,YAAcG,EAAgBT,IAUd,KARrB9T,EAAQmS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,2BAGHhI,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,4PAON,IAAM+P,EACJxU,EAAM,GAERH,KAAKwU,mBAAqBG,EAAejJ,UAUpB,KARrBvL,EAAQmS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,qCAGHhI,QACRY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,sQAON,IAAMgQ,EACJzU,EAAM,GAYR,GAVAH,KAAK4H,oBAAsBgN,EAAgBlJ,UAUtB,KARrBvL,EAAQmS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,4BAGHhI,OAAc,CACtB,IAAMqN,EACJ1U,EAAM,GAERH,KAAKmU,mBAAqBU,EAAeC,UAC3C,CAUA,GAAqB,KARrB3U,EAAQmS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,oCAGHhI,OAAc,CACtB,IAAMuN,EACJ5U,EAAM,GAERH,KAAKoU,wBAA0BW,EAAoBrJ,SACrD,CAUA,IARAvL,EAAQmS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,2BAGHhI,OAAS,EAAG,CACpB,IAAMwN,EACJ7U,EAAM,GAERH,KAAKqU,kBAAoBW,EAAcf,GACzC,CAUA,GAAqB,KARrB9T,EAAQmS,GAAuB,CAC7BhF,QAASsF,EAAOE,gBAChBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,4BAGHhI,OAAc,CACtB,IAAMyN,EACJ9U,EAAM,GAERH,KAAKsU,mBAAqBW,EAAevJ,SAC3C,CAEA1L,KAAKyU,KAAO9B,GAAQC,EACtB,IA+EF,SApEY,qGAiET,OAjES,8BACV,WACE,IAAMA,EAAS,IAAIsB,GAAkBlU,KAAKC,MAAMiV,SAC1CC,EAAiB,CACrB,CACExU,KAAM,KACNO,MAAO0R,EAAOhL,sBAGZwN,EAAgB,CACpB,CACEzU,KAAM,KACNO,MAAO0R,EAAO4B,qBAGZa,EAAgB,CACpB,CACE1U,KAAM,OACNO,MAAO0R,EAAOuB,qBAGZmB,EAAc1C,EAAO6B,KAAKpU,KAC9B,SAACqK,EAAKnK,GACJ,IAAMgV,EAAE,iBAAahV,EAAQ,GACvBiV,EAAgD,GAqBtD,OApBA9K,EAAII,YAAYC,SAAQ,SACtBzK,GAKIA,EAAK+K,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAErBkK,EAAMtT,KAAK,CACTvB,KAAML,EAAK2K,wBAAwB,GAAGG,YACtClK,MAAOZ,EAAKkL,oBAAoB,GAAGJ,cAE5B9K,EAAK+K,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,MAE5BkK,EAAMtT,KAAK,CACTvB,KAAML,EAAK2K,wBAAwB,GAAGG,YACtClK,MAAOZ,EAAKoL,WAGlB,KACO,SAAC,EAAW,CAAerK,OAAQkU,EAAInV,WAAYoV,GAAjC9K,EAAIlK,IAC/B,IAGF,OACE,4BACE,SAAC,KAAO,CAACiV,YAAY,OAAM,sBAC3B,SAAC,EAAO,CAACzT,SAAUhC,KAAKC,MAAMiV,WAC9B,SAAC,KAAO,CAACO,YAAY,OAAM,mBAC3B,SAAC,EAAK,CAACzT,SAAUhC,KAAKC,MAAMiV,WAC5B,SAAC,KAAO,CAACO,YAAY,OAAM,oBAC3B,SAAC,EAAW,CAACrV,WAAY+U,KACzB,SAAC,KAAO,CAACM,YAAY,OAAM,uBAC3B,SAAC,EAAW,CAACrV,WAAYgV,KACzB,SAAC,KAAO,CAACK,YAAY,OAAM,uBAC3B,SAAC,EAAW,CAACrV,WAAYiV,KACzB,SAAC,KAAO,CAACI,YAAY,OAAM,yBAC1BH,IAGP,KAAC,EAjES,CAASvT,EAAAA,W,eC3WrB,SAjCU,qGA8BP,OA9BO,8BACR,WACE,IAUIX,EAVAsU,EAAS,KAgBb,YAf0B3V,IAAtBC,KAAKC,MAAMyV,SACbA,EAAS1V,KAAKC,MAAMyV,OAAOrV,KAAI,SAACC,EAAMC,GAAa,OACjD,SAAC,EAAW,CAEVc,OAAQf,EAAKK,KACbP,WAAYE,EAAKF,YAFZG,EAGL,KAKJa,OADsBrB,IAApBC,KAAKC,MAAM6E,KACR,UAAM9E,KAAKC,MAAM6E,KAAI,aAAK9E,KAAKC,MAAM2K,YAElC5K,KAAKC,MAAM2K,YAGnB,UAAC,WAAS,YACR,SAAC,EAAW,CACVvJ,OAAQD,EACRhB,WAAYJ,KAAKC,MAAMG,WACvBF,cAAeF,KAAKC,MAAMC,cAAc,SAEvCwV,IAEF1V,KAAKC,MAAM6B,WARE9B,KAAKC,MAAMO,IAW/B,KAAC,EA9BO,CAASuB,EAAAA,WCfL,IAAIuJ,EAAAA,GAAAA,OAAAA,aAA6B,CAC3CpK,MAAO,WACPqO,iBAAkB,MAClBC,QAAS,wBAED,IAAIlE,EAAAA,GAAAA,OAAAA,aAA6B,CACzCpK,MAAO,YACPqO,iBAAkB,MAClBC,QAAS,gCAED,IAAIlE,EAAAA,GAAAA,OAAAA,aAA6B,CACzCpK,MAAO,YACPqO,iBAAkB,MAClBC,QAAS,sBAEC,IAAIlE,EAAAA,GAAAA,OAAAA,aAA6B,CAC3CpK,MAAO,UACPqO,iBAAkB,MAClBC,QAAS,wBArBN,IAyBMmG,GAET,CACFC,SAAU,IAAItK,EAAAA,GAAAA,OAAAA,aAA6B,CACzCpK,MAAO,YACPqO,iBAAkB,MAClBC,QAAS,oBAEXqG,iBAAkB,IAAIvK,EAAAA,GAAAA,OAAAA,aAA6B,CACjDpK,MAAO,YACPqO,iBAAkB,MAClBC,QAAS,sBAIAsG,IAEZ,QACCC,oBAAqB,IAAIzK,EAAAA,GAAAA,OAAAA,aAA6B,CACpDpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,wBAEXwG,2BAA4B,IAAI1K,EAAAA,GAAAA,OAAAA,aAA6B,CAC3DpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,+BAEXyG,gBAAiB,IAAI3K,EAAAA,GAAAA,OAAAA,aAA6B,CAChDpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,oBAEX0G,uBAAwB,IAAI5K,EAAAA,GAAAA,OAAAA,aAA6B,CACvDpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,2BAEX2G,4BAA6B,IAAI7K,EAAAA,GAAAA,OAAAA,aAA6B,CAC5DpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,gCAEX4G,kBAAmB,IAAI9K,EAAAA,GAAAA,OAAAA,aAA6B,CAClDpK,MAAO,WACPqO,iBAAkB,MAClBC,QAAS,wBAEX6G,gBAAiB,IAAI/K,EAAAA,GAAAA,OAAAA,aAA6B,CAChDpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,oBAEX8G,MAAO,IAAIhL,EAAAA,GAAAA,OAAAA,aAA6B,CACtCpK,MAAO,YACPqO,iBAAkB,MAClBC,QAAS,qBAERmG,ICwDL,SA3HkB,qGAwHf,OAxHe,8BAChB,WAA4B,IAAD,SACzB,QAA4B5V,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAET,IAAMuU,EAAsBvW,KAAKC,MAAM+B,SAASwU,4BAC9CxW,KAAKC,MAAMM,OAEPH,EAA0B,GAOhC,QANqDL,IAAjDwW,EAAoBE,0BACtBrW,EAAW8B,KAAK,CACdvB,KAAM,cACNO,MAAOqV,EAAoBE,gCAG8B1W,IAAzDwW,EAAoBG,kCAClBH,EAAoBG,iCAAiClP,OAAS,EAAG,CACnE,IAAMmP,EAAaJ,EAAoBG,iCACvCtW,EAAW8B,KAAK,CACdvB,KAAM,uBACNO,MAAOyV,EAAWtW,KAAI,SAAAC,GAAI,OAAIA,EAAK8K,WAAW,IAAE1I,KAAK,OAEzD,EAK+C,QADS,EACxD6T,EAAoBK,mCAA2B,QAAI,IAEpC7L,SACf,SAACiG,EAAwCzQ,GACvCyQ,EAAK6F,2CAA2C9L,SAAQ,SACtDzK,EAOAC,GAEA,IAAMI,EAAO,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CAC5CpK,MAAOZ,EAAK2K,wBAAwB,GAAGC,UACvCqE,iBACEjP,EAAK2K,wBAAwB,GAAGsF,uBAClCf,QAASlP,EAAK2K,wBAAwB,GAAGG,cAE3C,GAAI9K,EAAK+K,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAE1D,IAAMpK,EAAQ,IAAIoK,EAAAA,GAAAA,OAAAA,aAA6B,CAC7CpK,MAAOZ,EAAKkL,oBAAoB,GAAGN,UACnCqE,iBACEjP,EAAKkL,oBAAoB,GAAG+E,uBAC9Bf,QAASlP,EAAKkL,oBAAoB,GAAGJ,cAElCzK,EAAKmW,OAAOhB,GAA6BG,mBAE1CtV,EAAKmW,OAAOhB,GAA6BM,mBAEzChW,EAAW8B,KAAK,CACdvB,KAAM,oBACNO,MAAOA,EAAMkK,cAGfzK,EAAKmW,OAAOhB,GAA6BF,UAEzCxV,EAAW8B,KAAK,CACdvB,KAAM,kBACNO,MAAOA,EAAMkK,cAGfzK,EAAKmW,OAAOhB,GAA6BD,kBAEzCzV,EAAW8B,KAAK,CACdvB,KAAM,0BACNO,MAAOA,EAAMkK,cAGfzK,EAAKmW,OAAOhB,GAA6BQ,QACzC,EAAKrW,MAAM8W,WAEX3W,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOA,EAAMkK,cAIrB,MAAW9K,EAAK+K,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,OAG1B3K,EAAKmW,OAAOhB,GAA6BQ,QACzC,EAAKrW,MAAM8W,UAEX3W,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOZ,EAAKoL,YAGd/K,EAAKmW,OAAOhB,GAA6BE,6BAEzC5V,EAAW8B,KAAK,CACdvB,KAAM,kBACNO,MAAOZ,EAAKoL,YAIpB,GACF,IAEF,IAAMlL,EAAM+V,EAAoBhC,YAC1B3J,EAAa2L,EAAoB/B,mBACvC,OACE,SAAC,GAAI,CACHhU,IAAKA,EAELoK,WAAYA,EACZxK,WAAYA,EACZF,eAAa,GAHRM,EAMX,KAAC,EAxHe,CAASuB,EAAAA,WC2B3B,SA/BkB,qGA4Bf,OA5Be,8BAChB,WAA4B,IAAD,SACzB,QAA4BhC,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAOT,IACM7B,GAD8D,QAAlD,EAAGH,KAAKC,MAAM+B,SAASwU,mCAA2B,QAAI,IAC7CnW,KACzB,SAACC,EAAwCC,GACvC,OACE,SAAC,GAAY,CACXA,MAAOA,EAEPyB,SAAU,EAAK/B,MAAM+B,SACrB+U,UAAW,EAAK9W,MAAM8W,WAFjBzW,EAAKiU,YAKhB,IAEF,OACE,SAAC,MAAI,CAAC/L,MAAO,CAAEwO,UAAW,QAAS,SAChC7W,GAGP,KAAC,EA5Be,CAAS4B,EAAAA,W,uKCitB3B,SAvpBqB,0CACnB,WAAa9B,GAA8B,IAAD,EAoBvC,OApBuC,gBACxC,cAAMA,IACDmK,uBAAyB,EAAKA,uBAAuBC,MAAK,WAC/D,EAAKmE,oBAAsB,EAAKA,oBAAoBnE,MAAK,WACzD,EAAK6G,kBAAoB,EAAKA,kBAAkB7G,MAAK,WACrD,EAAK4G,uBAAyB,EAAKA,uBAAuB5G,MAAK,WAC/D,EAAK8G,uBAAyB,EAAKA,uBAAuB9G,MAAK,WAC/D,EAAKoE,mBAAqB,EAAKA,mBAAmBpE,MAAK,WACvD,EAAKqE,mBAAqB,EAAKA,mBAAmBrE,MAAK,WACvD,EAAKsE,mBAAqB,EAAKA,mBAAmBtE,MAAK,WACvD,EAAK4M,cAAgB,EAAKA,cAAc5M,MAAK,WAC7C,EAAK6M,iBAAmB,EAAKA,iBAAiB7M,MAAK,WACnD,EAAKpD,MAAQ,CACX0D,UAAW,EAAK1K,MAAM0K,UACtBkE,aAAc,CACZC,QAAS,EAAK7O,MAAM8O,aAAaD,QACjC7F,MAAO,EAAKhJ,MAAM8O,aAAa9F,MAC/BkO,wBAAyB,EAAKlX,MAAM8O,aAAaoI,wBACjDjI,YAAa,EAAKjP,MAAM8O,aAAaG,cAExC,CACH,CA8nBC,OA9nBA,0CAED,SACEkI,EACAC,GAEIrX,KAAKC,MAAM8O,eAAiBqI,EAAcrI,cAC5C/O,KAAKqH,SAAS,CACZwH,aAAc7O,KAAKC,MAAM8O,cAG/B,GAAC,oCAED,SACEzE,EACAC,GAEA,IAAMK,EAAa5K,KAAKC,MAAMqX,YAAY1M,WAC1C5K,KAAKqH,SAAS,CACZsD,UAAWL,IAEbtK,KAAKC,MAAMuK,mBAAmB,CAC5B+M,sBAAuB3M,EACvBD,UAAWL,GAEf,GAAC,iCAED,SACEpJ,GAEA,GAAa,MAATA,EAAe,CACjB,IAAM0J,EAAa5K,KAAKC,MAAMqX,YAAY1M,WAC1C5K,KAAKC,MAAM+O,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CAAEH,QAAS5N,KAE3BlB,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtB4H,aAAc,CACZ5F,MAAOhC,EAAM4H,aAAa5F,MAC1BkO,wBAAyBlQ,EAAM4H,aAAasI,wBAC5CrI,QAAS5N,EACTgO,YAAajI,EAAM4H,aAAaK,aAEnC,GACH,CACF,GAAC,gCAED,SACEhO,GAEA,IAAM0J,EAAa5K,KAAKC,MAAMqX,YAAY1M,WAC1C,GAAa,MAAT1J,QAAmDnB,IAAlCC,KAAKiH,MAAM4H,aAAa5F,MAAqB,CAChE,IAAMA,EAAQ,CACZtD,MAAMwJ,QAAQjO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,IAEhCjJ,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtB4H,aAAc,CACZ5F,MAAOA,EACPkO,wBAAyBlQ,EAAM4H,aAAasI,wBAC5CrI,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAajI,EAAM4H,aAAaK,aAEnC,IACDlP,KAAKC,MAAM+O,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CAAEhG,MAAOA,IAE3B,CACF,GAAC,gCAED,SACE/H,GAEA,IAAM0J,EAAa5K,KAAKC,MAAMqX,YAAY1M,WAC1C,GAAa,MAAT1J,QAAmDnB,IAAlCC,KAAKiH,MAAM4H,aAAa5F,MAAqB,CAChE,IAAMA,EAAQ,CACZjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BtD,MAAMwJ,QAAQjO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAM4H,aAAa5F,MAAM,IAEhCjJ,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtB4H,aAAc,CACZ5F,MAAOA,EACPkO,wBAAyBlQ,EAAM4H,aAAasI,wBAC5CrI,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAajI,EAAM4H,aAAaK,aAEnC,IACDlP,KAAKC,MAAM+O,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CAAEhG,MAAOA,IAE3B,CACF,GAAC,gCAED,SACE/H,GAEA,IAAM0J,EAAa5K,KAAKC,MAAMqX,YAAY1M,WAC1C,GAAa,MAAT1J,QAAmDnB,IAAlCC,KAAKiH,MAAM4H,aAAa5F,MAAqB,CAChE,IAAMA,EAAQ,CACZjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BtD,MAAMwJ,QAAQjO,GAASA,EAAM,GAAKA,GAEpClB,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtB4H,aAAc,CACZ5F,MAAOA,EACPkO,wBAAyBlQ,EAAM4H,aAAasI,wBAC5CrI,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAajI,EAAM4H,aAAaK,aAEnC,IACDlP,KAAKC,MAAM+O,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CAAEhG,MAAOA,IAE3B,CACF,GAAC,8BAED,WACE,IAAMuO,EAAU,SAACxK,GAIf,MAAO,KAAO,UAHJA,EAAO,IAGe,KAFtBA,EAAO,IAE2B,GADlCA,EAAO,IACmC/C,SAAS,IAAI5D,MAAM,EACzE,EAEA,OAAuD,MAAnDrG,KAAKC,MAAM8O,aAAaoI,wBACTnX,KAAKC,MAAM8O,aAAaoI,wBAAwBM,KACjDpX,KAAI,SAAA2M,GAAM,OAAIwK,EAAQxK,EAAO,IACH,MAAjChN,KAAKiH,MAAM4H,aAAa5F,MAC1B,CACL,UACAuO,EAAQxX,KAAKiH,MAAM4H,aAAa5F,QAG3B,CAAC,QAAS,QAErB,GAAC,oCAED,SACE/H,GAEA,IAAM0J,EAAa5K,KAAKC,MAAMqX,YAAY1M,WAC7B,MAAT1J,QAAyDnB,IAAxCC,KAAKiH,MAAM4H,aAAaK,cAC3ClP,KAAKqH,UAAS,SAAAJ,GACZ,YAAuClH,IAAnCkH,EAAM4H,aAAaK,YACd,CACLL,aAAc,CACZ5F,MAAOhC,EAAM4H,aAAa5F,MAC1BkO,wBAAyBlQ,EAAM4H,aAAasI,wBAC5CrI,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAa,CAAChO,EAAO+F,EAAM4H,aAAaK,YAAY,MAIjD,CACLL,aAAc,CACZ5F,MAAOhC,EAAM4H,aAAa5F,MAC1BkO,wBAAyBlQ,EAAM4H,aAAasI,wBAC5CrI,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAajI,EAAM4H,aAAaK,aAIxC,IACAlP,KAAKC,MAAM+O,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CACZC,YAAa,CACXhO,EACAlB,KAAKiH,MAAM4H,aAAaK,YAAY,OAK9C,GAAC,oCAED,SACEhO,GAEA,IAAM0J,EAAa5K,KAAKC,MAAMqX,YAAY1M,WAC7B,MAAT1J,QAAyDnB,IAAxCC,KAAKiH,MAAM4H,aAAaK,cAC3ClP,KAAKqH,UAAS,SAAAJ,GACZ,YAAuClH,IAAnCkH,EAAM4H,aAAaK,YACd,CACLL,aAAc,CACZ5F,MAAOhC,EAAM4H,aAAa5F,MAC1BkO,wBAAyBlQ,EAAM4H,aAAasI,wBAC5CrI,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAa,CAACjI,EAAM4H,aAAaK,YAAY,GAAIhO,KAI9C,CACL2N,aAAc,CACZ5F,MAAOhC,EAAM4H,aAAa5F,MAC1BkO,wBAAyBlQ,EAAM4H,aAAasI,wBAC5CrI,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAajI,EAAM4H,aAAaK,aAIxC,IACAlP,KAAKC,MAAM+O,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CACZC,YAAa,CACXlP,KAAKiH,MAAM4H,aAAaK,YAAY,GACpChO,MAKV,GAAC,+BAED,SACE8L,GAEA,IAAMpC,EAAa5K,KAAKC,MAAMqX,YAAY1M,WAC1C5K,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtB4H,aAAc,CACZ5F,MAAOhC,EAAM4H,aAAa5F,MAC1BkO,wBAAyBlQ,EAAM4H,aAAasI,wBAC5CrI,QAAS7H,EAAM4H,aAAaC,QAC5BI,YAAalC,GAEhB,IACDhN,KAAKC,MAAM+O,cAAc,CACvBuI,sBAAuB3M,EACvBqE,aAAc,CAAEC,YAAalC,IAEjC,GAAC,2BAED,WACE,IAAMpC,EAAa5K,KAAKC,MAAMqX,YAAY1M,WAC1C5K,KAAKC,MAAMyX,UAAU9M,EACvB,GAAC,oBAED,WAA4B,IAAD,EACnBA,EAAa5K,KAAKC,MAAMqX,YAAY1M,WACpC7D,EAAc/G,KAAKC,MAAMqX,YAAYvQ,YACrC3G,EAAqD,QACLL,IAAlDC,KAAKC,MAAMqX,YAAYK,wBACzBvX,EAAW8B,KACT,CACEvB,KAAM,0BACNO,MAAM,GAAD,OAAKlB,KAAKC,MAAMqX,YAAYK,uBAAsB,cAIZ5X,IAA7CC,KAAKC,MAAMqX,YAAYM,mBACzBxX,EAAW8B,KACT,CACEvB,KAAM,qBACNO,MAAOlB,KAAKC,MAAMqX,YAAYM,kBAAkBxM,cAMtD,IAAMyM,EAC8C,QADU,EAC5D7X,KAAKC,MAAM+B,SAAS,GAAGwU,mCAA2B,QAAI,GAExD,IACEqB,EAAqB9M,SAAQ,SAAAhE,GAAgB,IAAD,GAED,QADyB,EAChEA,EAAY6P,mCAA2B,QAAI,IACpB7L,SACvB,SAACiG,EAAwCzQ,GACvCyQ,EAAK6F,2CAA2C9L,SAAQ,SACtDzK,EAOAC,GAEA,IAAMI,EAAO,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CAC5CpK,MAAOZ,EAAK2K,wBAAwB,GAAGC,UACvCqE,iBACIjP,EAAK2K,wBAAwB,GAAGsF,uBACpCf,QAASlP,EAAK2K,wBAAwB,GAAGG,cAE3C,GAAI9K,EAAK+K,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAE1D,IAAMpK,EAAQ,IAAIoK,EAAAA,GAAAA,OAAAA,aAA6B,CAC7CpK,MAAOZ,EAAKkL,oBAAoB,GAAGN,UACnCqE,iBACIjP,EAAKkL,oBAAoB,GAAG+E,uBAChCf,QAASlP,EAAKkL,oBAAoB,GAAGJ,cAElCzK,EAAKmW,OAAOhB,GAA6BG,kBACxCtV,EAAKmW,OAAOhB,GAA6BQ,QAC3ClW,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOA,EAAMkK,aAIrB,MAAW9K,EAAK+K,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,OAEvB3K,EAAKmW,OAAOhB,GAA6BG,kBACxCtV,EAAKmW,OAAOhB,GAA6BQ,QAC3ClW,EAAW8B,KAAK,CACdvB,KAAM,eACNO,MAAOZ,EAAKoL,YAKtB,GACF,GAEJ,GASF,CARE,MAAOlF,GACP4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA4B,EAAMzB,SAGZ,CAEA,IAKIoI,EACA7M,EANEwX,EAAWC,KAAKC,IAAI,EAAGhY,KAAKC,MAAM+B,SAAS,GAAGiW,eAAiB,EAE/D7W,EACW,MAAf2F,EAAmB,UAAM6D,EAAU,aAAK7D,GAAgB6D,EAI1D,GAAI5K,KAAKC,MAAMqX,YAAYY,gBAAiB,CAE1C,IAAIzI,EAkGAC,EAhGFD,EADmC,MAAjCzP,KAAKiH,MAAM4H,aAAa5F,OAExB,iCACE,SAAC,KAAO,CAACyH,OAAK,sBAGd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,kBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9P,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAKyO,wBAGnB,SAAC,KAAG,CAACxN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,IACLxP,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAKyO,2BAKrB,UAAC,KAAG,CAACkC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,oBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9P,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK0O,wBAGnB,SAAC,KAAG,CAACzN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,IACLxP,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK0O,2BAKrB,UAAC,KAAG,CAACiC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,mBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9P,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK2O,wBAGnB,SAAC,KAAG,CAAC1N,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,IACLxP,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK2O,8BAQvB,iCACE,SAAC,KAAO,CAAC+B,OAAK,qBAEJ,gHAQ2B,MAAvC1Q,KAAKiH,MAAM4H,aAAaK,cAC1BQ,GACE,iCACE,SAAC,KAAO,CAACgB,OAAK,mCAGd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK/Q,KAAKiH,MAAM4H,aAAaK,YAAY,GACzC3N,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAaK,YAAY,GAC3C9C,SAAUpM,KAAKiR,4BAGnB,SAAC,KAAG,CAAChQ,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAK,EACLC,IAAK,EACLC,IAAK+G,EACL9G,KAAM,EACN9P,MAAO,CACLlB,KAAKiH,MAAM4H,aAAaK,YAAY,GACpClP,KAAKiH,MAAM4H,aAAaK,YAAY,IAEtC9C,SAAUpM,KAAKkR,uBAGnB,SAAC,KAAG,CAACjQ,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK9Q,KAAKiH,MAAM4H,aAAaK,YAAY,GACzC6B,IAAK+G,EACLvW,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAaK,YAAY,GAC3C9C,SAAUpM,KAAKmR,kCAO3BhE,GACE,2BACGuC,EACAD,GACD,SAAC,KAAO,CAACiB,OAAK,KACd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACN9P,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,yBAGnB,SAAC,KAAG,CAACvN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,EACLxP,KAAK,QACLyP,KAAM,GACNxI,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,8BAMzB,IAAM2J,EAASnY,KAAKkX,mBACpB5W,GACE,SAAC,KAAK,CACJsN,OAAQ,EAAE,GAAI,IACdC,MAAO,IACPrF,MAAO,CACLsF,YAAa,QACbC,YAAa,MACbC,YAAa,OACbC,WAAYjO,KAAKiH,MAAM0D,UAAY,UAAY,SAC/CuD,gBAAgB,6BAAD,OAA+BiK,EAAOlO,WAAU,MAC/D,UAEF,SAAC,EAAW,CACV5I,OAAQD,EACRhB,WAAYA,EACZqB,YAAU,EACVvB,eAAa,KAIrB,MAEEiN,GACE,0BACE,UAAC,KAAG,CAACwD,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACN9P,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,yBAGnB,SAAC,KAAG,CAACvN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,EACLxP,KAAK,QACLyP,KAAM,GACNxI,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,6BAMzBlO,GACE,SAAC,EAAW,CACVe,OAAQD,EACRhB,WAAYA,EACZqB,YAAU,EACVvB,eAAa,IAKnB,IAAMkY,EAAU,GACZpY,KAAKC,MAAMoY,aACbD,EAAQlW,MACN,SAAC,KAAO,CAACd,MAAM,sBAAqB,UAClC,SAAC,KAAM,CACL0D,KAAK,UACL0I,MAAM,SACNrM,MAAM,SAACmX,GAAA,EAAc,IACrBrL,QAASjN,KAAKiX,mBAMtB,MAUIjX,KAAKC,MADJ4K,GARS,EAAZkE,aACW,EAAXsJ,YACS,EAAT1N,UACQ,EAAR3I,SACkB,EAAlBwI,mBACa,EAAbwE,cACS,EAAT0I,UACW,EAAXJ,aACa,eAEf,OACE,SAAC,UAAS,gBACR9O,MAAO,CAAEC,OAAQ,OAAQ0D,YAAa,QAElCtB,GAAU,cAEd,UAAC,KAAK,CAACqB,MAAM,QAAO,WAClB,gBAAK1D,MAAO,CAAE2D,YAAa,QAAS,UAClC,UAAC,KAAK,CAACiB,UAAU,WAAWlB,MAAM,MAAK,WACrC,SAAC,KAAM,CACL3K,KAAK,QACL+I,QAAStK,KAAKiH,MAAM0D,UACpByB,SAAUpM,KAAKoK,uBACfiC,iBAAiB,SAACkM,GAAA,EAAW,IAC7BjM,mBAAmB,SAACkM,GAAA,EAAoB,OAE1C,SAAC,KAAO,CACNnL,UAAU,OACVC,QAASH,EACTI,aAAc,CAAE3D,MAAO,SACvBxI,MAAM,mBAAkB,UAExB,SAAC,KAAM,CACL0D,KAAK,UACL0I,MAAM,SACNrM,MAAM,SAACsM,GAAA,EAAe,QAGzB2K,OAGJ9X,OA5BEN,KAAKC,MAAMqX,YAAY1M,WAgClC,KAAC,EAppBkB,CAAS7I,EAAAA,WCjE9B,IAAQ0W,GAAWC,GAAAA,EAAAA,OAsKnB,SA3HqB,0CAKnB,WAAazY,GAA8B,IAAD,EAIkC,OAJlC,gBACxC,cAAMA,IALRgH,MAAQ,CACN0R,mCAA+B5Y,GAK/B,EAAK6Y,mBAAqB,EAAKA,mBAAmBvO,MAAK,WACvD,EAAKwO,kBAAoB,EAAKA,kBAAkBxO,MAAK,WACrD,EAAKyO,0BAA4B,EAAKA,0BAA0BzO,MAAK,WAAK,CAC5E,CA8GC,OA5GD,yCAGA,SAAmBkN,GACjBvX,KAAKC,MAAM8Y,4BAA4B,CACrCxB,sBAAAA,EACAyB,UAAU,GAEd,GAEA,uCAGA,SACE9X,GAEAlB,KAAKqH,SAAS,CAAEsR,8BAA+BzX,GACjD,GAEA,gCAGA,WACE,IAAM0J,EAAa5K,KAAKiH,MAAM0R,mCACX5Y,IAAf6K,IACF5K,KAAKC,MAAM8Y,4BAA4B,CACrCxB,sBAAuB3M,EACvBoO,UAAU,IAEZhZ,KAAKqH,SAAS,CAAEsR,mCAA+B5Y,IAEnD,GAAC,oBAED,WAA4B,IAAD,OACzB,QAA4BA,IAAxBC,KAAKC,MAAM+B,SACb,OAAO,KAGT,IAwCIiX,EAxCEC,EAAelZ,KAAKC,MAAMkZ,aAAa3R,OAAS,EAChD4R,EAAsC,GACtCC,EAAiC,GA8DvC,OA7DArZ,KAAKC,MAAMkZ,aAAapO,SAAQ,SAAAuM,GAC9B,IAAMC,EAAwBD,EAAY1M,WACpC0O,EAAS,EAAKrZ,MAAM+B,SAASuV,GAC7BjO,EAAoBgQ,EAAO,GAAGC,kBACpCD,EAAO,GAAGE,oBAAoBzO,SAAQ,SAAA0O,GACpC,IAkBQrY,EAlBFmU,EAAKkE,EAAgBC,sBACrB3S,EAAc0S,EAAgBE,uBAChCrC,EAAY1M,aAAe2K,IACzB,EAAKtV,MAAM2Z,6BAA6BhN,IAAI2I,GAC9C6D,EAAiBlX,MACf,SAAC,GAAe,CAEdoV,YAAaA,EACbtV,SAAUsX,EACV3O,UAAW,EAAK1K,MAAM4Z,8BAA8BjN,IAAI2I,GACxDxG,aAAc,EAAK9O,MAAM6Z,yBAAyBvE,GAClD/K,mBAAoB,EAAKvK,MAAM8Z,8BAC/B/K,cAAe,EAAK/O,MAAM+Z,yBAC1BtC,UAAW,EAAKmB,kBAChBR,YAAaa,GAAa,UARlB5P,EAAiB,YAAIiM,MAc/BnU,EADkB,KAAhB2F,EACG,UAAMwO,EAAE,cAAMxO,GAEd,UAAMwO,GAEb8D,EAAYnX,MACV,SAACuW,GAAM,CAAUvX,MAAOqU,EAAG,SAAEnU,GAAhBmU,KAIrB,GACF,IAGI2D,IACFD,GACE,UAAC,KAAK,CAAC/M,MAAM,SAAS3K,KAAM,GAAIiH,MAAO,CAAEyR,QAAS,QAAS,WACzD,SAAC,KAAM,CACL5I,aAAa,GACb7I,MAAO,CAAEoB,MAAO,KAChBwC,SAAUpM,KAAK8Y,0BACf5X,MAAOlB,KAAKiH,MAAM0R,8BAClBuB,YAAU,WAETb,KAEH,SAAC,KAAO,CAACjY,MAAM,MAAK,UAClB,SAAC,KAAG,CACFD,MAAM,SAACgZ,GAAA,EAAmB,IAC1BrV,KAAK,UACLmI,QAASjN,KAAK4Y,4BAQtB,UAAC,IAAI,CAACnX,YAAY,EAAM,UACrB2X,EACAH,IAGP,KAAC,EAxHkB,CAASlX,EAAAA,W,8FCqI9B,SAxIiB,0CACf,WAAa9B,GAA0B,IAAD,EASnC,OATmC,gBACpC,cAAMA,IACDmK,uBAAyB,EAAKA,uBAAuBC,MAAK,WAC/D,EAAKmE,oBAAsB,EAAKA,oBAAoBnE,MAAK,WACzD,EAAKpD,MAAQ,CACX0D,UAAW,EAAK1K,MAAM0K,UACtBkE,aAAc,CACZC,QAAS,EAAK7O,MAAM8O,aAAaD,UAEpC,CACH,CA0HC,OA1HA,8CAED,SACExE,EACAC,GAEAvK,KAAKC,MAAMuK,mBAAmB,CAC5B4P,WAAYpa,KAAKC,MAAMoa,QAAQ7Z,IAC/BmK,UAAWL,IAEbtK,KAAKqH,SAAS,CAAEsD,UAAWL,GAC7B,GAAC,iCAED,SAAqBpJ,GACN,MAATA,IACFlB,KAAKC,MAAM+O,cAAc,CACvBoL,WAAYpa,KAAKC,MAAMoa,QAAQ7Z,IAC/ByO,aAAc,CACZH,QAAS5N,KAGblB,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtB4H,aAAc,CACZC,QAAS5N,GAEZ,IAEL,GAAC,oBAED,WACE,IAAMd,EAAqD,CACzD,CACEO,KAAM,cACNO,MAAOlB,KAAKC,MAAMoa,QAAQtT,cAIxBoG,GACJ,0BACE,UAAC,KAAG,CAACwD,QAAQ,SAASzE,MAAM,SAAQ,WAClC,SAAC,KAAG,CAACjL,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACN9P,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,yBAGnB,SAAC,KAAG,CAACvN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,EACLxP,KAAK,QACLyP,KAAM,GACNxI,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,6BAWzB,EAQIxO,KAAKC,MADJ4K,GANS,EAAZkE,aACS,EAATpE,UACO,EAAP0P,QACQ,EAARrY,SACkB,EAAlBwI,mBACa,EAAbwE,eACa,eAEf,OACE,SAAC,UAAS,gBACRxG,MAAO,CAAEC,OAAQ,OAAQ0D,YAAa,QAElCtB,GAAU,cAEd,UAAC,KAAK,CAACqB,MAAM,QAAO,WAClB,gBAAK1D,MAAO,CAAE2D,YAAa,QAAS,UAClC,SAAC,KAAK,CAACiB,UAAU,WAAWlB,MAAM,MAAM3K,KAAM,IAAI,UAChD,UAAC,KAAK,CAAC6L,UAAU,WAAWlB,MAAM,MAAK,WACrC,SAAC,KAAM,CACL3K,KAAK,QACL6K,SAAUpM,KAAKoK,uBACfE,QAAStK,KAAKC,MAAM0K,UACpB0B,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,OAEhC,SAAC,KAAO,CACNe,UAAU,OACVC,QAASH,EACTI,aAAc,CAAE3D,MAAO,SACvBxI,MAAM,mBAAkB,UAExB,SAAC,KAAM,CACL0D,KAAK,UACL0I,MAAM,SACNrM,MAAM,SAACsM,GAAA,EAAe,gBAMhC,SAAC,EAAW,CACVpM,OAAQrB,KAAKC,MAAMoa,QAAQ3Z,MAC3BN,WAAYA,EACZqB,YAAU,EACVvB,eAAa,SAjCZF,KAAKC,MAAMoa,QAAQ7Z,IAsC9B,KAAC,EArIc,CAASuB,EAAAA,WCQ1B,SAzBiB,qGAsBd,OAtBc,8BACf,WAA4B,IAAD,OACnB5B,EAAQH,KAAKC,MAAMqa,SAASja,KAAI,SAACga,EAAS9Z,GAC9C,IAAMC,EAAM6Z,EAAQ7Z,IACpB,OACE,SAAC,GAAW,CAEV6Z,QAASA,EACTrY,SAAU,EAAK/B,MAAM+B,SAASxB,GAC9BmK,UAAW,EAAK1K,MAAMsa,mBAAmB3N,IAAIpM,GAC7CuO,aAAc,EAAK9O,MAAMua,qBAAqBha,GAC9CgK,mBAAoB,EAAKvK,MAAMwa,0BAC/BzL,cAAe,EAAK/O,MAAMya,sBANrBL,EAAQ7Z,IASnB,IAEA,OACE,SAAC,IAAI,CAACiB,YAAY,EAAM,SACrBtB,GAGP,KAAC,EAtBc,CAAS4B,EAAAA,W,8FCyJ1B,SAxIiB,0CACf,WAAa9B,GAA0B,IAAD,EAOnC,OAPmC,gBACpC,cAAMA,IACDmK,uBAAyB,EAAKA,uBAAuBC,MAAK,WAC/D,EAAKmE,oBAAsB,EAAKA,oBAAoBnE,MAAK,WACzD,EAAKpD,MAAQ,CACX0D,UAAW,EAAK1K,MAAM0K,UACtBkE,aAAc,CAAEC,QAAS,EAAK7O,MAAM8O,aAAaD,UAClD,CACH,CA4HC,OA5HA,8CAED,SACExE,EACAC,GAEAvK,KAAKC,MAAMuK,mBAAmB,CAC5BmQ,WAAY3a,KAAKC,MAAM2a,QAAQpa,IAC/BmK,UAAWL,IAEbtK,KAAKqH,SAAS,CAAEsD,UAAWL,GAC7B,GAAC,iCAED,SAAqBpJ,GACN,MAATA,IACFlB,KAAKC,MAAM+O,cAAc,CACvB2L,WAAY3a,KAAKC,MAAM2a,QAAQpa,IAC/ByO,aAAc,CACZH,QAAS5N,KAGblB,KAAKqH,SAAS,CAAEwH,aAAc,CAAEC,QAAS5N,KAE7C,GAAC,oBAED,WACE,IAAMd,EAAqD,CACzD,CACEO,KAAM,gBACNO,MAAOlB,KAAKC,MAAM2a,QAAQ7K,aAAa3E,aAEzC,CACEzK,KAAM,oBACNO,MAAOlB,KAAKC,MAAM2a,QAAQ5K,iBAAiB5E,aAE7C,CACEzK,KAAM,iBACNO,MAAOlB,KAAKC,MAAM2a,QAAQC,gBAIxB1N,GACJ,0BACE,UAAC,KAAG,CAACwD,QAAQ,SAASzE,MAAM,SAAQ,WAClC,SAAC,KAAG,CAACjL,KAAM,EAAE,sBAGb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACN9P,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,yBAGnB,SAAC,KAAG,CAACvN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,EACLxP,KAAK,QACLyP,KAAM,GACNxI,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,6BAWzB,EAQIxO,KAAKC,MADJ4K,GANS,EAAZkE,aACS,EAATpE,UACO,EAAPiQ,QACQ,EAAR5Y,SACkB,EAAlBwI,mBACa,EAAbwE,eACa,eAEf,OACE,SAAC,UAAS,gBACRxG,MAAO,CAAEC,OAAQ,OAAQ0D,YAAa,QAElCtB,GAAU,cAEd,UAAC,KAAK,CAACqB,MAAM,QAAO,WAClB,gBAAK1D,MAAO,CAAE2D,YAAa,QAAS,UAClC,UAAC,KAAK,CAACiB,UAAU,WAAWlB,MAAM,MAAK,WACrC,SAAC,KAAM,CACL3K,KAAK,QACL6K,SAAUpM,KAAKoK,uBACfE,QAAStK,KAAKC,MAAM0K,UACpB0B,iBAAiB,SAAC,MAAK,IACvBC,mBAAmB,SAAC,MAAU,OAEhC,SAAC,KAAO,CACNe,UAAU,OACVC,QAASH,EACTI,aAAc,CAAE3D,MAAO,SACvBxI,MAAM,mBAAkB,UAExB,SAAC,KAAM,CACL0D,KAAK,UACL0I,MAAM,SACNrM,MAAM,SAACsM,GAAA,EAAe,cAK9B,SAAC,EAAW,CACVpM,OAAQrB,KAAKC,MAAM2a,QAAQla,MAC3BN,WAAYA,EACZqB,YAAU,EACVvB,eAAa,SA/BZF,KAAKC,MAAM2a,QAAQpa,IAoC9B,KAAC,EArIc,CAASuB,EAAAA,WCU1B,SAzBiB,qGAsBd,OAtBc,8BACf,WAA4B,IAAD,OACnB5B,EAAQH,KAAKC,MAAM6a,SAASza,KAAI,SAACua,EAASra,GAC9C,IAAMC,EAAMoa,EAAQpa,IACpB,OACE,SAAC,GAAW,CAEVoa,QAASA,EACT5Y,SAAU,EAAK/B,MAAM+B,SAASxB,GAC9BmK,UAAW,EAAK1K,MAAM8a,mBAAmBnO,IAAIpM,GAC7CuO,aAAc,EAAK9O,MAAM+a,qBAAqBxa,GAC9CgK,mBAAoB,EAAKvK,MAAMgb,0BAC/BjM,cAAe,EAAK/O,MAAMib,sBANrBN,EAAQpa,IASnB,IAEA,OACE,SAAC,IAAI,CAACiB,YAAY,EAAM,SACrBtB,GAGP,KAAC,EAtBc,CAAS4B,EAAAA,WChBnB,SAASoZ,GAAeC,GAc7B,OAbA,SAAkCnb,GAChC,IAAMob,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACf,OACE,SAACN,GAAS,kBACJnb,GAAK,IACTob,SAAUA,EACVE,SAAUA,EACVE,OAAQA,IAGd,CAEF,C,eCuQA,SA9QuB,0CAIrB,WAAaxb,GAAgC,IAAD,EAazC,OAbyC,gBAC1C,cAAMA,IACDuO,oBAAsB,EAAKA,oBAAoBnE,MAAK,WACzD,EAAKoE,mBAAqB,EAAKA,mBAAmBpE,MAAK,WACvD,EAAKqE,mBAAqB,EAAKA,mBAAmBrE,MAAK,WACvD,EAAKsE,mBAAqB,EAAKA,mBAAmBtE,MAAK,WACvD,EAAKuE,gBAAkB,EAAKA,gBAAgBvE,MAAK,WACjD,EAAKpD,MAAQ,CACX4H,aAAc,CACZC,QAAS,EAAK7O,MAAM8O,aAAaD,QACjC7F,MAAO,EAAKhJ,MAAM8O,aAAa9F,MAC/B0S,YAAa,EAAK1b,MAAM8O,aAAa4M,cAExC,CACH,CAyPC,OAzPA,2CAED,SAAqBza,GAA6B,IAAD,OAClC,MAATA,IACFlB,KAAKC,MAAM2b,qBAAqB7Q,SAAQ,SAACvK,GACvC,EAAKP,MAAM+O,cAAc,CACvBxO,IAAAA,EACAyO,aAAc,CACZhG,MAAO,EAAKhC,MAAM4H,aAAa5F,MAC/B6F,QAAS5N,EACTya,YAAa,EAAK1U,MAAM4H,aAAa8M,cAG3C,IACA3b,KAAK6b,mBAAmB,CAAE/M,QAAS5N,IAEvC,GAAC,gCAED,SAAoBA,GAAwC,IAAD,OACzD,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAM4H,aAAa5F,MAAqB,CAChE,IAAMA,EAAQ,CACZtD,MAAMwJ,QAAQjO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,IAEhCjJ,KAAK6b,mBAAmB,CAAE5S,MAAAA,IAC1BjJ,KAAKC,MAAM2b,qBAAqB7Q,SAAQ,SAACvK,GACvC,EAAKP,MAAM+O,cAAc,CACvBxO,IAAAA,EACAyO,aAAc,CACZhG,MAAOA,EACP6F,QAAS,EAAK7H,MAAM4H,aAAaC,QACjC6M,YAAa,EAAK1U,MAAM4H,aAAa8M,cAG3C,GACF,CACF,GAAC,gCAED,SAAoBza,GAAwC,IAAD,OACzD,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAM4H,aAAa5F,MAAqB,CAChE,IAAMA,EAAQ,CACZjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BtD,MAAMwJ,QAAQjO,GAASA,EAAM,GAAKA,EAClClB,KAAKiH,MAAM4H,aAAa5F,MAAM,IAEhCjJ,KAAK6b,mBAAmB,CAAE5S,MAAAA,IAC1BjJ,KAAKC,MAAM2b,qBAAqB7Q,SAAQ,SAACvK,GACvC,EAAKP,MAAM+O,cAAc,CACvBxO,IAAAA,EACAyO,aAAc,CACZhG,MAAOA,EACP6F,QAAS,EAAK7H,MAAM4H,aAAaC,QACjC6M,YAAa,EAAK1U,MAAM4H,aAAa8M,cAG3C,GACF,CACF,GAAC,gCAED,SAAoBza,GAAwC,IAAD,OACzD,GAAa,MAATA,QAAmDnB,IAAlCC,KAAKiH,MAAM4H,aAAa5F,MAAqB,CAChE,IAAMA,EAAQ,CACZjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BjJ,KAAKiH,MAAM4H,aAAa5F,MAAM,GAC9BtD,MAAMwJ,QAAQjO,GAASA,EAAM,GAAKA,GAEpClB,KAAK6b,mBAAmB,CAAE5S,MAAAA,IAC1BjJ,KAAKC,MAAM2b,qBAAqB7Q,SAAQ,SAACvK,GACvC,EAAKP,MAAM+O,cAAc,CACvBxO,IAAAA,EACAyO,aAAc,CACZhG,MAAOA,EACP6F,QAAS,EAAK7H,MAAM4H,aAAaC,QACjC6M,YAAa,EAAK1U,MAAM4H,aAAa8M,cAG3C,GACF,CACF,GAAC,mCAED,SAAuBza,GAAuB,IAAD,OAC3ClB,KAAK6b,mBAAmB,CAAEF,YAAaza,IAEvClB,KAAKC,MAAM2b,qBAAqB7Q,SAAQ,SAACvK,GACvC,EAAKP,MAAM+O,cAAc,CACvBxO,IAAAA,EACAyO,aAAc,CACZhG,MAAO,EAAKhC,MAAM4H,aAAa5F,MAC/B6F,QAAS,EAAK7H,MAAM4H,aAAaC,QACjC6M,YAAaza,IAGnB,GACF,GAAC,6BAED,WACE,IAAiB8L,EAOjB,OAAqC,MAAjChN,KAAKiH,MAAM4H,aAAa5F,MAHnB,KAAO,WAJC+D,EAQAhN,KAAKiH,MAAM4H,aAAa5F,OAPtB,IAGe,KAFtB+D,EAAO,IAE2B,GADlCA,EAAO,IACmC/C,SAAS,IAAI5D,MAAM,GAMhE,OAEX,GAAC,gCAED,YAQU,IAPR4C,EAAK,EAALA,MACA6F,EAAO,EAAPA,QACA6M,EAAW,EAAXA,YAMA3b,KAAKqH,UAAS,SAACJ,GAAK,MAAM,CACxB4H,aAAc,CACZC,QAAgB,OAAPA,QAAO,IAAPA,EAAAA,EAAW7H,EAAM4H,aAAaC,QACvC7F,MAAY,OAALA,QAAK,IAALA,EAAAA,EAAShC,EAAM4H,aAAa5F,MACnC0S,YAAwB,OAAXA,QAAW,IAAXA,EAAAA,EAAe1U,EAAM4H,aAAa8M,aAElD,GACH,GAAC,oBAED,WAA4B,IACtBlM,EADqB,OAkFzB,OAhFqC,MAAjCzP,KAAKiH,MAAM4H,aAAa5F,QAC1BwG,GACE,iCACE,SAAC,KAAO,CAACiB,OAAK,sBACd,UAAC,KAAG,CAACC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,kBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9P,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAKyO,wBAGnB,SAAC,KAAG,CAACxN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,IACLxP,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAKyO,2BAKrB,UAAC,KAAG,CAACkC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,oBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9P,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK0O,wBAGnB,SAAC,KAAG,CAACzN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,IACLxP,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK0O,2BAKrB,UAAC,KAAG,CAACiC,QAAQ,SAASzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WAClD,SAAC,KAAG,CAAC3P,KAAM,EAAE,mBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,IACLC,KAAM,EACN9P,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK2O,wBAGnB,SAAC,KAAG,CAAC1N,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,IACLxP,KAAK,QACLiH,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAa5F,MAAM,GACrCmD,SAAUpM,KAAK2O,2BAIrB,SAAC,KAAO,CAAC+B,OAAK,SAMlB,2BACGjB,GACD,UAAC,KAAG,CAACkB,QAAQ,QAAQzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,WACjD,SAAC,KAAG,CAAC3P,KAAM,EAAE,sBACb,SAAC,KAAG,CAACA,KAAM,GAAG,UACZ,SAAC,KAAM,CACL4P,OAAO,EACPC,IAAK,EACLC,IAAK,EACLC,KAAM,IACN9P,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,yBAGnB,SAAC,KAAG,CAACvN,KAAM,EAAE,UACX,SAAC,KAAW,CACV6P,IAAK,EACLC,IAAK,EACLxP,KAAK,QACLyP,KAAM,GACNxI,MAAO,CAAEoB,MAAO,QAChB1I,MAAOlB,KAAKiH,MAAM4H,aAAaC,QAC/B1C,SAAUpM,KAAKwO,4BAIrB,SAAC,KAAG,CAACmC,QAAQ,QAAQzE,MAAM,SAAS0E,OAAQ,CAAC,EAAG,GAAG,UACjD,SAAC,KAAQ,CACP1P,MAAOlB,KAAKiH,MAAM4H,aAAa8M,YAC/BvP,SAAU,SAAC7B,GAAK,OACd,EAAKuR,sBAAsBvR,EAAMwR,OAAOzR,QAAQ,EAAC,mCAO7D,KAAC,EA3QoB,CAASvI,EAAAA,W,iGCiJhC,SAnK+B,SAAH,GAmBR,IAlBlBuD,EAAQ,EAARA,SACA8G,EAAQ,EAARA,SACA4P,EAAqB,EAArBA,sBACAhN,EAAa,EAAbA,cACAiN,EAAuB,EAAvBA,wBACGhc,GAAK,cAcAic,EAAU5W,EAAV4W,MASFC,EAAWD,EAAME,OAAM,SAACtX,GAAU,OACtCA,EAAKuX,KAAKD,OAAM,SAAC5b,GAAW,OAAKwb,EAAsBpP,IAAIpM,EAAI,GAAC,IAE5D8b,GACHH,GACDD,EAAMK,MAAK,SAACzX,GAAU,OACpBA,EAAKuX,KAAKE,MAAK,SAAC/b,GAAW,OAAKwb,EAAsBpP,IAAIpM,EAAI,GAAC,IAG7Dgc,EAA0B,SAAH,GAMhB,IALX1X,EAAI,EAAJA,KACA6F,EAAS,EAATA,UAKA7F,EAAKuX,KAAKtR,SAAQ,SAACvK,GACjB4L,EAAS,CAAE3B,OAAQjK,EAAKmK,UAAAA,GAC1B,GACF,EAEA,OACE,SAAC,UAAS,gBACRnC,MAAO,CAAEC,OAAQ,OAAQ0D,YAAa,QAClClM,GAAK,cAET,SAAC,KAAK,CAACiM,MAAM,QAAO,UAClB,iBAAK1D,MAAO,CAAE2D,YAAa,OAAQlD,MAAO,SAAU,WAClD,SAAC,KAAK,CAACmE,UAAU,WAAWlB,MAAM,MAAK,UACrC,UAAC,KAAQ,CACPoQ,cAAeA,EACfhS,QAAS6R,EACT/P,SAvCkB,SAACqQ,GAC7B,IAAM9R,EAAY8R,EAAEV,OAAOzR,QAC3B4R,EAAMnR,SAAQ,SAACjG,GACb0X,EAAwB,CAAE1X,KAAAA,EAAM6F,UAAAA,GAClC,GACF,EAkC4C,WAEhC,SAAC,KAAO,CACNvJ,MAAK,UAAKkE,EAAS4F,UAAS,YAAI5F,EAASiL,wBACzCmM,gBAAiB,EAAE,SAElBpX,EAAS8F,eAEZ,SAAC,KAAO,CACNiC,UAAU,UACVE,aAAc,CAAE3D,MAAO,SACvBxI,MAAM,mBACNkM,QAAS,kBACP,SAAC,GAAiB,CAChBsO,qBAAsBM,EAAMS,QAC1B,SAACC,EAAe9X,GACd,MAAM,GAAN,gBAAW8X,IAAG,QAAK9X,EAAKuX,MAC1B,GACA,IAEFrN,cAAeA,EACfD,aACEkN,EAAwBC,EAAM,GAAGG,KAAK,KAExC,EACF,UAEF,SAAC,KAAM,CACLvX,KAAK,UACL0I,MAAM,SACNhF,MAAO,CAAEqU,WAAY,QACrB1b,MAAM,SAACsM,GAAA,EAAe,aAK7ByO,EAAM7b,KAAI,SAACyE,GACV,IAAQsG,EACNtG,EADMsG,YAAamF,EACnBzL,EADmByL,uBAAwBrF,EAC3CpG,EAD2CoG,UAAWmR,EACtDvX,EADsDuX,KAElDS,EAAuB1R,EAAY/E,MAAM,EAAG,IAC5C0W,EAAqBD,IAAyB1R,EAAcA,EAAW,UAAM0R,EAAoB,OACjGE,EAAYX,EAAKD,OAAM,SAAC5b,GAAW,OACvCwb,EAAsBpP,IAAIpM,EAAI,IAE1Byc,GACHD,GACDX,EAAKE,MAAK,SAAC/b,GAAW,OAAKwb,EAAsBpP,IAAIpM,EAAI,IAC3D,OACE,iBAEEgI,MAAO,CACL2D,YAAa,OACbvC,MAAO,OACPf,QAAS,OACTqU,cAAe,OACf,WAEF,SAAC,KAAQ,CACPZ,cAAeW,EACf3S,QAAS0S,EACT5Q,SAAU,SAACqQ,GAAM,OACfD,EAAwB,CACtB1X,KAAAA,EACA6F,UAAW8R,EAAEV,OAAOzR,SACpB,KAEN,iBAAK9B,MAAO,CAAE2D,YAAa,OAAQ,WACjC,SAAC,KAAO,CACN/K,MAAK,UAAK8J,EAAS,YAAIqF,GACvBmM,gBAAiB,EAAE,SAElBK,KAEH,SAAC,KAAO,CACN1P,UAAU,UACVE,aAAc,CAAE3D,MAAO,SACvBxI,MAAM,mBACNkM,QAAS,kBACP,SAAC,GAAiB,CAChBsO,qBAAsB9W,EAAKuX,KAC3BrN,cAAeA,EACfD,aAAckN,EAAwBnX,EAAKuX,KAAK,KAChD,EACF,UAEF,SAAC,KAAM,CACLvX,KAAK,UACL0I,MAAM,SACNhF,MAAO,CAAEqU,WAAY,QACrB1b,MAAM,SAACsM,GAAA,EAAe,aAGtB,UA3CE3I,EAAKyL,uBAAsB,YAAIzL,EAAKsG,aA8ClD,WAKV,EC1DA,SAzC+B,SAAH,GAkBR,IAjBlBkK,EAAW,EAAXA,YACAlJ,EAAQ,EAARA,SACA4C,EAAa,EAAbA,cACAiN,EAAuB,EAAvBA,wBACAD,EAAqB,EAArBA,sBAcMmB,EAjEc,SAAC7H,GACrB,IAAM6H,EAAwB,OAAX7H,QAAW,IAAXA,OAAW,EAAXA,EAAaqH,QAC9B,SACES,EACAC,GACI,IAAD,IACK/X,EAAwB+X,EAAxB/X,SAAUR,EAAcuY,EAAdvY,KAAMtE,EAAQ6c,EAAR7c,IAClB8c,EAAchY,EAAS8F,YACvBmS,EAAUzY,EAAKsG,YAEfoS,EAAwC,QAA7B,EAAGJ,EAAcE,UAAY,2BACzChY,GAAQ,IACX4W,MAAO,CAAC,IAEJuB,EAAoC,QAA7B,EAAGD,EAAYtB,MAAMqB,UAAQ,2BACrCzY,GAAI,IACPuX,KAAM,KAGR,OAAO,kBACFe,GAAa,eACfE,GAAW,kBACPE,GAAW,IACdtB,OAAM,kBACDsB,EAAYtB,OAAK,eACnBqB,GAAO,kBAAQE,GAAO,IAAEpB,KAAK,GAAD,gBAAMoB,EAAQpB,MAAI,CAAE7b,WAIzD,GACA,CAAC,GAaH,OATAkd,OAAOC,KAAKR,GAAYpS,SAAQ,SAACuS,GAC/B,IACQpB,EADSiB,EAAWG,GACpBpB,MACF0B,EAAWF,OAAOC,KAAKzB,GAAO7b,KAClC,SAACkd,GAAe,OAAKrB,EAAMqB,EAAQ,IAErCJ,EAAWG,GAAapB,MAAQ0B,CAClC,IAEOT,CACT,CAqB+CU,CAAcvI,GAE3D,GAAuC,IAAnCoI,OAAOC,KAAKR,GAAY3V,OAC1B,OAAO,wBAGT,IAAMrH,EAAQud,OAAOC,KAAKR,GAAY9c,KAAI,SAACid,GACzC,IAAMhY,EAAW6X,EAAWG,GAC5B,OACE,SAAC,GAAsB,CAErBhY,SAAUA,EACV8G,SAAUA,EACV4C,cAAeA,EACfiN,wBAAyBA,EACzBD,sBAAuBA,GALO,KAAzB1W,EAAS8F,YAAqB9F,EAAS8F,YAAW,mBAAekS,GAQ5E,IAEA,OAAO,SAAC,IAAI,CAAC7b,YAAY,EAAM,SAAEtB,GACnC,ECjEA,SA3C0B,SAAH,GAQH,IAPlB2d,EAAS,EAATA,UACAC,EAAS,EAATA,UACAvR,EAAI,EAAJA,KAMA,OACE,gBACEhE,MAAO,CACLwV,SAAU,QACVC,IAAI,GAAD,OAAKF,EAAS,MACjBG,KAAK,GAAD,OAAKJ,EAAS,MAClBK,gBAAiB,4BACjB/M,SAAU,QACVgN,UAAW,OACXnE,QAAS,OACTlZ,WAAY,OACZsd,cAAe,QACf,SAED7R,EAAKnM,KAAI,SAACqK,EAAKjB,GACd,IAAMrJ,EAAasK,EAAItK,WACvB,OACE,4BACE,mCAAWsK,EAAInK,SACdH,EAAWC,KAAI,SAACie,GACf,OACE,2BACGA,EAAK3d,KAAI,MAAG,iBAAM6H,MAAO,CAAEzH,WAAY,KAAM,SAAEud,EAAKpd,UAD7Cod,EAAK3d,KAAO+J,EAAI6T,OAI9B,MARQ7T,EAAI6T,OAYlB,KAGN,ECrCO,IAAMC,GAAuB,SAAC9T,GACnC,IAAQlK,EAAqBkK,EAArBlK,IAAKsK,EAAgBJ,EAAhBI,YAEP2T,EAAS,CACbnZ,SAAU,CACR4F,UAAW,YACXE,YAAa,YACbmF,uBAAwB,aAE1BzL,KAAM,CACJoG,UAAW,YACXE,YAAa,YACbmF,uBAAwB,cAuB5B,OAnBAzF,EAAYC,SAAQ,SAClBzK,GAKA,IAAM0K,EAAY1K,EAAK2K,wBAAwB,GAAGC,UAClD,GAAI5K,EAAK+K,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAC1D,IACMpK,EADkBZ,EACMkL,oBAAoB,GAEhC,cAAdR,EACFyT,EAAOnZ,UAAQ,UAAQpE,GACA,WAAd8J,IACTyT,EAAO3Z,MAAI,UAAQ5D,GAEvB,CACF,KAEO,kBACFud,GAAM,IACTje,IAAAA,GAEJ,ECgJA,SA3KuB,SAAH,GAYmE,IAAD,IAXpFgM,EAAI,EAAJA,KACAxK,EAAQ,EAARA,SACA0c,EAAI,EAAJA,KACAC,EAAG,EAAHA,IACAlS,EAAc,EAAdA,eAUMmS,EAAW5c,EAASA,EAASwF,OAAS,IAKK,QAA7C,EAAqC,QAArC,EAACoX,EAASpI,mCAA2B,aAApC,EAAsChP,cAAM,QAAI,GAAK,GACxDY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,4DAIN,IAGIia,EAEoB,IALlBC,EAAcF,EAASpI,4BAA4B,IAEzD1Q,QAAQiZ,MAAM,mCAGDhf,IAAT2e,GACFG,EAAW,IAAIG,EAAAA,GAAAA,UAAAA,oCAAiD,CAC9Dre,KAAe,QAAX,EAAE+d,EAAK/d,YAAI,QAAI,YACnBse,UAAqB,QAAZ,EAAEP,EAAKQ,aAAK,QAAI,MAG3BpZ,QAAQD,KAAK,iCACbgZ,EAAW,IAAIG,EAAAA,GAAAA,UAAAA,oCAAiD,CAC9Dre,KAAM,eAIV,IAAMwe,EAAqB,IAAIH,EAAAA,GAAAA,UAAAA,mBAAgC,CAC7DI,sBAAuB,IAAIJ,EAAAA,GAAAA,UAAAA,gBAA6B,CACtD/L,aAAc,IAAI+L,EAAAA,GAAAA,OAAAA,aAAuB,CACvC9d,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,WAEX6P,8BAA+BR,IAEjCS,sBAAuB,IAAIN,EAAAA,GAAAA,UAAAA,gBAA6B,CACtD/L,aAAc,IAAI+L,EAAAA,GAAAA,OAAAA,aAAuB,CACvC9d,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,WAEX6P,8BAA+B,IAAIL,EAAAA,GAAAA,UAAAA,oCAAiD,CAClFxe,IAAKme,EAAIne,IACT+e,iBAAkB,8BAClBC,UAAWb,EAAIhe,SAGnB8e,eAAgB,IAAIT,EAAAA,GAAAA,UAAAA,eAA4B,CAC9CU,aAAc,IAAIV,EAAAA,GAAAA,OAAAA,aAAuB,CACvC9d,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,aAEXmQ,4BAA6B,IAAIX,EAAAA,GAAAA,UAAAA,uBAAoC,CACnExe,IAAKse,EAAYvK,YACjB3J,WAAYkU,EAAYtK,mBACxB9L,oBAAqBkW,EAAShX,0BAKpC9B,QAAQiZ,MAAM,+BAEd,IADA,IAAMa,EAA4D,GACzDnW,EAAI,EAAGA,EAAI+C,EAAKhF,OAAQiC,IAAK,CAAC,IAAD,EAC9BiB,EAAM8B,EAAK/C,GACjB,GAAKgD,EAAeG,IAAIlC,EAAIlK,KAA5B,CAIA,IAAIqf,EAAcnV,EAAII,YAAYnE,MAAK,SAACrG,GACtC,MAAqD,WAA9CA,EAAK2K,wBAAwB,GAAGC,SACzC,SAEoBnL,IAAhB8f,GACFzX,GAAAA,QACElD,EACA,IAAIL,EACFD,EAA+B,0CAAD,OACYiC,OAAO6D,EAAIlK,KAAI,OAO/D,IAAMsf,EAAqB,IAAId,EAAAA,GAAAA,UAAAA,mBAAgC,CAC7Dxe,IAA+B,QAA5B,EAAEkK,EAAIqJ,WAAWC,mBAAW,QAAItJ,EAAIlK,IACvCoK,WAAW,QAAD,OAAUnB,EAAI,KAqBpBkC,EAlBQ,IAAIqT,EAAAA,GAAAA,UAAAA,+CAA4D,CAC5Ec,mBAAAA,EACAC,iBAAkB,IAAIf,EAAAA,GAAAA,aAAAA,cAA8B,CAClDgB,YAAatV,EAAI4I,SAAS0M,YAC1BC,YAAavV,EAAI4I,SAAS2M,YAC1BzM,oBAAqB9I,EAAI4I,SAASE,sBAEpCqM,YAAa,IAAIb,EAAAA,GAAAA,OAAAA,aAAuB,CACtC9d,MAAO2e,EAAYrU,oBAAoB,GAAGN,UAC1CqE,iBAAkBsQ,EAAYrU,oBAAoB,GAAG+E,uBACrDf,QAASqQ,EAAYrU,oBAAoB,GAAGJ,cAE9C8U,uBAAwBxV,EAAII,YAAYqV,QAAO,SAAC7f,GAC9C,MAAqD,WAA9CA,EAAK2K,wBAAwB,GAAGC,SACzC,IACAS,aAAcjB,EAAIiB,eAIpBA,EAAa,GAAGyU,wBAA0B,CACxC,CACEC,gBAAiB,OACjBC,mBAAoB,SAGxBV,EAAoB1d,KAAI,MAAxB0d,GAAmB,QAASjU,GAhD5B,CAiDF,CAEA7F,QAAQiZ,MAAM,8CACd,IAAMwB,EAAoB,IAAIvB,EAAAA,GAAAA,UAAAA,kBAA+B,CAC3DwB,oCAAqC,IAAIxB,EAAAA,GAAAA,UAAAA,oCACvC,CAAC,GAEHG,mBAAAA,EACAsB,kBAAmB,IAAIzB,EAAAA,GAAAA,OAAAA,aAAuB,CAC5C9d,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,wBAEXoQ,oBAAAA,IAgBF,OAbA9Z,QAAQ6B,KAAK,uCAaN,CACL+Y,sBAAsB,EACtBC,gBAdc,IAAI3B,EAAAA,GAAAA,UAAAA,kBAA+B,CACjD1R,QAASiT,EAAkB,GAC3BK,SAAU,CAAChC,GACXtV,kBAAmBmO,EAAAA,GAAAA,oBAAAA,MACnBoJ,aAAc,EACdC,kBAAmB,aACnBC,eAAgBtJ,EAAAA,GAAAA,oBAAAA,MAChBuJ,eAAgB,EAChBC,aAAc,8BACdC,sBAAkBnhB,IAOtB,ECjIA,IAAMohB,GAAqC,CAAC,IAAK,IAAK,GAChDC,GAAmC,CAAC,IAAK,IAAK,EAAG,IAKjDC,GAAkC,CAAC,EAAG,EAAG,GACzCC,GAAmC,CACvC,CAAC,IAAK,EAAG,GACT,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,EAAG,KACP,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,EAAG,IASHC,GAAY,SAAChP,GAMjB,IAAMiP,EAAejP,EAAQhC,uBACvBkR,EAAYlP,EAAQrH,UAC1B,MAAM,GAAN,OAAUsW,EAAY,YAAIC,EAC5B,EAEMC,GAAa,SAAChX,GAClB,IAAMmI,EAAUP,GAAuB,CACrChF,QAAS5C,EAAII,YACbnK,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPsO,QAAS,UACTD,iBAAkB,UAGtB,GAAuB,IAAnBsD,EAAQrL,OAAZ,CAIA,IACMma,EADU9O,EAAQ,GACIrH,oBAAoB,GAChD,OAAO+V,GAAUI,EAHjB,CAFE7b,QAAQD,KAAK,4BAAD,OAA6B6E,EAAIlK,KAMjD,EAEMohB,GAAgB,SAACC,EAAgBC,GACrC,GAAID,EAAEvO,SAAS0M,cAAgB8B,EAAExO,SAAS0M,YACxC,OAAO,EAET,GAAI6B,EAAEvO,SAASE,sBAAwBsO,EAAExO,SAASE,oBAChD,OAAO,EAET,GAAIqO,EAAEvO,SAAS2M,YAAYzY,SAAWsa,EAAExO,SAAS2M,YAAYzY,OAC3D,OAAO,EAIT,IADA,IACSiC,EAAI,EAAGA,EAAIoY,EAAEvO,SAAS2M,YAAYzY,SAAUiC,EACnD,GAA+B,UAA3BoY,EAAEvO,SAAS0M,YAAyB,CACtC,IAAM+B,EAAKF,EAAEvO,SACP0O,EAAKF,EAAExO,SAGb,GAFWyO,EAAG9B,YAAYxW,GAAGsC,YALhB,KAMFiW,EAAG/B,YAAYxW,GAAGsC,YANhB,GAQX,OAAO,CAEX,MAGE,IAFA,IAAMgW,EAAKF,EAAEvO,SACP0O,EAAKF,EAAExO,SACJ2O,EAAI,EAAGA,EAAIF,EAAG9B,YAAYxW,GAAGjC,SAAUya,EAAG,CAGjD,GAFWF,EAAG9B,YAAYxW,GAAGwY,GAAGlW,YAdrB,KAeAiW,EAAG/B,YAAYxW,GAAGwY,GAAGlW,YAfrB,GAiBT,OAAO,CAEX,CAGJ,OAAO,CACT,EAEMmW,GAAkB,SAAC1Z,GAUvB,IAAM2Z,EAAS,CACblZ,MAAOkY,GACPvX,MAjGqC,GAmGnB,MAAhBpB,EAAM2Z,SACkB,MAAtB3Z,EAAM2Z,OAAOlZ,QACfkZ,EAAOlZ,MAAQT,EAAM2Z,OAAOlZ,OAEJ,MAAtBT,EAAM2Z,OAAOvY,QACfuY,EAAOvY,MAAQpB,EAAM2Z,OAAOvY,QAGhC,IAAMwY,EAAO,CACXnZ,MAAOmY,IAOT,OALkB,MAAd5Y,EAAM4Z,MACgB,MAApB5Z,EAAM4Z,KAAKnZ,QACbmZ,EAAKnZ,MAAQT,EAAM4Z,KAAKnZ,OAGrB,CACLkZ,OAAAA,EACAC,KAAAA,EACAC,MAAO,CACLC,OAAQ,CACNC,OAAwB,MAAhB/Z,EAAM+Z,OACV/Z,EAAM+Z,OACNxK,KAAKhH,IAAI,EAAIoR,EAAOvY,MAAO,GAC/BuY,OAAAA,EACAC,KAAAA,IAIR,EAEMI,GAAoB,SAAH,GAOjB,IAPuBza,EAAO,EAAPA,QAAST,EAAK,EAALA,MAAOmb,EAAO,EAAPA,QAQ3C3c,QAAQ6B,KACN,iDAAgD,WAC5CL,EAAMob,aAAa,GAAG9a,oBAAmB,MAE/C,IACE,IAaI+a,EAbEC,EAAe,IAAI/a,EAAAA,OAAAA,kBAA6B,CACpDgb,cAAe9a,EACf/F,SAAUsF,EAAMob,aAChBI,SAAU,CAAC,WAAY,YACvBL,QAASA,EACTta,iBAAkB,SAAC3B,GACjB4B,GAAAA,QACElD,EAAmCsB,EAEvC,IAwBF,OAtBAoc,EAAaG,0BAA0B,CAAC,GAGpCzb,EAAM0b,YAAYxb,OAAS,IAC7B1B,QAAQ6B,KACN,+CAA8C,WAC1CL,EAAM0b,YAAY,GAAGpb,oBAAmB,MAE9C+a,EAAc,IAAI9a,EAAAA,OAAAA,iBAA4B,CAC5CC,OAAQC,EAAQ/D,EAAegE,iCAC/BhG,SAAUsF,EAAM0b,YAAY,GAC5B9a,aAAc,EACduN,YAAa,WACbtN,iBAAkB,SAAC3B,GACjB4B,GAAAA,QACElD,EACAsB,EAEJ,KAIG,CAAEoc,aAAAA,EAAcD,YAAAA,EAWzB,CAVE,MAAOnc,GASP,MAPA4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,iCAGE4B,CACR,CACF,EAMMyc,GAAqB,SACzBrQ,GAEA,IAAMsQ,EAActQ,EAAOwN,wBAC3B,GAAI8C,EAAY1b,OAAS,GAEX,SADA0b,EAAY,GAAG5C,mBAEzB,OAAO,EAGX,OAAO,CACT,EAMM6C,GAA4B,SAChCvQ,GAEA,IAAMzS,EAAQmS,GAAuB,CACnChF,QAASsF,EAAOE,gBAChBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,oBAGb,GAAqB,IAAjBrP,EAAMqH,OACR,OAAO,EAET,IACM4b,EADmBjjB,EAAM,GACYqL,oBAAoB,GACzD6X,EAAmB,IAAI/X,EAAAA,GAAAA,OAAAA,aAA6B,CACxDpK,MAAOkiB,EAAkBlY,UACzBsE,QAAS4T,EAAkBhY,YAC3BmE,iBAAkB6T,EAAkB7S,yBAEhC+S,EAAkB,IAAIhY,EAAAA,GAAAA,OAAAA,aAA6B,CACvDpK,MAAO,SACPsO,QAAS,WACTD,iBAAkB,QAEpB,QAAI8T,EAAiBvM,OAAOwM,EAI9B,EAKMC,GAA0B,SAC9B3Q,GAEA,IAAMjH,EAAe2G,GAAuB,CAC1ChF,QAASsF,EAAOE,gBAChBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,2BAGb,GAA4B,IAAxB7D,EAAanE,OACf,OAAO,EAET,IAAMc,EAAYqD,EAAa,GACzB6X,EAAoBlR,GAAuB,CAC/ChF,QAAShF,EAAUwK,gBACnBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,wBAITiU,GAAc,EAkBlB,OAjBAD,EAAkBzY,SAAQ,SAACmI,GACzB,IACMwQ,EAAUpR,GAAuB,CACrChF,QAFgB4F,EAEGJ,gBACnBnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPqO,iBAAkB,MAClBC,QAAS,mBAGTkU,EAAQlc,OAAS,GACfkc,EAAQ,GAAGrY,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,WAC3BmY,GAAc,EAGpB,IAEOA,CACT,EA6FME,GAAW,0CA6Df,WAAa1jB,GAA0B,IAAD,mBACpC,cAAMA,IA7DS2jB,eAAiD,GAAE,EAEnDC,kBAA4D,CAAC,EAAC,EAE9DlY,aAA8B,GAAE,EAEhCmY,oBAAmD,CAAC,EAAC,EAErDC,uBAAiB,IAEjBC,sBAAgB,IAEzBpB,kBAAY,IAEZD,iBAAW,IAEXsB,YAAc,GAAE,EAEhBC,UAAY,CAAC,EAAG,GAAE,EAETC,SAAW,IAAIC,IAAa,EAE5BC,gBAA8C,CAC7DlC,OAAQ,CACNlZ,MAAOkY,GACPvX,MAxZmC,GA0ZrCwY,KAAM,CACJnZ,MAAOmY,IAETiB,MAAO,CACLC,OAAQ,CACNF,KAAM,CACJnZ,MAAOkY,IAEToB,OAja2B,KAoahC,EAEO+B,UAAyD,CAAC,EAAC,EAE3DrI,wBAEJ,CAAC,EAAC,EAEWsI,qBAAiC,CAAC,EAAG,IAAK,KAAI,EAC9CC,mBAA+B,CAAC,IAAK,IAAK,KAAI,EAE9CC,iBAA+C,CAC9DtC,OAAQ,CAAElZ,MAAM,GAAD,gBAAM,EAAKsb,sBAAoB,CAAE,IAAI3a,MAAO,GAC3DwY,KAAM,CAAEnZ,MAAM,GAAD,gBAAM,EAAKub,oBAAkB,CAAE,MAC5CnC,MAAO,CACLC,OAAQ,CACNC,OAAQ,EACRH,KAAM,CAAEnZ,MAAM,GAAD,gBAAM,EAAKsb,sBAAoB,CAAE,QAGnD,EA4NDG,uBAAyB,WACvB5e,QAAQ6B,KAAK,2CACb,IAAMG,EAAS,EAAK7H,MAAM8H,QACxB/D,EAAe2gB,sCAEjB7c,EAAO8c,mBAAmB,CACxBC,iBAAkB,EAAK5kB,MAAM4kB,iBAC7BC,YAAa,CACXC,SAAU,QAEXC,MAAK,SAACC,GACiB,MAApBA,IACFA,EAAmB,IAErBA,EAAiBla,SAAQ,SAACma,EAAa3kB,GACrC,IACM4kB,EADctd,EAAAA,SAAAA,eAA4Bqd,GAAxChQ,QAERpP,QAAQ6B,KAAK,yBAAD,OAA0Bwd,EAASC,eAAc,MAC7Dtd,EAAOud,iBAAiB,CACtBR,iBAAkB,EAAK5kB,MAAM4kB,iBAC7Bvb,kBAAmB6b,EAAS5L,kBAC5BwH,eAAgBoE,EAASC,iBACxBJ,MAAK,SAACM,GACP,IAAM7N,EAAOnM,EAAAA,GAAAA,aAAAA,SAAiCga,GACtCpQ,EAAYrN,EAAAA,SAAAA,eAA4B4P,EAAK8N,MAA7CrQ,QACR,GAAI,EAAKjV,MAAMqH,MAAMke,0BAA2B,CAC9C,IAAMC,EACJvQ,EAIEwQ,GAAY,EAChBD,EAAkBE,yBAAyB5a,SAAQ,SAAA6a,GACjDF,EAAY,EAAKzlB,MAAMqH,MAAM6B,mBAAmBjD,SAC9C0f,EAAarM,kBAEjB,IAEImM,IACF5f,QAAQ6B,KACN,yDAAwD,WACpD8d,EAAkBL,eAAc,OAG1B,IAAV7kB,GAC2C,MAA3C,EAAKN,MAAM4lB,8BAKTJ,EAAkBL,iBAClB,EAAKnlB,MAAM4lB,+BAJb,EAAKC,qBAAqBL,GAS5B,EAAKpe,UAAS,SAAAJ,GACZ,IAAMoT,EAGF,CAAC,EAKL,OAJApT,EAAM8e,mBAAmBhb,SAAQ,SAAAoa,GAC/B9K,EAAQ8K,EAASC,gBAAkBD,CACrC,IACA9K,EAAQoL,EAAkBL,gBAAkBK,EACrC,CAAEM,mBAAoBrI,OAAO1Q,OAAOqN,GAC7C,IAEJ,MACEvU,QAAQ6B,KACN,qCAA8Bwd,EAASC,eAAc,OAArD,qFAKN,IAAGY,OAAM,SAACxf,GAER4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,2CAGJkB,QAAQU,MACN,qCAAoC,2BAChB2e,EAASC,eAAc,MAAI,qBACjCD,EAAS5L,kBAAiB,MAAI,oBAC/B,EAAKtZ,MAAM4kB,iBAAgB,OACxCre,EAEJ,GACF,GACF,IAAGwf,OAAM,SAACxf,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,0CAGN,GACF,EAAC,EAKDkhB,qBAAuB,SACrBL,GAEA,IAAMtM,EAAe,EAAKyJ,aAAaqD,qBACvCngB,QAAQ6B,KAAK,sCAAD,OAC4B8d,EAAkBL,eAAc,MAExE,IAAMc,EAMF,CAAC,EACL/M,EAAapO,SAAQ,SAAAuM,GAEnB,IAAM1M,EAAa0M,EAAY1M,WAC/B,EAAKgY,aAAauD,gBAAgBvb,GAClC,EAAKgY,aAAawD,sBAAsBxb,GACxC,IAAMpC,EAAQ,EAAKoa,aAAayD,2BAA2Bzb,GAC3D,EAAKgY,aAAa0D,oBAAoB1b,EAAYpC,GAElDid,EAAkBE,yBAAyB5a,SAAQ,SAAA6a,GAMjD,IAAIW,EAAmBX,EAAaY,gCACXzmB,IAArBwmB,IACFA,EAAmBX,EAAaa,8BAET1mB,IAArBwmB,GAGJA,EAAiBxb,SAAQ,SAAA2b,GAIvB,GAHqBpP,EAAYqP,gBAAgBzgB,SAC/CwgB,EAAUE,0BAEM,CAChB,IAAIC,EA4DA3X,EA3DJ,GAAoD,MAAhD0W,EAAakB,gCAAyC,CACxD,IAAMC,EAAYnB,EAAakB,gCAAgC,GAC/DD,EAAkB,IAAIhf,EAAAA,MAAAA,wBAAkC,CACtDrH,IAC0C,MAAxCumB,EAAUC,2BACND,EAAUC,2BACV,GAENC,cACEF,EAAUG,qCACZC,gBACEJ,EAAUK,uCACZC,eACEN,EAAUO,sCACZC,QAC+C,MAA5CR,EAAUS,+BACP,IAAIC,YACJV,EAAUS,qCAEVznB,EAEN2nB,UACiD,MAA9CX,EAAUY,iCACP,IAAIF,YACJV,EAAUY,uCAEV5nB,EAEN6nB,SACgD,MAA7Cb,EAAUc,gCACP,IAAIJ,YACJV,EAAUc,sCAEV9nB,EAEN+nB,iBACwD,MAArDf,EAAUgB,wCACP,IAAIN,YACJV,EAAUgB,8CAEVhoB,EAENioB,mBAC0D,MAAvDjB,EAAUkB,0CACP,IAAIR,YACJV,EAAUkB,gDAEVloB,EAENmoB,kBACyD,MAAtDnB,EAAUoB,yCACP,IAAIV,YACJV,EAAUoB,+CAEVpoB,GAGV,CAGA,GAA2C,MAAvC6lB,EAAawC,uBAAgC,CAC/C,IAAMC,EAAazC,EAAawC,uBAAuB,GACjDE,EAAeD,EAAWE,aAC1BC,EAAcH,EAAWI,YAC/BvZ,EAAc,CACZoZ,EAA6B,GAAdE,EACfF,EAA6B,GAAdE,EAEnB,CAEAtC,EAAkBtb,GAAc,CAC9BkE,QAAS,EACTqI,wBAAyB0P,EACzB3X,YAAaA,EAEjB,CACF,GACF,GACF,IAEA,IAAMwZ,EAA8C,IAAItE,IACxD1G,OAAOC,KAAKuI,GAAmBnb,SAAQ,SAAAH,GACrC,IAAMqE,EAAeiX,EAAkBtb,GACnB,MAAhBqE,GACF,EAAK2T,aAAa0D,oBAAoB1b,EAAYqE,GAClD,EAAK2T,aAAa+F,oBAAoB/d,GACtC,EAAKgY,aAAagG,gBAAgBhe,GAClC8d,EAA+BG,IAAIje,KAEnC,EAAKgY,aAAauD,gBAAgBvb,GAClC,EAAKgY,aAAawD,sBAAsBxb,GAE5C,IACA,IAAMke,EAAe,IAAIC,gBAAgB,EAAK9oB,MAAMob,SAAS2N,QAC7DF,EAAaG,IAAI,QAASxD,EAAkBL,gBAC5C,EAAKnlB,MAAMsb,SACT,CACE2N,SAAU,EAAKjpB,MAAMob,SAAS6N,SAC9BF,OAAQF,EAAa7e,YAEvB,CAAEkf,SAAS,IAEb,EAAK9hB,UAAS,SAAAJ,GAAK,MAAK,CACtB2S,6BAA8B8O,EAC9B7O,8BAA+B6O,EAC/B7C,6BAA8BJ,EAAkBL,eACjD,GACH,EAAC,EAEDgE,YAAc,SAACtf,GACb,OAAW,MAAPA,EACK,EAAKua,qBAEctkB,IAAxB,EAAKukB,UAAUxa,GACV,EAAKwa,UAAUxa,GAEjB,EAAKua,eACd,EAAC,EAEDgF,mBAAqB,SAACC,GACpBxjB,QAAQiZ,MAAM,2BAMd,GAL0B,kCAKrBuK,EAA2CC,YAC9B,EAAK3G,aAAa4G,aAC1Bze,SAAQ,SAACL,GACf,EAAK+e,iCAAiC,CAAEhf,OAAQC,EAAIlK,IAAKmK,WAAW,GACtE,IACA7E,QAAQiZ,MAAM,oCACT,GAVgC,kCAU3BuK,EAA2CC,YAAgD,CACzE,EAAK3G,aAAa8G,yBAC1B3e,SAAQ,SAACqD,GAC3B,EAAKub,sCAAsC,CAAExb,mBAAoBC,EAAgB5N,IAAKmK,WAAW,GACnG,IACA7E,QAAQiZ,MAAM,4CAChB,MAAO,GAfc,iCAeTuK,EAA2CC,YAA8B,CAC/D,EAAK3G,aAAagH,iBAC1B7e,SAAQ,SAAC6P,GACnB,EAAKiP,8BAA8B,CAAElP,WAAYC,EAAQpa,IAAKmK,WAAW,GAC3E,IACA7E,QAAQiZ,MAAM,uBAChB,MAAO,GApBe,kCAoBVuK,EAA2CC,YAA+B,CACvD,EAAK3G,aAAakH,0BAC1B/e,SAAQ,SAACgf,GAC5B,EAAKC,8BAA8B,CAAE5P,WAAY2P,EAAiBvpB,IAAKmK,WAAW,GACpF,IACA7E,QAAQiZ,MAAM,yBAChB,MAAO,GAzBa,kCAyBRuK,EAA2CC,YAA6B,CAC1D,EAAK3G,aAAaqD,qBAC1Blb,SAAQ,SAACuM,GACvB,EAAK2S,kCAAkC,CAAE1S,sBAAuBD,EAAY1M,WAAYD,WAAW,GACrG,IACA7E,QAAQiZ,MAAM,uBAChB,CACF,EAAC,EAmJDmL,qBAAmB,uBAAG,mGACP,IAAIC,SAAc,SAACC,EAASC,GACvCvkB,QAAQ6B,KAAK,2DACb,IAAMG,EAAS,EAAK7H,MAAM8H,QACxB/D,EAAesmB,mCAEjBxiB,EAAOyiB,gBAAgB,CACrB1F,iBAAkB,EAAK5kB,MAAM4kB,iBAC7BC,YAAa,CACXC,SAAU,SAEXC,MAAK,SAACwF,GACc,MAAjBA,IACFA,EAAgB,IAElBA,EAAczf,SAAQ,SAAAnE,GACpB,IACM6jB,EADc5iB,EAAAA,SAAAA,eAA4BjB,GAAxCsO,QAERpN,EAAO4iB,uBAAuB,CAC5B7F,iBAAkB,EAAK5kB,MAAM4kB,iBAC7Bvb,kBAAmBmhB,EAAOlR,oBACzByL,MAAK,SAAC2F,GAC6DA,EAAkBtqB,KAAI,SAAA2B,GACxF,OAAO,IAAI6F,EAAAA,SAAAA,gCAA6C,CACtD7F,SAAAA,GAEJ,IAQY+I,SAAQ,SAAA6f,GAClB,IACE,EAAKhI,aAAasH,oBAAoBU,EAYxC,CAXE,MAAOpkB,GAEP4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,4DAIJkB,QAAQU,MAAM,mCAAoCA,EACpD,CACAokB,EAAIhb,wBAAwB7E,SAAQ,SAAAzK,GAClC,IAAM6N,EAAqB7N,EAAKwP,mBAC1B+a,EAAUvqB,EAAKwqB,mCAAmC,GAClDhhB,EAAMyX,GAAUsJ,GAChBriB,EAAQ,EAAK8b,UAAUxa,GAEhB,MAATtB,GAA+B,MAAdA,EAAM4Z,MACzB,EAAKQ,aAAamI,wBAChB5c,EACA,CAAElF,MAAOT,EAAM4Z,KAAKnZ,OAG1B,GACF,IAOA,EAAK+hB,cACLZ,GACF,IAAGpE,OAAM,SAACxf,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,iFAIN,GACF,GACF,IAAGohB,OAAM,SAACxf,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,oEAGJylB,EAAO7jB,aAAiBjC,MAAQiC,EAAQ,IAAIjC,MAAMsC,OAAOL,IAC3D,GACF,IAAE,mFACH,EAODykB,kBAAgB,uBAAG,mGACJ,IAAId,SAAc,SAACC,EAASC,GACvCvkB,QAAQ6B,KAAK,qCACb,IAAMG,EAAS,EAAK7H,MAAM8H,QAAQ/D,EAAeknB,cACjDpjB,EAAOyiB,gBAAgB,CACrB1F,iBAAkB,EAAK5kB,MAAM4kB,iBAC7BC,YAAa,CACXC,SAAU,SAEXC,MAAK,SAACwF,GACc,MAAjBA,IACFA,EAAgB,IAElBA,EAAczf,SAAQ,SAACnE,EAAG6C,GACxB,IACMghB,EADc5iB,EAAAA,SAAAA,eAA4BjB,GAAxCsO,QAERpN,EAAO4iB,uBAAuB,CAC5B7F,iBAAkB,EAAK5kB,MAAM4kB,iBAC7Bvb,kBAAmBmhB,EAAOlR,oBACzByL,MAAK,SAAC2F,GACP,IAAMQ,EAA6C,GAWnD,GAVAR,EAAkB5f,SAAQ,SAAA/I,GACxB,IAAMopB,EAAM,IAAIvjB,EAAAA,SAAAA,aAA0B,CAAE7F,SAAAA,IACtC4c,EAAW,EAAK3e,MAAMqH,MAAMob,aAAa,GAE7C0I,EAAIC,sBAAwBzM,EAASyM,qBACrCD,EAAIxjB,sBAAwBgX,EAAShX,qBAErCujB,EAAcjpB,KAAKkpB,EAEvB,IACID,EAAc3jB,OAAS,EAAG,CAC5B,IACE,EAAKob,aAAa0I,YAAYH,EAWhC,CAVE,MAAO3kB,GAEP4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,sCAGJkB,QAAQU,MAAM,2BAA4BA,EAC5C,CAOA,EAAKwkB,aACP,CAEAZ,GACF,IAAGpE,OAAM,SAACxf,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,2DAGN,GACF,GACF,IAAGohB,OAAM,SAACxf,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,8CAGJylB,EAAO7jB,aAAiBjC,MAAQiC,EAAQ,IAAIjC,MAAMsC,OAAOL,IAC3D,GACF,IAAE,mFACH,EAOD+kB,mBAAiB,uBAAG,mGACL,IAAIpB,SAAc,SAACC,EAASC,GACvCvkB,QAAQ6B,KAAK,uCACb,IAAMG,EAAS,EAAK7H,MAAM8H,QAAQ/D,EAAewnB,gBACjD1jB,EAAOyiB,gBAAgB,CACrB1F,iBAAkB,EAAK5kB,MAAM4kB,iBAC7BC,YAAa,CACXC,SAAU,QAEXC,MAAK,SAACwF,GACc,MAAjBA,IACFA,EAAgB,IAElBA,EAAczf,SAAQ,SAAAnE,GACpB,IACM6jB,EADc5iB,EAAAA,SAAAA,eAA4BjB,GAAxCsO,QAERpN,EAAO4iB,uBAAuB,CAC5B7F,iBAAkB,EAAK5kB,MAAM4kB,iBAC7Bvb,kBAAmBmhB,EAAOlR,oBACzByL,MAAK,SAAC2F,GACP,IAAMc,EAA+C,GAerD,GAdAd,EAAkB5f,SAAQ,SAAA/I,GACxB,IAAM0pB,EAAK,IAAI7jB,EAAAA,SAAAA,cAA2B,CAAE7F,SAAAA,IACtC4c,EAAW,EAAK3e,MAAMqH,MAAMob,aAAa,GAE7CgJ,EAAGL,sBAAwBzM,EAASyM,qBACpCK,EAAG9jB,sBAAwBgX,EAAShX,oBAEpC6jB,EAAevpB,KAAKwpB,GAEpB5lB,QAAQD,KAAK,iCAAD,OACuB6lB,EAAGtG,eAAc,KAGxD,IACIqG,EAAejkB,OAAS,EAAG,CAC7B,IACE,EAAKob,aAAa+I,qBAAqBF,EAWzC,CAVE,MAAOjlB,GAEP4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,uCAGJkB,QAAQU,MAAM,2BAA4BA,EAC5C,CAOA,EAAKwkB,aACP,CACAZ,GACF,IAAGpE,OAAM,SAACxf,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,6DAGN,GACF,GACF,IAAGohB,OAAM,SAACxf,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,gDAGJylB,EAAO7jB,aAAiBjC,MAAQiC,EAAQ,IAAIjC,MAAMsC,OAAOL,IAC3D,GACF,IAAE,mFACH,EAKDolB,kBAAoB,WAClB9lB,QAAQ6B,KAAK,yBACb,EAAKN,SAAS,CACZH,WAAW,EACX6e,mBAAoB,KAGgB,MAAlC,EAAKhC,kBAAkBtc,SACzB,EAAKmb,aAAava,OAAO,CAAEC,UAAW,EAAKyb,kBAAkBtc,UAG5B,MAAjC,EAAKuc,iBAAiBvc,SACF,MAApB,EAAKkb,aAEL,EAAKA,YAAYta,OAAO,CAAEC,UAAW,EAAK0b,iBAAiBvc,UAI7D,EAAKJ,SAAS,CAAEH,WAAW,IAE3B,EAAK2kB,8BACL,EAAKnH,yBAGA,EAAKoH,iBACP9G,MAAK,WAC6B,MAA7B,EAAK/kB,MAAMqpB,gBACb,EAAKD,mBAAmB,EAAKppB,MAAMqpB,eAEvC,IACCtD,OAAM,SAAAxf,GACLV,QAAQU,MAAM,6BAA8BA,EAC9C,IAEG,EAAK0jB,sBACPlF,MAAK,WAC6B,MAA7B,EAAK/kB,MAAMqpB,gBACb,EAAKD,mBAAmB,EAAKppB,MAAMqpB,eAEvC,IACCtD,OAAM,SAAAxf,GACLV,QAAQU,MAAM,mCAAoCA,EACpD,IAEG,EAAKykB,mBACPjG,MAAK,WAC6B,MAA7B,EAAK/kB,MAAMqpB,gBACb,EAAKD,mBAAmB,EAAKppB,MAAMqpB,eAEvC,IACCtD,OAAM,SAAAxf,GACLV,QAAQU,MAAM,+BAAgCA,EAChD,IAEG,EAAK+kB,oBACPvG,MAAK,WAC6B,MAA7B,EAAK/kB,MAAMqpB,gBACb,EAAKD,mBAAmB,EAAKppB,MAAMqpB,eAEvC,IACCtD,OAAM,SAAAxf,GACLV,QAAQU,MAAM,iCAAkCA,EAClD,GACJ,EAAC,EAEDulB,cAAgB,SAACxhB,GAEf,EAAKlD,UAAS,SAAAJ,GAAK,MAAK,CACtBwF,eAAgB,IAAI2X,IAAInd,EAAMwF,gBAC/B,GACH,EAAC,EAEDuf,eAAiB,SAACzhB,GAChBzE,QAAQ6B,KAAK,oBACb,EAAKib,aAAara,SACM,MAApB,EAAKoa,aACP,EAAKA,YAAYpa,QAErB,EAAC,EAED0jB,WAAa,SAAC1hB,GACZ,IAAMG,EAAMH,EAAM2hB,OAAOvnB,QACnBwnB,EAAkB,EAAKllB,MAAMklB,gBAC7BC,EAAsB,EAAKnlB,MAAMmlB,oBACvC,QAAYrsB,IAAR2K,QAAyC3K,IAApBosB,EAA+B,CACtDrmB,QAAQiZ,MAAM,YAAD,OAAarU,EAAIlK,IAAG,MACjC,IAAM6rB,EAAc,IAAI/gB,EAAAA,GAAAA,WAAAA,gBAAoC,CAC1D3K,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPsO,QAAS,UACTD,iBAAkB,QAEpBrO,MAAOirB,EACPG,iBAAkB,aAEpB5hB,EAAI6hB,cAAcF,GAClBD,EAAoBrhB,SAAQ,SAAC6I,GAC3B,IAAMtT,EAAO,IAAIgL,EAAAA,GAAAA,WAAAA,gBAAoC,CACnD3K,KAAMiT,EAAWjT,KACjBO,MAAO0S,EAAW1S,MAClBorB,iBAAkB,aAEpB5hB,EAAI6hB,cAAcjsB,EACpB,IACA,IAAMwJ,EAAMyX,GAAU4K,GAChB3jB,EAAQ,EAAK4gB,YAAYtf,GAC/B,EAAK8Y,aAAa4J,OAAO9hB,EAAKlC,GAC9B,EAAKnB,UAAS,SAAAJ,GACZ,IAAMwF,EAAiBxF,EAAMwF,eAE7B,OADAA,EAAeoc,IAAIne,EAAIlK,KAChB,CAAEiM,eAAAA,EACX,GACF,MACE3G,QAAQiZ,MAAM,sBAAD,OAAuBrU,EAAIlK,IAAG,KAE/C,EAAC,EAEDisB,mBAAqB,SAACliB,GAED,MADCA,EAAM2hB,OAAOvnB,QAE/B,EAAK0C,SAAS,CACZqlB,2BAA2B,IAG7B,EAAKrlB,SAAS,CACZqlB,2BAA2B,GAGjC,EAAC,EAEDC,wBAA0B,SAAC1I,GACzB,IAAMzX,EAAO,EAAKoW,aAAa4G,aAC/B,GAAoB,IAAhBhd,EAAKhF,OAAT,CAKA,IAAMiX,EAASwF,EAAY5jB,KAAI,SAACqK,GAAS,IAAD,EAChCtK,EAAqD,GA8C3D,OA7CoBsK,EAAII,YACZC,SAAQ,SAClBzK,GAKA,IAAM0K,EAAY1K,EAAK2K,wBAAwB,GAAGC,UAC5CC,EAAc7K,EAAK2K,wBAAwB,GAAGG,YAC9CzK,EAAI,UAAMwK,GAChB,GAAI7K,EAAK+K,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CAC1D,IACMC,EADkBjL,EACakL,oBAAoB,GAAGJ,YAE1C,cAAdJ,EACF5K,EAAW8B,KAAK,CACdvB,KAAM,oBACNO,MAAM,GAAD,OAAKqK,KAEW,WAAdP,EACT5K,EAAW8B,KAAK,CACdvB,KAAM,gBACNO,MAAM,GAAD,OAAKqK,KAEW,WAAdP,EACT5K,EAAW8B,KAAK,CACdvB,KAAM,iBACNO,MAAM,GAAD,OAAKqK,KAGZnL,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAM,GAAD,OAAKqK,IAGhB,MAAO,GAAIjL,EAAK+K,YAAcC,EAAAA,GAAAA,WAAAA,WAAAA,KAAqC,CACjE,IAAMG,EAAkBnL,EACxBF,EAAW8B,KAAK,CACdvB,KAAMA,EACNO,MAAOuK,EAAgBC,WAE3B,CACF,IAGO,CAAEnL,OAD8C,QAAzC,EAACiM,EAAKqD,WAAU,SAAC+c,GAAC,OAAKA,EAAEpsB,MAAQkK,EAAIlK,GAAG,WAAC,QAAI,GAAK,EAChD+d,OAAQ7T,EAAIlK,IAAKJ,WAAAA,EACnC,GAAG,IAEH,EAAKiH,SAAS,CAAEwlB,qBAAsBpO,GApDtC,MAFE,EAAKpX,SAAS,CAAEwlB,qBAAsB,IAuD1C,EAAC,EAEDC,iBAAmB,WACjB,EAAK7I,YAAc,EACrB,EAAC,EAED8I,qBAAuB,SAACC,GACtB,GAAc,MAAVA,EACF,MAAO,GAET,IAAMC,EAAO,mBAAO,EAAKhJ,aAAW,CAAE+I,IAEtC,OADkBrnB,MAAMC,KAAK,IAAIwe,IAAI6I,EAAQ5sB,KAAI,SAAAqK,GAAG,OAAIA,EAAIlK,GAAG,MAC9CH,KAAI,SAAAkV,GAAE,OAAI0X,EAAQtmB,MAAK,SAAA+D,GAAG,OAAIA,EAAIlK,MAAQ+U,CAAE,GAAC,IAC3D4K,QAAO,SAACzV,GAAG,YAAiC3K,IAAR2K,CAAiB,GAC1D,EAAC,EAEDwiB,kBAAoB,SAAC3iB,GACnB,OAAOA,EAAM4iB,UAAY,EAAKjJ,UAAU,IAAM3Z,EAAM6iB,UAAY,EAAKlJ,UAAU,EACjF,EAAC,EAEDmJ,cAAgB,SAAC9iB,GACf,MAA4CA,EAAM2hB,OAAOvnB,QAAxC2oB,EAAU,EAAnBC,QACFC,EADiC,EAAVjjB,MACHijB,cAErB,EAAKN,kBAAkBM,KAC1B,EAAKtJ,UAAY,CAACsJ,EAAcL,QAASK,EAAcJ,SACvD,EAAKN,oBAGP,EAAK7I,YAAc,EAAK8I,qBAAqBO,GAEzC,EAAKrJ,YAAYzc,OAAS,GAC5B,EAAKmlB,wBAAwB,EAAK1I,aAClC,EAAK5c,SAAS,CACZomB,4BAA4B,EAC5BC,mBAAoBF,EAAcL,QAClCQ,mBAAoBH,EAAcJ,WAGpC,EAAK/lB,SAAS,CACZomB,4BAA4B,GAGlC,EAAC,EAEDG,uBAAyB,SAACC,GACxB,IAAMC,EAAiBD,EACjBE,EAAiB,CACrBhhB,gBAAiB,IAAIqX,IACrB4J,iBAAajuB,GAGf,QAAuBA,IAAnB+tB,EACF,OAAOC,EAGT,IAAMC,EAAc,EAAKpL,aAAaqL,OAAOH,GAC7C,QAAoB/tB,IAAhBiuB,EACF,OAAOD,EAKT,GAFAjoB,QAAQiZ,MAAM,iBAAD,OAAkBiP,EAAYxtB,IAAG,OAEzC,EAAK2jB,SAASvX,IAAI,SACrB,MAAO,CACLG,gBAAiB,IAAIqX,IAAI,CAAC4J,EAAYxtB,MACtCwtB,YAAAA,GAIJ,IAAME,EAAkBvoB,MAAMC,KAAK,EAAKqB,MAAM8F,iBAC9C,MAAO,CACLA,gBAAiB,IAAIqX,IAAI,GAAD,OAAK8J,EAAgB,CAACF,EAAYxtB,OAC1DwtB,YAAAA,EAEJ,EAAC,EAEDG,yBAA2B,SAACC,GAC1B,EAAKxL,aAAa4G,aAAaze,SAAQ,SAAAL,GACrC,IAAMlK,EAAMkK,EAAIlK,IAEhB,IAAI4tB,EAAerhB,gBAAgBH,IAAIpM,IAAS,EAAKyG,MAAMwF,eAAeG,IAAIpM,GAA9E,CAIA,IAAMsJ,EAAM4X,GAAWhX,GACjBlC,EAAQ,EAAK4gB,YAAYtf,GAC/B,EAAK8Y,aAAayL,YAAY7tB,EAAKgI,EAJnC,CAKF,GACF,EAAC,EAED8lB,aAAe,SAAC/jB,GAAkC,IAAD,MAG/C,GAA2B,KAFqB,QAA/B,EAAgB,QAAhB,EAAIA,EAAM2hB,cAAM,OAAS,QAAT,EAAZ,EAAcvnB,eAAO,WAAT,EAAZ,EAAuB6H,YAAI,QAAI,IAEpChF,OAAhB,CAIA,IAAM+mB,EAAsB,EAAKX,yBACjC,EAAKvmB,SAASknB,GAGd,EAAK3L,aAAa4L,kBAElB,EAAKL,yBAAyBI,EAR9B,CASF,EAAC,EAEDE,cAAgB,SAAClkB,GAAkC,IAAD,IAC1CujB,EAA6B,QAAf,EAAGvjB,EAAM2hB,cAAM,OAAS,QAAT,EAAZ,EAAcvnB,eAAO,WAAT,EAAZ,EAAuBnE,IACxC+tB,EAAsB,EAAKX,uBAAuBE,GACxD,EAAKzmB,SAASknB,GAEd,EAAKJ,yBAAyBI,EAChC,EAAC,EAiCDG,iBAAmB,SAACnkB,GAClB,EAAKlD,SAAS,CAAEH,WAAW,GAC7B,EAAC,EAEDynB,eAAiB,SAACpkB,GAChB,EAAKlD,SAAS,CAAEH,WAAW,GAC7B,EAAC,EAED0nB,sBAAwB,SAACrkB,GACvB,IAAMskB,EAOFtkB,EAAM2hB,OAAOvnB,QACXmF,EAAW,UAAM+kB,EAAU9N,eAAc,YAAI8N,EAAUC,aAC7D,EAAKznB,UAAS,SAAAJ,GAEZ,OADAA,EAAM8nB,cAAclG,IAAI/e,GACjB7C,CACT,GACF,EAAC,EAED+nB,oBAAsB,SAACzkB,GACrBzE,QAAQU,MAAM,uBAChB,EAAC,EAEDyoB,eAAiB,SAAC1kB,GAAkC,IAAD,MAC3CxF,EAAyC,QAAlC,EAAgB,QAAhB,EAAIwF,EAAM2hB,cAAM,OAAS,QAAT,EAAZ,EAAcvnB,eAAO,WAAT,EAAZ,EAAuBI,eAAO,QAAI,sBACnDe,QAAQU,MAAMzB,GACdqD,GAAAA,QACElD,EACA,IAAIL,EACFD,EACAG,GAGN,EAAC,EAEDmqB,oBAAsB,SAAC3kB,GACrB,IAAMskB,EAQFtkB,EAAM2hB,OAAOvnB,QACXmF,EAAG,UAAM+kB,EAAU9N,eAAc,YAAI8N,EAAUC,aAYrD,GAXA,EAAKznB,UAAS,SAAAJ,GACZA,EAAM8nB,cAAcI,OAAOrlB,GAC3B,IAAI5C,GAAqB,EAIzB,OAHID,EAAM8nB,cAAcxtB,KAAO,IAC7B2F,GAAY,GAEP,CACLA,UAAAA,EACA6nB,cAAe9nB,EAAM8nB,cAEzB,IAEEF,EAAUO,cAAgBprB,EAAegE,iCACzC,EAAK/H,MAAMqH,MAAMke,0BACjB,CACA,IAAMjO,EAAwBsX,EAAUQ,kBACxC,KACI9X,KAAyB,EAAKtQ,MAAMqoB,sBACd,MAAxBT,EAAUU,WACV,CAUA,IALA,IAAMhuB,EAAI,SAAG,EAAK,IACZiuB,EAASzX,KAAK0X,KAAKZ,EAAUU,WAAW/nB,OAASjG,GACnDqM,EAAS,EACP8hB,EAAsB,GACtBC,EAAsB,GACnBlmB,EAAI,EAAGA,EAAI+lB,EAAQ/lB,IAAK,CAC/BmE,EAASnE,EAAIlI,EACb,IAAMquB,EAASf,EAAUU,WAAWlpB,MAAMuH,EAAQA,EAASrM,GAC3DmuB,EAAUxtB,KAAK6V,KAAKjH,IAAG,MAARiH,MAAI,QAAQ6X,KAC3BD,EAAUztB,KAAK6V,KAAKhH,IAAG,MAARgH,MAAI,QAAQ6X,IAC7B,CACA,IAAM9e,EAAMiH,KAAKjH,IAAG,MAARiH,KAAY2X,GAClB3e,EAAMgH,KAAKhH,IAAG,MAARgH,KAAY4X,GACxB,EAAKtoB,UAAS,SAAAJ,GACZ,IAAM4oB,EAAQ5oB,EAAMqoB,oBAcpB,GAboC,MAAhCO,EAAMtY,GACRsY,EAAMtY,GAAyB,CAC7BzG,IAAKiH,KAAKjH,IAAI+e,EAAMtY,GAAuBzG,IAAKA,GAChDC,IAAKgH,KAAKhH,IAAI8e,EAAMtY,GAAuBxG,IAAKA,GAChD+e,iBAAkBD,EAAMtY,GAAuBuY,iBAAmB,GAGpED,EAAMtY,GAAyB,CAC7BzG,IAAKA,EACLC,IAAKA,EACL+e,iBAAkB,GAGoB,MAAtC7oB,EAAM4e,6BAAsC,CAC9C,IAAMrd,GAAK,UACN,EAAKoa,aAAamN,oBAAoBxY,IAE3C/O,EAAM0G,YAAc,CAClB2gB,EAAMtY,GAAuBzG,IAC7B+e,EAAMtY,GAAuBxG,KAE/B,EAAK6R,aAAa0D,oBAAoB/O,EAAuB/O,EAC/D,CACA,OAAOvB,CACT,GACF,CACF,CACF,EAAC,EAED+oB,aAAe,SAACzlB,GACd,IAAMG,EAAMH,EAAM2hB,OAAOvnB,QACzBmB,QAAQiZ,MAAM,gBAAD,OAAiBrU,EAAIlK,IAAG,KACvC,EAAC,EAuEDyvB,UAAY,SAAC1lB,GACX,EAAK4Z,SAAS0E,IAAIte,EAAMT,IAC1B,EAAC,EAEDomB,QAAU,SAAC3lB,GACT,EAAK4Z,SAASgL,OAAO5kB,EAAMT,KACT,WAAdS,EAAMT,KACJ,EAAK7C,MAAMkpB,oBACbrqB,QAAQ6B,KAAK,8BACb,EAAKib,aAAawN,4BAClB,EAAKxN,aAAaG,0BAA0B,CAAC,IACpC,EAAK9b,MAAMopB,yBACpBvqB,QAAQ6B,KAAK,mCACb,EAAKib,aAAa0N,8BAClB,EAAK1N,aAAaG,0BAA0B,CAAC,IACpC,EAAK9b,MAAMspB,yBACpBzqB,QAAQ6B,KAAK,mCACb,EAAKib,aAAa4N,iCAClB,EAAK5N,aAAaG,0BAA0B,CAAC,IAE/C,EAAK1b,SAAS,CACZopB,0BAA0B,EAC1B/D,2BAA2B,EAC3B6D,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,EACzBK,oBAAoB,KAEbnmB,EAAMomB,SACI,SAAfpmB,EAAMqmB,KACR,EAAKC,mBACmB,SAAftmB,EAAMqmB,KACf,EAAKE,wBACmB,SAAfvmB,EAAMqmB,KACf,EAAKG,uBACmB,SAAfxmB,EAAMqmB,KACf,EAAKI,mBACmB,SAAfzmB,EAAMqmB,KACf,EAAKK,4BACmB,SAAf1mB,EAAMqmB,KACf,EAAKM,yBACmB,SAAf3mB,EAAMqmB,MACf,EAAKO,aAGX,EAAC,EA0jCD9iB,2BAA6B,SAACF,GAC5B,EAAKyU,aAAawO,UAAUjjB,EAC9B,EAAC,EAMDkjB,wBAA0B,SAAC9mB,GACzB,IAAMD,EAAUC,EAAMwR,OAAOzR,QAC7B,EAAKjD,SAAS,CAAEiqB,qBAAsBhnB,IACtC,EAAKsY,aAAa2O,mBACpB,EAAC,EAEDC,iBAAmB,SAACnU,GAA+D,IAAD,EAC1E3S,EAAM,EAAKkY,aAAaqL,OAAO5Q,EAAW7c,KAC1CsJ,EAAM4X,GAAWhX,GACjBzB,OAAgClJ,IAAxB,EAAKukB,UAAUxa,GACC,QADiB,EAC3C,EAAKwa,UAAUxa,GAAKqY,cAAM,aAA1B,EAA4BlZ,MAAM5C,MAAM,EAAG,GAC3Cib,GACA5D,OAAOC,KAAK,EAAK2G,WAAW9c,OAAS8Z,GAAiC9Z,QAE1E,EAAKyU,wBAAwBoB,EAAW7c,KAAO,CAC7CyI,MAAOA,EACP6F,QA7/F6B,GA8/F7B6M,aAAa,GAGf,EAAK2I,UAAUxa,GAAO,EAAK2nB,iBACzB,EAAKxV,wBAAwBoB,EAAW7c,KAE5C,EA1kFEsF,QAAQ6B,KAAK,eAAD,OACK,EAAK1H,MAAMqH,MAAMoB,oBAAmB,OACnD,EAAKzI,MAAMqH,OAEb,IAAMwc,EAAsB,CAC1B,QACA,SACA,MACA,UACA,OACA,kBACA,gBAEF7jB,EAAMqV,YAAYvK,SAAQ,SAACsS,GACzB,IAAMwN,EAAU,IAAIvf,EAAAA,GAAAA,OAAAA,aAA6B+R,EAAWwN,SAC5D,EAAKjH,eAAe1hB,KAAK2oB,GACzB,IAAM/gB,EAAMyX,GAAUsJ,QACW9qB,IAA7Bsd,EAAWqU,cACb,EAAK5N,oBAAoBha,GAAOuT,EAAWqU,cAE3C,EAAK5N,oBAAoBha,GAAOga,EAElC,EAAKD,kBAAkB/Z,GAAO,QACC/J,IAA3Bsd,EAAWvS,aACbuS,EAAWvS,YAAYC,SAAQ,SAAA6I,GAC7B,EAAKiQ,kBAAkB/Z,GAAK5H,KAAK,CAC/BvB,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6BsI,EAAWjT,MAClDqM,OAAQ4G,EAAW5G,OAAO3M,KAAI,SAAAa,GAC5B,OAAO,IAAIoK,EAAAA,GAAAA,OAAAA,aAA6BpK,EAC1C,KAEJ,SAE8BnB,IAA5Bsd,EAAW1R,cACb0R,EAAW1R,aAAaZ,SAAQ,SAAAuE,GAC9B,EAAK3D,aAAazJ,KAAK,CACrBvB,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6BgE,EAAY3O,MACnDO,WAAOnB,EACPiM,KAAM,IAAIV,EAAAA,GAAAA,OAAAA,aAA6BgE,EAAYtD,OAEvD,IAEsB,MAApBqR,EAAW7U,MACb,EAAK8b,UAAUxa,GAAOoY,GAAgB7E,EAAW7U,OAEjD,EAAK8b,UAAUxa,GAAO,EAAKua,eAE/B,IAEA,EAAKsN,eAAiB,EAAKA,eAAetnB,MAAK,WAC/C,EAAKunB,iBAAmB,EAAKA,iBAAiBvnB,MAAK,WACnD,EAAK2hB,eAAiB,EAAKA,eAAe3hB,MAAK,WAC/C,EAAKwmB,iBAAmB,EAAKA,iBAAiBxmB,MAAK,WACnD,EAAK0mB,qBAAuB,EAAKA,qBAAqB1mB,MAAK,WAC3D,EAAKymB,sBAAwB,EAAKA,sBAAsBzmB,MAAK,WAC7D,EAAK4mB,0BAA4B,EAAKA,0BAA0B5mB,MAAK,WACrE,EAAK2mB,iBAAmB,EAAKA,iBAAiB3mB,MAAK,WACnD,EAAKwnB,+BAAiC,EAAKA,+BAA+BxnB,MAAK,WAC/E,EAAKynB,0CAA4C,EAAKA,0CAA0CznB,MAAK,WACrG,EAAK0nB,sCAAwC,EAAKA,sCAAsC1nB,MAAK,WAC7F,EAAK2nB,sCAAwC,EAAKA,sCAAsC3nB,MAAK,WAC7F,EAAK4nB,iCAAmC,EAAKA,iCAAiC5nB,MAAK,WACnF,EAAK6nB,oCAAsC,EAAKA,oCAAoC7nB,MAAK,WACzF,EAAK8nB,oCAAsC,EAAKA,oCAAoC9nB,MAAK,WACzF,EAAK+nB,wCAA0C,EAAKA,wCAAwC/nB,MAAK,WACjG,EAAKof,iCAAmC,EAAKA,iCAAiCpf,MAAK,WACnF,EAAKsf,sCAAwC,EAAKA,sCAAsCtf,MAAK,WAC7F,EAAKgoB,iCAAmC,EAAKA,iCAAiChoB,MAAK,WACnF,EAAKioB,qBAAuB,EAAKA,qBAAqBjoB,MAAK,WAC3D,EAAK8mB,WAAa,EAAKA,WAAW9mB,MAAK,WACvC,EAAKkoB,2BAA6B,EAAKA,2BAA2BloB,MAAK,WACvE,EAAKmoB,2BAA6B,EAAKA,2BAA2BnoB,MAAK,WACvE,EAAKooB,6BAA+B,EAAKA,6BAA6BpoB,MAAK,WAC3E,EAAKqoB,6BAA+B,EAAKA,6BAA6BroB,MAAK,WAC3E,EAAKsoB,yCAA2C,EAAKA,yCAAyCtoB,MAAK,WACnG,EAAK6mB,uBAAyB,EAAKA,uBAAuB7mB,MAAK,WAC/D,EAAKuoB,yBAA2B,EAAKA,yBAAyBvoB,MAAK,WACnE,EAAKwoB,yBAA2B,EAAKA,yBAAyBxoB,MAAK,WACnE,EAAKwf,8BAAgC,EAAKA,8BAA8Bxf,MAAK,WAC7E,EAAKyoB,yBAA2B,EAAKA,yBAAyBzoB,MAAK,WACnE,EAAK2f,8BAAgC,EAAKA,8BAA8B3f,MAAK,WAC7E,EAAK0oB,yBAA2B,EAAKA,yBAAyB1oB,MAAK,WACnE,EAAK4f,kCAAoC,EAAKA,kCAAkC5f,MAAK,WACrF,EAAK2oB,6BAA+B,EAAKA,6BAA6B3oB,MAAK,WAC3E,EAAK4oB,gCAAkC,EAAKA,gCAAgC5oB,MAAK,WACjF,EAAK6oB,iCAAmC,EAAKA,iCAAiC7oB,MAAK,WACnF,EAAK8oB,6BAA+B,EAAKA,6BAA6B9oB,MAAK,WAC3E,EAAKgnB,wBAA0B,EAAKA,wBAAwBhnB,MAAK,WACjE,EAAK+oB,0BAA4B,EAAKA,0BAA0B/oB,MAAK,WAErE,MAAsCmY,GAAkB,CACtDza,QAAS,EAAK9H,MAAM8H,QACpBT,MAAO,EAAKrH,MAAMqH,MAClBmb,QAAS,EAAKxiB,MAAMwiB,UAHdG,EAAY,EAAZA,aAAcD,EAAW,EAAXA,YAKtB,EAAKC,aAAeA,EACpB,EAAKD,YAAcA,EACnB,EAAKoB,kBAAoBhiB,EAAAA,YACzB,EAAKiiB,iBAAmBjiB,EAAAA,YAMxB,EAAK6gB,aAAaqD,qBAAqBlb,SAAQ,SAAAuM,GAC7C,EAAKsL,aAAawD,sBAAsB9O,EAAY1M,WACtD,IAEA,cAAuB,EAAKgY,aAAayQ,YAAW,GAA7CzlB,EAAM,KAAErM,EAAI,KAuClB,OArCD,EAAK0F,MAAQ,CACX8F,gBAAiB,IAAIqX,IACrB3X,eAAgB,IAAI2X,IACpBrJ,mBAAoB,IAAIqJ,IACxB7J,mBAAoB,IAAI6J,IACxB5S,2BAA4B,IAAI4S,IAChCvK,8BAA+B,IAAIuK,IACnCxK,6BAA8B,IAAIwK,IAClC2B,mBAAoB,GACpBoG,qBAAiBpsB,EACjBqsB,oBAAqB,GACrBzL,qBAAiB5gB,EACjBmH,WAAW,EACXupB,0BAA0B,EAC1B/D,2BAA2B,EAC3Be,4BAA4B,EAC5BC,mBAAoB,EACpBC,mBAAoB,EACpBd,qBAAsB,GACtByG,8BAA8B,EAC9B5S,sBAAsB,EACtByP,oBAAoB,EACpBI,wBAAwB,EACxBF,yBAAyB,EACzBK,oBAAoB,EACpB6C,4BAA4B,EAC5BC,4BAA4B,EAC5BC,yBAAqB1zB,EACrB2zB,sBAAuB,CAAC9lB,EAAO,GAAIA,EAAO,GAAKrM,EAAK,IACpDoyB,yBAAqB5zB,EACrB6zB,sBAAuB,CAAChmB,EAAO,GAAIA,EAAO,GAAKrM,EAAK,IACpDsyB,2BAAuB9zB,EACvB+zB,eAAe,EACfxE,oBAAqB,CAAC,EACtBzJ,6BAA8B,EAAK5lB,MAAM4lB,6BACzCkJ,cAAe,IAAI3K,IACnBkN,sBAAsB,GACvB,CACH,CAwsGC,OAxsGA,0CAED,SACEla,EACAC,GACO,IAAD,OAIN,GACErX,KAAKC,MAAMob,SAAS6N,WAAa9R,EAAciE,SAAS6N,UACxDlpB,KAAKC,MAAM4kB,mBAAqBzN,EAAcyN,kBAC9C7kB,KAAKC,MAAMqJ,oBAAsB8N,EAAc9N,mBAC/CtJ,KAAKC,MAAMqH,QAAU8P,EAAc9P,OACnCtH,KAAKC,MAAM8H,UAAYqP,EAAcrP,QACrC,CACsC,MAAlC/H,KAAK+jB,kBAAkBtc,UACzBzH,KAAK+jB,kBAAkBtc,QAAQC,UAAY,IAE7C1H,KAAK4iB,aAAamR,UACM,MAApB/zB,KAAK2iB,cAC8B,MAAjC3iB,KAAKgkB,iBAAiBvc,UACxBzH,KAAKgkB,iBAAiBvc,QAAQC,UAAY,IAE5C1H,KAAK2iB,YAAYoR,WAEnB,MAAsCvR,GAAkB,CACtDza,QAAS/H,KAAKC,MAAM8H,QACpBT,MAAOtH,KAAKC,MAAMqH,MAClBmb,QAASziB,KAAKC,MAAMwiB,UAHdG,EAAY,EAAZA,aAAcD,EAAW,EAAXA,YAKtB3iB,KAAK4iB,aAAeA,EACpB5iB,KAAK2iB,YAAcA,EAEnB,IAAM/I,EAA4C,IAAIwK,IAChDvK,EAA6C,IAAIuK,IACvDpkB,KAAK4iB,aAAaqD,qBAAqBlb,SAAQ,SAAAuM,GAC7C,IAAM1M,EAAa0M,EAAY1M,WAC3B,EAAKgY,aAAaoR,qBAAqBppB,IACzCiP,EAA8BgP,IAAIje,GAEhC,EAAKgY,aAAaqR,oBAAoBrpB,IACxCgP,EAA6BiP,IAAIje,EAErC,IAEA,cAAuB5K,KAAK4iB,aAAayQ,YAAW,GAA7CzlB,EAAM,KAAErM,EAAI,KAEnBvB,KAAKqH,SAAS,CACZoF,eAAgB,IAAI2X,IACpBrJ,mBAAoB,IAAIqJ,IACxB7J,mBAAoB,IAAI6J,IACxB5S,2BAA4B,IAAI4S,IAChCvK,8BAAAA,EACAD,6BAAAA,EACAmM,mBAAoB,GACpBgJ,cAAe,IAAI3K,IACnBsP,sBAAuB,CAAC9lB,EAAO,GAAIA,EAAO,GAAKrM,EAAK,IACpDqyB,sBAAuB,CAAChmB,EAAO,GAAIA,EAAO,GAAKrM,EAAK,MAEtDvB,KAAK4rB,mBACP,CACF,GAgHA,4BA2MA,yCAKA,8GACe,IAAIzB,SAAc,SAACC,EAASC,GACvCvkB,QAAQ6B,KAAK,4CACb,IAAMG,EAAS,EAAK7H,MAAM8H,QAAQ/D,EAAekwB,qBACjDpsB,EAAO8c,mBAAmB,CACxBC,iBAAkB,EAAK5kB,MAAM4kB,iBAC7BC,YAAa,CACXC,SAAU,QAEXC,MAAK,SAACC,GACiB,MAApBA,IACFA,EAAmB,IAErBA,EAAiBla,SAAQ,SAAAtB,GACvB,IACM0b,EADctd,EAAAA,SAAAA,eAA4B4B,GAAxCyL,QAEJiQ,EAASoE,cAAgBvlB,EAAekwB,sBAC1CpuB,QAAQ6B,KAAK,yBAAD,OAA0Bwd,EAASC,eAAc,MAC7Dtd,EAAOud,iBAAiB,CACtBR,iBAAkB,EAAK5kB,MAAM4kB,iBAC7Bvb,kBAAmB6b,EAAS5L,kBAC5BwH,eAAgBoE,EAASC,iBACxBJ,MAAK,SAACM,GACP,IAAM7N,EAAOnM,EAAAA,GAAAA,aAAAA,SAAiCga,GAExC1S,EADc/K,EAAAA,SAAAA,eAA4B4P,EAAK8N,MAA7CrQ,QAMH+N,GAAmBrQ,GAQnBuQ,GAA0BvQ,GAO1B2Q,GAAwB3Q,IAQb,IAAIsB,GAAkBtB,GAC9B6B,KAAK1J,SAAQ,SAAAL,GACnB5E,QAAQ6B,KAAK,YAAD,OAAa+C,EAAIlK,IAAG,MAChC,IAAM8S,EAAW5I,EAAI4I,SACf+O,EAAQ,EAAKpiB,MAAMqH,MAAMob,aAAa,GAC5C,GAAIpP,EAASE,sBAAwB6O,EAAMgJ,oBAezC,GALqB,EAAKzI,aAAa4G,aAAajN,MAClD,SAAC4X,GACC,OAAOvS,GAAcuS,EAAUzpB,EACjC,IAYA5E,QAAQiZ,MAAM,8BAAD,OAA+BrU,EAAIlK,IAAG,WATnD,IAEE,EAAKoiB,aAAa4J,OAAO9hB,EAAK,CAAC,GAC/B,IAAM0pB,EAAkB5V,GAAqB9T,GAC7C,EAAK8mB,iBAAiB4C,EAGxB,CAFE,SACAtuB,QAAQU,MAAM,sBAAD,OAAuBkE,EAAIlK,IAAG,KAC7C,MAKFsF,QAAQiZ,MACN,oBAAarU,EAAIlK,IAAG,gCACDoS,EAAOwS,eAAc,KACxC,sDAGN,IAEAgF,KAhDEtkB,QAAQiZ,MACN,8BAAuBnM,EAAOwS,eAAc,MAC5C,4DATFtf,QAAQiZ,MACN,8BAAuBnM,EAAOwS,eAAc,MAC5C,mDAVFtf,QAAQiZ,MACN,8BAAuBnM,EAAOwS,eAAc,MAA5C,kFA+DN,IAAGY,OAAM,SAACxf,GAER4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,oCAGJkB,QAAQU,MACN,uBAAsB,2BACF2e,EAASC,eAAc,MAAI,qBACjCD,EAAS5L,kBAAiB,MAAI,oBAC/B,EAAKtZ,MAAM4kB,iBAAgB,OACxCre,EAEJ,IAMA,EAAKwkB,cAET,GACF,IAAGhF,OAAM,SAACxf,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,oCAGJylB,EAAO7jB,aAAiBjC,MAAQiC,EAAQ,IAAIjC,MAAMsC,OAAOL,IAC3D,GACF,IAAE,mFACH,kDA1ID,IAqaA,uCAkTA,SAA2BhG,GAAoB,IAAD,OAE5CR,KAAK4iB,aAAa4L,kBAElB,IAAMD,EAAsBvuB,KAAK4tB,uBAAuBptB,GACxDR,KAAKqH,SAASknB,GACdvuB,KAAK4iB,aAAa4G,aAAaze,SAAQ,SAACL,GACtC,IAAIlC,EAAQ,CAAC,EACb,GAAI+lB,EAAoBxhB,gBAAgBH,IAAIlC,EAAIlK,KAC9CgI,EAAQ,EAAKic,iBACb,EAAKpd,UAAS,SAAAJ,GACZ,IAAMwF,EAAiBxF,EAAMwF,eAE7B,OADAA,EAAeoc,IAAIne,EAAIlK,KAChB,CAAEiM,eAAAA,EACX,SAEA,GAAI,EAAKxF,MAAMwF,eAAeG,IAAIlC,EAAIlK,KAAM,CAC1C,IAAMsJ,EAAM4X,GAAWhX,GACvBlC,EAAQ,EAAK4gB,YAAYtf,EAC3B,CAEF,EAAK8Y,aAAayL,YAAY3jB,EAAIlK,IAAKgI,EACzC,GACF,GAAC,4CAED,WACExI,KAAKqH,SAAS,CACZqlB,2BAA2B,GAE/B,GAAC,8BA8HD,WACE2H,SAASC,KAAKC,oBACZ,kCACAv0B,KAAKisB,YAEPoI,SAASC,KAAKC,oBACZ,yCACAv0B,KAAKsuB,cAEP+F,SAASC,KAAKC,oBACZ,qCACAv0B,KAAKyuB,eAEP4F,SAASC,KAAKC,oBACZ,2CACAv0B,KAAKysB,oBAEP4H,SAASC,KAAKC,oBACZ,qCACAv0B,KAAKqtB,eAEPgH,SAASC,KAAKC,oBACZ,oCACAv0B,KAAKgwB,cAEPqE,SAASC,KAAKC,oBACZ,qCACAv0B,KAAK+rB,eAEPsI,SAASC,KAAKC,oBACZ,wCACAv0B,KAAK0uB,kBAEP2F,SAASC,KAAKC,oBACZ,sCACAv0B,KAAK2uB,gBAEP0F,SAASC,KAAKC,oBACZ,8CACAv0B,KAAK4uB,uBAEPyF,SAASC,KAAKC,oBACZ,4CACAv0B,KAAKkvB,qBAEPmF,SAASC,KAAKC,oBACZ,QACAv0B,KAAKkwB,SAEPmE,SAASC,KAAKC,oBACZ,QACAv0B,KAAKiwB,WAEPuE,OAAOD,oBAAoB,SAAUv0B,KAAKgsB,gBAE1ChsB,KAAK4iB,aAAamR,UACM,MAApB/zB,KAAK2iB,aACP3iB,KAAK2iB,YAAYoR,SAUrB,GAAC,kCAiDD,WACE/zB,KAAK4iB,aAAamR,UACM,MAApB/zB,KAAK2iB,aACP3iB,KAAK2iB,YAAYoR,UAEnBS,OAAOD,oBAAoB,eAAgBv0B,KAAK4xB,iBAClD,GAAC,4BAED,WACEyC,SAASC,KAAKG,iBACZ,kCACAz0B,KAAKisB,YAEPoI,SAASC,KAAKG,iBACZ,qCACAz0B,KAAKyuB,eAEP4F,SAASC,KAAKG,iBACZ,yCACAz0B,KAAKsuB,cAEP+F,SAASC,KAAKG,iBACZ,2CACAz0B,KAAKysB,oBAEP4H,SAASC,KAAKG,iBACZ,qCACAz0B,KAAKqtB,eAEPgH,SAASC,KAAKG,iBACZ,oCACAz0B,KAAKgwB,cAEPqE,SAASC,KAAKG,iBACZ,qCACAz0B,KAAK+rB,eAEPsI,SAASC,KAAKG,iBACZ,wCACAz0B,KAAK0uB,kBAEP2F,SAASC,KAAKG,iBACZ,sCACAz0B,KAAK2uB,gBAEP0F,SAASC,KAAKG,iBACZ,sCACAz0B,KAAKivB,gBAEPoF,SAASC,KAAKG,iBACZ,8CACAz0B,KAAK4uB,uBAEPyF,SAASC,KAAKG,iBACZ,4CACAz0B,KAAKkvB,qBAEPmF,SAASC,KAAKG,iBACZ,4CACAz0B,KAAKgvB,qBAEPqF,SAASC,KAAKG,iBACZ,QACAz0B,KAAKkwB,SAEPmE,SAASC,KAAKG,iBACZ,UACAz0B,KAAKiwB,WAEPuE,OAAOC,iBAAiB,eAAgBz0B,KAAK4xB,kBAC7C4C,OAAOC,iBAAiB,SAAUz0B,KAAKgsB,eACzC,GAAC,+BAED,WAIE,GAHAhsB,KAAK2xB,iBACL3xB,KAAK4rB,qBAEA5rB,KAAKC,MAAMqH,MAAMke,0BAA2B,CAC/C,IAAIkP,GAAgB,EACdrS,EAAQriB,KAAKC,MAAMqH,MAAMob,aAAa,GAE5C,GAA+B,MADVL,EAAM7I,oBAAoB,GAC9Bmb,YACf,GAAI,wBAAyBtS,EAAMuS,mBAG7B,eADiBvS,EAAMuS,mBAAmBpb,oBAAoB,KAEhEkb,GAAgB,QAIpBA,GAAgB,EAEbA,GAEH3vB,EAAAA,GAAAA,QAAgB,4CAEpB,CACF,GAEA,8CAMA,SACE7D,EACAkO,GACO,IAAD,OACNpP,KAAK4jB,eAAe7Y,SAAQ,SAAA8f,GACtBA,EAAQ3f,YAAchK,IACxB4E,QAAQ6B,KAAK,qBAAD,OAAsBkjB,EAAQzf,YAAW,MACrD,EAAK/D,SAAS,CACZ8kB,gBAAiBtB,EACjBuB,oBAAqB,KAG3B,GACF,GAEA,mDAOA,SAAuClrB,EAAekO,GACpDpP,KAAKqH,SAAS,CAAEwtB,qBAAsB3zB,GACxC,GAEA,mDAIA,SAAuCqJ,GACbA,EAAMwR,OAAOzR,QAEnCtK,KAAKqH,SAAS,CAAEytB,eAAgB,gBAEhC90B,KAAKqH,SAAS,CAAEytB,oBAAgB/0B,GAEpC,GAEA,iDAOA,SACEmB,EACAkO,GACO,IAAD,OACA+c,EAAkBnsB,KAAKiH,MAAMklB,gBACnC,QAAwBpsB,IAApBosB,EAA+B,CACjC,IAAMriB,EAAMyX,GAAU4K,GAChBxrB,EAAOyO,EAAO1O,MACpBV,KAAK6jB,kBAAkB/Z,GAAKiB,SAAQ,SAAA6I,GAEhCA,EAAWjT,KAAKuK,YAAcvK,EAAKuK,WACnC0I,EAAWjT,KAAK4P,yBAA2B5P,EAAK4P,wBAEhDqD,EAAW5G,OAAOjC,SAAQ,SAAA6lB,GACxB,GAAIA,EAAK1lB,YAAchK,EAAO,CAC5B,IAAM6zB,EAAsB,EAAK9tB,MAAMmlB,oBAAoBjM,QACzD,SAAC7f,GAAgB,OAAKA,EAAKK,OAASiT,EAAWjT,IAAI,IAErD,EAAK0G,SAAS,CACZ+kB,oBAAoB,GAAD,gBACd2I,GAAmB,CACtB,CAAEp0B,KAAMA,EAAMO,MAAO0vB,MAG3B,CACF,GAEJ,GACF,CACF,GAEA,iDAIA,WACE5wB,KAAKqH,SAAS,CACZ+kB,oBAAqB,IAEzB,GAAC,wCAED,SAA4BlrB,GAC1B,GAAa,MAATA,EAAe,CACjB,IAAM8zB,EAAIC,OAAO/zB,GACXg0B,EAAQl1B,KAAKiH,MAAMysB,sBAAsB,GACzCyB,EAAMn1B,KAAKiH,MAAMysB,sBAAsB,GAC7C,GAAIsB,GAAKE,GAASF,GAAKG,EAKrB,YAJAn1B,KAAKqH,SAAS,CACZosB,oBAAqBuB,EACrBzB,4BAA4B,GAIlC,CACAvzB,KAAKqH,SAAS,CACZosB,yBAAqB1zB,EACrBwzB,4BAA4B,GAEhC,GAAC,wCAED,SAA4BryB,GAC1B,GAAa,MAATA,EAAe,CACjB,IAAMk0B,EAAIH,OAAO/zB,GACXg0B,EAAQl1B,KAAKiH,MAAM2sB,sBAAsB,GACzCuB,EAAMn1B,KAAKiH,MAAM2sB,sBAAsB,GAC7C,GAAIwB,GAAKF,GAASE,GAAKD,EAKrB,YAJAn1B,KAAKqH,SAAS,CACZssB,oBAAqByB,EACrB5B,4BAA4B,GAIlC,CACAxzB,KAAKqH,SAAS,CACZssB,yBAAqB5zB,EACrByzB,4BAA4B,GAEhC,GAAC,0CAED,SAA8BtyB,GACf,MAATA,GACEA,EAAQ,GAAKA,GAAS,GACxBlB,KAAKqH,SAAS,CACZwsB,sBAAuBoB,OAAO/zB,GAC9BoyB,8BAA8B,IAKpCtzB,KAAKqH,SAAS,CACZwsB,2BAAuB9zB,EACvBuzB,8BAA8B,GAElC,GAEA,0CAIA,WACE,GACEtzB,KAAKiH,MAAMssB,4BACXvzB,KAAKiH,MAAMusB,4BACXxzB,KAAKiH,MAAMqsB,8BACuB,MAAlCtzB,KAAKiH,MAAMwsB,qBACuB,MAAlCzzB,KAAKiH,MAAM0sB,qBACyB,MAApC3zB,KAAKiH,MAAM4sB,sBACX,CACA/tB,QAAQ6B,KACN,yBAAwB,WACpB3H,KAAKiH,MAAMwsB,oBAAmB,MAAI,UACnCzzB,KAAKiH,MAAM0sB,oBAAmB,MAAI,aAC/B3zB,KAAKiH,MAAM4sB,sBAAqB,oBAWxC,IARA,IAMMwB,EAAqB,IANZr1B,KAAKiH,MAAM4sB,sBAOpByB,EAAQ,GACL7rB,EAAI,EAAGA,EAAIzJ,KAAK4iB,aAAa2S,UAAW9rB,IAAK,CACpD,IAAM+rB,EAAqBx1B,KAAK4iB,aAAa6S,gBAAgBhsB,GAAG,GAChE6rB,EAAMpzB,KAAK6V,KAAK2d,IAAIL,EAAqBG,GAC3C,CACA,IAAMG,EAAQL,EAAMM,QAAQ7d,KAAKjH,IAAG,MAARiH,KAAYud,IACxCt1B,KAAK4iB,aAAarH,SAAS,CACzByC,SAAU,CACRhe,KAAKiH,MAAMwsB,oBACXzzB,KAAKiH,MAAM0sB,qBAEbgC,MAAOA,IAET,IAAME,EAAQ,IAAIhuB,EAAAA,SAAAA,MAAmB,CACnC6L,YAAa,CACX1T,KAAKiH,MAAMwsB,oBACXzzB,KAAKiH,MAAM0sB,oBACX,GAEFngB,oBAAqBxT,KAAK4iB,aAAapP,sBAEnC9I,EAAM,IAAI7C,EAAAA,IAAAA,IAAY,CAAEyL,SAAUuiB,IACxC71B,KAAK4iB,aAAa4J,OAAO9hB,EAAK1K,KAAKqkB,iBACnCrkB,KAAKqH,UAAS,SAAAJ,GACZ,IAAMwF,EAAiBxF,EAAMwF,eAE7B,OADAA,EAAeoc,IAAIne,EAAIlK,KAChB,CACLiM,eAAAA,EACAikB,oBAAoB,EAExB,GACF,CACF,GAEA,sDAIA,WACE5qB,QAAQgwB,IAAI,mCACZ91B,KAAKqH,SAAS,CACZqpB,oBAAoB,EACpB6C,4BAA4B,EAC5BC,4BAA4B,EAC5BF,8BAA8B,EAC9BG,yBAAqB1zB,EACrB4zB,yBAAqB5zB,EACrB8zB,2BAAuB9zB,GAE3B,GAEA,qDAGA,WACE+F,QAAQiZ,MAAM,qCACd,IAAM8L,EAAU7qB,KAAKiH,MAAMklB,gBACrB4J,EAAe/1B,KAAKiH,MAAM4tB,qBAC1BmB,EAASh2B,KAAKiH,MAAM6tB,oBACL/0B,IAAjBg2B,QAA0Ch2B,IAAZ8qB,GAChC7qB,KAAK4iB,aAAaqT,wBAAwB,CAAEF,aAAAA,EAAcC,OAAAA,IAC1Dh2B,KAAKqH,SAAS,CACZopB,0BAA0B,EAC1BN,oBAAoB,KAGtB/nB,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,+CAIR,GAEA,uDAGA,WACEkB,QAAQiZ,MAAM,mCACd/e,KAAKqH,SAAS,CACZopB,0BAA0B,EAC1BN,oBAAoB,GAExB,GAEA,oCAIA,WAAiC,IAAD,OAC9BrqB,QAAQ6B,KAAK,aACb,IAAM6E,EAAOxM,KAAK4iB,aAAa4G,aACzBrQ,EAAenZ,KAAK4iB,aAAaqD,qBACjCjkB,EAAWhC,KAAK4iB,aAAasT,uBACjC/c,EAAa,GAAGvO,YAElB5K,KAAKqH,UAAS,SAAC8uB,GACb,IAAMvjB,EAASwjB,GAAe,CAC5B5pB,KAAAA,EACAxK,SAAAA,EACA0c,KAAM,EAAKze,MAAMye,KACjBC,IAAK,EAAK1e,MAAM0e,IAChBlS,eAAgB0pB,EAAU1pB,iBAE5B,MAAO,CACLiU,qBAAsB9N,EAAO8N,qBAC7BC,gBAAiB/N,EAAO+N,gBAE5B,GACF,GAEA,sCAKA,WACE7a,QAAQ6B,KAAK,kBAEb,IAAMiL,EAAS5S,KAAKiH,MAAM0Z,gBAC1B,QAAe5gB,IAAX6S,EAAsB,CACxB,IAAMsC,EAAUtC,EAChB9M,QAAQiZ,MAAM,gCACd,IAAMsX,EAAkC,IAAIC,WAAW,GACvDD,EAAgC,GAAK,EACrC,IAAME,EAAW,CAEf,WAAY,CACVC,MAAO,CAACH,EAAgCI,QACxCC,GAAI,MAGN,WAAY,CACVF,MAAO,CAACthB,EAAQqU,aAChBmN,GAAI,MAGN,WAAY,CACVF,MAAO,CAACthB,EAAQkQ,gBAChBsR,GAAI,MAGN,WAAY,CACVF,MAAO,CAAC,uBACRE,GAAI,MAGN,WAAY,CACVF,MAAO,CAACx2B,KAAKC,MAAM0e,IAAIne,KACvBk2B,GAAI,OAIR5wB,QAAQ6B,KAAK,sCACb,IAAMgvB,EAAS,IAAIrrB,EAAAA,GAAAA,UAAqBirB,GACxCI,EAAOpR,KAAOja,EAAAA,GAAAA,oBAAAA,oBAAmD4J,GACjE,IAAMuhB,EAASE,EAAOC,QACP52B,KAAKC,MAAM8H,QAAQ/D,EAAekwB,qBAC1C2C,eAAe,CAAEC,SAAU,CAACL,KAAWzR,MAC5C,SAAC+R,GAAa,OAAKhyB,EAAAA,GAAAA,KAAa,0BAA0B,IAC1DihB,OAAM,SAACxf,GACPV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,kCAGN,GACF,CACA5E,KAAKqH,SAAS,CACZqZ,sBAAsB,EACtBC,qBAAiB5gB,GAErB,GAEA,sCAGA,WACEC,KAAKqH,SAAS,CACZqZ,sBAAsB,EACtBC,qBAAiB5gB,GAErB,GAEA,8CAIA,YAGU,IAH0B0K,EAAM,EAANA,OAIlC,GAJmD,EAATE,UAI3B,CACb7E,QAAQ6B,KAAK,YAAD,OAAa8C,IACzB,IAAMC,EAAM1K,KAAK4iB,aAAaqL,OAAOxjB,GAC/BX,EAAM4X,GAAWhX,GACjBlC,EAAQxI,KAAKopB,YAAYtf,GAC/B9J,KAAK4iB,aAAayL,YAAY3jB,EAAIlK,IAAKgI,GACvCxI,KAAKqH,UAAS,SAAAJ,GACZ,IAAMwF,EAAiBxF,EAAMwF,eAE7B,OADAA,EAAeoc,IAAIne,EAAIlK,KAChB,CAAEiM,eAAAA,EACX,GACF,MACE3G,QAAQ6B,KAAK,YAAD,OAAa8C,IACzBzK,KAAKqH,UAAS,SAAAJ,GACZ,IAAM8F,EAAkB9F,EAAM8F,gBAC9BA,EAAgBoiB,OAAO1kB,GACvB,IAAMgC,EAAiBxF,EAAMwF,eAE7B,OADAA,EAAe0iB,OAAO1kB,GACf,CAAEgC,eAAAA,EAAgBM,gBAAAA,EAC3B,IACA/M,KAAK4iB,aAAayL,YAAY5jB,EAAQ,CAAC,EAE3C,GAEA,mDAIA,YAGU,IAH+B0D,EAAkB,EAAlBA,mBAAoBxD,EAAS,EAATA,UAK3D,GADA7E,QAAQgwB,IAAI,yCAAD,OAA0C3nB,IACjDxD,EAAW,CACb7E,QAAQ6B,KAAK,yBAAD,OAA0BwG,IACtC,IACEnO,KAAK4iB,aAAaoU,oBAAoB7oB,EAWxC,CAVE,MAAO3H,GASP,MAPA4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,qCAGE4B,CACR,CACAxG,KAAKqH,UAAS,SAAAJ,GACZ,IAAMuK,EAA6B,IAAI4S,IACrCnd,EAAMuK,4BAGR,OADAA,EAA2BqX,IAAI1a,GACxB,CAAEqD,2BAAAA,EACX,GACF,MACE1L,QAAQ6B,KAAK,yBAAD,OAA0BwG,IACtCnO,KAAK4iB,aAAaqU,oBAAoB9oB,GACtCnO,KAAKqH,UAAS,SAAAJ,GACZ,IAAMuK,EAA6B,IAAI4S,IACrCnd,EAAMuK,4BAGR,OADAA,EAA2B2d,OAAOhhB,GAC3B,CAAEqD,2BAAAA,EACX,GAEJ,GAEA,8CAGA,YAOU,IAP0BhR,EAAG,EAAHA,IAAKyO,EAAY,EAAZA,aAQvCnJ,QAAQgwB,IAAI,oCAAD,OAAqCt1B,IAChD,IACER,KAAK4iB,aAAamI,wBAChBvqB,EACAyO,EAYJ,CAVE,MAAOzI,GASP,MAPA4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,gDAGE4B,CACR,CACF,GAAC,8BAED,SACEyI,GAAyD,IAAD,MAClDH,EAA8B,QAAvB,EAAGG,EAAaH,eAAO,QAx+EL,GAy+EzBooB,EAAgC,QAArB,EAAGjoB,EAAahG,aAAK,QAAIoY,GACpC8V,EAAYloB,EAAa0M,YAAc,CAAC,EAAG,EAAG,EAAG,GAAKub,EAAY72B,KAAI,SAAC+2B,GAAC,OAAKrf,KAAKjH,IAAIsmB,EAAI,GAAI,IAAI,IAMxG,OALclV,GAAgB,CAC5BE,KAAM,CAAEnZ,MAAM,GAAD,gBAAMkuB,GAAS,CAAEroB,KAC9BqT,OAAQ,CAAElZ,MAAM,GAAD,gBAAMiuB,GAAW,CAAEpoB,KAClCyT,OAAmC,QAA7B,EAAEviB,KAAKqkB,gBAAgBlC,cAAM,aAA3B,EAA6BvY,OAGzC,GAAC,kCAED,YAGU,IAHcpJ,EAAG,EAAHA,IAAKyO,EAAY,EAAZA,aAI3BnJ,QAAQgwB,IAAI,uBAAD,OAAwBt1B,IACnC,IACER,KAAKic,wBAAwBzb,GAAOyO,EACpC,IAAMzG,EAAQxI,KAAKyxB,iBAAiBxiB,GAE9BvE,EAAM1K,KAAK4iB,aAAaqL,OAAOztB,GAC/BsJ,EAAM4X,GAAWhX,GACvB1K,KAAKskB,UAAUxa,GAAOtB,EACtBxI,KAAK4iB,aAAayL,YAAY7tB,EAAKgI,GACnCxI,KAAKiH,MAAMwF,eAAeoc,IAAIroB,EAWhC,CAVE,MAAOgG,GASP,MAPA4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,mCAGE4B,CACR,CACF,GAEA,2CAIA,YAGU,IAHuBmU,EAAU,EAAVA,WAAYhQ,EAAS,EAATA,UAI3C7E,QAAQgwB,IAAI,gCAAD,OAAiCnb,IACxChQ,GACF7E,QAAQ6B,KAAK,gBAAD,OAAiBgT,IAC7B3a,KAAK4iB,aAAayU,YAAY1c,GAC9B3a,KAAKqH,UAAS,SAAAJ,GACZ,IAAM8T,EAAqB,IAAIqJ,IAAInd,EAAM8T,oBAEzC,OADAA,EAAmB8N,IAAIlO,GAChB,CAAEI,mBAAAA,EACX,MAEAjV,QAAQ6B,KAAK,gBAAD,OAAiBgT,IAC7B3a,KAAK4iB,aAAa0U,YAAY3c,GAC9B3a,KAAKqH,UAAS,SAAAJ,GACZ,IAAM8T,EAAqB,IAAIqJ,IAAInd,EAAM8T,oBAEzC,OADAA,EAAmBoU,OAAOxU,GACnB,CAAEI,mBAAAA,EACX,IAEJ,GAEA,sCAGA,YAKU,IALkBJ,EAAU,EAAVA,WAAY1L,EAAY,EAAZA,aAMtCnJ,QAAQgwB,IAAI,2BAAD,OAA4Bnb,IACvC3a,KAAK4iB,aAAa2U,gBAAgB5c,EAAY1L,EAChD,GAEA,2CAIA,YAGU,IAHuBmL,EAAU,EAAVA,WAAYzP,EAAS,EAATA,UAI3C7E,QAAQgwB,IAAI,gCAAD,OAAiC1b,IACxCzP,GACF7E,QAAQ6B,KAAK,gBAAD,OAAiByS,IAC7Bpa,KAAK4iB,aAAa4U,qBAAqBpd,GACvCpa,KAAKqH,UAAS,SAAAJ,GACZ,IAAMsT,EAAqB,IAAI6J,IAAInd,EAAMsT,oBAEzC,OADAA,EAAmBsO,IAAIzO,GAChB,CAAEG,mBAAAA,EACX,MAEAzU,QAAQ6B,KAAK,gBAAD,OAAiByS,IAC7Bpa,KAAK4iB,aAAa6U,qBAAqBrd,GACvCpa,KAAKqH,UAAS,SAAAJ,GACZ,IAAMsT,EAAqB,IAAI6J,IAAInd,EAAMsT,oBAEzC,OADAA,EAAmB4U,OAAO/U,GACnB,CAAEG,mBAAAA,EACX,IAEJ,GAEA,sCAGA,YAKU,IALkBH,EAAU,EAAVA,WAAYnL,EAAY,EAAZA,aAMtCnJ,QAAQgwB,IAAI,2BAAD,OAA4B1b,IACvCpa,KAAK4iB,aAAa8U,yBAAyBtd,EAAYnL,EACzD,GAEA,+CAIA,YAGU,IAH2BsI,EAAqB,EAArBA,sBAAuB5M,EAAS,EAATA,UAI1D7E,QAAQgwB,IAAI,qCAAD,OAAsCve,IAC7C5M,GACF7E,QAAQ6B,KAAK,qBAAD,OAAsB4P,IAClCvX,KAAK4iB,aAAagG,gBAAgBrR,GAClCvX,KAAKqH,UAAS,SAAAJ,GACZ,IAAM4S,EAAgC,IAAIuK,IACxCnd,EAAM4S,+BAGR,OADAA,EAA8BgP,IAAItR,GAC3B,CAAEsC,8BAAAA,EACX,MAEA/T,QAAQ6B,KAAK,qBAAD,OAAsB4P,IAClCvX,KAAK4iB,aAAauD,gBAAgB5O,GAClCvX,KAAKqH,UAAS,SAAAJ,GACZ,IAAM4S,EAAgC,IAAIuK,IACxCnd,EAAM4S,+BAGR,OADAA,EAA8BsV,OAAO5X,GAC9B,CAAEsC,8BAAAA,EACX,IAEJ,GAEA,0CAGA,YAOU,IAPsBtC,EAAqB,EAArBA,sBAAuBtI,EAAY,EAAZA,aAQrDnJ,QAAQgwB,IAAI,gCAAD,OAAiCve,IAC5CvX,KAAK4iB,aAAa0D,oBAAoB/O,EAAuBtI,EAC/D,GAEA,6CAIA,YAGU,IAHyBsI,EAAqB,EAArBA,sBAAuByB,EAAQ,EAARA,SAIxDlT,QAAQgwB,IAAI,mCAAD,OAAoCve,IAC3CyB,GACFlT,QAAQ6B,KAAK,yBAAD,OAA0B4P,IACtCvX,KAAK4iB,aAAa+F,oBAAoBpR,GACtCvX,KAAKqH,UAAS,SAAAJ,GACZ,IAAM2S,EAA+B,IAAIwK,IACvCnd,EAAM2S,8BAGR,OADAA,EAA6BiP,IAAItR,GAC1B,CAAEqC,6BAAAA,EACX,MAEA9T,QAAQ6B,KAAK,2BAAD,OAA4B4P,IACxCvX,KAAK4iB,aAAawD,sBAAsB7O,GACxCvX,KAAKqH,UAAS,SAAAJ,GACZ,IAAM2S,EAA+B,IAAIwK,IACvCnd,EAAM2S,8BAGR,OADAA,EAA6BuV,OAAO5X,GAC7B,CAAEqC,6BAAAA,EACX,IAEJ,GAEA,yCAIA,WAAsC,IAAD,OAC7BC,EAA6C,IAAIuK,IACjDjL,EAAenZ,KAAK4iB,aAAaqD,qBAkCvC,GAjCA9M,EAAawe,MAAK,SAAC9V,EAAGC,GACpB,OAAiD,IAA7CD,EAAEjX,WAAWgtB,cAAc9V,EAAElX,YACxB,EAC+C,IAA7CkX,EAAElX,WAAWgtB,cAAc/V,EAAEjX,aAC9B,EAEH,CACT,IACAuO,EAAapO,SAAQ,SAACzK,GACpB,IAAMsK,EAAatK,EAAKsK,WAClBpC,EAAQ,EAAKoa,aAAayD,2BAA2Bzb,GAC3D,EAAKgY,aAAa0D,oBAAoB1b,EAAYpC,GAClD,EAAKoa,aAAauD,gBAAgBvb,GAClC,EAAKgY,aAAawD,sBAAsBxb,GACpCtK,EAAK4X,gBAKgC,MAAnC5X,EAAKu3B,4BACPhe,EAA8BgP,IAAIje,GAIpCiP,EAA8BgP,IAAIje,EAEtC,IAO2C,IAAvCiP,EAA8BtY,KAAY,CAC5C,IAAMu2B,EAAgB,CACpB,CAAC,IAAK,IAAK,MAEb3e,EAAapO,SAAQ,SAACzK,GACpB,IAAMsK,EAAatK,EAAKsK,WACxB,GAAItK,EAAK4X,gBAAiB,CACxB,IAAM6f,EAAale,EAA8BtY,KACjD,GAAIw2B,EAAaD,EAActwB,OAAQ,CACrC,IAAMgB,GAAK,UACN,EAAKoa,aAAamN,oBAAoBnlB,IAErCrK,EAAQw3B,EACdvvB,EAAMS,MAAQ6uB,EAAcv3B,GAC5B,IAAMsvB,EAAQ,EAAK5oB,MAAMqoB,oBAAoBhvB,EAAKsK,YACrC,MAATilB,IACFrnB,EAAM0G,YAAc,CAAC2gB,EAAM/e,IAAK+e,EAAM9e,MAExC,EAAK6R,aAAa0D,oBAAoBhmB,EAAKsK,WAAYpC,GACvDqR,EAA8BgP,IAAIvoB,EAAKsK,WACzC,CACF,CACF,GACF,CAEA9E,QAAQ6B,KACN,qBAAckS,EAA8BtY,KAAI,mBAChD,qBAEFsY,EAA8B9O,SAAQ,SAAAH,GACpC,EAAKgY,aAAagG,gBAAgBhe,EACpC,IACA5K,KAAKqH,UAAS,SAAAJ,GAAK,MAAK,CACtB2S,6BAA8B,IAAIwK,IAAIvK,GACtCA,8BAA+B,IAAIuK,IAAIvK,GACxC,GACH,GAEA,0CAIA,WACE7Z,KAAKqH,SAAS,CAAEwe,kCAA8B9lB,IAC9C,IAAMi4B,EAAUh4B,KAAKC,MAAMob,SAAS6N,SACpClpB,KAAKC,MAAMsb,SAASyc,GACpBh4B,KAAK6rB,6BACP,GAEA,8CAIA,SACE3qB,EACAkO,GAIE,IAAIqW,EAFN,GAAa,MAATvkB,EAQF,GAPA4E,QAAQ6B,KAAK,uCAAD,OAAwCzG,EAAK,MAEzDlB,KAAKiH,MAAM8e,mBAAmBhb,SAAQ,SAAAoa,GAChCA,EAASC,iBAAmBlkB,IAC9BukB,EAAoBN,EAExB,IACyB,MAArBM,EAA2B,CAC7B,IAAIuS,EAAUh4B,KAAKC,MAAMob,SAAS6N,SAClC8O,GAAO,iBAAc92B,GACrBlB,KAAKC,MAAMsb,SAASyc,GACpBh4B,KAAK8lB,qBAAqBL,EAC5B,MAEErd,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,0CAGJkB,QAAQgwB,IACN,mDAAkD,mCACtB50B,EAAK,WAIrClB,KAAKmzB,+BAEPnzB,KAAKqH,SAAS,CAAEwe,6BAA8B3kB,GAChD,GAEA,8BAIA,WACMlB,KAAKiH,MAAMkpB,oBACbrqB,QAAQ6B,KAAK,8BACb3H,KAAK4iB,aAAawN,4BAClBpwB,KAAK4iB,aAAaG,0BAA0B,CAAC,GAC7C/iB,KAAKqH,SAAS,CACZopB,0BAA0B,EAC1B/D,2BAA2B,EAC3B6D,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,EACzBK,oBAAoB,MAGtB5qB,QAAQ6B,KAAK,4BACb3H,KAAKqH,SAAS,CACZopB,0BAA0B,EAC1B/D,2BAA2B,EAC3ByD,oBAAoB,EACpBE,yBAAyB,EACzBE,wBAAwB,EACxBG,oBAAoB,IAEtB1wB,KAAK4iB,aAAaqV,8BAClBj4B,KAAK4iB,aAAasV,4BAClBl4B,KAAK4iB,aAAa4N,iCAClBxwB,KAAK4iB,aAAa0N,8BAEtB,GAEA,mCAIA,WACExqB,QAAQ6B,KAAK,+BACT3H,KAAK4iB,aAAauV,2BACpBn4B,KAAK4iB,aAAa0N,8BAClBtwB,KAAK4iB,aAAasV,4BAClBl4B,KAAK4iB,aAAaG,0BAA0B,CAAC,GAC7C/iB,KAAKqH,SAAS,CACZkpB,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,MAG3BrwB,KAAKqH,SAAS,CACZgpB,yBAAyB,EACzBF,oBAAoB,EACpBI,wBAAwB,IAE1BvwB,KAAK4iB,aAAawN,4BAClBpwB,KAAK4iB,aAAa4N,iCAClBxwB,KAAK4iB,aAAaqV,8BAClBj4B,KAAK4iB,aAAawV,wBAAwB,CAAC,GAC3Cp4B,KAAK4iB,aAAayV,0BAA0B,CAAC,GAEjD,GAEA,kCAIA,WACEvyB,QAAQ6B,KAAK,8BACT3H,KAAK4iB,aAAa0V,8BACpBt4B,KAAK4iB,aAAa4N,iCAClBxwB,KAAKqH,SAAS,CACZkpB,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,MAG3BrwB,KAAKqH,SAAS,CACZkpB,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,IAE3BrwB,KAAK4iB,aAAa0N,8BAClBtwB,KAAK4iB,aAAasV,4BAClBl4B,KAAK4iB,aAAawN,4BAClBpwB,KAAK4iB,aAAaqV,8BAClBj4B,KAAK4iB,aAAa2V,6BAA6B,CAAC,GAEpD,GAAC,wBAED,WACEv4B,KAAK4iB,aAAawN,4BAClBpwB,KAAK4iB,aAAa0N,8BAClBtwB,KAAK4iB,aAAasV,4BAClBl4B,KAAK4iB,aAAa4N,iCAClBxwB,KAAK4iB,aAAaqV,8BAClBj4B,KAAKqH,SAAS,CACZqpB,oBAAoB,EACpBD,0BAA0B,EAC1B/D,2BAA2B,EAC3BhM,sBAAsB,EACtB6P,wBAAwB,EACxBF,yBAAyB,EACzBF,oBAAoB,GAExB,GAEA,8BAIA,WAA2B,IAAD,OACxBnwB,KAAK4iB,aAAawN,4BAClBpwB,KAAK4iB,aAAasV,4BAClBl4B,KAAK4iB,aAAa4N,iCAClBxwB,KAAK4iB,aAAa0N,8BACdtwB,KAAKiH,MAAM8F,gBAAgBxL,KAAO,GACpCvB,KAAKiH,MAAM8F,gBAAgBhC,SAAQ,SAAAvK,QACrBT,IAARS,GAKJsF,QAAQ6B,KAAK,eAAD,OAAgBnH,EAAG,MAC/B,EAAKoiB,aAAa4V,UAAUh4B,GAE5BuE,EAAAA,GAAAA,KAAa,2BANXA,EAAAA,GAAAA,QAAgB,yCAOpB,IACA/E,KAAKqH,SAAS,CACZ0F,gBAAiB,IAAIqX,IACrBmM,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,MAG3BrwB,KAAKiH,MAAMwF,eAAe1B,SAAQ,SAAAvK,GAChCsF,QAAQ6B,KAAK,eAAD,OAAgBnH,EAAG,MAC/B,EAAKoiB,aAAa4V,UAAUh4B,EAC9B,IACAR,KAAKqH,SAAS,CACZoF,eAAgB,IAAI2X,IACpBmM,wBAAwB,EACxBJ,oBAAoB,EACpBE,yBAAyB,KAG7BrwB,KAAK4iB,aAAaG,0BAA0B,CAAC,EAC/C,GAEA,uCAIA,WAAoC,IAAD,OACjCjd,QAAQ6B,KAAK,6BACR3H,KAAKiH,MAAM6sB,eAcd9zB,KAAK4iB,aAAa6V,WAClBz4B,KAAK4iB,aAAaG,0BAA0B,CAAC,GAC7C/iB,KAAKiH,MAAM8F,gBAAgBhC,SAAQ,SAAAvK,QACrBT,IAARS,GACF,EAAKoiB,aAAayL,YAAY7tB,EAAK,EAAKikB,iBAE5C,IACAzkB,KAAKqH,SAAS,CAAEysB,eAAe,MApB/B9zB,KAAK4iB,aAAawN,4BAClBpwB,KAAK4iB,aAAasV,4BAClBl4B,KAAK4iB,aAAa4N,iCAClBxwB,KAAK4iB,aAAaqV,8BAClBj4B,KAAK4iB,aAAa0N,8BAClBtwB,KAAK4iB,aAAa8V,WAClB14B,KAAKqH,SAAS,CACZysB,eAAe,EACf3D,oBAAoB,EACpBE,yBAAyB,EACzBE,wBAAwB,IAY9B,GAMA,oBA6BA,WAA4B,IAAD,SACnB/jB,EAAsB,GACtBsO,EAAkC,GAClCR,EAA2C,GAC3ChJ,EAAqD,GAC3D9E,EAAKtK,KAAI,MAATsK,GAAI,QAASxM,KAAK4iB,aAAa4G,eAC/B1O,EAAS5Y,KAAI,MAAb4Y,GAAQ,QAAS9a,KAAK4iB,aAAagH,mBACnCtP,EAASpY,KAAI,MAAboY,GAAQ,QAASta,KAAK4iB,aAAakH,4BACnC,IAAM6O,EAAsB34B,KAAK4iB,aAAa8G,yBACxCkP,EAA8C,OAAnBD,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBxY,QAAO,SAAC/R,GAAe,OAC3EA,EAAgByqB,8BAAgC,EAAK54B,MAAMqJ,iBAAiB,IAE9EgI,EAAiBpP,KAAI,MAArBoP,GAAgB,QAASsnB,IAEzB,IAMIhmB,EAMAkmB,EAZExjB,EAAc9I,EAAKnM,KAAI,SAAAqK,GAAG,OAAI8T,GAAqB9T,EAAI,IAEvDquB,EAAmB,CACvB,YAAa,gBAAiB,cAAe,uBAIzC7jB,EAAUlV,KAAKiH,MAAM0Z,qBACX5gB,IAAZmV,IACFtC,GAAS,SAAC,GAAM,CAACsC,QAASA,KAIxB1I,EAAKhF,OAAS,IAChBsxB,GACE,SAAC,GAAc,CACbtsB,KAAMA,EACNO,gBAAiB/M,KAAKiH,MAAM8F,gBAC5BN,eAAgBzM,KAAKiH,MAAMwF,eAC3BE,YAAa3M,KAAKozB,0BAClB5oB,mBAAoBxK,KAAKypB,oCAK/B,IAAM7F,EAAiB5jB,KAAK4jB,eAAevjB,KAAI,SAACwqB,EAAStqB,GACvD,OACE,SAAC,YAAa,CAEZW,MAAO2pB,EAAQ3f,UAAU,SAExB2f,EAAQzf,kBAHmBrL,IAAtB8qB,EAAQ3f,WAAiD,KAAtB2f,EAAQ3f,UAAoB2f,EAAQ3f,UAAS,kBAAc3K,GAM1G,IAEMy4B,EAAiE,CACrEnD,OAAO,SAAC,YAAa,CAAa30B,MAAM,QAAO,kBAArB,SAC1BohB,QAAQ,SAAC,YAAa,CAAcphB,MAAM,SAAQ,mBAAvB,UAC3B+3B,KAAK,SAAC,YAAa,CAAW/3B,MAAM,MAAK,gBAAjB,OACxBg4B,SAAS,SAAC,YAAa,CAAeh4B,MAAM,UAAS,oBAAzB,WAC5Bi4B,MAAM,SAAC,YAAa,CAAYj4B,MAAM,OAAM,iBAAnB,QACzBk4B,iBACE,SAAC,YAAa,CAAuBl4B,MAAM,kBAAiB,+BAAzC,mBAIrBm4B,cACE,SAAC,YAAa,CAAoBn4B,MAAM,eAAc,4BAAnC,iBAMjBo4B,EAA8C,EAEhD,SAAC,KAAM,CACL9wB,MAAO,CAAE4I,SAAU,KACnBvH,SAAU7J,KAAKiyB,iCAEfsH,0BAAwB,EACxBC,YAAY,iBAAgB,SAE3B5V,GAJG,uBAQJuI,EAAkBnsB,KAAKiH,MAAMklB,gBACnC,QAAwBpsB,IAApBosB,EAA+B,CACjC,IAAMriB,EAAMyX,GAAU4K,GACtBnsB,KAAK6jB,kBAAkB/Z,GAAKiB,SAAQ,SAAC6I,EAAYrT,GAC/C,IAAMsjB,EAAoBjQ,EAAW5G,OAAO3M,KAAI,SAAAuwB,GAC9C,OACE,SAAC,YAAa,CAEZ1vB,MAAO0vB,EAAK1lB,UACZxK,MAAOkT,EAAWjT,KAAK,SAEtBiwB,EAAKxlB,kBAJmBrL,IAAnB6wB,EAAK1lB,WAA8C,KAAnB0lB,EAAK1lB,UAAoB0lB,EAAK1lB,UAAS,qBAAiB3K,GAOpG,IACA+4B,EAAyBp3B,MACvB,gCACG0R,EAAWjT,KAAKyK,aACjB,SAAC,KAAM,CACL5C,MAAO,CAAE4I,SAAU,KACnBvH,SAAU,EAAKqoB,oCACfhY,YAAU,EACVuf,QAAS,EAAKtH,oCACdoH,0BAA0B,EAAM,SAE/B1V,OAIT,IACA,IAAMC,EAAsB9jB,KAAK8jB,oBAAoBha,GAAKzJ,KAAI,SAAAM,GAC5D,OAAOq4B,EAA2Br4B,EACpC,IACA24B,EAAyBp3B,MACvB,qDAEE,SAAC,KAAM,CACLsG,MAAO,CAAE4I,SAAU,KACnBvH,SAAU7J,KAAK+xB,sCAEfyH,YAAY,uBAAsB,SAEjC1V,GAHG,gCAOVwV,EAAyBp3B,MACvB,SAAC,KAAQ,CACPkK,SAAUpM,KAAKgyB,sCAAsC,oBACjD,0BAKV,CAEA,IAAM0H,GACJ,SAAC,YAAY,CAAiBt4B,MAAM,YAAW,UAC7C,SAAC,GAAY,CACXY,SAAUhC,KAAKC,MAAMqH,MAAMob,aAAa,GACxC3L,WAAW,KAHG,aAQd4iB,GACJ,SAAC,YAAY,CAAiBv4B,MAAM,YAAW,UAC7C,SAAC,GAAS,CAACY,SAAUhC,KAAKC,MAAMqH,MAAMob,aAAa,MADnC,aAKdvJ,EAAenZ,KAAK4iB,aAAaqD,qBACvC9M,EAAawe,MAAK,SAAC9V,EAAGC,GACpB,OAAiD,IAA7CD,EAAEjX,WAAWgtB,cAAc9V,EAAElX,YACxB,EAC+C,IAA7CkX,EAAElX,WAAWgtB,cAAc/V,EAAEjX,aAC9B,EAEH,CACT,IACA,IAAMsb,EAOF,CAAC,EACC0T,EAEF,CAAC,EACLzgB,EAAapO,SAAQ,SAAAuM,GACnB,IAAM1M,EAAa0M,EAAY1M,WACzB5I,EAAW,EAAK4gB,aAAasT,uBAAuBtrB,GAC1DgvB,EAAoBhvB,GAAc5I,EAClC,IAAMwG,GAAK,UACN,EAAKoa,aAAamN,oBAAoBnlB,IAE3Csb,EAAkBtb,GAAcpC,CAClC,IACA,IAgBIqxB,EAgDAC,EAkCAC,EAiCAC,EAwCAC,EA3KEC,GACJ,SAAC,YAAY,CAAqB94B,MAAM,gBAAe,UACrD,SAAC,GAAe,CACdY,SAAU43B,EACVzgB,aAAcA,EACdW,yBAA0BoM,EAC1BrM,8BAA+B7Z,KAAKiH,MAAM4S,8BAC1CD,6BAA8B5Z,KAAKiH,MAAM2S,6BACzCG,8BAA+B/Z,KAAKiqB,kCACpCjQ,yBAA0Bha,KAAKgzB,6BAC/Bja,4BAA6B/Y,KAAKizB,gCAClCpN,6BAA8B7lB,KAAKiH,MAAM4e,gCAV3B,iBAgBpB,GAAI7lB,KAAKiH,MAAM8e,mBAAmBve,OAAS,EAAG,CAC5C,IAAM2yB,EAA2B,GACjCn6B,KAAKiH,MAAM8e,mBAAmBhb,SAAQ,SAACoa,EAAU5kB,GAC/C45B,EAAyBj4B,MACvB,SAAC,YAAa,CAEZhB,MAAOikB,EAASC,eAChB5U,0BAA0B,EAC1BjP,KAAK,QAAO,cAEqBxB,IAAhColB,EAASiV,oBAAoE,KAAhCjV,EAASiV,mBAA4BjV,EAASiV,mBAAqB,iBAL/Er6B,IAA5BolB,EAASC,gBAA4D,KAA5BD,EAASC,eAAyBD,EAASC,eAAc,6BAAyB7kB,IAQvI,IACA45B,EAAyBj4B,MACvB,SAAC,YAAa,CAEZhB,WAAOnB,EACPyQ,0BAA0B,EAC1BjP,KAAK,QAAO,UAEZ,yBALI,+BAQRs4B,GACE,SAAC,YAAY,CAA2Bz4B,MAAM,sBAAqB,UACjE,UAAC,KAAK,CAAC8K,MAAM,SAAS3K,KAAM,GAAIiH,MAAO,CAAEyR,QAAS,QAAS,WACzD,SAAC,KAAM,CACLzR,MAAO,CAAE4I,SAAU,IAAKipB,SAAU,KAClCxwB,SAAU7J,KAAKkzB,iCAEfhyB,MAAOlB,KAAKiH,MAAM4e,6BAA6B,SAE9CsU,GAHG,wBAKN,SAAC,KAAO,CAAC/4B,MAAM,QAAO,UACpB,SAAC,KAAG,CACFD,MAAM,SAACm5B,GAAA,EAAY,IACnBx1B,KAAK,UACLmI,QAASjN,KAAKmzB,qCAdJ,sBAoBtB,CAGA,GAAIrY,EAAStT,OAAS,EAAG,CACvB,IAAMwT,EAIF,CAAC,EACCuf,EAEF,CAAC,EACCzf,EAAW9a,KAAK4iB,aAAagH,iBACnC9O,EAAS/P,SAAQ,SAAA6P,GACfI,EAAqBJ,EAAQpa,KAAO,EAAKoiB,aAAa4X,gBACpD5f,EAAQpa,KAEV+5B,EAAgB3f,EAAQpa,KAAO,EAAKoiB,aAAa6X,mBAC/C7f,EAAQpa,IAEZ,IACAs5B,GACE,SAAC,YAAY,CAAqB14B,MAAM,gBAAe,UACrD,SAAC,GAAW,CACV0Z,SAAUA,EACV9Y,SAAUu4B,EACVvf,qBAAsBA,EACtBD,mBAAoB/a,KAAKiH,MAAM8T,mBAC/BE,0BAA2Bjb,KAAK6pB,8BAChC3O,qBAAsBlb,KAAK8yB,4BAPb,iBAWpBiG,EAAiB72B,KAAK,gBACxB,CAGA,GAAIoY,EAAS9S,OAAS,EAAG,CACvB,IAAMgT,EAIF,CAAC,EACCkgB,EAEF,CAAC,EACLpgB,EAASvP,SAAQ,SAAAsP,GACfG,EAAqBH,EAAQ7Z,KAAO,EAAKoiB,aAAa+X,yBACpDtgB,EAAQ7Z,KAEVk6B,EAAgBrgB,EAAQ7Z,KAAO,EAAKoiB,aAAagY,4BAC/CvgB,EAAQ7Z,IAEZ,IACAu5B,GACE,SAAC,YAAY,CAAsB34B,MAAM,kBAAiB,UACxD,SAAC,GAAW,CACVkZ,SAAUA,EACVtY,SAAU04B,EACVlgB,qBAAsBA,EACtBD,mBAAoBva,KAAKiH,MAAMsT,mBAC/BE,0BAA2Bza,KAAKgqB,8BAChCtP,qBAAsB1a,KAAK+yB,4BAPb,kBAWpBgG,EAAiB72B,KAAK,kBACxB,CAMA,GAFW,OAAXoT,QAAW,IAAXA,GAAoB,QAAT,EAAXA,EAAavK,eAAO,OAApB,OAAAuK,EAAuBtV,KAAKwxB,iBAAiBnnB,KAAKrK,OAE9CsR,EAAiB9J,OAAS,EAAG,CAC/B,IAAMqzB,EAEF,CAAC,EACCppB,EAKF,CAAC,EACLH,EAAiBvG,SAAQ,SAAAqD,GACvBqD,EAA6BrD,EAAgB5N,KAAO,EAAKoiB,aAAakY,wBACpE1sB,EAAgB5N,KAElBq6B,EAAwBzsB,EAAgB5N,KAAO,EAAKoiB,aAAamY,2BAC/D3sB,EAAgB5N,IAEpB,IACAw5B,GACE,SAAC,YAAY,CAAyB54B,MAAM,oBAAmB,UAC7D,SAAC,GAAmB,CAClBkQ,iBAAkBA,EAClBtP,SAAU64B,EACVvsB,uBAAwBtO,KAAKqO,2BAG7BoD,6BAA8BA,EAC9BD,2BAA4BxR,KAAKiH,MAAMuK,2BACvCD,kCAAmCvR,KAAK2pB,sCACxCjY,6BAA8B1R,KAAKqyB,oCAVrB,qBAcpB0G,EAAiB72B,KAAK,mBACxB,CAGA,IAAI84B,EAAgB,MACdC,EAAkB,EACtB,SAAC,GAAM,CACLjpB,QAAQ,mBACR7Q,KAAM+5B,EAAAA,IACNjuB,QAASjN,KAAK6wB,iBACd9e,WAAY/R,KAAKiH,MAAMkpB,oBACnB,oBAEN,SAAC,GAAM,CACLne,QAAQ,sBACR7Q,KAAMg6B,EAAAA,IACNluB,QAASjN,KAAK8wB,sBACd/e,WAAY/R,KAAKiH,MAAMopB,yBACnB,sBAEN,SAAC,GAAM,CACLre,QAAQ,yBACR7Q,KAAMi6B,EAAAA,IACNnuB,QAASjN,KAAK+wB,qBACdhf,WAAY/R,KAAKiH,MAAMspB,wBACnB,yBAEN,SAAC,GAAM,CACLve,QAAQ,8BACR/E,QAASjN,KAAKgxB,iBACd7vB,KAAMk6B,EAAAA,KACF,sBAEN,SAAC,GAAM,CACLrpB,QAAQ,yBACR7Q,KAAMnB,KAAKiH,MAAM6sB,cAAgBwH,EAAAA,IAAQC,EAAAA,IACzCtuB,QAASjN,KAAKixB,0BACdlf,WAAY/R,KAAKiH,MAAM6sB,eACnB,iCAEN,SAAC,GAAM,CACL9hB,QAAQ,oBACR7Q,KAAMq6B,EAAAA,IACNvuB,QAASjN,KAAKkxB,wBACV,2BAGFuK,EAAe,EACnB,SAAC,GAAM,CACLzpB,QAAQ,gBACR7Q,KAAMu6B,EAAAA,GACNzuB,QAASjN,KAAKmxB,YACV,gCAGJnxB,KAAKC,MAAM07B,wBACb1B,GACE,UAAC,KAAG,CAACtpB,QAAQ,QAAO,UACjBsqB,EAAgB56B,KAAI,SAACC,EAAMmJ,GAC1B,OAAO,SAAC,WAAc,UAAUnJ,GAAJmJ,EAC9B,IACCgyB,EAAap7B,KAAI,SAACC,EAAMmJ,GACvB,OAAO,SAAC,WAAc,UAAUnJ,GAAJmJ,EAC9B,OAGJuxB,EAAgB,QAGlB,IAKIY,EALAC,EAAS,UAMb,GALI77B,KAAKiH,MAAMC,YACb20B,EAAS,YAImB,MAA1B77B,KAAKiH,MAAM+mB,YAAqB,CAClC,IAAM8N,EAID,CACH,CACEn7B,KAAM,MACNO,MAAOlB,KAAKiH,MAAM+mB,YAAYxtB,MAG5Bu7B,EAGD,CACH,CACEp7B,KAAM,eACNO,MAAOlB,KAAKiH,MAAM+mB,YAAY1a,SAAS0M,cAGrCgc,EAGD,GACLh8B,KAAKiH,MAAM+mB,YAAYljB,YAAYC,SAAQ,SAAAzK,GACzC,GAAuB,SAAnBA,EAAK+K,UAAsB,CAC7B,IAAM4wB,EAAW37B,EACjB07B,EAAwB95B,KAAK,CAC3BvB,KAAMs7B,EAAShxB,wBAAwB,GAAGG,YAC1ClK,MAAO+6B,EAASzwB,oBAAoB,GAAGJ,aAE3C,KAAO,CACL,IAAM8wB,EAAW57B,EACjB07B,EAAwB95B,KAAK,CAC3BvB,KAAMu7B,EAASjxB,wBAAwB,GAAGG,YAC1ClK,MAAOg7B,EAASxwB,WAEpB,CACF,IACA,IAAMywB,GAMF,CAAC,EACLn8B,KAAKiH,MAAM+mB,YAAYriB,aAAaZ,SAAQ,SAAAzK,GAC1C,IAAIsK,EAAa,UACjB,GAA4B,MAAxBtK,EAAKwS,gBAAyB,CAChC,IAAMspB,EAAW9pB,GAAuB,CACtChF,QAAShN,EAAKwS,gBACdnS,KAAM,IAAI2K,EAAAA,GAAAA,OAAAA,aAA6B,CACrCpK,MAAO,SACPsO,QAAS,wBACTD,iBAAkB,UAGlB6sB,EAAS50B,OAAS,IACpBoD,EACEwxB,EAAS,GAENC,sBAAsB,GACtBC,gCAGT,CACM1xB,KAAcuxB,KAClBA,GAAsCvxB,GAAc,IAEtD,IAAM2xB,EAAoBj8B,EAAKuL,sBAAsB,GACrDswB,GAAsCvxB,GAAY1I,KAAK,CACrDvB,KAAML,EAAK2K,wBAAwB,GAAGG,YACtClK,MAAOq7B,EAAkBzwB,aAAa7B,WACtC+B,KAAMuwB,EAAkBtwB,6BAA6B,GAAGb,aAE5D,IACA,IAAMoxB,GAAuB,SAC3Bp8B,GAEA,OAAOA,EAAWC,KAAI,SAAAC,GACpB,IAAIY,EAMJ,OAJEA,EADe,MAAbZ,EAAK0L,KACF,UAAM1L,EAAKY,MAAK,aAAKZ,EAAK0L,KAAI,KAE3B1L,EAAKY,OAGb,SAAC,SAAiB,CAEhBR,MAAOJ,EAAKK,KAAK,SAEhBO,GAHIZ,EAAKK,KAMhB,GACF,EACM87B,GAAkBD,GAAqBV,GACvCY,GAAwBF,GAC5BT,GAEIY,GAA4BH,GAChCR,GAEIY,GAA6B,GACnC,IAAK,IAAMhyB,MAAcuxB,GAAuC,CAC9D,IAAMU,GAAeL,GACnBL,GAAsCvxB,KAErB,YAAfA,GACFgyB,GAA2B16B,KAAK26B,IAEhCD,GAA2B16B,MACzB,iCACE,SAAC,KAAO,CAACuT,YAAY,OAAOqnB,kBAAmB,EAAGC,QAAM,EAACrsB,OAAK,WAC3D9F,KAEFiyB,MAIT,CACAjB,GACE,iCACE,SAAC,IAAY,CAAC/7B,OAAO,aAAagC,OAAQ,EAAE,SACzC46B,MAEH,SAAC,KAAO,CAAChnB,YAAY,OAAOqnB,kBAAmB,EAAE,kCAGjD,SAAC,IAAY,CAACj9B,OAAO,aAAagC,OAAQ,EAAE,SACzC66B,MAEH,SAAC,KAAO,CAACjnB,YAAY,OAAOqnB,kBAAmB,EAAE,0BAGjD,SAAC,IAAY,CAACj9B,OAAO,aAAagC,OAAQ,EAAE,SACzC86B,MAEH,SAAC,KAAO,CAAClnB,YAAY,OAAOqnB,kBAAmB,EAAE,2BAGjD,SAAC,IAAY,CAACj9B,OAAO,aAAagC,OAAQ,EAAE,SACzC+6B,OAIT,CAEA,IAAMI,GAAkBh9B,KAAK4iB,aAAaqa,iBAAiBz1B,OAAS,IAClE,gBAAKgB,MAAO,CAAE00B,OAAQ,UAAW,UAC/B,SAAC,KAAQ,CACP5yB,QAAStK,KAAKiH,MAAMqqB,qBACpBllB,SAAUpM,KAAKqxB,wBAAwB,4BAO7C,OACE,UAAC,IAAM,CAAC7oB,MAAO,CAAEC,OAAQ,QAAU00B,UAAQ,aACzC,UAAC,YAAc,CAAC30B,MAAO,CAAEC,OAAQ,QAAS,UACvCwxB,GAED,gBACEzxB,MAAO,CACLC,OAAO,eAAD,OAAiBuyB,EAAa,KACpCoC,SAAU,SACVvB,OAAQA,GAEVlzB,IAAK3I,KAAK+jB,qBAGZ,SAAC,KAAK,CACJsZ,KAAMr9B,KAAKiH,MAAMwpB,yBACjBrvB,MAAM,wBACNk8B,KAAMt9B,KAAKoyB,wCACXmL,cAAe,CAAE9sB,gBAA2C1Q,IAA/BC,KAAKiH,MAAMklB,sBAAqEpsB,IAApCC,KAAKiH,MAAM4tB,uBACpF2I,SAAUx9B,KAAK8xB,0CACf2L,OAAO,SAAQ,UAEf,SAAC,KAAK,CAACvxB,MAAM,QAAQkB,UAAU,WAAU,SACtCksB,OAIL,SAAC,KAAK,CACJ+D,KAAMr9B,KAAKiH,MAAMylB,0BACjBtrB,MAAM,eACNo8B,SAAUx9B,KAAK6xB,+BACf6L,cAAY,EACZC,OAAQ,KAAK,UAEb,SAAC,KAAK,CAACzxB,MAAM,QAAQkB,UAAU,WAAU,SACtCwuB,OAIL,SAAC,KAAK,CACJyB,KAAMr9B,KAAKiH,MAAMypB,mBACjBtvB,MAAM,uBACNk8B,KAAMt9B,KAAK0yB,6BACX8K,SAAUx9B,KAAK2yB,yCACf8K,OAAO,SAAQ,UAEf,UAAC,KAAK,CAACvxB,MAAM,QAAQkB,UAAU,WAAU,WACvC,SAAC,KAAW,CACVosB,YACE,IAAG,UACAx5B,KAAKiH,MAAMysB,sBAAsB,IACpC,KAAI,UACD1zB,KAAKiH,MAAMysB,sBAAsB,IACpC,IAEFkK,OAAO,oBACPxxB,SAAUpM,KAAKuyB,2BACfsL,aAAc79B,KAAKuyB,2BACnBzP,UAAU,EACVgb,WACE99B,KAAKiH,MAAMssB,4BAEP,SAACwK,GAAA,EAAa,CAACv1B,MAAO,CAAES,MAAO,sBAG/B,SAAC+0B,GAAA,EAAY,CAACx1B,MAAO,CAAES,MAAO,wBAItC,SAAC,KAAW,CACVuwB,YACE,IAAG,UACAx5B,KAAKiH,MAAM2sB,sBAAsB,IACpC,KAAI,UACD5zB,KAAKiH,MAAM2sB,sBAAsB,IACpC,IAEFgK,OAAO,oBACPxxB,SAAUpM,KAAKwyB,2BACfqL,aAAc79B,KAAKwyB,2BACnB1P,UAAU,EACVgb,WACE99B,KAAKiH,MAAMusB,4BAEP,SAACuK,GAAA,EAAa,CAACv1B,MAAO,CAAES,MAAO,sBAG/B,SAAC+0B,GAAA,EAAY,CAACx1B,MAAO,CAAES,MAAO,wBAItC,SAAC,KAAW,CACVuwB,YAAY,WACZoE,OAAO,gBACPxxB,SAAUpM,KAAKyyB,6BACfoL,aAAc79B,KAAKyyB,6BACnB3P,UAAU,EACVgb,WACE99B,KAAKiH,MAAMqsB,8BAEP,SAACyK,GAAA,EAAa,CAACv1B,MAAO,CAAES,MAAO,sBAG/B,SAAC+0B,GAAA,EAAY,CAACx1B,MAAO,CAAES,MAAO,6BAO1C,SAAC,KAAK,CACJo0B,KAAMr9B,KAAKiH,MAAMyZ,qBACjBtf,MAAM,yBACNk8B,KAAMt9B,KAAK4yB,yBACX4K,SAAUx9B,KAAK6yB,yBACf4K,OAAO,OAAM,SAEZ7qB,QAIL,SAAC,UAAY,CACXhJ,MAAO,IACPq0B,cAAY,EACZz1B,MAAO,CACL01B,WAAY,QACZC,gBAAiB,IACjBf,SAAU,SACVgB,WAAY,QACZ,UAEF,UAAC,IAAI,CACHl0B,KAAK,SACLm0B,gBAAiBtF,EACjBvwB,MAAO,CAAEC,OAAQ,QACjB0B,aAAc,GACdm0B,oBAAkB,EAClBC,aAAc,WAEZC,YAAW,WACe,MAApB,EAAK7b,aACP,EAAKA,YAAYpa,QAErB,GAAG,IACL,EAAE,UAEgC,MAAjCvI,KAAKgkB,iBAAiBvc,UACrB,SAAC,YAAY,CAAarG,MAAM,cAAa,UAC3C,SAAC,SAAS,CAACoH,MAAO,CAAEC,OAAQ,QAAS,UACnC,gBACED,MAAO,CAAEC,OAAQ,SACjBE,IAAK3I,KAAKgkB,oBAH4B,UAD1B,SASnB0V,EACAsD,GACArD,EACAO,EACAL,GACD,SAAC,YAAY,CAAmBz4B,MAAM,cAAa,SAChD03B,GADe,eAGjBkB,EACuB,IAAvB1kB,EAAY9N,QAET,yBAGA,SAAC,YAAY,CAEXpG,MAAM,wBAAuB,UAE7B,SAAC,GAAsB,CACrBkU,YAAaA,EACblJ,SAAUpM,KAAKypB,iCACfzN,sBAAuBhc,KAAKiH,MAAMwF,eAClCuC,cAAehP,KAAKsyB,qBACpBrW,wBAAyBjc,KAAKic,2BAR5B,yBAYT6d,EACAC,OAGJ/5B,KAAKiH,MAAMwmB,4BACZztB,KAAKiH,MAAM4lB,qBAAqBrlB,OAAS,GAErC,SAAC,GAAiB,CAChBsW,UAAW9d,KAAKiH,MAAMymB,mBACtB3P,UAAW/d,KAAKiH,MAAM0mB,mBACtBnhB,KAAMxM,KAAKiH,MAAM4lB,wBAInB,0BAIV,KAAC,EA35Gc,CAAS9qB,EAAAA,WA85G1B,SAAeoZ,GAAWwI,ICl1HiB,IAEtC8a,IAAY,SAAZA,GAAAA,EAAY,gBAAZA,EAAY,cAAZA,EAAY,oBAAZA,EAAY,uBAAZA,KAAAA,GAAY,KAOjB,IAAMC,GAAiB,SACrBrc,EACAsc,GAEA,OAAOtc,EAAMuc,UAAU,KAAOD,CAChC,EAEME,GAAqB,SACzBxc,EACAzD,GAEA,OAA4B,MAAxByD,EAAMyc,gBACDzc,EAAMyc,iBAAmBlgB,EAASkgB,cAG7C,EAoBMC,IAAK,QAkBT,WACEC,GACC,IAAD,4BAnBOj4B,iBAAW,OACXk4B,oBAAc,OACdzrB,yBAAmB,OACnB9K,yBAAmB,OACnBS,wBAAkB,OAClB+1B,4BAAsB,OACtBC,YAAwB,GAAE,KAC1B3Z,+BAAyB,OACzB9C,kBAAY,OACZM,iBAAW,OACXzb,oBAAc,EAUS,IAA1By3B,EAAQ1lB,OAAO9R,QACjBY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,wDAKN,IAAMuE,EAAqB,IAAIib,IAAI,IAC7Bgb,EAAkB,IAAIhb,IAAI,IAC1B8a,EAAyB,IAAI9a,IAAI,IACjCib,EAAuB,IAAIjb,IAAI,IAC/Bkb,EAAuB,CAC3BC,OAAQ,IAAInb,IAAI,IAChBob,MAAO,IAAIpb,IAAI,IACfqb,SAAU,IAAIrb,IAAI,KAEd+a,EAEF,CACFI,OAAQ,CAAC,GAEL7c,EAA2D,GAC3DM,EAA0D,GAC1Dzb,EAA6D,GA4CnE,GA3CAy3B,EAAQ1lB,OAAOvO,SAAQ,SAACsX,GAStB,GARAgd,EAAqBxW,IAAIxG,EAAMza,qBAC/BuB,EAAmB0f,IAAIxG,EAAM9I,mBAC7B8I,EAAM7I,oBAAoBzO,SAAQ,SAAAzK,GAChC4+B,EAAuBrW,IAAIvoB,EAAKoZ,sBAClC,IAC4B,MAAxB2I,EAAMyc,gBACRM,EAAgBvW,IAAIxG,EAAMyc,gBAExBJ,GAAerc,EAAOoc,GAAac,QAAS,CAE9C,GADAD,EAAqBC,OAAO1W,IAAIxG,EAAMgJ,qBACb,OAArBhJ,EAAMqd,iBAA4C3/B,IAArBsiB,EAAMqd,WACrC,cAAyBhiB,OAAOC,KAAKuhB,GAAuB,eAAE,CAAzD,IAAMt0B,EAAU,KACnBu0B,EAAYI,OAAO30B,GAAYie,IAAIxG,EAAMqd,WAC3C,CAEFhd,EAAaxgB,KAAKmgB,EACpB,MAAO,GAAIqc,GAAerc,EAAOoc,GAAakB,WAAY,CAOxD,IAL4BX,EAAQ1lB,OAAOiD,MAAK,SAAAqjB,GAAG,OACjDlB,GAAekB,EAAKnB,GAAac,SACjCK,EAAIvU,sBAAwBhJ,EAAMgJ,qBAClCuU,EAAIpmB,oBAAoB4C,OAAM,SAAAyjB,GAAG,OAAIA,EAAInmB,wBAA0B2I,EAAM7I,oBAAoB,GAAGE,qBAAqB,GAAC,IAE9F,CAGxB,GAFA5T,QAAQiZ,MAAM,kEAAmEsD,EAAMgJ,qBACvFiU,EAAqBC,OAAO1W,IAAIxG,EAAMgJ,qBACb,OAArBhJ,EAAMqd,iBAA4C3/B,IAArBsiB,EAAMqd,WACrC,cAAyBhiB,OAAOC,KAAKuhB,GAAuB,eAAE,CAAzD,IAAMt0B,EAAU,KACnBu0B,EAAYI,OAAO30B,GAAYie,IAAIxG,EAAMqd,WAC3C,CAEFhd,EAAaxgB,KAAKmgB,EACpB,CACF,MAAWqc,GAAerc,EAAOoc,GAAae,QAC5CF,EAAqBE,MAAM3W,IAAIxG,EAAMgJ,qBACrCrI,EAAY9gB,KAAKmgB,IACRqc,GAAerc,EAAOoc,GAAagB,YAC5CH,EAAqBG,SAAS5W,IAAIxG,EAAMgJ,qBACxC9jB,EAAerF,KAAKmgB,GAExB,IAE4B,IAAxBK,EAAalb,OACfY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,gEAGC,CACDw6B,EAAgB79B,KAAO,GACzB6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,iFAMN,IAAMk7B,EAAkB,IAAI1b,IAAI,IAChC1B,EAAa3X,SAAQ,SAACsX,GACpByd,EAAgBjX,IAAIxG,EAAM0d,gBAC5B,IACID,EAAgBv+B,KAAO,GACzB6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,iFAMiB8d,EAAavC,QAAO,SAAAkC,GACzC,MAA8B,cAAvBA,EAAMuc,UAAU,EACzB,IACmBp3B,OAAS03B,EAAuB39B,MACjDuE,QAAQD,KACN,oHAIN,CAEA7F,KAAK0iB,aAAeA,EACpB1iB,KAAKgjB,YAAcA,EACnBhjB,KAAKuH,eAAiBA,EAEtBvH,KAAKmJ,oBAAkB,QAAOA,GAC9BnJ,KAAKk/B,wBAAsB,QAAOA,GAEA,IAA9BG,EAAqB99B,MACvB6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,mEAIN5E,KAAK0I,qBAAsB,QAAI22B,GAAsB,GAEZ,IAArCC,EAAqBC,OAAOh+B,MAC9B6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,4EAKN5E,KAAKwT,qBAAsB,QAAI8rB,EAAqBC,QAAQ,GAE5D,IAAIS,GAAoB,EACpBtiB,OAAOC,KAAKwhB,EAAYI,QAAQ/3B,OAAS,IAC3Cw4B,GAAoB,GAEtBhgC,KAAKk/B,uBAAuBn0B,SAAQ,SAAAH,GACI,MAAlCu0B,EAAYI,OAAO30B,GACjBu0B,EAAYI,OAAO30B,GAAYrJ,KAAO,EACxC6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,8CAAuCgG,EAAU,KACjD,uDAG6C,IAAxCu0B,EAAYI,OAAO30B,GAAYrJ,KACxC,EAAK49B,YAAYj9B,MAAK,QAAIi9B,EAAYI,OAAO30B,IAAa,IAE1DxC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,8CAAuCgG,EAAU,MAAjD,+EAOFo1B,GACF53B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,8CAAuCgG,EAAU,MAAjD,8EAOV,IAEIw0B,EAAgB79B,KAAO,EACzB6G,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,0GAI8B,IAAzBw6B,EAAgB79B,KACzBvB,KAAKi/B,gBAAiB,QAAIG,GAAiB,GAE3Cp/B,KAAKi/B,eAAiB,KAGxBj/B,KAAKwlB,0BACsC,IAAzCxlB,KAAK0iB,aAAa,GAAGqd,iBAC8B,gBAAnD//B,KAAK0iB,aAAa,GAAGud,0BAGvBjgC,KAAK+G,iBACqBhH,IAAxBi/B,EAAQj4B,YAA4Bi4B,EAAQj4B,YAAc,EAE9D,IAUIm5B,GAAe,SACnB5mB,GAEA,IAAM6mB,EAAwC,GAC9C7mB,EAAOvO,SAAQ,SAAC0f,GACd,GAAIA,EAAOjjB,OAAS,EAAG,CACrB,IAAMkb,EAAe+H,EAAOtK,QAAO,SAACkC,GAAK,OACvCqc,GAAerc,EAAOoc,GAAac,SAClCb,GAAerc,EAAOoc,GAAakB,aACjClV,EAAOlO,MAAK,SAAAqjB,GAAG,OACdlB,GAAekB,EAAKnB,GAAac,SACjCK,EAAIvU,sBAAwBhJ,EAAMgJ,qBAClCuU,EAAIpmB,oBAAoB4C,OAAM,SAAAyjB,GAAG,OAAIA,EAAInmB,wBAA0B2I,EAAM7I,oBAAoB,GAAGE,qBAAqB,GAAC,GACtH,IAEN,GAAIgJ,EAAalb,OAAS,EAAG,CAC3B,IAWI44B,EAXExhB,EAAW8D,EAAa,GACxB2d,EAAuB3d,EAAavC,QAAO,SAACkC,GAChD,OAAOzD,EAASmhB,kBAAoB1d,EAAM0d,eAC5C,IACMO,EAAqBH,EAActwB,WAAU,SAACvI,GAClD,OA4EV,SACEA,EACA+a,GAEA,GACE/a,EAAMkM,sBAAwB6O,EAAMgJ,qBACpC/jB,EAAMoB,sBAAwB2Z,EAAMza,qBACpCN,EAAM23B,iBAAmB5c,EAAMyc,eAE/B,OAAO,EAET,OAAO,CACT,CAxFiByB,CAAwBj5B,EAAOsX,EACxC,IAEMoE,EAAcyH,EAAOtK,QAAO,SAACkC,GACjC,OAAOqc,GAAerc,EAAOoc,GAAae,MAC5C,IAGEY,EADEpd,EAAYxb,OAAS,EACDwb,EAAY7C,QAAO,SAACkC,GACxC,OAAOwc,GAAmBxc,EAAOzD,EACnC,IAEsBoE,EAExB,IAGIwd,EAHEj5B,EAAiBkjB,EAAOtK,QAAO,SAACkC,GACpC,OAAOqc,GAAerc,EAAOoc,GAAagB,SAC5C,IAUA,GAPEe,EADEj5B,EAAeC,OAAS,EACDD,EAAe4Y,QAAO,SAACkC,GAC9C,OAAOwc,GAAmBxc,EAAOzD,EACnC,IAEyBrX,GAGC,IAAxB+4B,EAA2B,CAC7B,IAAMG,EAA0C,CAC9CxB,eAAgBrgB,EAASkgB,eACzBtrB,oBAAqBoL,EAASyM,oBAC9B3iB,oBAAqBkW,EAAShX,oBAC9B8a,aAAc2d,EACdrd,YAAaod,EACb74B,eAAgBi5B,GAElBL,EAAcj+B,KAAKu+B,EACrB,KAAO,CAAC,IAAD,MACCA,EAAoBN,EAAcG,IACxC,EAAAG,EAAkB/d,cAAaxgB,KAAI,iBAAIm+B,KACvC,EAAAI,EAAkBzd,aAAY9gB,KAAI,iBAAIk+B,KACtC,EAAAK,EAAkBl5B,gBAAerF,KAAI,iBAAIs+B,GAC3C,CACF,CACF,CACF,IAEA,IAAIE,EAAkBP,EAAc9/B,KAAI,SAACC,GACvC,OAAO,IAAIy+B,GAAM,CACfzlB,OAAO,GAAD,gBACDhZ,EAAKoiB,eAAY,QACjBpiB,EAAK0iB,cAAW,QAChB1iB,EAAKiH,kBAGd,IAWA,OAVAm5B,EAASA,EAAO/I,MAAK,SAAC9V,EAAGC,GACvB,IAAM6e,EAAO9e,EAAEa,aAAa,GACtBke,EAAO9e,EAAEY,aAAa,GAC5B,OAAgC,MAA5Bie,EAAK/4B,qBAA2D,MAA5Bg5B,EAAKh5B,oBACpCqtB,OAAO0L,EAAK/4B,qBAAuBqtB,OAAO2L,EAAKh5B,qBAE/C,CAEX,GAGF,ECzWO,IAAMi5B,GAAkB,yCAAG,0GAUwC,OATxE94B,EAAO,EAAPA,QACA8c,EAAgB,EAAhBA,iBACAic,EAAS,EAATA,UACAC,EAAO,EAAPA,QAAO,SAGCznB,EAAuD,GAC7DxT,QAAQ6B,KAAK,+BAAD,OAAgCkd,EAAgB,SAEtD/c,EAASC,EAAQ/D,EAAegE,iCAAgC,SAC1CF,EAAOyiB,gBAAgB,CACjDzF,YAAa,CACXC,SAAU,KACVic,iBAAkBnc,KAEpB,OALiB,OAAb2F,EAAa,iBAObL,QAAQ8W,IACZzW,EAAcnqB,IAAG,yCAAC,WAAOuG,GAAC,oFAKvB,OALuB,EACJiB,EAAAA,SAAAA,eAA4BjB,GAAxCsO,EAAO,EAAPA,QACFgsB,EAAgBhsB,EACtBpP,QAAQ6B,KAAK,gCAAD,OACsBu5B,EAAc3nB,kBAAiB,MAChE,SAC+BzR,EAAO4iB,uBAAuB,CAC5D7F,iBAAkBA,EAClBvb,kBAAmB43B,EAAc3nB,oBACjC,OAHIoR,EAAiB,OAKjBwW,EAA2D,GACjExW,EAAkB5f,SAAQ,SAACzK,GAAU,IAAD,IAClC,IACkB,QAAhB,EAAAA,EAAK,mBAAW,OAAO,QAAP,EAAhB,EAAkBk2B,aAAK,WAAP,EAAhB,EAA0B,MAC1BxyB,EAAegE,gCACf,CACA,IAAMqa,EAAQ,IAAIxa,EAAAA,SAAAA,4BAAyC,CACzD7F,SAAU1B,IAEZ6gC,EAAaj/B,KAAKmgB,EACpB,CACF,IAEI8e,EAAa35B,OAAS,GACxB8R,EAAOpX,KAAKi/B,GACb,2CACF,mDA3BgB,KA4BlB,QACKC,EAAYlB,GAAa5mB,GAC/BwnB,EAAUM,GAAU,kDAEpBt7B,QAAQU,MAAM,EAAD,IACP66B,EAAc,IAAIx8B,EACtBD,EACA,qDAEFm8B,EAAQM,GACRj5B,GAAAA,QACElD,EACAm8B,GACD,0DAEJ,gBA9D8B,sCCAzBC,GAAc,IAAIC,IAClBC,GAAkB,IAAID,IASfE,GAAY,SAAH,GAAwE,IAAlE15B,EAAO,EAAPA,QAAS8c,EAAgB,EAAhBA,iBACnC,GAA4B6c,EAAAA,EAAAA,UAAkB,IAAG,eAA1ChB,EAAM,KAAEiB,EAAS,KACxB,GAAkCD,EAAAA,EAAAA,WAAkB,GAAM,eAAnDx6B,EAAS,KAAE06B,EAAY,KAC9B,GAA0BF,EAAAA,EAAAA,UAAuB,MAAK,eAA/Cl7B,EAAK,KAAEq7B,EAAQ,KA0DtB,OAxDAC,EAAAA,EAAAA,YAAU,WACR,QAAyB/hC,IAArB8kB,EAGF,OAFA8c,EAAU,SACVC,GAAa,GAIf,IAAMG,EAAaT,GAAYU,IAAInd,GACnC,QAAmB9kB,IAAfgiC,EAGF,OAFAJ,EAAUI,QACVH,GAAa,GAIfA,GAAa,GAEb,IAAMK,EAAW,yCAAG,2FAsBjB,YAlBsBliC,KAFnBmiC,EAAiBV,GAAgBQ,IAAInd,MAIvCqd,EAAiB,IAAI/X,SAAQ,SAACC,EAASC,GACrCwW,GAAmB,CACjB94B,QAAAA,EACA8c,iBAAAA,EACAic,UAAW,SAACM,GACVE,GAAYrY,IAAIpE,EAAkBuc,GAClChX,EAAQgX,EACV,EACAL,QAAS,SAACoB,GACR9X,EAAO8X,EACT,IACCnc,OAAM,SAACmc,GACR9X,EAAO8X,EACT,GACF,IACAX,GAAgBvY,IAAIpE,EAAkBqd,IACvC,kBAGyBA,EAAc,OAAhCd,EAAS,OACfO,EAAUP,GACVS,EAAS,MAAK,kDAEdA,EAAS,EAAD,IACRF,EAAU,IAAG,QAGM,OAHN,UAEbH,GAAgBrS,OAAOtK,GACvB+c,GAAa,GAAM,6EAEtB,kBAnCgB,mCAqCZK,GACP,GAAG,CAACl6B,EAAS8c,IAEN,CAAE6b,OAAAA,EAAQx5B,UAAAA,EAAWV,MAAAA,EAC9B,ECtEQ47B,GAAsB92B,EAAAA,GAAAA,oBAAAA,kBA2BxB+2B,GAAkB,SAAC3B,EAAiBp3B,GACxC,OAAOo3B,EAAO/5B,MAAK,SAACW,GAClB,OAAOA,EAAM6B,mBAAmBxC,MAAK,SAACnG,GACpC,OAAOA,IAAQ8I,CACjB,GACF,GACF,EAEA,SAASg5B,GAAuB,GAqBR,IApBtBv6B,EAAO,EAAPA,QACA24B,EAAM,EAANA,OACAhiB,EAAI,EAAJA,KACAC,EAAG,EAAHA,IACA8D,EAAO,EAAPA,QACAkZ,EAAqB,EAArBA,sBACArmB,EAAW,EAAXA,YAeA,GAA0DoG,EAAAA,EAAAA,MAAoE,IAAtHmJ,iBAAAA,OAAgB,MAAG,GAAE,MAAEvb,kBAAAA,OAAiB,MAAG,GAAE,EAC/C+R,GAAWC,EAAAA,EAAAA,MAEjB,GAA0ComB,EAAAA,EAAAA,UAASW,GAAgB3B,EAAQp3B,IAAmB,eAAvFi5B,EAAa,KAAEC,EAAgB,KACtC,GAA4Cd,EAAAA,EAAAA,UAAqC,MAAK,eAA/EpY,EAAc,KAAEmZ,EAAiB,MAExCX,EAAAA,EAAAA,YAAU,WACR,IAAMY,EAAcL,GAAgB3B,EAAQp3B,GACxB,OAAhBo5B,GACFF,EAAiBE,EAErB,GAAG,CAACp5B,EAAmBo3B,KAEvBoB,EAAAA,EAAAA,YAAU,WACR,IAAMa,EAAmB,yCAAG,8FAAqD,OAA5C56B,EAAO,EAAPA,QAAS8c,EAAgB,EAAhBA,iBAAkBvb,EAAiB,EAAjBA,kBAAiB,SAI9B,IAAI6gB,SAAsC,SAACC,EAASC,GACrG,IACE,IAAMuY,EAAallB,OAAO1Q,OAAOhJ,GAAgB3D,KAAI,SAACwiC,GAAY,OAAK96B,EAAQ86B,EAAa,IAC5F1Y,QAAQ8W,IAAI2B,EAAWviC,IAAG,yCAAC,WAAOyH,GAAM,wHACTA,EAAO4iB,uBAAuB,CACzD7F,iBAAkBA,EAClBvb,kBAAmBA,IACnB,OAHIw5B,EAAc,SAIgBA,EAAeziC,KAAI,SAAC2B,GAAQ,OAAKogC,GAAkBpgC,EAAS,IAAC,eAEvC,OAFnD+gC,EAAyB,MAEFC,2BACtBnK,EAA8BkK,EAA0BC,yBAAyB,GAAGzpB,kBACpF0pB,EAAkBvC,EAAO/5B,MAAK,SAACW,GACnC,OAAOA,EAAM6B,mBAAmBxC,MAAK,SAACnG,GACpC,OAAOA,IAAQq4B,CACjB,GACF,IACAzO,EAAQ,CAAE9iB,MAAO27B,EAAiBjhC,SAAU+gC,KAGN,SAIsD,OAA7E,QAHXG,EAAwD,QAA5C,EAAGH,EAA0BjwB,uBAAe,aAAzC,EAA2CnM,MAC9D,SAAAw8B,GAAW,MAF2B,WAEvBA,EAAYl4B,wBAAwB,GAAGC,SAA6C,WAEpF,IAAZg4B,GAA6B,QAAjB,EAAZA,EAAcpwB,uBAAe,OAAK,QAAL,EAA7B,EAAgC,UAAE,OAAiB,QAAjB,EAAlC,EAAoCA,uBAAe,OAAK,QAAL,EAAnD,EAAsD,UAAE,OAAuB,QAAvB,EAAxD,EAA0DupB,6BAAqB,WAAnE,EAAZ,EAAkF,MAC/E+G,EAA2BF,EAAapwB,gBAAgB,GAAGA,gBAAgB,GAAGupB,sBAAsB,GAAGzV,yBACvGqc,EAAkBvC,EAAO/5B,MAAK,SAACW,GACnC,OAAOA,EAAMob,aAAa/b,MAAK,SAAC0b,GAC9B,OAAOA,EAAM+C,iBAAmBge,CAClC,GACF,IACAhZ,EAAQ,CAAE9iB,MAAO27B,EAAiBjhC,SAAU+gC,KAC7C,2CACF,mDA9ByB,KA8BtB/c,MAAMqE,EAGZ,CAFE,MAAO7jB,GACP6jB,EAAO7jB,EACT,CACF,IAAE,mGAzCuB,sCA2CH,OAAlB+7B,QAA4CxiC,IAAlBwiC,GACvBI,EAAoB,CAAE56B,QAAAA,EAAS8c,iBAAAA,EAAkBvb,kBAAAA,IAAqB0b,MAAK,SAACvG,GAChE,OAAXA,IACF+jB,EAAiB/jB,EAAOnX,OACxBm7B,EAAkBhkB,EAAOzc,UAE7B,IAAGgkB,OAAM,SAAAxf,GACPV,QAAQU,MAAM,kCAAmCA,EACnD,GAEJ,GAAG,CAACk6B,EAAQ34B,EAASw6B,EAAe1d,EAAkBvb,IAEtD,IACI+5B,EADEva,EAAe,IAAIC,gBAAgB1N,EAAS2N,QAE7CF,EAAalc,IAAI,iBAES,QAD7By2B,EAAuBva,EAAakZ,IAAI,YAEtCqB,OAAuBtjC,GAI3B,IAAIujC,EAAS,KAkBb,OAjBqB,MAAjBf,IACFe,GACE,SAAC,GAAW,CACVv7B,QAASA,EACT8c,iBAAkBA,EAClBvb,kBAAmBA,EACnBuc,6BAA8Bwd,EAC9B/7B,MAAOi7B,EACP9f,QAASA,EACTnN,YAAaA,EACbqmB,sBAAuBA,EACvBhd,IAAKA,EACLD,KAAMA,EACN4K,eAAgBA,KAIfga,CACT,CA8IA,SAAenoB,IA1Hf,SAAiBlb,GACf,IAAQ8H,EAAkD9H,EAAlD8H,QAAS8c,EAAyC5kB,EAAzC4kB,iBAAkBxJ,EAAuBpb,EAAvBob,SAAUE,EAAatb,EAAbsb,SAC7C,EAA8BkmB,GAAU,CAAE15B,QAAAA,EAAS8c,iBAAAA,IAA3C6b,EAAM,EAANA,OA4BR,GA5ByB,EAATx5B,UA6Bd,OAAO,KAGT,GAAsB,IAAlBw5B,EAAOl5B,OACT,OAAO,KAGT,IACM+7B,EADa7C,EAAO,GACShe,aACnC,GAA+B,IAA3B6gB,EAAgB/7B,OAClB,OAAO,KAET,IAMI4B,EAQAo6B,EAdE5kB,EAAW2kB,EAAgB,GAOjC,GAAIloB,EAAS6N,SAAShjB,SAAS,WAAY,CACzC,IAAMu9B,EAAiBpoB,EAAS6N,SAASzmB,MAAM,WAAW,GAC1D2G,EAA4Bq6B,EAAev9B,SAAS,KAAOu9B,EAAehhC,MAAM,KAAK,GAAKghC,CAC5F,MACEr6B,EAA4Bm6B,EAAgB,GAAGhqB,kBAYjD,OARyC,MAArCqF,EAAS3c,2BACXuhC,GACE,SAAC,YAAY,CAAsBpiC,MAAM,iBAAgB,UACvD,SAAC,EAAa,CAACY,SAAU4c,KADT,oBAOpB,UAAC,IAAM,CAACpW,MAAO,CAAEC,OAAQ,QAAU00B,UAAQ,aACzC,SAAC,UAAY,CACXvzB,MAAO,IACPpB,MAAO,CACLC,OAAQ,OACRi7B,YAAa,QACbC,iBAAkB,IAClBvG,SAAU,SACVgB,WAAY,QACZ,UAEF,UAAC,IAAI,CACHl0B,KAAK,SACLm0B,gBAAiB,CAAC,UAAW,QAAS,iBAAkB,UACxD71B,MAAO,CAAEC,OAAQ,QACjB0B,aAAc,GAAG,WAEjB,SAAC,YAAY,CAAe/I,MAAM,UAAS,UACzC,SAAC,EAAO,CAACY,SAAU4c,KADH,YAGlB,SAAC,YAAY,CAAaxd,MAAM,QAAO,UACrC,SAAC,EAAK,CAACY,SAAU4c,KADD,SAGjB4kB,GACD,SAAC,YAAY,CAAcpiC,MAAM,SAAQ,UACvC,SAAC,GAAS,CACR2G,QAAS9H,EAAM8H,QACf/F,SAAU0+B,EACVt3B,0BAA2BA,EAC3BC,kBA5FkB,SAAH,GAAoE,IAA9DC,EAAiB,EAAjBA,kBAC/BxD,QAAQ6B,KAAK,qBAAD,OAAsB2B,EAAiB,MACnD,IAAI0uB,EACF,mBAAYnT,GAAgB,kBACjBvb,GAGT+R,EAAS6N,SAAShjB,SAAS,gBAC7B8xB,EAAU3c,EAAS6N,SACd7N,EAAS6N,SAAShjB,SAAS,YAG9B8xB,EAAUA,EAAQ7O,QAAQ,kBAAkB,WAAD,OAAa7f,IAFxD0uB,GAAO,kBAAe1uB,IAOxB+R,EAAS6N,SAAShjB,SAAS,aACR,MAAnBmV,EAAS2N,SAETgP,GAAW3c,EAAS2N,QAGtBzN,EAASyc,EAAS,CAAE7O,SAAS,GAC/B,KA+D0B,gBAWtB,SAAC,KAAM,WACL,SAAC,KAAK,CACJya,KAAK,6BACLC,SACE,SAACvB,GAAuB,CACtBv6B,QAAS9H,EAAM8H,QACf24B,OAAQA,EACRje,QAASxiB,EAAMwiB,QACfnN,YAAarV,EAAMqV,YACnBqmB,sBAAuB17B,EAAM07B,sBAC7Bhd,IAAK1e,EAAM0e,IACXD,KAAMze,EAAMye,aAO1B,I,+ICvTQolB,GAAwBx4B,EAAAA,GAAAA,KAAAA,oBAkB1By4B,GAAc,SAACC,GACnB,MAAmB,kBAARA,GAA4B,OAARA,EACtBj+B,KAAKC,UAAUg+B,GAEjBn9B,OAAOm9B,EAChB,EAkBO,SAASC,GAASjiC,GAAsD,IAAvBkiC,EAAK,uDAAG,EAC9D,QAAiBnkC,IAAbiC,GAAuC,OAAbA,EAAmB,MAAO,GACxD,IAAMmiC,EAAWzmB,OAAOC,KAAK3b,GAAUme,QAAO,SAAArW,GAAG,MAAY,WAARA,CAAgB,IAErE,OAAOq6B,EAASC,SAAQ,SAAAC,GAAY,IAAD,IAE3BC,EAAUR,GAAoBS,QAAQF,GACxCnjC,EAAQc,EAASqiC,GAGrB,QAAgBtkC,IAAZukC,EAAuB,CAAC,IAAD,IAEzB,OAA4B,MAAxBD,EAAQG,MADE,mBAC2B,GAElC,CAAC,CACNC,IAAI,IAAD,OAAMJ,EAAQxhC,UAAU,EAAG,GAAE,YAAIwhC,EAAQxhC,UAAU,EAAG,GAAE,KAC3D6zB,GAAI,GACJ2N,QAAS,cACTnjC,MAAwB,QAAnB,EAAO,QAAP,EAAEA,SAAK,aAAL,EAAO+I,kBAAU,QAAI,GAC5B0rB,MAAOuO,GAEX,CAGA,GAAmB,OAAfI,EAAQ5N,SAAyB32B,IAAVmB,EAAqB,CAC9C,IAAMwjC,EAAgB/+B,MAAMwJ,QAAQjO,GAASA,EAAQ,CAACA,GAGhDyjC,EAAwB,CAC5BF,IAAKH,EAAQG,IACb/N,GAAI4N,EAAQ5N,GACZ2N,QAAAA,EACAnjC,MAAM,iBAAD,OAAmBwjC,EAAcl9B,OAAM,YAC5CmuB,MAAOuO,EACPpiC,SAAU,IAgBZ,OAZA6iC,EAAa7iC,SAAW4iC,EAAcrkC,KAAI,SAACC,EAAMC,GAS/C,MAR0B,CACxBkkC,IAAI,GAAD,OAAKH,EAAQG,IAAG,YAAIlkC,EAAQ,GAC/Bm2B,GAAI,OACJ2N,QAAQ,QAAD,OAAU9jC,EAAQ,GACzBW,MAAM,iBAAD,OAAmBX,EAAQ,GAChCo1B,MAAOuO,EAAQ,EACfpiC,SAAUmiC,GAAQ3jC,EAAM4jC,EAAQ,GAGpC,IAEO,CAACS,EACV,CASA,OANIh/B,MAAMwJ,QAAQjO,GAChBA,EAAQA,EAAMb,IAAI0jC,IAAarhC,KAAK,MACV,kBAAVxB,GAAgC,OAAVA,IACtCA,EAAQ6iC,GAAY7iC,IAGf,CAAC,CACNujC,IAAKH,EAAQG,IACb/N,GAAI4N,EAAQ5N,GACZ2N,QAASA,EAAQlb,QAAQ,WAAY,IACrCjoB,MAAwB,QAAnB,EAAO,QAAP,EAAEA,SAAK,aAAL,EAAO+I,kBAAU,QAAI,GAC5B0rB,MAAOuO,GAEX,GACF,CAOO,SAASU,GAAe5iC,GAE7B,OADgBiiC,GAAQjiC,GACT21B,MAAK,SAAC9V,EAAGC,GAAC,OAAKD,EAAE4iB,IAAI7M,cAAc9V,EAAE2iB,IAAI,GAC1D,CChHO,I,WCKP,SAPwB,CACtBI,UAAAA,GACAC,gBAAAA,GACAC,aAAAA,GACAC,cAAAA,IAYF,SAASH,GAAgCxgC,EAAmBC,GAAiD,IAAD,OAC1G,GAAItE,KAAKglC,cAAc3gC,GAAY,CACjC,IAAM4gC,GAAaxkC,EAAAA,EAAAA,KACbykC,EAAe,CAAE3vB,GAAI0vB,EAAY3gC,SAAAA,GASvC,OANIqB,MAAMwJ,QAAQnP,KAAKmlC,UAAU9gC,IAC/BrE,KAAKmlC,UAAU9gC,GAAWnC,KAAKgjC,GAE/BllC,KAAKmlC,UAAU9gC,GAAa,CAAC6gC,GAGxB,CACLE,YAAa,kBAAM,EAAKL,aAAa1gC,EAAW4gC,EAAW,EAE/D,CACE,MAAM,IAAI1gC,MAAM,SAAD,OAAUF,EAAS,mBAEtC,CASA,SAAS0gC,GAAmC1gC,EAAmB4gC,GAC7D,QAAkCllC,IAA9BC,KAAKmlC,UAAU9gC,GAAnB,CAIA,IAAM8gC,EAAYnlC,KAAKmlC,UAAU9gC,GAC7BsB,MAAMwJ,QAAQg2B,GAChBnlC,KAAKmlC,UAAU9gC,GAAa8gC,EAAUhlB,QAAO,YAAK,SAAF5K,KAAgB0vB,CAAU,IAE1EjlC,KAAKmlC,UAAU9gC,GAAa,EAN9B,CAQF,CAQA,SAAS2gC,GAAoC3gC,GAC3C,OAAOqZ,OAAO1Q,OAAOhN,KAAKqlC,QAAQn/B,SAAS7B,EAC7C,CASA,SAASygC,GAAsCzgC,EAAmBihC,GAChE,IAAMC,EAAe7nB,OAAOC,KAAK3d,KAAKmlC,WAAW39B,OAAS,EACpDg+B,EAAe7/B,MAAMwJ,QAAQnP,KAAKmlC,UAAU9gC,IAE9CkhC,GAAgBC,GAClBxlC,KAAKmlC,UAAU9gC,GAAW0G,SAAQ,SAAC06B,GACjCA,EAASnhC,SAASghC,EACpB,GAEJ,CCvDA,SAhCA,SAA+B/rB,EAA2BmsB,GACxD,IAAMC,EAAwB,GACxBC,EAAe,IAAIrE,IAEzB,OAAO,gBACLhoB,kBAAAA,EACAwL,SAAU,GACV8gB,aAAc,EACdC,kBAAmB,GACnBC,WAAY,GACZC,WAAY,IACO,OAAhBN,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAmB,IAAE,IACxBC,UAAAA,EACAM,YAAa,SAAUC,GACrBlmC,KAAKmmC,aAAa,CAACD,GACrB,EACAC,aAAc,SAAUC,GACtB,IAAK,IAAI38B,EAAI,EAAG48B,EAAMD,EAAa5+B,OAAQiC,EAAI48B,EAAK58B,IAAK,CACvD,IAAM0b,EAAWihB,EAAa38B,GAEzBm8B,EAAah5B,IAAIuY,EAASC,kBAC7BwgB,EAAa3c,IAAI9D,EAASC,eAAgBD,GAC1CwgB,EAAUzjC,KAAKijB,GAEnB,CACF,EACAmhB,YAAa,SAAUlhB,GACrB,OAAOwgB,EAAa5D,IAAI5c,EAC1B,GAEJ,ECgCA,SA5DA,SAA8B4b,GAC5B,MAAO,CACLA,iBAAAA,EACAuF,iBAAkB,GAClB/iC,UAAW,GACXC,YAAa,GACbK,UAAW,GACXF,gBAAiB,GACjB4iC,aAAc,EACdC,kBAAmB,GACnBC,UAAU,EACVjc,OAAQ,GAIRkc,oBAAqB,SAAUxhB,GAC7BnlB,KAAK4mC,qBAAqB,CAACzhB,GAC7B,EAMAyhB,qBAAsB,SAAUjB,GAC9B,IAAQpsB,EAAsBosB,EAAU,GAAhCpsB,kBAEsB,KAA1BvZ,KAAKumC,uBAAqDxmC,IAA1BC,KAAKumC,mBACvCvmC,KAAKumC,iBAAmBZ,EAAU,GAAGY,kBAGvC,IAAI9b,EAASzqB,KAAKyqB,OAAO9jB,MACvB,SAACC,GAAC,OAAKA,EAAE2S,oBAAsBA,CAAiB,IAGpC,MAAVkR,IACFA,EAASoc,GAAqBttB,EAAmBosB,GACjD3lC,KAAKyqB,OAAOvoB,KAAKuoB,IAGnBA,EAAO0b,aAAaR,EACtB,EAEAmB,kBAAmB,SACjBvtB,EACAupB,GAEA,IAAIiE,EAAiB/mC,KAAKyqB,OAAO9jB,MAC/B,SAACC,GAAC,OAAKA,EAAE2S,oBAAsBA,CAAiB,IAGlD,GAAsB,MAAlBwtB,EACFA,EAAiBrpB,OAAOspB,OAAOD,EAAgBjE,OAC1C,CACL,IAAMrY,EAASoc,GAAqBttB,GACpCvZ,KAAKyqB,OAAOvoB,KAAKwb,OAAOspB,OAAOvc,EAAQqY,GACzC,CACF,EAEJ,ECzDO,IAAMuC,GAAS,CACpB4B,YAAa,uCACbC,gBAAiB,2CACjBC,aAAc,wCACdC,eAAgB,2CAiDZC,GAAgB,CACpBC,QAAS,IAOX,SAASC,GAAWvG,GAClB,OAAOqG,GAAOC,QAAQ3gC,MACpB,SAAC6gC,GAAM,OAAKA,EAAOxG,mBAAqBA,CAAgB,GAE5D,CAEA,SAASyG,GAAYzG,EAA0BznB,GAC7C,IAAMmuB,EAAQH,GAAUvG,GAExB,GAAa,MAAT0G,EAIJ,OAAOA,EAAMjd,OAAO9jB,MAClB,SAACghC,GAAO,OAAKA,EAAQpuB,oBAAsBA,CAAiB,GAEhE,CAmFA,IAAMquB,GAA6C,CACjDvC,OAAAA,GACAF,UAAW,CAAC,EACZc,YAAW,SAAE4B,GACX,IAAIC,EAaAC,EAVAF,aAA4CG,YAK9CF,EAJkBx8B,EAAAA,GAAAA,KAAAA,aAAAA,SAChBu8B,GAG2BtiB,KAE7BuiB,EAAmBD,EAYrB,IAAQ7G,GAHN+G,EAJI,sBAAuBD,EAINA,EAFnBx8B,EAAAA,GAAAA,KAAAA,oBAAAA,kBAAiDw8B,IAK7C9G,iBAEJ0G,EAAQL,GAAOC,QAAQ3gC,MACzB,SAAC+gC,GAAK,OAAKA,EAAM1G,mBAAqBA,CAAgB,IAG3C,MAAT0G,IACFL,GAAOC,QAAQplC,KAAK+lC,GAAoBjH,IACxC0G,EAAQL,GAAOC,QAAQD,GAAOC,QAAQ9/B,OAAS,IAGjDkgC,EAAMf,oBAAoBoB,EAC5B,EACA5B,aAAY,SAAER,GAAkC,IAAvBuC,EAAY,wDACnC,EAAgDvC,EAAU,GAAlD3E,EAAgB,EAAhBA,iBAAkBznB,EAAiB,EAAjBA,kBAEtBmuB,EAAQL,GAAOC,QAAQ3gC,MACzB,SAAC+gC,GAAK,OAAKA,EAAM1G,mBAAqBA,CAAgB,IAG3C,MAAT0G,IACFL,GAAOC,QAAQplC,KAAK+lC,GAAoBjH,IACxC0G,EAAQL,GAAOC,QAAQD,GAAOC,QAAQ9/B,OAAS,IAGjDkgC,EAAMd,qBAAqBjB,GAM3B3lC,KAAK8kC,gBAAgBO,GAAO6B,gBAAiB,CAC3ClG,iBAAAA,EACAznB,kBAAAA,EACA2uB,aAAAA,GAEJ,EACAC,qBAAoB,SAAErF,GACpB,IAAQ9B,EAAwC8B,EAAxC9B,iBAAkBznB,EAAsBupB,EAAtBvpB,kBAE1B,GAAc,MADCkuB,GAAWzG,EAAkBznB,GAC5C,CAIA,IAAMmuB,EAAQH,GAAUvG,GACX,MAAT0G,GACFA,EAAMZ,kBAAkBvtB,EAAmBupB,EAJ7C,CAMF,EACAsF,kBAAiB,SAAEC,GAA8C,IAAvBH,EAAY,wDACpD,QAC4BnoC,IAA1BsoC,GACiC,IAAjCA,EAAsB7gC,aACOzH,IAA7BsoC,EAAsB,GAHxB,CAQA,IAAQrH,EAAqBqH,EAAsB,GAA3CrH,iBACJ0G,EAAQH,GAAUvG,GACT,MAAT0G,KACFA,EAAQO,GAAoBjH,IAEtBuF,iBAAmB8B,EAAsB,GAAG9B,iBAC7B,OAArB8B,QAAqB,IAArBA,GAAAA,EAAuBt9B,SAAQ,SAACzK,GAAU,IAAD,EACuC,OAAhEP,IAAV2nC,GAA+C,QAAxB,EAACA,EAAMjB,yBAAiB,OAAvB,EAAyBvgC,SAAS5F,EAAKykB,YAC1C,QAAvB,EAAA2iB,EAAMjB,yBAAiB,OAAvB,EAAyBvkC,KAAK5B,EAAKykB,UAEvC,IACA2iB,EAAMY,2BAA6BD,EAAsB7gC,OACzD6/B,GAAOC,QAAQplC,KAAKwlC,IAGtBW,EAAsBt9B,SAAQ,SAAC0f,GAAY,IAAD,EAChClR,EAAsBkR,EAAtBlR,kBACH,QAAL,EAAAmuB,SAAK,OAAL,EAAOZ,kBAAkBvtB,EAAmBkR,EAC9C,IAEAzqB,KAAK8kC,gBAAgBO,GAAO8B,aAAc,CACxCnG,iBAAAA,EACAqH,sBAAAA,EACAH,aAAAA,GAzBF,CA2BF,EACAK,SAAQ,SAAEb,GACR,IAAQ1G,EAAqB0G,EAArB1G,iBAEFwH,EAAgBnB,GAAOC,QAAQ3gC,MACnC,SAAC+gC,GAAK,OAAKA,EAAM1G,mBAAqBA,CAAgB,IAGxD,GAAqB,MAAjBwH,EAAuB,CACzB,IAAMC,EAAWR,GAAoBjH,GAErCyH,EAASjlC,UAAYkkC,EAAMlkC,UAC3BilC,EAAShlC,YAAcikC,EAAMjkC,YAC7BglC,EAAS3kC,UAAY4jC,EAAM5jC,UAC3B2kC,EAAShC,kBAAoBiB,EAAMjB,kBACnCgC,EAASlC,iBAAmBmB,EAAMnB,iBAClCkC,EAAS7kC,gBAAkB8jC,EAAM9jC,gBACjC6kC,EAASjC,aAAekB,EAAMlB,aAE9Ba,GAAOC,QAAQplC,KAAKumC,EACtB,CACF,EACAC,qBA1OF,WACE,OAAOrB,GAAOC,QAAQjnC,KAAI,SAACmnC,GAAM,OAAKA,EAAOxG,gBAAgB,GAC/D,EAyOE2H,SAAUpB,GACVqB,UAAWnB,GACXnB,YAvNF,SACEtF,EACAznB,EACA6L,GAEA,IAAMqF,EAASgd,GAAWzG,EAAkBznB,GAE5C,GAAc,MAAVkR,EAIJ,OAAOA,EAAO6b,YAAYlhB,EAC5B,EA4MEyjB,qBA1MF,SAAgCC,GAAwC,IACpC,EADmC,WACjDzB,GAAOC,SAAO,IAAlC,2BAAoC,CAAC,IACF,EADxBI,EAAK,mBACOA,EAAMjd,QAAM,IAAjC,2BAAmC,CAAC,IACK,EAD9BA,EAAM,mBACQA,EAAOkb,WAAS,IAAvC,2BAAyC,CAAC,IAA/BxgB,EAAQ,QACjB,GAAIA,EAAS2jB,UAAYA,EACvB,OAAO3jB,CAEX,CAAC,+BACH,CAAC,+BACH,CAAC,+BACH,EAiME4jB,wBAxLF,SACE/H,EACAznB,EACAvX,GAEA,IAAM0lC,EAAQH,GAAUvG,GAExB,GAAa,MAAT0G,EAAJ,CAIA,IAAMjd,EAASid,EAAMjd,OAAO9jB,MAC1B,SAACghC,GAAO,OAAKA,EAAQpuB,oBAAsBA,CAAiB,IAG9D,GAAc,MAAVkR,EAIkBA,EAAdkb,UACE56B,SAAQ,SAACoa,GACjBzH,OAAOC,KAAK3b,GAAU+I,SAAQ,SAACjB,GACA,kBAAlB9H,EAAS8H,GAClBqb,EAASrb,IAAI,kBAAQqb,EAASrb,IAAS9H,EAAS8H,IAEhDqb,EAASrb,GAAO9H,EAAS8H,EAE7B,GACF,GAnBA,CAoBF,EA4JEg7B,gBAAe,SAAEzgC,EAAmBoT,GACpC,GAeF,SAP2BiG,OAAOspB,OAChC,CAAC,EACDY,GACAoB,IChTK,ICECvwB,GAAWC,GAAAA,EAAAA,OAmYnB,SAzWwB,SAAH,GAA0E,IAAD,IAAnE3Q,EAAO,EAAPA,QAAS8c,EAAgB,EAAhBA,iBAClC,EAA8B4c,GAAU,CAAE15B,QAAAA,EAAS8c,iBAAAA,IAA3C6b,EAAM,EAANA,OAAQx5B,EAAS,EAATA,UAChB,GAA0Bw6B,EAAAA,EAAAA,eAA4B3hC,GAAU,eAAzD2nC,EAAK,KAAEuB,EAAQ,KAEtB,GAAsCvH,EAAAA,EAAAA,UAAuB,IAAG,eAAzDwH,EAAW,KAAEC,EAAc,KAClC,GAA0EzH,EAAAA,EAAAA,UAAS,GAAE,eAA9E0H,EAA6B,KAAEC,EAAgC,KACtE,GAA4C3H,EAAAA,EAAAA,UAAS,GAAE,eAAhD1gB,EAAc,KAAEsoB,EAAiB,KACxC,GAAsC5H,EAAAA,EAAAA,UAAS,IAAG,eAA3C6H,EAAW,KAAEC,EAAc,KAClC,GAAwC9H,EAAAA,EAAAA,UAAmB,IAAG,eAAvD+H,EAAY,KAAEC,EAAe,KACpC,GAAsChI,EAAAA,EAAAA,UAAS,IAAG,eAA3CiI,EAAW,KAAEC,EAAc,KAE5BC,EDvCmB,SAAK3oC,EAAU4oC,GACxC,OAA4CpI,EAAAA,EAAAA,UAAYxgC,GAAM,eAAvD6oC,EAAc,KAAEC,EAAiB,KAYxC,OAVAlI,EAAAA,EAAAA,YAAU,WACR,IAAMmI,EAAQzL,YAAW,WACvBwL,EAAkB9oC,EACpB,GAAG4oC,GAEH,OAAO,WACLI,aAAaD,EACf,CACF,GAAG,CAAC/oC,EAAO4oC,IAEJC,CACT,CCyB+BI,CAAYR,EAAa,MAEtD7H,EAAAA,EAAAA,YAAU,WACqB,KAAzB+H,GACFL,EAAe,IACfE,EAAgB,KAEhBF,EAAeK,EAEnB,GAAG,CAACA,KAEJ/H,EAAAA,EAAAA,YAAU,WACR,IAAMsI,EAAU,SAAC7/B,GACf,IAAMm9B,EAA2BhqB,OAAOspB,OAAO,CAAC,EAAGqD,GAAAA,SAA4BxlB,IAC/EokB,EAASvB,EACX,EACM4C,EAA0BD,GAAAA,UAA6BA,GAAAA,OAAAA,aAAwCD,GAC/FG,EAA6BF,GAAAA,UAA6BA,GAAAA,OAAAA,gBAA2CD,GAErG1C,EAAQhqB,OAAOspB,OAAO,CAAC,EAAGqD,GAAAA,SAA4BxlB,IAG5D,OAFAokB,EAASvB,GAEF,WACL4C,EAAwBlF,cACxBmF,EAA2BnF,aAC7B,CACF,GAAG,CAACvgB,KAEJid,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACVoH,EAA4B,GAC5BsB,EAAmC,GACjCC,EAA4B,GAC9BlqC,EAAQ,EAERmgC,EAAOl5B,OAAS,IAClB0hC,EAAcxI,EACXrgC,KAAI,SAACiH,GACJ,IAAQob,EAAiBpb,EAAjBob,aACR,QAA0B3iB,KAAV,OAAZ2iB,QAAY,IAAZA,OAAY,EAAZA,EAAe,IAAkB,OAAO,KAE5C,MAOIA,EAAa,GANfqjB,EAAU,EAAVA,WACAC,EAAU,EAAVA,WACAH,EAAY,EAAZA,aACAtsB,EAAiB,EAAjBA,kBACAusB,EAAiB,EAAjBA,kBACA/gB,EAAQ,EAARA,SAGF0lB,EAAgBvoC,KAAKqX,GAErB,IAAMmxB,EAAiB,CACrBC,sBAAuBpqC,EACvBwlC,WAAAA,EACAC,WAAAA,EACAzsB,kBAAAA,EAEAssB,aAAAA,EACAC,kBAAAA,EACA/gB,SAAAA,EACAzL,OAAQoJ,GAGV,OADAniB,IACOmqC,CACT,IACCvqB,QAAO,SAAC8I,GAAG,OAAgC,OAARA,CAAY,UAGtClpB,IAAV2nC,IAAmC,QAAZ,EAAAA,EAAMjd,cAAM,aAAZ,EAAcjjB,QAAS,IAChDgjC,EAAqB9C,EAAMjd,OAAOtK,QAAO,SAAAvZ,GAAC,OAAK6jC,EAAgBvkC,SAASU,EAAE2S,kBAAkB,IACzFlZ,KAAI,SAACoqB,GAAgC,IAAD,EAC7BigB,EAAiB,CACrBC,sBAAuBpqC,EACvBwlC,WAAYtb,EAAOsb,WACnBC,WAAYvb,EAAOub,WAEnBH,aAAcpb,EAAOob,aACrBC,kBAAmBrb,EAAOqb,kBAC1BvsB,kBAAmBkR,EAAOlR,kBAC1BwL,SAAU0F,EAAO1F,SACjBzL,QAAc,OAANmR,QAAM,IAANA,GAAiB,QAAX,EAANA,EAAQkb,iBAAS,WAAX,EAAN,EAAmBn+B,QAAS,EAAIijB,EAAOkb,UAAY,CAAClb,IAG9D,OADAlqB,IACOmqC,CACT,KAGJvB,EAAe,GAAD,gBAAKD,IAAW,QAAKsB,IACrC,GAAG,CAAC9J,EAAQgH,IAEZ,IAAMkD,GAAiBC,EAAAA,EAAAA,UAAQ,WAE7B,OADA3B,EAAYvR,MAAK,SAAC9V,EAAGC,GAAC,OAAKmT,OAAOpT,EAAEgkB,cAAgB5Q,OAAOnT,EAAE+jB,aAAa,IACnEqD,EAAY7oC,KAAI,SAACyqC,EAAYvqC,GAClC,MAMIuqC,EALF/E,WAAAA,OAAU,MAAG,GAAE,IAKb+E,EAJF9E,WAAAA,OAAU,MAAG,GAAE,IAIb8E,EAHFjF,aAAAA,OAAY,MAAG,GAAE,IAGfiF,EAFFhF,kBAAAA,OAAiB,MAAG,GAAE,IAEpBgF,EADF/lB,SAAAA,OAAQ,MAAG,GAAE,EAITgmB,EN9ImB,SAACC,GAE9B,IAAMxG,EAAQwG,EAAQxG,MAAM,gDAC5B,GAAa,MAATA,EAAe,OAAOwG,EAE1B,cAAmDxG,EAAK,GAA/C5hC,EAAI,KAAEE,EAAK,KAAEC,EAAG,KAAEkoC,EAAI,KAAEC,EAAM,KAAEC,EAAM,KAGzCC,EAAWC,SAASvoC,GACpBwoC,EAASD,SAAStoC,GACxB,GAAIqoC,EAAW,GAAKA,EAAW,IAAME,EAAS,GAAKA,EAAS,GAC1D,OAAON,EAGT,IAAMO,EAAO,IAAIC,KACfH,SAASzoC,GACTwoC,EAAW,EACXE,EACAD,SAASJ,GACTI,SAASH,GACTG,SAASF,IAKX,GACEI,EAAKE,aAAeL,EAAW,GAC/BG,EAAKG,YAAcJ,EAEnB,OAAON,EAIT,IAAMW,EAAUJ,EAAKK,mBAAmB,QAAS,CAAED,QAAS,UACtDE,EAAYN,EAAKK,mBAAmB,QAAS,CAAE9oC,MAAO,UACtDgpC,EAAeP,EAAKG,UACpBK,EAAUR,EAAKS,cAErB,MAAM,GAAN,OAAUL,EAAO,aAAKE,EAAS,YAAIC,EAAY,YAAIC,EACrD,CMuG0BE,CADJ,UAAGlG,EAAU,YAAIC,GAAavjC,MAAM,KAAK,IAGzD,MAAO,CACLvB,MAAOX,EACPG,MAAM,GAAD,OAAKmlC,EAAY,aAAK9gB,EAAQ,cAAM+gB,GACzC/+B,YAAagkC,EAEjB,GACF,GAAG,CAAC7B,IAEEgD,GACsC,QAA1C,EAAAhD,EAAYE,UAA8B,aAA1C,EAA4C9vB,OAAO9R,QAAS,EAE9D1B,QAAQiZ,MAAM,eAAgBmqB,GAE9B,IAAMiD,GAAsBtB,EAAAA,EAAAA,UAAQ,WAAO,IAAD,EACxC,QAAmD9qC,IAA/CmpC,EAAYE,GAA8C,MAAO,CAAC,EACtE,IAAMgD,EAAiBlD,EAAYE,GAA+B9vB,OAAO9R,OASzE,OANmC,GACjC,EAAG,MAAG,UACLuQ,KAAK0X,KAAK2c,EAAiB,GAAKvlC,OAAOkR,KAAK0X,KAAK2c,EAAiB,MAAG,UACrEA,EAAiBvlC,OAAOulC,IAAe,CAI5C,GAAG,CAAChD,EAA+BF,IA6B7BmD,GAAYxB,EAAAA,EAAAA,UAAQ,WAAO,IAAD,EAuB9B,YAAmD9qC,IAA/CmpC,EAAYE,GAAqD,GAtBpC,SAA3BkD,EAA4BC,GAAkD,IAArCC,EAAS,uDAAG,GACzD,OAAOD,EAAKlsC,KAAI,SAACokC,EAAKlkC,GAEpB,IAAMksC,EAA8B,KAAZhI,EAAIA,IAAaA,EAAIA,IAAItb,QAAQ,SAAU,IAAM5oB,EAAM0J,WACzEyiC,EAAmC,KAAdF,EAAgB,UAAMA,EAAS,YAAIC,GAAYA,EAEpEnsC,EAAsB,CAC1BwJ,IAAK4iC,EACLjI,IAAKA,EAAIA,IACT/N,GAAI+N,EAAI/N,GACR2N,QAASI,EAAIJ,QACbnjC,MAAOujC,EAAIvjC,OAOb,YAJqBnB,IAAjB0kC,EAAI3iC,UAA0B2iC,EAAI3iC,SAAS0F,OAAS,IACtDlH,EAAKwB,SAAWwqC,EAAyB7H,EAAI3iC,SAAU4qC,IAGlDpsC,CACT,GACF,CAKOgsC,CADM1H,GAD8C,QAA7C,EAAGsE,EAAYE,UAA8B,aAA1C,EAA4C9vB,OAAO0H,EAAiB,IAGvF,GAAG,CAACA,EAAgBooB,EAA+BF,IAE7CyD,GAAe9B,EAAAA,EAAAA,UAAQ,WAC3B,QAAoB9qC,IAAhBwpC,GAA6C,KAAhBA,EAAoB,OAAO8C,EAE5D,IAAMO,EAAcrD,EAAYsD,cAC1BC,EAAc,IAAI1oB,IAElB2oB,EAAc,SAACC,GAAkC,IAAD,gBACpD,OAC0B,QAAxB,EAAS,QAAT,EAACA,EAAKvI,WAAG,aAAR,EAAUoI,qBAAa,QAAI,IAAI3mC,SAAS0mC,KAClB,QAAvB,EAAQ,QAAR,EAACI,EAAKtW,UAAE,aAAP,EAASmW,qBAAa,QAAI,IAAI3mC,SAAS0mC,KACZ,QAA5B,EAAa,QAAb,EAACI,EAAK3I,eAAO,aAAZ,EAAcwI,qBAAa,QAAI,IAAI3mC,SAAS0mC,KACR,QAArC,EAAW,QAAX,EAACI,EAAK9rC,aAAK,aAAV,EAAY+I,WAAW4iC,qBAAa,QAAI,IAAI3mC,SAAS0mC,EAE1D,EAGMK,EAAoB,SAApBA,EACJD,GAEuB,IADvBE,EAA2B,uDAAG,GAExBC,EAAW,mBAAOD,GAAU,CAAEF,IAChCI,EAAmC,GAavC,OAXIL,EAAYC,IACdI,EAAclrC,KAAKirC,GAGA,MAAjBH,EAAKlrC,UACPkrC,EAAKlrC,SAASiJ,SAAQ,SAAAsiC,GACpB,IAAMC,EAAaL,EAAkBI,EAAOF,GAC5CC,EAAa,mBAAOA,IAAa,QAAKE,GACxC,IAGKF,CACT,EAuCMG,EAjCkB,SAAlBC,EACJC,GAEqB,IADrB9X,EAAK,uDAAG,EAER,GAAqB,IAAjB8X,EAAMjmC,QAAgBmuB,GAAS8X,EAAM,GAAGjmC,OAAQ,MAAO,GAE3D,IAAMkmC,EAAe,IAAInM,IAoBzB,OAfAkM,EAAM1iC,SAAQ,SAAA64B,GACZ,GAAIjO,EAAQiO,EAAKp8B,OAAQ,CACvB,IAO6B,EAPvBwlC,EAAOpJ,EAAKjO,GAOlB,GANK+X,EAAa9gC,IAAIogC,EAAKljC,MACzB4jC,EAAazkB,IAAI+jB,EAAKljC,IAAK,CACzBkjC,MAAK,UAAMA,GACXM,WAAY,KAGZ3X,EAAQ,EAAIiO,EAAKp8B,OACO,QAA1B,EAAAkmC,EAAa1L,IAAIgL,EAAKljC,YAAI,OAA1B,EAA4BwjC,WAAWprC,KAAK0hC,EAEhD,CACF,IAEOj+B,MAAMC,KAAK8nC,EAAa1gC,UAAU3M,KAAI,YAA2B,IAAxB2sC,EAAI,EAAJA,KAAMM,EAAU,EAAVA,WACpDR,EAAYjkB,IAAImkB,EAAKljC,KACrB,IAAMhI,EAAW0rC,EAAgBF,EAAY3X,EAAQ,GACrD,OAAO7zB,EAAS0F,OAAS,GAAC,kBAAQwlC,GAAI,IAAElrC,SAAAA,IAAakrC,CACvD,GACF,CAEiBQ,CApCKnB,EAAUjI,SAAQ,SAAA4I,GAAI,OAAIC,EAAkBD,EAAK,KAuCvE,OAFAtD,EAAgB/jC,MAAMC,KAAKknC,IAEpBS,CACT,GAAG,CAAClB,EAAW9C,IAEf,OAAIriC,GACK,yCAIP,gBAAKymC,UAAU,oBAAmB,UAChC,iBACEnlC,MAAO,CACLoB,MAAO,OACPqQ,QAAS,kBACT,WAEF,iBAAKzR,MAAO,CAAEK,QAAS,OAAQ+kC,IAAK,OAAQC,aAAc,QAAS,WACjE,iBAAKrlC,MAAO,CAAEslC,KAAM,GAAI,WACtB,SAAC,UAAe,CAACC,QAAM,EAACvlC,MAAO,CAAEK,QAAS,QAASglC,aAAc,OAAQ,qBACzE,SAAC,KAAM,CACLrlC,MAAO,CAAEoB,MAAO,QAChB1I,MAAOkoC,EACPh9B,SAAU,SAAClL,GACTmoC,EAAiCnoC,GACjCooC,EAAkB,EACpB,EACA0E,gBAAgB,QAChBC,iBAAiB,QAAO,SAEvBrD,EAAevqC,KAAI,SAACC,GAAI,OACvB,SAAC,GAAM,CAAkBY,MAAOZ,EAAKY,MAAOR,MAAOJ,EAAKI,MAAM,UAC5D,4BACE,yBAAMJ,EAAKI,SACX,gBACE8H,MAAO,CAAEQ,SAAU,OAAQC,MAAO,uBAAwB,SAEzD3I,EAAKyG,kBANCzG,EAAKY,MAST,SAKdgrC,IACC,iBAAK1jC,MAAO,CAAEslC,KAAM,GAAI,WACtB,UAAC,UAAe,CAACC,QAAM,EAACvlC,MAAO,CAAEK,QAAS,QAASglC,aAAc,OAAQ,8BACrD7sB,MAEpB,SAAC,KAAM,CACLlQ,IAAK,EACLC,IAA+C,QAA5C,EAAEm4B,EAAYE,UAA8B,aAA1C,EAA4C9vB,OAAO9R,OACxDtG,MAAO8f,EACP5U,SAAU,SAAClL,GAAK,OAAKooC,EAAkBpoC,EAAM,EAC7CgtC,MAAO/B,EACPn6B,QAAS,CACPm8B,UAAW,SAACjtC,GAAyB,YAAenB,IAAVmB,EAAmB,mBAAeA,GAAU,EAAE,YAOlG,SAAC,KAAK,CACJsH,MAAO,CAAEqlC,aAAc,QACvBrU,YAAY,uBACZoE,QAAQ,SAACwQ,GAAA,EAAc,IACvBhiC,SAAU,SAACqQ,GAAC,OAAKmtB,EAAentB,EAAEV,OAAO7a,MAAM,EAC/CA,MAAOyoC,KAGT,SAAC,KAAK,CACJ0E,QA5MQ,CACd,CACEjtC,MAAO,MACPktC,UAAW,MACXxkC,IAAK,MACLF,MAAO,OAET,CACExI,MAAO,KACPktC,UAAW,KACXxkC,IAAK,KACLF,MAAO,MAET,CACExI,MAAO,UACPktC,UAAW,UACXxkC,IAAK,UACLF,MAAO,OAET,CACExI,MAAO,QACPktC,UAAW,QACXxkC,IAAK,QACLF,MAAO,QAsLH2kC,WAAY5B,EACZ6B,YAAY,EACZC,WAAY,CACVC,gBAAiBjF,EACjBkF,qBAAsB,SAAChxB,GAAI,OAAK+rB,EAAgB/rB,EAAiB,GAEnEpc,KAAK,QACLqtC,OAAQ,CAAExZ,EAAG,WAKvB,ECgJA,SAAeja,GApdH,0CACV,WAAalb,GAAqB,IAAD,mBAC/B,cAAMA,IAuDR4uC,iBAAmB,SAACC,GAClB,GAAW,MAAPA,GAAuB,KAARA,EACjB,OAAO,EAET,IACE,IAAMC,EAAS,IAAIC,IAAIF,GACvB,OAAOC,EAAOE,SAASC,WAAW,SAAWH,EAAO7lB,SAAS1hB,OAAS,CAGxE,CAFE,MAAO2nC,GACP,OAAO,CACT,CACF,EAAC,EAEDC,sBAAwB,WACtB,IAAMC,GAAUC,EAAAA,GAAAA,MACVC,EAQF,CACFF,QAAS,CAAC,EACVG,GAAI,CAAC,GAEQ,MAAXH,IACFE,EAAYF,QAAU,CACpB1uC,KAAsB,MAAhB0uC,EAAQ1uC,KAAe0uC,EAAQ1uC,UAAOZ,EAC5C0vC,QAA4B,MAAnBJ,EAAQI,QAAkBJ,EAAQI,aAAU1vC,GAEvDwvC,EAAYC,GAAK,CACf7uC,KAAoB,MAAd0uC,EAAQG,GAAaH,EAAQG,QAAKzvC,IAI5C2vC,GAAAA,EAAAA,KAAW,CACTtuC,MAAO,QACPwI,MAAO,IACP0D,SACE,iCACE,UAAC,IAAY,CAAClM,MAAM,cAAcS,OAAQ,EAAE,WAC1C,SAAC,SAAiB,CAACnB,MAAM,OAAM,SAC5B,EAAKT,MAAM0e,IAAIhe,QAElB,SAAC,SAAiB,CAACD,MAAM,UAAS,SAC/B,EAAKT,MAAM0e,IAAI8wB,WAElB,SAAC,SAAiB,CAAC/uC,MAAM,WAAU,SAChC,EAAKT,MAAM0e,IAAIgxB,eAGpB,UAAC,IAAY,CAACvuC,MAAM,UAAUS,OAAQ,EAAE,WACtC,SAAC,SAAiB,CAACnB,MAAM,OAAM,SAC5B6uC,EAAYF,QAAQ1uC,QAEvB,SAAC,SAAiB,CAACD,MAAM,UAAS,SAC/B6uC,EAAYF,QAAQI,cAGzB,SAAC,IAAY,CAACruC,MAAM,mBAAmBS,OAAQ,EAAE,UAC/C,SAAC,SAAiB,CAACnB,MAAM,OAAM,SAC5B6uC,EAAYC,GAAG7uC,YAKxB28B,KAAI,WAAW,GAEnB,EAAC,EAEDsS,iCAAmC,WAAa,IAAD,IACvChmC,EAAQ4qB,OAAOqb,WAAa,IAClCH,GAAAA,EAAAA,KAAW,CACTtuC,MAAO,oBACPwI,MAAAA,EACA0D,SAAS,SAAC,GAAe,CACvBvF,QAA2B,QAApB,EAAE,EAAK9H,MAAM8H,eAAO,QAAI,CAAC,EAChC8c,iBAAoD,QAApC,EAAE,EAAK5kB,MAAMwb,OAAOoJ,wBAAgB,QAAI,KAE1DyY,KAAI,WAAW,GAEnB,EAAC,EAEDwS,uBAAyB,WACvB,IAAMC,EAKF,CACFC,eAAgB,GAChBC,cAAe,GACfC,iBAAkB,GAClBC,cAAe,IAIXC,EAAW,EAAKnpC,MAAMopC,SAAS7oC,OAErC,GAAI4oC,EAAW,EACb,IAAK,IAAI3mC,EAAI,EAAGA,EAAI2mC,EAAU3mC,IAAK,CAEjCsmC,EADiB,EAAK9oC,MAAMP,cAAc+C,IACtBvH,KAAK,GAAD,OAAI,EAAK+E,MAAMopC,SAAS5mC,GAAG1E,QAAO,qBAAuB,EAAKkC,MAAMopC,SAAS5mC,GAAGlD,OAAM,KAChH,CAGF,IAM0B+pC,EANlBC,EAAUC,GAAAA,EAAAA,MAEZC,EAAiB,SAACC,GAAgB,OACtC,SAAC,KAAK,CAAC7iC,MAAO6iC,GAAY,EAO5BhB,GAAAA,EAAAA,KAAW,CACTtuC,MAAO,2DACPwI,MAAO,IACP0D,SACE,UAAC,KAAQ,YACP,SAACijC,EAAK,CACJlvC,OAAO,sBAEPC,MAAOmvC,EAAeV,EAAUE,cAAczoC,QAAQ,UAEtD,wBACGuoC,EAAUE,cAAc5vC,KAAI,SAAAoc,GAAC,OAC5B,wBAAoBA,IAAXk0B,EAAAA,EAAAA,KAAkB,OAL3B,uBASN,SAACJ,EAAK,CACJlvC,OAAO,+BAEPC,MAAOmvC,EAAeV,EAAUG,iBAAiB1oC,QAAQ,UAEzD,wBACGuoC,EAAUG,iBAAiB7vC,KAAI,SAAAoc,GAAC,OAC/B,wBAAoBA,IAAXk0B,EAAAA,EAAAA,KAAkB,OAL3B,sBASN,SAACJ,EAAK,CACJlvC,OAAO,sBAEPC,MAAOmvC,EAAeV,EAAUI,cAAc3oC,QAAQ,UAEtD,wBACGuoC,EAAUI,cAAc9vC,KAAI,SAAAoc,GAAC,OAC5B,wBAAoBA,IAAXk0B,EAAAA,EAAAA,KAAkB,OAL3B,uBASN,SAACJ,EAAK,CACJlvC,OAAO,uBAEPC,MAAOmvC,EAAeV,EAAUC,eAAexoC,QAAQ,UAEvD,wBACGuoC,EAAUC,eAAe3vC,KAAI,SAAAoc,GAAC,OAC7B,wBAAoBA,IAAXk0B,EAAAA,EAAAA,KAAkB,OAL3B,cASN,SAACJ,EAAK,CACJlvC,OAAO,UAEPC,OAxDkBgvC,EAwDM,EAAKrpC,MAAM2pC,SAASppC,QAvDlD,SAAC,KAAK,CAACyB,MAAM,QAAQ4E,MAAOyiC,KAuD8B,UAEpD,wBACG,EAAKrpC,MAAM2pC,SAASvwC,KAAI,SAAAwwC,GAAO,OAC9B,wBAAoBA,IAAXF,EAAAA,EAAAA,KAAwB,OALjC,cAWVrT,KAAI,WAAW,GAEnB,EAAC,EAEDwT,iCAAmC,WACjC,EAAKzpC,SAAS,CAAE0pC,+BAA+B,GACjD,EAAC,EAEDC,2BAA6B,SAC3BzmC,GAEA,IAAMrJ,EAAQqJ,EAAM0mC,cAAc/vC,MAClC,EAAKmG,SAAS,CACZ6pC,kBAAmBhwC,EACnBiwC,2BAA4B,EAAKtC,iBAAiB3tC,IAEtD,EAAC,EAEDkwC,kCAAoC,WAClC,IAAMC,EAAkB7c,OAAO8c,aAAaC,QAAQ,wBACpD,EAAKlqC,SAAS,CACZmqC,oBAAyC,OAApBH,GAAgD,KAApBA,EAAyB,SAAW,UACrFH,kBAAkC,OAAfG,QAAe,IAAfA,EAAAA,OAAmBtxC,EACtCgxC,+BAA+B,EAC/BI,2BAA4B,EAAKtC,iBAAiBwC,IAEtD,EAAC,EAEDI,gCAAkC,SAACh1B,GACjC,IAAMvS,EAAOuS,EAAEV,OAAO7a,MACtB,EAAKmG,SAAS,CAAEmqC,oBAAqBtnC,GACvC,EAAC,EAEDwnC,sBAAwB,WAGtB,GAFAld,OAAO8c,aAAaK,QAAQ,6BAA8B,EAAK1qC,MAAMuqC,qBAE9B,YAAnC,EAAKvqC,MAAMuqC,oBAMb,OALA,EAAKvxC,MAAM2xC,kBAAkB,CAAE9C,IAAK,UACpC,EAAKznC,SAAS,CACZ0pC,+BAA+B,EAC/BI,2BAA2B,IAK/B,IAAMrC,EAAM,EAAK7nC,MAAMiqC,kBACnBW,GAAa,EACN,MAAP/C,GAAuB,KAARA,IACbA,EAAII,WAAW,YAAcJ,EAAII,WAAW,eAC9C,EAAKjvC,MAAM2xC,kBAAkB,CAAE9C,IAAAA,IAC/B+C,GAAa,GAGjB,EAAKxqC,SAAS,CACZ0pC,+BAAgCc,EAChCV,2BAA4BU,GAEhC,EAlSE,IAAMR,EAAkB7c,OAAO8c,aAAaC,QAAQ,wBAC9CO,EAAatd,OAAO8c,aAAaC,QAAQ,8BAE/C,EAAKtqC,MAAQ,CACXopC,SAAU,GACV3pC,cAAe,GACfkqC,SAAU,GACVM,kBAAkC,OAAfG,QAAe,IAAfA,EAAAA,EAAmB,GACtCN,+BAA+B,EAC/BI,2BAA4B,EAAKtC,iBAAiBwC,GAClDG,oBAAoC,WAAfM,GAA+C,OAApBT,GAAgD,KAApBA,EAAyB,SAAW,WA6BjH,OARDjpC,GAAAA,UACEnD,GAnBqB,SAAH,GAGP,IAHasB,EAAM,EAANA,OAAQC,EAAK,EAALA,MAIhC,EAAKa,UAAS,SAAAJ,GAAK,yBACdA,GAAK,IACRopC,SAAS,GAAD,gBAAMppC,EAAMopC,UAAQ,oBAAO7pC,GAAK,IAAED,OAAAA,MAC1CG,cAAc,GAAD,gBAAMO,EAAMP,eAAa,CAAEF,EAAM1B,QAAK,GAEvD,IAcAsD,GAAAA,UACEnD,GAbuB,SAAC4rC,GACxB,EAAKxpC,UAAS,SAAAJ,GAAK,yBACdA,GAAK,IACR2pC,SAAS,GAAD,gBAAM3pC,EAAM2pC,UAAQ,CAAEC,KAAQ,GAE1C,IAUC,CACH,CAsaC,OAtaA,0CAED,SAAoBkB,EAAkC5b,IAC9CA,EAAUya,SAASppC,OAAS,GAAO2uB,EAAUka,SAAS7oC,OAAS,IAAOxH,KAAKC,MAAMob,SAAS6N,WAAa6oB,EAAU12B,SAAS6N,UAC9HlpB,KAAKqH,SAAS,CACZ0pC,+BAA+B,EAC/BI,2BAA2B,EAC3Bd,SAAU,GACV3pC,cAAe,GACfkqC,SAAU,IAGhB,GAAC,oBAgPD,WAA4B,IAAD,UA6BrBoB,EA7BqB,OACrBtzB,EAAO,KACX,QAAwB3e,IAApBC,KAAKC,MAAMye,KAAoB,CACjC,IAAMuzB,EAAgB,QACUlyC,IAA5BC,KAAKC,MAAMiyC,cACbD,EAAc/vC,KACZ,CACExB,MAAO,SACPoJ,IAAK,cACLmD,QAAS,gBACyBlN,IAA5B,EAAKE,MAAMiyC,cACb,EAAKjyC,MAAMiyC,cAEf,IAIN,IAAMC,EAAW,CAAEhyC,MAAO8xC,GAC1BvzB,GACE,SAAC,KAAQ,CAAC0zB,KAAMD,EAAUE,QAAS,CAAC,SAAS,UAC3C,SAAC,GAAM,CACLlxC,KAAMmxC,GAAAA,EACNrlC,QAAS,SAAAwP,GAAC,OAAIA,EAAE81B,gBAAgB,EAChC7xC,MAAK,UAAKV,KAAKC,MAAMye,KAAK/d,KAAI,aAAKX,KAAKC,MAAMye,KAAKQ,MAAK,QAIhE,CAGIlf,KAAKC,MAAMuyC,qBACbR,GACE,SAAC,KAAO,CAACS,GAAG,IAAG,UACb,SAAC,GAAM,CAACtxC,KAAMuxC,GAAAA,EAAuB1gC,QAAQ,sBAKnD,IAgCI2gC,EAhCEC,GACJ,SAAC,GAAM,CACLzxC,KAAM0xC,GAAAA,EACN7gC,QAAQ,eACR/E,QAASjN,KAAKovC,wBAIZ0D,GACJ,SAAC,KAAK,CAACjlC,MAAO7N,KAAKiH,MAAMopC,SAAS7oC,OAAQgB,MAAO,CAAEuqC,OAAQ,KAAO,UAChE,SAAC,KAAK,CAAC9pC,MAAM,QAAQ4E,MAAO7N,KAAKiH,MAAM2pC,SAASppC,OAAQgB,MAAO,CAAEuqC,OAAQ,MAAO,UAC9E,SAAC,GAAM,CACL5xC,KAAMsM,GAAAA,EACNuE,QAAQ,aACR/E,QAASjN,KAAK8vC,6BAQhBkD,EAFsBhzC,KAAKC,MAAMob,SAAS6N,SAAShjB,SAAS,cAI9D,SAAC,GAAM,CACL/E,KAAM8xC,GAAAA,EACNjhC,QAAQ,oBACR/E,QAASjN,KAAK4vC,mCAGhB,KAGA5vC,KAAKC,MAAMizC,4BACbP,GACE,SAAC,GAAM,CACLxxC,KAAMgyC,GAAAA,EACNnhC,QAAQ,gBACR/E,QAASjN,KAAK8wC,oCAKpB,IAEMI,EAAuD,WAAnClxC,KAAKiH,MAAMuqC,oBACjCxxC,KAAKiH,MAAMiqC,kBACyB,QADR,EACV,QADU,EAC5BlxC,KAAKC,MAAM8H,eAAO,OAAS,QAAT,EAAlB,EAAoBqrC,eAAO,WAAT,EAAlB,EAA6BC,eAAO,QAA6B,QAA7B,EAAIrzC,KAAKC,MAAMqzC,sBAAc,OAAS,QAAT,EAAzB,EAA2BF,eAAO,WAAT,EAAzB,EAAoCC,QAE1EE,EAA+B,MAArBrC,GAAmD,KAAtBA,GAEzC,SAAC,KAAO,CAAC9vC,MAAO8vC,EAAkB,UAChC,gBACE1oC,MAAO,CACL40B,SAAU,SACVoW,aAAc,WACdxyC,WAAY,SACZyyC,aAAc,OACdtnC,YAAa,QAEf/K,MAAO8vC,EAAkB,SAExBA,MAIL,KAEJ,OACE,iCACE,SAAC,WAAa,CAAC1oC,MAAO,CAAEoB,MAAO,OAAQqQ,QAAS,UAAW,UACzD,UAAC,KAAG,CAACzR,MAAO,CAAEkrC,SAAU,UAAW,WACjC,SAAC,KAAG,CAAClrC,MAAO,CAAEmrC,WAAY,GAAI,UAC5B,SAAC,KAAK,CAACznC,MAAM,SAASkB,UAAU,aAAY,UAC1C,gBACEwmC,IAhCEC,qDAiCFC,IAAI,GACJtrC,MAAO,CAAEC,OAAQ,OAAQy0B,OAAQ,gBAIvC,SAAC,KAAG,CAAC4Q,KAAK,OAAOtlC,MAAO,CAAE4I,SAAU,EAAGgsB,SAAU,UAAW,UAC1D,gBAAK50B,MAAO,CAAEoB,MAAO,OAAQwzB,SAAU,UAAW,SAC/Cp9B,KAAKC,MAAMizC,0BAA4BK,EAAU,QAGtD,SAAC,KAAG,CAAC/qC,MAAO,CAAEmrC,WAAY,GAAI,UAC5B,UAAC,KAAK,CAACvmC,UAAU,aAAY,UAC1B4kC,EACAY,EACAE,EACAE,EACAL,EACAj0B,aAMT,UAAC,KAAK,CACJ2e,KAAMr9B,KAAKiH,MAAM8pC,8BACjB3vC,MAAM,yBACNk8B,KAAMt9B,KAAK0xC,sBACXlU,SAAUx9B,KAAKoxC,kCAAkC,WAEjD,UAAC,YAAW,CACVlwC,MAAOlB,KAAKiH,MAAMuqC,oBAClBplC,SAAUpM,KAAKyxC,gCACfjpC,MAAO,CAAEqlC,aAAc,QAAS,WAEhC,SAAC,MAAK,CAAC3sC,MAAM,UAAS,iCACtB,SAAC,MAAK,CAACA,MAAM,SAAQ,kCAGa,WAAnClB,KAAKiH,MAAMuqC,sBACV,SAAC,KAAO,CAACpwC,MAAOpB,KAAKiH,MAAMiqC,kBAAkB,UAC3C,SAAC,KAAK,CACJ1X,YAAY,2CACZt4B,MAAOlB,KAAKiH,MAAMiqC,kBAClB9kC,SAAUpM,KAAKgxC,2BACfnT,aAAc79B,KAAK0xC,sBACnB5T,WACA99B,KAAKiH,MAAMkqC,2BACP,SAACnT,GAAA,EAAY,CAACx1B,MAAO,CAAES,MAAO,sBAC9B,SAAC80B,GAAA,EAAa,CAACv1B,MAAO,CAAES,MAAO,8BAQjD,KAAC,EAjdS,CAASlH,EAAAA,Y,eC/CrB,SAjBiB,SAAH,GAAwD,IAAlDX,EAAK,EAALA,MAAO2D,EAAO,EAAPA,QACzB,OACE,gBAAKyD,MAAO,CACVC,OAAQ,QACRI,QAAS,OACTC,WAAY,SACZC,eAAgB,UAChB,UAEA,SAAC,MAAM,CACL3H,MAAOA,EACP2yC,SAAUhvC,KAIlB,ECiSA,SAAeoW,GA7RD,0CAGZ,WAAalb,GAAuB,IAAD,EAUhC,OAVgC,gBACjC,cAAMA,IAHS+zC,gBAAkB,GAAE,EAiIrCC,aAAe,SACbtqC,EACAuqC,EACA5F,GAEA4F,GACF,EAAC,EAEDC,YAAc,SAACC,GACbA,GACF,EAAC,EAoGDC,qBAAuB,SAAC/F,GAAiB,MAAc,CACrDgG,eAAgB,gBAAGC,EAAe,EAAfA,gBAAiB5qC,EAAY,EAAZA,aAAcuqC,EAAO,EAAPA,QAASE,EAAY,EAAZA,aAAY,OAMrE,iBAAK5rC,MAAO,CAAEyR,QAAS,GAAI,WACzB,SAAC,KAAK,CACJuf,YAAY,SACZt4B,MAAOyI,EAAa,GACpByC,SAAU,SAAAqQ,GAAC,OAAI83B,OACMx0C,IAAnB0c,EAAEV,OAAO7a,MAAsB,CAACub,EAAEV,OAAO7a,OAAS,GACnD,EACD28B,aAAc,kBAAM,EAAKoW,aAAatqC,EAAcuqC,EAAS5F,EAAU,EACvE9lC,MAAO,CAAEoB,MAAO,IAAKikC,aAAc,EAAGhlC,QAAS,YAEjD,UAAC,KAAK,YACJ,SAAC,KAAM,CACL/D,KAAK,UACLmI,QAAS,kBAAM,EAAKgnC,aAAatqC,EAAcuqC,EAAS5F,EAAU,EAClEntC,MAAM,SAACitC,GAAA,EAAc,IACrB7sC,KAAK,QACLiH,MAAO,CAAEoB,MAAO,IAAK,qBAIvB,SAAC,KAAM,CACLqD,QAAS,kBAAM,EAAKknC,YAAYC,EAAa,EAC7C7yC,KAAK,QACLiH,MAAO,CAAEoB,MAAO,IAAK,wBAKrB,EAER4qC,WAAY,SAACjH,GAAiB,OAC5B,SAACa,GAAA,EAAc,CACb5lC,MAAO,CAAES,MAAOskC,EAAW,eAAYxtC,IACvC,EAEL,EArRC,EAAK00C,UAAY,EAAKA,UAAUpqC,MAAK,WACrC,EAAKsH,YAAc,EAAKA,YAAYtH,MAAK,WACzC,EAAKqqC,aAAe,EAAKA,aAAarqC,MAAK,WAC3C,EAAKpD,MAAQ,CACXqgC,QAAS,GACTpgC,WAAW,EACXytC,WAAY,EACZC,SAAU,EAAKZ,iBAChB,CACH,CAgOC,OAhOA,wCAED,WAA2B,IAAD,OAElBa,EAAgB,CAAE/vB,YADoB,CAAE2hB,kBAAmB,OAGlDzmC,KAAKC,MAAM8H,QACxB/D,EAAegE,iCAEV8sC,iBAAiBD,GAAe7vB,MAAK,SAACsiB,GAC3C,EAAKjgC,SAAS,CACZstC,WAAYrN,EAAQ9/B,OACpB8/B,QAASA,EAAQjhC,MAAM,EAAG,EAAKY,MAAM2tC,UAAUv0C,KAAI,SAAAqnC,GAEjD,OADoB7/B,EAAAA,SAAAA,eAA4B6/B,GAAxCxyB,OAEV,KAEJ,IACG8Q,OAAM,SAACxf,GACNV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,gDAGN,GACJ,GAAC,+BAED,WACE5E,KAAK80C,kBACP,GAAC,gCAED,SAAoB19B,GACdpX,KAAKC,MAAM8H,UAAYqP,EAAcrP,SACvC/H,KAAK80C,kBAET,GAAC,yBAED,SAAavqC,EAA6Bm9B,GACxC1nC,KAAKC,MAAMsb,SAAS,YAAD,OAAamsB,EAAM1G,kBACxC,GAAC,uBAED,YAIU,IAAD,OAJIpzB,EAAM,EAANA,OAAQmnC,EAAK,EAALA,MAAOC,EAAc,EAAdA,eAKpBlwB,EAAsC,CAC1C2hB,kBAAmB,KACnB74B,OAAQA,EACRmnC,MAAOA,GAET,QAAuBh1C,IAAnBi1C,EAA8B,CAChC,IAAK,IAAMlrC,KAAOkrC,EAAgB,CAChC,IAAM9zC,EAAQ8zC,EAAelrC,GAE3Bgb,EAAYhb,GADF,eAARA,EACc,WAAO5I,EAAK,KAETA,CAEvB,CACA4jB,EAAYmwB,cAAgB,MAC9B,CACA,IAAMJ,EAAgB,CAAE/vB,YAAAA,GACT9kB,KAAKC,MAAM8H,QACxB/D,EAAegE,iCAEV8sC,iBAAiBD,GAAe7vB,MAAK,SAACsiB,GAC3C,EAAKjgC,SAAS,CACZigC,QAASA,EAAQjnC,KAAI,SAAAqnC,GAEnB,OADoB7/B,EAAAA,SAAAA,eAA4B6/B,GAAxCxyB,OAEV,KAEJ,IACG8Q,OAAM,SAACxf,GACNV,QAAQU,MAAMA,GACd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,yCAGN,GACJ,GAAC,0BAED,SACE4pC,EACA0G,GAEAl1C,KAAKqH,SAAS,CAAEH,WAAW,IAC3B,IAAI3G,EAAQiuC,EAAW/mC,aACT1H,IAAVQ,IACFA,EAAQ,GAEV,IAAIq0C,EAAWpG,EAAWoG,cACT70C,IAAb60C,IACFA,EAAW50C,KAAKiH,MAAM2tC,UAExB,IAAMhnC,EAASgnC,GAAYr0C,EAAQ,GAC7Bw0C,EAAQH,EACd9uC,QAAQiZ,MAAM,+BAAD,OAAgCxe,EAAK,QAClD,IAAMy0C,EAAkD,CAAC,EACzD,IAAK,IAAM1G,KAAa4G,EACK,OAAvBA,EAAQ5G,KACV0G,EAAe1G,GAAa4G,EAAQ5G,GAAW,GAAGrkC,YAGtDjK,KAAKy0C,UAAU,CAAE7mC,OAAAA,EAAQmnC,MAAAA,EAAOC,eAAAA,IAChCh1C,KAAKqH,SAAS,CAAEH,WAAW,EAAO0tC,SAAUA,GAC9C,GAAC,oBAcD,WAA4B,IAAD,OACnBvG,EAA2C,EAAC,QAE9CjtC,MAAO,mBACPktC,UAAW,mBACRtuC,KAAKq0C,qBAAqB,qBAAkB,QAG/CjzC,MAAO,WACPktC,UAAW,WACRtuC,KAAKq0C,qBAAqB,YAE/B,CACEjzC,MAAO,aACPktC,UAAW,YACXjmC,OAAQ,SAACnH,GAAa,OAAayB,EAAUzB,EAAM,GAErD,CACEE,MAAO,aACPktC,UAAW,YACXjmC,OAAQ,SAACnH,GAAa,OAAa8B,EAAU9B,EAAM,IACnD,QAEAE,MAAO,aACPktC,UAAW,aACRtuC,KAAKq0C,qBAAqB,eAAY,QAGzCjzC,MAAO,iBACPktC,UAAW,cACXjmC,OAAQ,SAACnH,GAA8B,OAAaqB,EAAUrB,EAAM,GACjElB,KAAKq0C,qBAAqB,gBAE/B,CACEjzC,MAAO,gBACPktC,UAAW,aACXjmC,OAAQ,SAACnH,GAAa,OAAakC,EAASlC,EAAM,GAEpD,CACEE,MAAO,sBACPktC,UAAW,mBACXjmC,OAAQ,SAACnH,GAAa,OAAayB,EAAUzB,EAAM,GAErD,CACEE,MAAO,6BACPktC,UAAW,yBACXjmC,OAAQ,SAACnH,GAA8B,OAAaqB,EAAUrB,EAAM,GAEtE,CACEE,MAAO,sBACPktC,UAAW,oBACXjmC,OAAQ,SAACnH,GACP,YAAcnB,IAAVmB,EAKK,GAEA2F,OAAO3F,EAElB,IAIEstC,EAAa,CACjBwF,gBAAiBh0C,KAAKg0C,gBACtBY,SAAU50C,KAAKiH,MAAM2tC,SACrBO,kBAAkB,EAClBC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAW,SAACC,EAAe1kC,GACzB,MAAM,GAAN,OAAUA,EAAM,GAAE,YAAIA,EAAM,GAAE,eAAO0kC,EAAK,WAC5C,EACAA,MAAOv1C,KAAKiH,MAAM0tC,YAGpB,OACE,SAAC,KAAK,CACJnsC,MAAO,CAAEqzB,OAAQ,WACjBwS,QAASA,EACTmH,OAAQ,SAAAC,GAAM,OAAIA,EAAOzU,gBAAgB,EACzCuN,WAAYvuC,KAAKiH,MAAMqgC,QACvBkH,WAAYA,EACZkH,MAAO,SAACD,GACN,MAAO,CACLxoC,QAAS,SAAC1C,GACR,OAAO,EAAKoH,YAAYpH,EAAOkrC,EACjC,EAEJ,EACArpC,SAAUpM,KAAK00C,aACfnzC,KAAK,QACLo0C,QAAS31C,KAAKiH,MAAMC,WAG1B,KAAC,EA9OW,CAASnF,EAAAA,Y,eCtBV6zC,GAAU,SAAChS,EAAciS,GACpC,IAAIC,EAAUD,EAKd,OAJKC,EAAQC,SAAS,OACpBD,GAAW,KAED,IAAI9G,IAAIpL,EAAMkS,GACf7rC,UACb,EAQa+rC,GAA2B,SAAC36B,GAGzB,IAAD,UACPyN,EAAe,IAAIC,gBAAgB1N,EAAS2N,QAC5CitB,EAAa,IAAIltB,gBAAgB1N,EAAS66B,KAAK/sB,QAAQ,IAAK,MAElE,OAAOgtB,QAKqB,QALd,EAIU,QAJV,EAGqB,QAHrB,EAEgB,QAFhB,EACY,QADZ,EACZrtB,EAAakZ,IAAI,eAAO,QACxBlZ,EAAakZ,IAAI,mBAAW,QAC5BlZ,EAAakZ,IAAI,wBAAgB,QACjCiU,EAAWjU,IAAI,eAAO,QACtBiU,EAAWjU,IAAI,mBAAW,QAC1BiU,EAAWjU,IAAI,iBAEnB,EC3BMoU,GAAa,SAACC,GAClB,IAAIC,EAKJ,GAJiB,OAAbD,IACFC,EAAUD,EAASC,cAGLv2C,IAAZu2C,EAAuB,CACzB,QAAqBv2C,IAAjBu2C,EAAQ31C,WAAwCZ,IAAlBu2C,EAAQp3B,MASxC,MAAO,CACLve,KAAM21C,EAAQ31C,KACdue,MAAOo3B,EAAQp3B,OAVjB9W,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,6CASR,MACEwD,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,mCAIN,MAAO,CACLjE,UAAMZ,EACNmf,WAAOnf,EAEX,EAEqBw2C,IAAW,QAG9B,WAAaT,EAAiB3oC,GAAyB,IAAD,4BAF9CqpC,WAAK,OA0DbC,OAAM,yCAAG,gGAYN,GAZeC,EAAQ,EAARA,SAGVC,EAAe,SAACN,GACpB,IAAM33B,EAAO03B,GAAWC,GAClBO,EAAa,UAAMP,EAASQ,WAAU,YAAIR,EAASS,cACzC,MAAZJ,GACF5wC,QAAQ6B,KAAK,qDACb+uC,EAAS,CAAEh4B,KAAMA,EAAMk4B,cAAeA,KAEtC9wC,QAAQD,KAAK,sDAEjB,GAEImwC,GAAyBxhB,OAAOnZ,UAAU,CAAD,gBAKJ,OAAvCvV,QAAQ6B,KAAK,2BAA0B,SAChB,EAAK6uC,MAAMO,iBAAgB,OAClC,OADVV,EAAQ,UAEZvwC,QAAQ6B,KAAK,uBAAwB0uC,GACrCM,EAAaN,IACd,yCAMsB,EAAKG,MAAMQ,UAAS,QAA7B,GACG,QADXX,EAAQ,UACWA,EAASY,QAAO,iBACJ,OAAnCnxC,QAAQ6B,KAAK,uBAAsB,UAC7B,EAAK6uC,MAAMU,iBAAgB,gCAEjCpxC,QAAQ6B,KAAK,uCACbgvC,EAAaN,GAAS,4CAG3B,mDAvCK,GAuCL,KAKDc,SAAO,uBAAG,mFACkD,OAA1DrxC,QAAQgwB,IAAI,+CAA8C,SAC7C,EAAK0gB,MAAMY,kBAAiB,mFAC1C,KAKDC,kBAAgB,uBAAG,mGACJ,EAAKb,MAAMQ,UAAUhyB,MAAK,SAACqxB,GACtC,GAAiB,OAAbA,EACF,OAAOA,EAASS,aAEhB1uC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,kCAIR,IAAE,mFACH,KAKDoyC,SAAO,uBAAG,mGACK,EAAKR,MAAMQ,UAAUhyB,MAAK,SAACqxB,GAUtC,OATiB,OAAbA,GACFjuC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,uCAICwxC,GAAWC,EACpB,IAAE,mFA1IF,IAAIiB,EAAe,YACQv3C,IAAvBoN,EAASoqC,WACgB,aAAvBpqC,EAASoqC,YACXD,EAAe,kBAGnBt3C,KAAKw2C,MAAQ,IAAIgB,GAAAA,YAAY,CAC3BC,UAAWtqC,EAASsqC,UACpBC,UAAWvqC,EAASwqC,SACpBC,aAAc9B,EACd+B,MAAO1qC,EAAS0qC,MAChBC,cAAeR,EACfS,cAAc,EACdC,sBAAsB,EACtBC,4BAA4B,EAC5BC,yBAAyB,GAAD,OAAKpC,EAAO,aAEH,MAA/B3oC,EAASgrC,oBAUXn4C,KAAKw2C,MAAM4B,gBAAgBC,cAAcrzB,MAAK,SAAAhjB,GACT,MAA/BmL,EAASgrC,qBACXn2C,EAASs2C,qBAAuBnrC,EAASgrC,mBACzC,EAAK3B,MAAQ,IAAIgB,GAAAA,YAAY,CAC3BC,UAAWtqC,EAASsqC,UACpBC,UAAWvqC,EAASwqC,SACpBC,aAAc9B,EACd+B,MAAO1qC,EAAS0qC,MAChBC,cAAeR,EACfS,cAAc,EACdC,sBAAsB,EACtBC,4BAA4B,EAC5BC,yBAAyB,GAAD,OAAKpC,EAAO,WACpC9zC,SAAAA,IAGN,IAAGgkB,OAAM,SAACxf,GACRV,QAAQU,MACN,qDACAA,EAEJ,GAEJ,I,sBCqBF,SAxF+B,WAOX,IAPYw4B,EAA6B,uDAAG,CAC9DuZ,QAAS,EACTC,OAAQ,EACRC,WAAY,IACZC,WAAY,IACZC,WAAW,EACXC,qBAAsB,CAAC,IAAK,MAEtBC,EAAe7Z,EAEE,MAAnBA,EAAQuZ,UACVM,EAAaN,QAAUvZ,EAAQuZ,SAGX,MAAlBvZ,EAAQwZ,SACVK,EAAaL,OAASxZ,EAAQwZ,QAGN,MAAtBxZ,EAAQyZ,aACVI,EAAaJ,WAAazZ,EAAQyZ,YAGV,MAAtBzZ,EAAQ0Z,aACVG,EAAaH,WAAa1Z,EAAQ0Z,YAGX,MAArB1Z,EAAQ2Z,YACVE,EAAaF,UAAY3Z,EAAQ2Z,WAGC,MAAhC3Z,EAAQ4Z,uBACVC,EAAaD,qBAAuB5Z,EAAQ4Z,sBAY9C,IAAME,EAAe,SACnBC,EACA/2C,GAEA,IAAQ8sC,EAAgB9sC,EAAhB8sC,IAAKkK,EAAWh3C,EAAXg3C,OAgCb,IAAMC,EAAsBF,EAAQG,KAGpC,OAFAH,EAAQG,KA/BR,WACE,IAAMC,EAAYC,GAAMD,UAAUN,GAElCM,EAAUE,SAAQ,SAA2BC,GAC3C,IAAMC,EAA6BR,EAAQS,mBAG3CT,EAAQS,mBAAqB,WAC3B,GAAkC,MAA9BD,EAAoC,CAAC,IAAD,uBADmB9zC,EAAI,yBAAJA,EAAI,gBAE7D8zC,EAA2BpzC,MAAM4yC,EAAStzC,EAC5C,CAEA,GAAIozC,EAAaD,qBAAqB1yC,SAAS6yC,EAAQU,QAAS,CAC9D,IAAMC,EAAY,6BAAyB5K,EAAG,YACxC6K,EAAqB,IAAIp1C,MAAMm1C,GACrCP,EAAUC,MAAMO,EAClB,CACF,EAGIL,EAAiB,IACnBxzC,QAAQD,KAAK,cAAD,OAAeipC,EAAG,yBAAiBwK,EAAc,MAC7DP,EAAQ1b,KAAK2b,EAAQlK,GAAK,GAE9B,IAAE,2BAxBkCrpC,EAAI,yBAAJA,EAAI,gBA0BxCwzC,EAAoB9yC,MAAM4yC,EAAStzC,EACrC,EAMOszC,CACT,EAEA,OAAOD,CACT,ECzGA,IAAQ1W,GAAsB92B,EAAAA,GAAAA,oBAAAA,kBASTsuC,GAAe,WAKlC,cAII,IAAD,OAJY9D,EAAO,EAAPA,QAAS3oC,EAAQ,EAARA,SAAU4zB,EAAO,EAAPA,SAAO,oBAJxB8Y,OAAkB,GAAE,KAEpBC,iBAAW,OAsG5BC,cAAgB,SAACC,GACf,IAAK,IAAMC,KAAKD,EACd,EAAKH,OAAO,GAAG/xC,OAAOoyC,QAAQD,GAAKD,EAAOC,EAE9C,EAAC,KAMDpjB,eAAc,yCAAG,WACfmI,GAAsC,0EAElC,EAAK6a,OAAO,GAAGjjB,MAAM,CAAD,+BACT,EAAKijB,OAAO,GAAG/xC,OAAO+uB,eAAemI,GAAQ,OAIzD,wCAJyD,uBAE7C7U,QAAQE,OACnB,IAAI9lB,MAAM,2BACX,2CAEJ,mDAVa,GAUb,KAEDuwC,iBAAgB,yCAAG,WACjB9V,GAAwC,sFAE3B,EAAK6a,OAAO,GAAG/xC,OAAOgtC,iBAAiB9V,GAAQ,mFAC7D,mDAJe,GAIf,KAEDzU,gBAAe,yCAAG,WAChByU,GAAuC,sFAE1B,EAAK6a,OAAO,GAAG/xC,OAAOyiB,gBAAgByU,GAAQ,mFAC5D,mDAJc,GAId,KAEDpa,mBAAkB,yCAAG,WACnBoa,GAA0C,sFAE7B,EAAK6a,OAAO,GAAG/xC,OAAO8c,mBAAmBoa,GAAQ,mFAC/D,mDAJiB,GAIjB,KAEDmb,sBAAqB,yCAAG,WACtBnb,GAA6C,8FAEV,EAAK6a,OAAO,GAAG/xC,OAAOqyC,sBAAsBnb,GAAQ,OAE/C,OAFlCob,EAAoB,OACpBC,EAAcjY,GAAkBgY,GACtC/P,GAAAA,SAA4BgQ,GAAY,kBACjCD,GAAoB,2CAC5B,mDAPoB,GAOpB,KAED1vB,uBAAsB,yCAAG,WACvBsU,GAA8C,8FAEV,EAAK6a,OAAO,GAAG/xC,OAAO4iB,uBAAuBsU,GAAQ,OAElC,OAFjDqJ,EAAqB,OACrBgS,EAAchS,EAAsBhoC,IAAI+hC,IAC9CiI,GAAAA,kBAAqCgQ,GAAa,GAAK,kBAChDhS,GAAqB,2CAC7B,mDAPqB,GAOrB,KAEDiS,yBAAwB,yCAAG,WACzBtb,GAAgD,sFAEnC,EAAK6a,OAAO,GAAG/xC,OAAOwyC,yBAAyBtb,GAAQ,mFACrE,mDAJuB,GAIvB,KAED3Z,iBAAgB,yCAAG,WACjB2Z,GAAwC,kGAEjB,EAAK6a,OAAO,GAAG/xC,OAAOud,iBAAiB2Z,GAAQ,OAGhB,OAHhD7Z,EAAQ,OACR1N,EAAOnM,EAAAA,GAAAA,aAAAA,SAAiC6Z,GAAS,EACnCtd,EAAAA,SAAAA,eAA4B4P,EAAK8N,MAA7CrQ,EAAO,EAAPA,QACRm1B,GAAAA,aAAgC,CAACn1B,IAAqB,kBAC/CiQ,GAAQ,2CAChB,mDARe,GAQf,KAEDo1B,uBAAsB,yCAAG,WACvBvb,GAA8C,sFAEjC,EAAK6a,OAAO,GAAG/xC,OAAOyyC,uBAAuBvb,GAAQ,mFACnE,mDAJqB,GAIrB,KAEDwb,yBAAwB,yCAAG,WACzBxb,GAAgD,sFAEnC,EAAK6a,OAAO,GAAG/xC,OAAO0yC,yBAAyBxb,GAAQ,mFACrE,mDAJuB,GAIvB,KAEDyb,+BAA8B,yCAAG,WAC/Bzb,GAAsD,sFAEzC,EAAK6a,OAAO,GAAG/xC,OAAO2yC,+BAA+Bzb,GAAQ,mFAC3E,mDAJ6B,GAI7B,KAED0b,iBAAgB,yCAAG,WACjB1b,GAAwC,sFAE3B,EAAK6a,OAAO,GAAG/xC,OAAO4yC,iBAAiB1b,GAAQ,mFAC7D,mDAJe,GA1LZh/B,KAAK85C,YADQ,MAAX/Y,EACiBA,EAEA,SAACv6B,EAAOm0C,GACzB70C,QAAQU,MAAMA,EAAOm0C,EACvB,EAGFxtC,EAASpC,SAAQ,SAAA4vC,GAAmB,IAAD,IAW7BC,OAVmB76C,IAAnB46C,GACFvyC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,qDAMqB7E,IAAvB46C,EAAe7L,IACjB8L,EAAaD,EAAe7L,SACK/uC,IAAxB46C,EAAe/W,KACxBgX,EAAahF,GAAQ+E,EAAe/W,KAAMkS,GAE1C1tC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,+DAKN,IAEMi2C,EAAgD,CACpD/L,IAAK8L,GAGDE,GAAmE,IAA3CH,EAAeI,yBAAoC,CAC/EH,EACAD,EAAeK,eACfL,EAAeM,eACfN,EAAeO,gBACf3+B,MAXkB,SAACuyB,GAAY,aAAsC,QAAtC,EAAiB,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKI,WAAW,gBAAQ,QAAS,SAa1CnvC,IAAlC46C,EAAeK,iBACjBH,EAAeM,cAAgBR,EAAeK,qBAEVj7C,IAAlC46C,EAAeM,iBACjBJ,EAAeO,cAAgBT,EAAeM,qBAEVl7C,IAAlC46C,EAAeO,iBACjBL,EAAeQ,cAAgBV,EAAeO,gBAG5CJ,IACFD,EAAeX,SAAO,kBACjBW,EAAeX,SAAO,IACzB,0BAA2B,oCAIFn6C,IAAzB46C,EAAevB,QACjByB,EAAeS,aAAe,CAACC,GAAgBZ,EAAevB,SAGhEyB,EAAe1yC,iBAAmB,SAAC3B,GACjC,EAAKszC,YAAYtzC,EAAOm0C,EAC1B,EAEA,EAAKd,OAAO33C,KAAK,CACfqT,GAAIolC,EAAeplC,GACnBqhB,MAA2B,QAAtB,EAAE+jB,EAAe/jB,aAAK,SAC3B4kB,KAAyB,QAArB,EAAEb,EAAea,YAAI,SACzB1zC,OAAQ,IAAI2zC,GAAAA,GAAAA,eAAuBZ,IAEvC,IAEI76C,KAAK65C,OAAOryC,OAAS,GACvBY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,wCAIR,CAcC,OAdA,6BAED,WACE,OAAO5E,KAAK65C,OAAO,GAAG/xC,OAAOurC,OAC/B,GAAC,mBAQD,WACE,OAAOrzC,KAAK65C,OAAO,GAAG/xC,OAAOoyC,OAC/B,KAAC,EAjHiC,GCMpC,SAASwB,GAAsB,GAUd,IAAD,IAVmB3zC,EAAO,EAAPA,QAAS2W,EAAI,EAAJA,KAAMC,EAAG,EAAHA,IAAKg9B,EAAM,EAANA,OAW7C92B,GAAqBnJ,EAAAA,EAAAA,MAArBmJ,iBAEF8W,IAAuD,QAA/B,EAAEggB,EAAOC,8BAAsB,UACvDn5B,EAAwB,QAAjB,EAAGk5B,EAAOl5B,eAAO,SAC9B,OACE,SAACo5B,GAAU,CACT9zC,QAASA,EACT2W,KAAMA,EACNpJ,YAAaqmC,EAAOrmC,YACpBmN,QAASA,EACT9D,IAAKA,EACLgd,sBAAuBA,EACvB9W,iBAAkBA,GAGxB,CAohBA,SAlaS,0CAgDP,WAAa5kB,GAAkB,IAAD,qBAC5B,cAAMA,IAhDS67C,UAAI,IAEJC,oBAAsB,SACrCv1C,EACAm0C,GAEqB,MAAjBn0C,EAAMizC,OACR,EAAKhD,SACqB,MAAjBjwC,EAAMizC,QAEfrxC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,yDAIN,IAAMo3C,EAAiB,WAErB5zC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,uCAGN,OAEqC7E,IAAjC46C,EAAesB,cACjBtB,EAAesB,cAAclxC,SAAQ,SAACmxC,GAChC11C,EAAMizC,SAAWyC,EAAQzC,OAC3B,EAAKpyC,SAAS,CACZb,MAAO,CACLizC,OAAQjzC,EAAMizC,OACd10C,QAASm3C,EAAQn3C,WAGK,MAAjByB,EAAMizC,QACfuC,GAEJ,IAC0B,MAAjBx1C,EAAMizC,QACfuC,GAEJ,EAAC,EAyHDrF,aAAe,YAGF,IAHKj4B,EAAI,EAAJA,KAAMk4B,EAAa,EAAbA,cAItB,IAAK,IAAM9sC,KAAO,EAAK7C,MAAMc,QAAS,CACrB,EAAKd,MAAMc,QAAQ+B,GAC3BiwC,cAAc,CAAEoC,cAAevF,GACxC,CACA,IAAMwF,EAAa5nB,OAAO8c,aAAaC,QAAQ,aACzC8K,EAAe7nB,OAAO8c,aAAaC,QAAQ,eACjD,GAAmB,OAAf6K,GAAsC,KAAfA,GAErBA,IADgB5nB,OAAOnZ,SAAS6N,SACJ,CAC9B,IAAI0a,EAAOwY,EACU,OAAjBC,GAA0C,KAAjBA,IAC3BzY,GAAQyY,GAEV7nB,OAAOnZ,SAASihC,KAAO1Y,CACzB,CAEFpP,OAAO8c,aAAaiL,WAAW,aAC/B/nB,OAAO8c,aAAaiL,WAAW,eAC/B,EAAKl1C,SAAS,CAAEqX,KAAMA,GACxB,EA3IE5Y,QAAQ6B,KAAK,kBACb7B,QAAQ6B,KAAK,sBAAD,OAAuB1H,EAAM07C,OAAO/X,KAAI,MACpD,MAA2BpP,OAAOnZ,SAA1B4zB,EAAQ,EAARA,SAAUuN,EAAI,EAAJA,KACZ1G,EAAO,UAAM7G,EAAQ,aAAKuN,GAC1BC,EAAS7G,GAAQ31C,EAAM07C,OAAO/X,KAAMkS,GAEpC4G,EAAez8C,EAAM07C,OAAOgB,UACb58C,IAAjB28C,IACF52C,QAAQ6B,KACN,8CACA1H,EAAM07C,OAAOgB,MAEf,EAAKb,KAAO,IAAIvF,GAAYkG,EAAQC,IAGF,IAAhCz8C,EAAM07C,OAAOiB,QAAQp1C,QACvBY,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,uCAGNkB,QAAQ6B,KACN,yDACA1H,EAAM07C,OAAOiB,SAGf,EAAKlL,sBAAwB,EAAKA,sBAAsBrnC,MAAK,WAE7DtF,EAAAA,GAAAA,OAAe,CAAEiC,SAAU,IAC3B,EAAK61C,gCAAgC58C,EAAM07C,QAE3C,IAAMrI,EApMV,SAA6B,GAQmB,IARfwC,EAAO,EAAPA,QAASgH,EAAU,EAAVA,WAAY3vC,EAAQ,EAARA,SAAU4zB,EAAO,EAAPA,QASxDgc,EAAiD,CAAE3J,QAAS,GAC5DvwB,EAA4D,CAAC,EA6CnE,IAAK,IAAM/Y,KA3CXqD,EAASpC,SAAQ,SAAA4vC,GACf,GAAqC,MAAjCA,EAAeqC,eACjBrC,EAAeqC,eAAejyC,SAAQ,SAAAqkB,GAChC1R,OAAO1Q,OAAehJ,GAAgBkC,SAASkpB,GAC7CA,KAAe2tB,EACjBA,EAAoB3tB,IAAgB,EAEpC2tB,EAAoB3tB,GAAe,EAGrCtpB,QAAQD,KACN,iCAA0BupB,EAAW,iDACXurB,EAAeplC,GAAE,KAGjD,QACK,CACL,GAAIif,OAAOnZ,SAAS6N,SAAShjB,SAAS,cAAe,CACnD,IAAMgjB,EAAWsL,OAAOnZ,SAAS6N,SAASzmB,MAAM,WAAW,GACrDw6C,EAAO,UAAMH,GAAU,OAAG5zB,EAAQ,aACxCyxB,EAAe7L,IAAMmO,CACvB,CAEAF,EAAoB3J,SAAW,EAC/BvwB,EAAcuwB,QAAU,IAAIwG,GAAgB,CAC1C9D,QAAAA,EACA3oC,SAAU,CAACwtC,GACX5Z,QAAAA,GAEJ,CACF,IAEIgc,EAAoB3J,QAAU,GAChChrC,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,wFAMYm4C,EACJ,YAARjzC,GAGAizC,EAAoBjzC,GAAO,GAC7B1B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,iEAAgE,yBAC9CkF,EAAG,oCACrB,+BA0BR,OApBI4T,OAAOC,KAAKo/B,GAAqBv1C,OAAS,GAC5C2F,EAASpC,SAAQ,SAAAmyC,GACf,IAAMp1C,EAAS,IAAI8xC,GAAgB,CACjC9D,QAAAA,EACA3oC,SAAU,CAAC+vC,GACXnc,QAAAA,IAE2B,MAAzBmc,EAAOF,gBACTE,EAAOF,eAAejyC,SAAQ,SAAAqkB,GAC5BvM,EAAcuM,GAAetnB,CAC/B,GAEJ,IAGF4V,OAAO1Q,OAAOhJ,GAAgB+G,SAAQ,SAAAqkB,GAC9BA,KAAevM,IACnBA,EAAcuM,GAAevM,EAAcuwB,QAE/C,IACOvwB,CACT,CAuG2Bs6B,CAAqB,CAC1CrH,QAAAA,EACAgH,WAAmC,QAAzB,EAAE78C,EAAM07C,OAAOmB,kBAAU,QAAI,uCACvC3vC,SAAUlN,EAAM07C,OAAOiB,QACvB7b,QAAS,EAAKgb,sBAQf,OALD,EAAK90C,MAAQ,CACXc,QAASurC,EACTA,eAAAA,EACApsC,WAAW,EACXk2C,mBAAmB,GACpB,CACH,CA8TC,OA9TA,uDAED,SAAiCzB,GAC/B,IAAM0B,EAAW,kCAEXvO,EADY,IAAI/lB,gBAAgByL,OAAOnZ,SAAS2N,QAChCgZ,IAAI,YAIWjiC,IAHA47C,EAAOiB,QAAQj2C,MAClD,SAACu2C,GAAM,OAAKA,EAAO3nC,KAAO8nC,CAAQ,KAE6B,kBAARvO,GACvD6M,EAAOiB,QAAQ16C,KAAK,CAClBqT,GAAI8nC,EACJzmB,OAAO,EACPkY,IAAAA,EACAkO,eAAgB,CACdh5C,EAAes5C,iBACft5C,EAAekwB,oBACflwB,EAAeknB,aACflnB,EAAesmB,kCACftmB,EAAewnB,eACfxnB,EAAe2gB,qCACf3gB,EAAeu5C,kCACfv5C,EAAew5C,sCACfx5C,EAAey5C,0CAIvB,GAAC,mCAED,YAAwD,IAA/B3O,EAAG,EAAHA,IAEvB,GADAhpC,QAAQ6B,KAAK,2BAA4BmnC,GAC7B,KAARA,GAA4E,YAA9Dta,OAAO8c,aAAaC,QAAQ,8BAA9C,CAIA/c,OAAO8c,aAAaK,QAAQ,uBAAwB7C,GACpD,IAAM4O,EAAY,IAAI9D,GAAgB,CACpC9D,QAAS,GACT3oC,SAAU,CAAC,CACToI,GAAI,MACJu5B,IAAAA,EACA0M,MAAM,EACN5kB,OAAO,IAETmK,QAAS/gC,KAAK+7C,sBAEhB2B,EAAU3D,cAAc/5C,KAAKiH,MAAMc,QAAQqrC,QAAQ8G,SAMnDl6C,KAAKqH,UAAS,SAAAJ,GACZ,IAAMc,EAA8C,CAAC,EACrD,IAAK,IAAM+B,KAAO7C,EAAMc,QACtBA,EAAQ+B,GAAO4zC,EAEjB,MAAO,CAAE31C,QAAAA,EACX,GAxBA,MAFE/H,KAAKqH,SAAS,CAAEU,QAAS/H,KAAKiH,MAAMqsC,gBA2BxC,GAEA,oBAkCA,WAAiB,IAAD,YACIvzC,IAAdC,KAAK87C,MACPh2C,QAAQ6B,KAAK,uBACb3H,KAAK87C,KAAKrF,OAAO,CAAEC,SAAU12C,KAAK22C,eAAgB3xB,MAAK,WACrDlf,QAAQ6B,KAAK,0BACb,EAAKN,SAAS,CACZH,WAAW,EACXk2C,mBAAmB,GAEvB,IAAGp3B,OAAM,SAACxf,GACRV,QAAQU,MAAMA,GAEd4B,GAAAA,QACElD,EACA,IAAIL,EACFD,EACA,4BAEJ,EAAKyC,SAAS,CACZH,WAAW,EACXy2C,gBAAY59C,EACZq9C,mBAAmB,GAEvB,KAEAp9C,KAAKqH,SAAS,CACZH,WAAW,EACXy2C,gBAAY59C,EACZq9C,mBAAmB,GAGzB,GAAC,+BAED,WACE,IAAMxZ,EAAOpP,OAAO8c,aAAaC,QAAQ,aAC5B,OAAT3N,GAA0B,KAATA,IACnBpP,OAAO8c,aAAaK,QAAQ,YAAand,OAAOnZ,SAAS6N,UACzDsL,OAAO8c,aAAaK,QAAQ,cAAend,OAAOnZ,SAAS2N,SAI7D,IAAMqoB,EAAkB7c,OAAO8c,aAAaC,QAAQ,wBAC5B,OAApBF,GAAgD,KAApBA,GAC9BrxC,KAAK0xC,sBAAsB,CAAE5C,IAAKuC,IAGpCrxC,KAAKy2C,QACP,GAAC,oBAED,WAA4B,IAAD,IAgBrBmH,EAhBqB,OACnBC,EAAU,CACdl9C,KAAMX,KAAKC,MAAMU,KACjB8uC,QAASzvC,KAAKC,MAAMwvC,QACpBE,SAAU3vC,KAAKC,MAAM0vC,SACrBnvC,IAAK,iCACLs9C,aAAc99C,KAAKC,MAAM07C,OAAOmC,cAG5BC,IAC6B,QADZ,EACrB/9C,KAAKC,MAAM07C,OAAOqC,uBAAe,UAE7BC,EACmC,QADd,EACzBj+C,KAAKC,MAAM07C,OAAOsC,6BAAqB,SAKvCL,EADEG,GACS,SAAC,GAAQ,CAACh2C,QAAS/H,KAAKiH,MAAMc,WAE9B,yDAGb,IACIm2C,EADAC,GAAmB,EAIK,MAA1Bn+C,KAAKC,MAAM07C,OAAOgB,MAC2B,MAA7C38C,KAAKC,MAAM07C,OAAOgB,KAAKxE,oBAEvB+F,EAAW,WACQ,MAAb,EAAKpC,MAEP,EAAKA,KAAK3E,SAEd,EACAgH,GAAmB,IAEnBD,EAAW,WAAO,EAClBC,GAAmB,GAGrB,IAAMC,EAAc,CAAE31C,OAAQ,SACxB41C,EAAqB,CAAE51C,OAAQ,QAErC,YAA8B1I,IAA1BC,KAAKiH,MAAM02C,YAEX,SAAC,KAAa,CAACW,SAAUt+C,KAAKC,MAAM07C,OAAO/X,KAAK,UAC9C,SAAC,KAAQ,CAAC6O,GAAIzyC,KAAKiH,MAAM02C,WAAYx0B,SAAO,MAGvCnpB,KAAKiH,MAAMC,WAElB,SAAC,KAAa,CAACo3C,SAAUt+C,KAAKC,MAAM07C,OAAO/X,KAAK,UAC9C,UAAC,IAAM,CAACp7B,MAAO41C,EAAY,WACzB,SAAC,GAAM,CACLz/B,IAAKk/B,EACLn/B,KAAM1e,KAAKiH,MAAMyX,KACjB8zB,oBAAoB,EACpBZ,kBAAmB5xC,KAAK0xC,sBACxBwB,2BAA2B,EAC3BnrC,QAAS/H,KAAKiH,MAAMc,QACpBurC,eAAgBtzC,KAAKiH,MAAMqsC,kBAE7B,SAAC,YAAc,CAAC9qC,MAAO61C,EAAmB,UACxC,SAAC,MAAS,WAKRr+C,KAAKiH,MAAMm2C,kBAIQ,MAApBp9C,KAAKiH,MAAMT,OAElB,SAAC,GAAQ,CAAC1B,KAAK,QAAQC,QAAS/E,KAAKiH,MAAMT,MAAMzB,WAIjD,SAAC,KAAa,CAACu5C,SAAUt+C,KAAKC,MAAM07C,OAAO/X,KAAK,UAC9C,UAAC,KAAM,YACL,SAAC,KAAK,CACJA,KAAK,IACLC,SACE,UAAC,IAAM,CAACr7B,MAAO41C,EAAY,WACzB,SAAC,GAAM,CACLz/B,IAAKk/B,EACLn/B,KAAM1e,KAAKiH,MAAMyX,KACjB8zB,oBAAoB,EACpBZ,kBAAmB5xC,KAAK0xC,sBACxBQ,aAAciM,EAAmBD,OAAWn+C,EAC5CmzC,0BAA2B+K,EAC3Bl2C,QAAS/H,KAAKiH,MAAMc,QACpBurC,eAAgBtzC,KAAKiH,MAAMqsC,kBAE7B,SAAC,YAAc,CAAC9qC,MAAO61C,EAAmB,SACvCT,UAKT,SAAC,KAAK,CACJha,KAAK,+BACLC,SACE,UAAC,IAAM,CAACr7B,MAAO41C,EAAY,WACzB,SAAC,GAAM,CACLz/B,IAAKk/B,EACLn/B,KAAM1e,KAAKiH,MAAMyX,KACjB8zB,mBAAoBuL,EACpBnM,kBAAmB5xC,KAAK0xC,sBACxBQ,aAAciM,EAAmBD,OAAWn+C,EAC5CmzC,0BAA2B+K,EAC3Bl2C,QAAS/H,KAAKiH,MAAMc,QACpBurC,eAAgBtzC,KAAKiH,MAAMqsC,kBAE7B,SAAC,YAAc,CAAC9qC,MAAO61C,EAAmB,UACxC,SAAC3C,GAAsB,CACrB3zC,QAAS/H,KAAKiH,MAAMc,QACpB2W,KAAM1e,KAAKiH,MAAMyX,KACjBi9B,OAAQ37C,KAAKC,MAAM07C,OACnBh9B,IAAKk/B,YAMf,SAAC,KAAK,CACJja,KAAK,6GACLC,SACE,UAAC,IAAM,CAACr7B,MAAO41C,EAAY,WACzB,SAAC,GAAM,CACLz/B,IAAKk/B,EACLn/B,KAAM1e,KAAKiH,MAAMyX,KACjB8zB,mBAAoBuL,EACpBnM,kBAAmB5xC,KAAK0xC,sBACxBQ,aAAciM,EAAmBD,OAAWn+C,EAC5CmzC,0BAA2B+K,EAC3Bl2C,QAAS/H,KAAKiH,MAAMc,QACpBurC,eAAgBtzC,KAAKiH,MAAMqsC,kBAE7B,SAAC,YAAc,CAAC9qC,MAAO61C,EAAmB,UACxC,SAAC3C,GAAsB,CACrB3zC,QAAS/H,KAAKiH,MAAMc,QACpB2W,KAAM1e,KAAKiH,MAAMyX,KACjBi9B,OAAQ37C,KAAKC,MAAM07C,OACnBh9B,IAAKk/B,YAMf,SAAC,KAAK,CACJja,KAAK,UACLC,SACE,UAAC,IAAM,CAACr7B,MAAO41C,EAAY,WACzB,SAAC,GAAM,CACLz/B,IAAKk/B,EACLn/B,KAAM1e,KAAKiH,MAAMyX,KACjB8zB,oBAAoB,EACpBZ,kBAAmB5xC,KAAK0xC,sBACxBQ,aAAciM,EAAmBD,OAAWn+C,EAC5CmzC,0BAA2B+K,EAC3Bl2C,QAAS/H,KAAKiH,MAAMc,QACpBurC,eAAgBtzC,KAAKiH,MAAMqsC,iBAC3B,wBA7FZ,SAAC,GAAQ,CAACxuC,KAAK,QAAQC,QAAQ,mBAsGrC,KAAC,EA/ZM,CAAShD,EAAAA,U","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","utils/PubSub.js","utils/CustomError.js","services/NotificationMiddleware.js","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","utils/router.tsx","components/ColorSettingsMenu.tsx","components/AnnotationCategoryItem.tsx","components/AnnotationCategoryList.tsx","components/HoveredRoiTooltip.tsx","services/RoiToAnnotationAdapter.ts","utils/generateReport.ts","components/SlideViewer.tsx","data/slides.tsx","services/fetchImageMetadata.ts","hooks/useSlides.ts","components/CaseViewer.tsx","components/DicomTagBrowser/dicomTagUtils.ts","utils/formatDicomDate.ts","utils/pubSubServiceInterface.ts","utils/createSeriesMetadata.ts","utils/createStudyMetadata.ts","services/DICOMMetadataStore.ts","hooks/useDebounce.ts","components/DicomTagBrowser/DicomTagBrowser.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Sex',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","// Use symbols to prevent exposing private attributes\nconst _subscriptions = Symbol('subscriptions')\nconst _lastSubscriptionId = Symbol('lastSubscriptionId')\n\n/**\n * Class to enable implementation of publish/subscribe pattern\n * @class\n * @classdesc Enables publishing/subscribing\n */\nexport default class PubSub {\n  constructor () {\n    this[_subscriptions] = {}\n    this[_lastSubscriptionId] = 0\n  }\n\n  /**\n   * Adds a subscription callback to the provided event name\n   * @param {string} eventName Event name that will trigger the callback\n   * @param {Function} callback Function to be executed when event is published\n   * @returns {void}\n   */\n  subscribe (eventName, callback) {\n    if (eventName === undefined) {\n      throw new Error('Trying to subscribe to an inexistent event')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('The provided callback must be a function')\n    }\n\n    if (!this[_subscriptions].hasOwnProperty(eventName)) {\n      this[_subscriptions][eventName] = {}\n    }\n\n    const subscriptionId = `sub${this[_lastSubscriptionId]++}`\n    this[_subscriptions][eventName][subscriptionId] = callback\n  }\n\n  /**\n   * Removes a subscription callback for the provided event name\n   * @param {string} eventName Event name for the registerd callback\n   * @param {Function} [callback] Function to have its subscription removed\n   * @returns {void}\n   */\n  unsubscribe (eventName, callback) {\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      if (!callback) {\n        delete callbacks[subscriptionId]\n      } else if (callbacks[subscriptionId] === callback) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n\n  /**\n   * Trigger all registered subscription callbacks for a specific event name\n   * @param {String} eventName Event name to trigger subscriptions from\n   * @param {any} [payload] Payload that will be passed to the callback fuction\n   * @returns {void}\n   */\n  publish (eventName, ...payload) {\n    if (eventName === undefined) {\n      throw new Error('Trying to publish an inexistent event')\n    }\n\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      callbacks[subscriptionId](...payload)\n    }\n  }\n\n  /**\n   * Cleares all subscriptions for current instance\n   * @returns {void}\n   */\n  unsubscribeFromAll () {\n    for (const eventName in this[_subscriptions]) {\n      const callbacks = this[_subscriptions][eventName]\n      for (const subscriptionId in callbacks) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n}\n","const errorTypes = {\n  AUTHENTICATION: 'Authentication',\n  COMMUNICATION: 'Communication',\n  ENCODINGANDDECODING: 'EncodingDecoding',\n  VISUALIZATION: 'Visualization'\n}\n\nclass CustomError extends Error {\n  constructor (type, message) {\n    super()\n    this.message = message\n    this.stack = new Error().stack\n    this.type = type\n  }\n}\n\nexport { errorTypes, CustomError }\n","import PubSub from '../utils/PubSub'\nimport { notification } from 'antd'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nexport const NotificationMiddlewareEvents = {\n  OnError: 'onError',\n  OnWarning: 'onWarning'\n}\n\nexport const NotificationMiddlewareContext = {\n  DICOMWEB: 'dicomweb-client',\n  DMV: 'dicom-microscopy-viewer',\n  DCMJS: 'dcmjs',\n  SLIM: 'slim',\n  AUTH: 'authentication'\n}\n\nconst NotificationType = {\n  TOAST: 'toast',\n  CONSOLE: 'console'\n}\n\n/* Sources of Error:\n  1. 'dicomweb-client': Error while requesting/fetching data, tagged as 'Communication'\n  2. 'slim' and 'dicom-microscopy-viewer' library: Error related to dicom data encoding/decoding,\n  could directly/indirectly impact image-related visualization, tagged as 'Visualization' or\n  'Encoding/Decoding' accordingly\n  3. 'dcmjs' library: Data parsing error, tagged as 'DICOMError'\n  4. 'authentication': Error during user authentication, tagged as 'Authentication'\n  */\nconst NotificationSourceDefinition = {\n  sources: [\n    {\n      category: errorTypes.AUTHENTICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.COMMUNICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.VISUALIZATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.ENCODINGANDDECODING,\n      notificationType: NotificationType.CONSOLE\n    },\n    {\n      category: 'Warning',\n      notificationType: NotificationType.TOAST\n    }\n  ]\n}\n\nclass NotificationMiddleware extends PubSub {\n  constructor () {\n    super()\n\n    const outerContext = (args) => {\n      this.publish(NotificationMiddlewareEvents.OnWarning, Array.from(args).join(' '))\n    }\n\n    (function () {\n      const warn = console.warn\n      console.warn = function () {\n        if (!JSON.stringify(arguments).includes('request')) {\n          outerContext(arguments)\n        }\n        warn.apply(this, Array.prototype.slice.call(arguments))\n      }\n    }())\n  }\n\n  /**\n   * Error handling middleware function\n   *\n   * @param source - source of error - dicomweb-client, dmv, dcmjs or slim itself\n   * @param error - error object\n   */\n  onError (source, error) {\n    const errorCategory = error.type\n    const sourceConfig = NotificationSourceDefinition.sources.find(\n      s => s.category === errorCategory\n    )\n\n    const { notificationType } = sourceConfig\n\n    this.publish(NotificationMiddlewareEvents.OnError, {\n      source,\n      error\n    })\n\n    let notificationMsg\n    if (error instanceof CustomError) {\n      notificationMsg = error.message\n    } else {\n      notificationMsg = String(error)\n    }\n\n    switch (notificationType) {\n      case NotificationType.TOAST:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        return notification.error({\n          message: `${errorCategory} error`,\n          description: notificationMsg,\n          duration: 3\n        })\n\n      case NotificationType.CONSOLE:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        break\n\n      default:\n    }\n  }\n}\n\nexport default new NotificationMiddleware()\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          disableInteractions: true,\n          metadata,\n          resizeFactor: 1,\n          errorInterceptor: (error: CustomError) => {\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.DMV,\n              error\n            )\n          }\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n\n    const attributes = []\n    const description = this.props.slide.description\n    if (description !== null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          {this.props.slide.overviewImages.length > 0\n            ? (\n              <div style={{ height: '100px' }} ref={this.overviewViewportRef} />\n              )\n            : (\n              <div style={{\n                height: '100px',\n                textAlign: 'center',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                fontSize: '1.5rem',\n                fontWeight: 300,\n                color: '#8F9BA8',\n                letterSpacing: '0.1em'\n              }}\n              >\n                SM\n              </div>\n              )}\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: (uid: string) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection(object.key)\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\n// Helper function components\nfunction AnnotationGroupControls ({\n  isVisible,\n  onVisibilityChange,\n  settings\n}: {\n  isVisible: boolean\n  onVisibilityChange: (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => void\n  settings: React.ReactNode\n}): React.ReactElement {\n  return (\n    <Space direction='vertical' align='end'>\n      <Switch\n        size='small'\n        onChange={onVisibilityChange}\n        checked={isVisible}\n        checkedChildren={<FaEye />}\n        unCheckedChildren={<FaEyeSlash />}\n      />\n      <Popover\n        placement='left'\n        content={settings}\n        overlayStyle={{ width: '350px' }}\n        title='Display Settings'\n      >\n        <Button type='primary' shape='circle' icon={<SettingOutlined />} />\n      </Popover>\n    </Space>\n  )\n}\n\nfunction AnnotationGroupBadgeDescription ({\n  isBadgeVisible,\n  color,\n  label,\n  attributes\n}: {\n  isBadgeVisible: boolean\n  color: string\n  label: string\n  attributes: Array<{ name: string, value: string }>\n}): React.ReactElement {\n  return (\n    <Badge\n      offset={[-20, 20]}\n      count={' '}\n      style={{\n        borderStyle: 'solid',\n        borderWidth: '1px',\n        borderColor: 'gray',\n        visibility: isBadgeVisible ? 'visible' : 'hidden',\n        backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n      }}\n    >\n      <Description\n        header={label}\n        attributes={attributes}\n        selectable\n        hasLongValues\n      />\n    </Badge>\n  )\n}\n\n// Interfaces\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onAnnotationGroupClick: (annotationGroupUID: string) => void\n  onVisibilityChange: ({\n    annotationGroupUID,\n    isVisible\n  }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({\n    uid,\n    styleOptions\n  }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n// Class\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<\nAnnotationGroupItemProps,\nAnnotationGroupItemState\n> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleMeasurementSelection =\n      this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange = (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color,\n          limitValues: this.state.currentStyle.limitValues\n        }\n      })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState((state) => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange (value: number | null): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState((state) => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [value, this.state.currentStyle.limitValues[1]]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (value: number | null): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState((state) => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [this.state.currentStyle.limitValues[0], value]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (values: number[]): void {\n    this.setState((state) => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      uid: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleAnnotationGroupClick = (): void => {\n    this.props.onAnnotationGroupClick(this.props.annotationGroup.uid)\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value != null && option.children != null) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState((state) => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState((state) => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      (item) => item.AnnotationGroupUID === this.props.annotationGroup.uid\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      },\n      {\n        name: 'Annotation coordinate type',\n        value: this.props.metadata.AnnotationCoordinateType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const measurementOptions = measurementsSequence.map(\n      (measurementItem) => {\n        const name = measurementItem.ConceptNameCodeSequence[0]\n        const key = `${name.CodingSchemeDesignator}-${name.CodeValue}`\n        return (\n          <Select.Option\n            key={key}\n            value={key}\n            dropdownMatchSelectWidth={false}\n            size='small'\n            disabled={!this.props.isVisible}\n          >\n            {name.CodeMeaning}\n          </Select.Option>\n        )\n      }\n    )\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        <></>\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues != null) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>Values of interest</Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>Exploration</Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>Measurement</Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible =\n      this.state.isVisible && this.state.currentStyle.measurement == null\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        onClick={this.handleAnnotationGroupClick}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <AnnotationGroupControls\n              isVisible={this.props.isVisible}\n              onVisibilityChange={this.handleVisibilityChange}\n              settings={settings}\n            />\n          </div>\n          <AnnotationGroupBadgeDescription\n            isBadgeVisible={isBadgeVisible}\n            color={color}\n            label={this.props.annotationGroup.label}\n            attributes={attributes}\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu, Switch } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupClick: (annotationGroupUID: string) => void\n  onAnnotationGroupVisibilityChange: ({\n    annotationGroupUID,\n    isVisible\n  }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({\n    uid,\n    styleOptions\n  }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<\nAnnotationGroupListProps,\nunknown\n> {\n  handleVisibilityChange = (checked: boolean): void => {\n    if (checked) {\n      this.props.annotationGroups.forEach((annotationGroup) => {\n        this.props.onAnnotationGroupVisibilityChange({\n          annotationGroupUID: annotationGroup.uid,\n          isVisible: checked\n        })\n      })\n      return\n    }\n\n    this.props.visibleAnnotationGroupUIDs.forEach((annotationGroupUID) => {\n      this.props.onAnnotationGroupVisibilityChange({\n        annotationGroupUID,\n        isVisible: checked\n      })\n    })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          onAnnotationGroupClick={this.props.onAnnotationGroupClick}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <>\n        <div\n          style={{\n            paddingLeft: '14px',\n            paddingTop: '7px',\n            paddingBottom: '7px'\n          }}\n        >\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleAnnotationGroupUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu selectable={false}>{items}</Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.ENCODINGANDDECODING,\n        'Content item \"Imaging Measurements\" not found.' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\".'\n      )\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Tracking Unique Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Finding\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Image Region\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: any\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Content item \"Image Region\" has unknown graphic type ' +\n            `\"${regionItem.GraphicType}\". ` +\n            'Content of Comprehensive 3D SR document is not structured ' +\n            'based on TID 1500 \"Measurement Report\" -> ' +\n            'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n          )\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen UID\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Container Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number | null\n  ): void {\n    if (value != null) {\n      const identifier = this.props.opticalPath.identifier\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { opacity: value }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          color: state.currentStyle.color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: value,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    try {\n      specimenDescriptions.forEach(description => {\n        const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] =\n          description.SpecimenPreparationSequence ?? []\n        specimenPreparationSteps.forEach(\n          (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n            step.SpecimenPreparationStepContentItemSequence.forEach((\n              item: (\n                dcmjs.sr.valueTypes.CodeContentItem |\n                dcmjs.sr.valueTypes.TextContentItem |\n                dcmjs.sr.valueTypes.UIDRefContentItem |\n                dcmjs.sr.valueTypes.PNameContentItem |\n                dcmjs.sr.valueTypes.DateTimeContentItem\n              ),\n              index: number\n            ) => {\n              const name = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptNameCodeSequence[0].CodeValue,\n                schemeDesignator:\n                    item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n              })\n              if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n                item = item as dcmjs.sr.valueTypes.CodeContentItem\n                const value = new dcmjs.sr.coding.CodedConcept({\n                  value: item.ConceptCodeSequence[0].CodeValue,\n                  schemeDesignator:\n                      item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                  meaning: item.ConceptCodeSequence[0].CodeMeaning\n                })\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: value.CodeMeaning\n                    })\n                  }\n                }\n              } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n                item = item as dcmjs.sr.valueTypes.TextContentItem\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: item.TextValue\n                    })\n                  }\n                }\n              }\n            })\n          }\n        )\n      })\n    } catch (error: any) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DCMJS,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          error.message\n        )\n      )\n    }\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        mappingUID: this.props.mapping.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: value\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({ currentStyle: { opacity: value } })\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","import React from 'react'\nimport { Col, Checkbox, Divider, InputNumber, Row, Slider } from 'antd'\n\ninterface ColorSettingsMenuProps {\n  annotationGroupsUIDs: string[]\n  defaultStyle: {\n    opacity: number\n    color: number[]\n    contourOnly: boolean\n  }\n  onStyleChange: Function\n}\n\ninterface ColorSettingsMenuState {\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    contourOnly: boolean\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass ColorSettingsMenu extends React.Component<\nColorSettingsMenuProps,\nColorSettingsMenuState\n> {\n  constructor (props: ColorSettingsMenuProps) {\n    super(props)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        contourOnly: this.props.defaultStyle.contourOnly\n      }\n    }\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: this.state.currentStyle.color,\n            opacity: value,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n      this.updateCurrentStyle({ opacity: value })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleShowOutlineOnly (value: boolean): void {\n    this.updateCurrentStyle({ contourOnly: value })\n\n    this.props.annotationGroupsUIDs.forEach((uid) => {\n      this.props.onStyleChange({\n        uid,\n        styleOptions: {\n          color: this.state.currentStyle.color,\n          opacity: this.state.currentStyle.opacity,\n          contourOnly: value\n        }\n      })\n    })\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  updateCurrentStyle ({\n    color,\n    opacity,\n    contourOnly\n  }: {\n    color?: number[]\n    opacity?: number\n    contourOnly?: boolean\n  }): void {\n    this.setState((state) => ({\n      currentStyle: {\n        opacity: opacity ?? state.currentStyle.opacity,\n        color: color ?? state.currentStyle.color,\n        contourOnly: contourOnly ?? state.currentStyle.contourOnly\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    return (\n      <div>\n        {colorSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Checkbox\n            value={this.state.currentStyle.contourOnly}\n            onChange={(event) =>\n              this.handleShowOutlineOnly(event.target.checked)}\n          >\n            Show outline only\n          </Checkbox>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default ColorSettingsMenu\n","import React from 'react'\nimport { Menu, Space, Checkbox, Tooltip, Popover, Button } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { Category, Type } from './AnnotationCategoryList'\nimport ColorSettingsMenu from './ColorSettingsMenu'\n\nconst AnnotationCategoryItem = ({\n  category,\n  onChange,\n  checkedAnnotationUids,\n  onStyleChange,\n  defaultAnnotationStyles,\n  ...props\n}: {\n  category: Category\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const { types } = category\n\n  const onCheckCategoryChange = (e: any): void => {\n    const isVisible = e.target.checked\n    types.forEach((type: Type) => {\n      handleChangeCheckedType({ type, isVisible })\n    })\n  }\n\n  const checkAll = types.every((type: Type) =>\n    type.uids.every((uid: string) => checkedAnnotationUids.has(uid))\n  )\n  const indeterminate =\n    !checkAll &&\n    types.some((type: Type) =>\n      type.uids.some((uid: string) => checkedAnnotationUids.has(uid))\n    )\n\n  const handleChangeCheckedType = ({\n    type,\n    isVisible\n  }: {\n    type: Type\n    isVisible: boolean\n  }): void => {\n    type.uids.forEach((uid: string) => {\n      onChange({ roiUID: uid, isVisible })\n    })\n  }\n\n  return (\n    <Menu.Item\n      style={{ height: '100%', paddingLeft: '3px' }}\n      {...props}\n    >\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px', color: 'black' }}>\n          <Space direction='vertical' align='end'>\n            <Checkbox\n              indeterminate={indeterminate}\n              checked={checkAll}\n              onChange={onCheckCategoryChange}\n            >\n              <Tooltip\n                title={`${category.CodeValue}:${category.CodingSchemeDesignator}`}\n                mouseEnterDelay={1}\n              >\n                {category.CodeMeaning}\n              </Tooltip>\n              <Popover\n                placement='topLeft'\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n                content={() => (\n                  <ColorSettingsMenu\n                    annotationGroupsUIDs={types.reduce(\n                      (acc: string[], type) => {\n                        return [...acc, ...type.uids]\n                      },\n                      []\n                    )}\n                    onStyleChange={onStyleChange}\n                    defaultStyle={\n                      defaultAnnotationStyles[types[0].uids[0]]\n                    }\n                  />\n                )}\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  style={{ marginLeft: '10px' }}\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Checkbox>\n          </Space>\n          {types.map((type: Type) => {\n            const { CodeMeaning, CodingSchemeDesignator, CodeValue, uids } =\n              type\n            const shortenedCodeMeaning = CodeMeaning.slice(0, 22)\n            const displayCodeMeaning = shortenedCodeMeaning === CodeMeaning ? CodeMeaning : `${shortenedCodeMeaning}...`\n            const isChecked = uids.every((uid: string) =>\n              checkedAnnotationUids.has(uid)\n            )\n            const indeterminateType =\n              !isChecked &&\n              uids.some((uid: string) => checkedAnnotationUids.has(uid))\n            return (\n              <div\n                key={`${type.CodingSchemeDesignator}:${type.CodeMeaning}`}\n                style={{\n                  paddingLeft: '25px',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'row'\n                }}\n              >\n                <Checkbox\n                  indeterminate={indeterminateType}\n                  checked={isChecked}\n                  onChange={(e: any) =>\n                    handleChangeCheckedType({\n                      type,\n                      isVisible: e.target.checked\n                    })}\n                />\n                <div style={{ paddingLeft: '5px' }}>\n                  <Tooltip\n                    title={`${CodeValue}:${CodingSchemeDesignator}`}\n                    mouseEnterDelay={1}\n                  >\n                    {displayCodeMeaning}\n                  </Tooltip>\n                  <Popover\n                    placement='topLeft'\n                    overlayStyle={{ width: '350px' }}\n                    title='Display Settings'\n                    content={() => (\n                      <ColorSettingsMenu\n                        annotationGroupsUIDs={type.uids}\n                        onStyleChange={onStyleChange}\n                        defaultStyle={defaultAnnotationStyles[type.uids[0]]}\n                      />\n                    )}\n                  >\n                    <Button\n                      type='primary'\n                      shape='circle'\n                      style={{ marginLeft: '10px' }}\n                      icon={<SettingOutlined />}\n                    />\n                  </Popover>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </Space>\n    </Menu.Item>\n  )\n}\n\nexport default AnnotationCategoryItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport AnnotationCategoryItem from './AnnotationCategoryItem'\n\nexport interface AnnotationCategoryAndType {\n  uid: string\n  type: Omit<Type, 'uids'>\n  category: Omit<Category, 'types'>\n}\nexport interface Type {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  uids: string[]\n}\nexport interface Category {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  types: Type[]\n}\n\nconst getCategories = (annotations: any): Record<string, Category> => {\n  const categories = annotations?.reduce(\n    (\n      categoriesAcc: Record<string, Category & { types: Record<string, Type> }>,\n      annotation: AnnotationCategoryAndType\n    ) => {\n      const { category, type, uid } = annotation\n      const categoryKey = category.CodeMeaning\n      const typeKey = type.CodeMeaning\n\n      const oldCategory = categoriesAcc[categoryKey] ?? {\n        ...category,\n        types: {}\n      }\n      const oldType = oldCategory.types[typeKey] ?? {\n        ...type,\n        uids: []\n      }\n\n      return {\n        ...categoriesAcc,\n        [categoryKey]: {\n          ...oldCategory,\n          types: {\n            ...oldCategory.types,\n            [typeKey]: { ...oldType, uids: [...oldType.uids, uid] }\n          }\n        }\n      }\n    },\n    {}\n  )\n\n  // Normalizing types so that it's an array instead of an object:\n  Object.keys(categories).forEach((categoryKey: string) => {\n    const category = categories[categoryKey]\n    const { types } = category\n    const typesArr = Object.keys(types).map(\n      (typeKey: string) => types[typeKey]\n    )\n    categories[categoryKey].types = typesArr\n  })\n\n  return categories\n}\n\nconst AnnotationCategoryList = ({\n  annotations,\n  onChange,\n  onStyleChange,\n  defaultAnnotationStyles,\n  checkedAnnotationUids\n}: {\n  annotations: AnnotationCategoryAndType[]\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const categories: Record<string, Category> = getCategories(annotations)\n\n  if (Object.keys(categories).length === 0) {\n    return <></>\n  }\n\n  const items = Object.keys(categories).map((categoryKey: string) => {\n    const category = categories[categoryKey]\n    return (\n      <AnnotationCategoryItem\n        key={category.CodeMeaning !== '' ? category.CodeMeaning : `category-${categoryKey}`}\n        category={category}\n        onChange={onChange}\n        onStyleChange={onStyleChange}\n        defaultAnnotationStyles={defaultAnnotationStyles}\n        checkedAnnotationUids={checkedAnnotationUids}\n      />\n    )\n  })\n\n  return <Menu selectable={false}>{items}</Menu>\n}\nexport default AnnotationCategoryList\n","const HoveredRoiTooltip = ({\n  xPosition,\n  yPosition,\n  rois\n}: {\n  xPosition: number\n  yPosition: number\n  rois: Array<{ index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n}): JSX.Element => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: `${yPosition}px`,\n        left: `${xPosition}px`,\n        backgroundColor: 'rgba(230, 230, 230, 0.65)',\n        minWidth: '150px',\n        minHeight: '60px',\n        padding: '20px',\n        fontWeight: 'bold',\n        pointerEvents: 'none'\n      }}\n    >\n      {rois.map((roi, i) => {\n        const attributes = roi.attributes\n        return (\n          <div key={roi.roiUid}>\n            <span>ROI {roi.index}</span>\n            {attributes.map((attr) => {\n              return (\n                <div key={attr.name + roi.roiUid}>\n                  {attr.name}: <span style={{ fontWeight: 500 }}>{attr.value}</span>\n                </div>\n              )\n            })}\n          </div>\n\n        )\n      })}\n    </div>\n  )\n}\n\nexport default HoveredRoiTooltip\n","import * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { AnnotationCategoryAndType } from '../components/AnnotationCategoryList'\n\nexport const adaptRoiToAnnotation = (roi: dmv.roi.ROI): AnnotationCategoryAndType => {\n  const { uid, evaluations } = roi\n\n  const result = {\n    category: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    },\n    type: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    }\n  }\n\n  evaluations.forEach((\n    item: (\n      dcmjs.sr.valueTypes.TextContentItem |\n      dcmjs.sr.valueTypes.CodeContentItem\n    )\n  ) => {\n    const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n    if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n      const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n      const value = codeContentItem.ConceptCodeSequence[0]\n      // For consistency with Segment and Annotation Group\n      if (nameValue === '276214006') {\n        result.category = { ...value }\n      } else if (nameValue === '121071') {\n        result.type = { ...value }\n      }\n    }\n  })\n\n  return {\n    ...result,\n    uid\n  }\n}\n","import { roi, metadata } from 'dicom-microscopy-viewer'\nimport { sr, data } from 'dcmjs'\n\nimport { CustomError, errorTypes } from './CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { User } from '../auth'\n\ninterface AppInfo {\n  name: string\n  version: string\n  uid: string\n  organization?: string\n}\n\nconst generateReport = ({\n  rois,\n  metadata,\n  user,\n  app,\n  visibleRoiUIDs\n}: {\n  rois: roi.ROI[]\n  metadata: metadata.VLWholeSlideMicroscopyImage[]\n  user: User | undefined\n  app: AppInfo\n  visibleRoiUIDs: Set<string>\n}): { isReportModalVisible: boolean, generatedReport: metadata.Comprehensive3DSR } => {\n  // Metadata should be sorted such that the image with the highest\n  // resolution is the last item in the array.\n  const refImage = metadata[metadata.length - 1]\n  // We assume that there is only one specimen (tissue section) per\n  // ontainer (slide). Only the tissue section is tracked with a unique\n  // identifier, even if the section may be composed of different biological\n  // samples.\n  if ((refImage.SpecimenDescriptionSequence?.length ?? 0) > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'More than one specimen has been described for the slide'\n      )\n    )\n  }\n  const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n  console.debug('create Observation Context')\n  let observer\n\n  if (user !== undefined) {\n    observer = new sr.templates.PersonObserverIdentifyingAttributes({\n      name: user.name ?? 'ANONYMOUS',\n      loginName: user.email ?? ''\n    })\n  } else {\n    console.warn('no user information available')\n    observer = new sr.templates.PersonObserverIdentifyingAttributes({\n      name: 'ANONYMOUS'\n    })\n  }\n\n  const observationContext = new sr.templates.ObservationContext({\n    observerPersonContext: new sr.templates.ObserverContext({\n      observerType: new sr.coding.CodedConcept({\n        value: '121006',\n        schemeDesignator: 'DCM',\n        meaning: 'Person'\n      }),\n      observerIdentifyingAttributes: observer\n    }),\n    observerDeviceContext: new sr.templates.ObserverContext({\n      observerType: new sr.coding.CodedConcept({\n        value: '121007',\n        schemeDesignator: 'DCM',\n        meaning: 'Device'\n      }),\n      observerIdentifyingAttributes: new sr.templates.DeviceObserverIdentifyingAttributes({\n        uid: app.uid,\n        manufacturerName: 'MGH Computational Pathology',\n        modelName: app.name\n      })\n    }),\n    subjectContext: new sr.templates.SubjectContext({\n      subjectClass: new sr.coding.CodedConcept({\n        value: '121027',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen'\n      }),\n      subjectClassSpecificContext: new sr.templates.SubjectContextSpecimen({\n        uid: refSpecimen.SpecimenUID,\n        identifier: refSpecimen.SpecimenIdentifier,\n        containerIdentifier: refImage.ContainerIdentifier\n      })\n    })\n  })\n\n  console.debug('encode Imaging Measurements')\n  const imagingMeasurements: sr.valueTypes.ContainerContentItem[] = []\n  for (let i = 0; i < rois.length; i++) {\n    const roi = rois[i]\n    if (!visibleRoiUIDs.has(roi.uid)) {\n      continue\n    }\n\n    let findingType = roi.evaluations.find((item: sr.valueTypes.ContentItem) => {\n      return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n    })\n\n    if (findingType === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          `No finding type was specified for ROI \"${String(roi.uid)}\"`\n        )\n      )\n    }\n\n    findingType = findingType as sr.valueTypes.CodeContentItem\n\n    const trackingIdentifier = new sr.templates.TrackingIdentifier({\n      uid: roi.properties.trackingUID ?? roi.uid,\n      identifier: `ROI #${i + 1}`\n    })\n\n    const group = new sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n      trackingIdentifier,\n      referencedRegion: new sr.contentItems.ImageRegion3D({\n        graphicType: roi.scoord3d.graphicType,\n        graphicData: roi.scoord3d.graphicData,\n        frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n      }),\n      findingType: new sr.coding.CodedConcept({\n        value: findingType.ConceptCodeSequence[0].CodeValue,\n        schemeDesignator: findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n        meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n      }),\n      qualitativeEvaluations: roi.evaluations.filter((item: sr.valueTypes.ContentItem) => {\n        return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n      }),\n      measurements: roi.measurements\n    })\n\n    const measurements = group as sr.valueTypes.ContainerContentItem[]\n    measurements[0].ContentTemplateSequence = [\n      {\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }\n    ]\n    imagingMeasurements.push(...measurements)\n  }\n\n  console.debug('create Measurement Report document content')\n  const measurementReport = new sr.templates.MeasurementReport({\n    languageOfContentItemAndDescendants: new sr.templates.LanguageOfContentItemAndDescendants(\n      {}\n    ),\n    observationContext,\n    procedureReported: new sr.coding.CodedConcept({\n      value: '112703',\n      schemeDesignator: 'DCM',\n      meaning: 'Whole Slide Imaging'\n    }),\n    imagingMeasurements\n  })\n\n  console.info('create Comprehensive 3D SR document')\n  const dataset = new sr.documents.Comprehensive3DSR({\n    content: measurementReport[0],\n    evidence: [refImage],\n    seriesInstanceUID: data.DicomMetaDictionary.uid(),\n    seriesNumber: 1,\n    seriesDescription: 'Annotation',\n    sopInstanceUID: data.DicomMetaDictionary.uid(),\n    instanceNumber: 1,\n    manufacturer: 'MGH Computational Pathology',\n    previousVersions: undefined // TODO\n  })\n\n  return {\n    isReportModalVisible: true,\n    generatedReport: dataset as metadata.Comprehensive3DSR\n  }\n}\n\nexport default generateReport\n","import React from 'react'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  Descriptions,\n  Divider,\n  InputNumber,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space,\n  Tooltip\n} from 'antd'\nimport { UndoOutlined, CheckOutlined, StopOutlined } from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Equipment from './Equipment'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { findContentItemsByName } from '../utils/sr'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport AnnotationCategoryList, { AnnotationCategoryAndType } from './AnnotationCategoryList'\nimport HoveredRoiTooltip from './HoveredRoiTooltip'\nimport { adaptRoiToAnnotation } from '../services/RoiToAnnotationAdapter'\nimport generateReport from '../utils/generateReport'\n\nconst DEFAULT_ROI_STROKE_COLOR: number[] = [255, 234, 0] // [0, 126, 163]\nconst DEFAULT_ROI_FILL_COLOR: number[] = [255, 234, 0, 0.2] // [0, 126, 163, 0.2]\nconst DEFAULT_ROI_STROKE_WIDTH: number = 2\nconst DEFAULT_ROI_RADIUS: number = 5\n\nconst DEFAULT_ANNOTATION_OPACITY = 0.4\nconst DEFAULT_ANNOTATION_STROKE_COLOR = [0, 0, 0]\nconst DEFAULT_ANNOTATION_COLOR_PALETTE = [\n  [255, 0, 0],\n  [0, 255, 0],\n  [0, 0, 255],\n  [255, 255, 0],\n  [0, 255, 255],\n  [0, 0, 0]\n]\n\ninterface StyleOptions {\n  opacity: number\n  color: number[]\n  contourOnly: boolean\n}\n\nconst _buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    console.warn(`no finding found for ROI ${roi.uid}`)\n    return\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: DEFAULT_ROI_STROKE_COLOR,\n    width: DEFAULT_ROI_STROKE_WIDTH\n  }\n  if (style.stroke != null) {\n    if (style.stroke.color != null) {\n      stroke.color = style.stroke.color\n    }\n    if (style.stroke.width != null) {\n      stroke.width = style.stroke.width\n    }\n  }\n  const fill = {\n    color: DEFAULT_ROI_FILL_COLOR\n  }\n  if (style.fill != null) {\n    if (style.fill.color != null) {\n      fill.color = style.fill.color\n    }\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius != null\n          ? style.radius\n          : Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n\nconst _constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      preload: preload,\n      errorInterceptor: (error: CustomError) => {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DMV, error\n        )\n      }\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical',\n        errorInterceptor: (error: CustomError) => {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.DMV,\n            error\n          )\n        }\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'Failed to instantiate viewer'\n      )\n    )\n    throw error\n  }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface Measurement {\n  name: dcmjs.sr.coding.CodedConcept\n  value?: number\n  unit: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n  derivedDataset?: dmv.metadata.Dataset // Add this line\n}\n\ninterface SlideViewerState {\n  visibleRoiUIDs: Set<string>\n  visibleSegmentUIDs: Set<string>\n  visibleMappingUIDs: Set<string>\n  visibleAnnotationGroupUIDs: Set<string>\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  selectedRoi?: dmv.roi.ROI\n  selectedRoiUIDs: Set<string>\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isSelectedRoiModalVisible: boolean\n  isHoveredRoiTooltipVisible: boolean\n  hoveredRoiAttributes: Array<{index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n  hoveredRoiTooltipX: number\n  hoveredRoiTooltipY: number\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  isGoToModalVisible: boolean\n  isSelectedMagnificationValid: boolean\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  selectedXCoordinate?: number\n  validXCoordinateRange: number[]\n  selectedYCoordinate?: number\n  validYCoordinateRange: number[]\n  selectedMagnification?: number\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n  loadingFrames: Set<string>\n  isICCProfilesEnabled: boolean\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private hoveredRois = [] as dmv.roi.ROI[]\n\n  private lastPixel = [0, 0] as [number, number]\n\n  private readonly keysDown = new Set<string>()\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private defaultAnnotationStyles: {\n    [annotationUID: string]: StyleOptions\n  } = {}\n\n  private readonly selectionStrokeColor: number[] = [0, 153, 255]\n  private readonly selectionFillColor: number[] = [255, 255, 255]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionStrokeColor, 1], width: 3 },\n    fill: { color: [...this.selectionFillColor, 0.5] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionStrokeColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = _formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n    this.onWindowResize = this.onWindowResize.bind(this)\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleRoiSelectionCancellation = this.handleRoiSelectionCancellation.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleRoiStyleChange = this.handleRoiStyleChange.bind(this)\n    this.handleGoTo = this.handleGoTo.bind(this)\n    this.handleXCoordinateSelection = this.handleXCoordinateSelection.bind(this)\n    this.handleYCoordinateSelection = this.handleYCoordinateSelection.bind(this)\n    this.handleMagnificationSelection = this.handleMagnificationSelection.bind(this)\n    this.handleSlidePositionSelection = this.handleSlidePositionSelection.bind(this)\n    this.handleSlidePositionSelectionCancellation = this.handleSlidePositionSelectionCancellation.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n    this.handleICCProfilesToggle = this.handleICCProfilesToggle.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n\n    const { volumeViewer, labelViewer } = _constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isHoveredRoiTooltipVisible: false,\n      hoveredRoiTooltipX: 0,\n      hoveredRoiTooltipY: 0,\n      hoveredRoiAttributes: [],\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set(),\n      isICCProfilesEnabled: true\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current != null) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        if (this.labelViewportRef.current != null) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance, index) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                this.props.selectedPresentationStateUID == null\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Presentation State could not be loaded'\n            )\n          )\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Presentation State could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID != null\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key == null) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  loadDerivedDataset = (derivedDataset: dmv.metadata.Dataset): void => {\n    console.debug('Loading derived dataset')\n    const Comprehensive3DSR = '1.2.840.10008.5.1.4.1.1.88.34'\n    const MicroscopyBulkSimpleAnnotation = '1.2.840.10008.5.1.4.1.1.88.24'\n    const Segmentation = '1.2.840.10008.5.1.4.1.1.66.4'\n    const ParametricMap = '1.2.840.10008.5.1.4.1.1.88.22'\n    const OpticalPath = '1.2.840.10008.5.1.4.1.1.88.21'\n    if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Comprehensive3DSR) {\n      const allRois = this.volumeViewer.getAllROIs()\n      allRois.forEach((roi) => {\n        this.handleAnnotationVisibilityChange({ roiUID: roi.uid, isVisible: true })\n      })\n      console.debug('Loading Comprehensive 3D SR')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === MicroscopyBulkSimpleAnnotation) {\n      const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      allAnnotationGroups.forEach((annotationGroup) => {\n        this.handleAnnotationGroupVisibilityChange({ annotationGroupUID: annotationGroup.uid, isVisible: true })\n      })\n      console.debug('Loading Microscopy Bulk Simple Annotation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === Segmentation) {\n      const allSegments = this.volumeViewer.getAllSegments()\n      allSegments.forEach((segment) => {\n        this.handleSegmentVisibilityChange({ segmentUID: segment.uid, isVisible: true })\n      })\n      console.debug('Loading Segmentation')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === ParametricMap) {\n      const allParameterMappings = this.volumeViewer.getAllParameterMappings()\n      allParameterMappings.forEach((parameterMapping) => {\n        this.handleMappingVisibilityChange({ mappingUID: parameterMapping.uid, isVisible: true })\n      })\n      console.debug('Loading Parametric Map')\n    } else if ((derivedDataset as { SOPClassUID: string }).SOPClassUID === OpticalPath) {\n      const allOpticalPaths = this.volumeViewer.getAllOpticalPaths()\n      allOpticalPaths.forEach((opticalPath) => {\n        this.handleOpticalPathVisibilityChange({ opticalPathIdentifier: opticalPath.identifier, isVisible: true })\n      })\n      console.debug('Loading Optical Path')\n    }\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  async addAnnotations (): Promise<void> {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Comprehensive 3D SR instances')\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.searchForInstances({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SR'\n        }\n      }).then((matchedInstances): void => {\n        if (matchedInstances == null) {\n          matchedInstances = []\n        }\n        matchedInstances.forEach(i => {\n          const { dataset } = dmv.metadata.formatMetadata(i)\n          const instance = dataset as dmv.metadata.Instance\n          if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n            console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n            client.retrieveInstance({\n              studyInstanceUID: this.props.studyInstanceUID,\n              seriesInstanceUID: instance.SeriesInstanceUID,\n              sopInstanceUID: instance.SOPInstanceUID\n            }).then((retrievedInstance): void => {\n              const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n              const { dataset } = dmv.metadata.formatMetadata(data.dict)\n              const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n              /*\n              * Perform a couple of checks to ensure the document content of the\n              * report fullfils the requirements of the application.\n              */\n              if (!_implementsTID1500(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it is not structured according to template ' +\n                  'TID 1500 \"MeasurementReport\"'\n                )\n                return\n              }\n              if (!_describesSpecimenSubject(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not describe a specimen subject'\n                )\n                return\n              }\n              if (!_containsROIAnnotations(report)) {\n                console.debug(\n                  `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                  'because it does not contain any suitable ROI annotations'\n                )\n                return\n              }\n\n              const content = new MeasurementReport(report)\n              content.ROIs.forEach(roi => {\n                console.info(`add ROI \"${roi.uid}\"`)\n                const scoord3d = roi.scoord3d\n                const image = this.props.slide.volumeImages[0]\n                if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                  /*\n                  * ROIs may get assigned new UIDs upon re-rendering of the\n                  * page and we need to ensure that we don't add them twice.\n                  * The same ROI may be stored in multiple SR documents and\n                  * we don't want them to show up twice.\n                  * TODO: We should probably either \"merge\" measurements and\n                  * quantitative evaluations or pick the ROI from the \"best\"\n                  * available report (COMPLETE and VERIFIED).\n                  */\n                  const doesROIExist = this.volumeViewer.getAllROIs().some(\n                    (otherROI: dmv.roi.ROI): boolean => {\n                      return _areROIsEqual(otherROI, roi)\n                    }\n                  )\n                  if (!doesROIExist) {\n                    try {\n                      // Add ROI without style such that it won't be visible.\n                      this.volumeViewer.addROI(roi, {})\n                      const roiAsAnnotation = adaptRoiToAnnotation(roi)\n                      this.formatAnnotation(roiAsAnnotation)\n                    } catch {\n                      console.error(`could not add ROI \"${roi.uid}\"`)\n                    }\n                  } else {\n                    console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(\n                    `skip ROI \"${roi.uid}\" ` +\n                    `of SR document \"${report.SOPInstanceUID}\"` +\n                    'because it is defined in another frame of reference'\n                  )\n                }\n              })\n\n              resolve()\n            }).catch((error) => {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Annotations could not be loaded'\n                )\n              )\n              console.error(\n                'failed to load ROIs ' +\n                `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n                `of series \"${instance.SeriesInstanceUID}\" ` +\n                `of study \"${this.props.studyInstanceUID}\": `,\n                error\n              )\n            })\n            /*\n            * React is not aware of the fact that ROIs have been added via the\n            * viewer (the viewport is a ref object) and won't show the\n            * annotations in the user interface unless an update is forced.\n            */\n            this.forceUpdate()\n          }\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Annotations could not be loaded'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Microscopy Bulk Simple Annotations instances')\n      const client = this.props.clients[\n        StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n      ]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'ANN'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[] = retrievedMetadata.map(metadata => {\n              return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n                metadata\n              })\n            })\n            // annotations = annotations.filter(ann => {\n            //   const refImage = this.props.slide.volumeImages[0]\n            //   return (\n            //     ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n            //     ann.ContainerIdentifier === refImage.ContainerIdentifier\n            //   )\n            // })\n            annotations.forEach(ann => {\n              try {\n                this.volumeViewer.addAnnotationGroups(ann)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Microscopy Bulk Simple Annotations cannot be displayed.'\n                  )\n                )\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                console.error('failed to add annotation groups:', error)\n              }\n              ann.AnnotationGroupSequence.forEach(item => {\n                const annotationGroupUID = item.AnnotationGroupUID\n                const finding = item.AnnotationPropertyTypeCodeSequence[0]\n                const key = _buildKey(finding)\n                const style = this.roiStyles[key]\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n                if (style != null && style.fill != null) {\n                  this.volumeViewer.setAnnotationGroupStyle(\n                    annotationGroupUID,\n                    { color: style.fill.color }\n                  )\n                }\n              })\n            })\n            /*\n            * React is not aware of the fact that annotation groups have been\n            * added via the viewer (the underlying HTML viewport element is a\n            * ref object) and won't show the annotation groups in the user\n            * interface unless an update is forced.\n            */\n            this.forceUpdate()\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n                'instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Microscopy Bulk Simple Annotations instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Segmentation instances')\n      const client = this.props.clients[StorageClasses.SEGMENTATION]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'SEG'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach((s, i) => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const segmentations: dmv.metadata.Segmentation[] = []\n            retrievedMetadata.forEach(metadata => {\n              const seg = new dmv.metadata.Segmentation({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                seg.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                segmentations.push(seg)\n              }\n            })\n            if (segmentations.length > 0) {\n              try {\n                this.volumeViewer.addSegments(segmentations)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Segmentations cannot be displayed'\n                  )\n                )\n                console.error('failed to add segments: ', error)\n              }\n              /*\n              * React is not aware of the fact that segments have been added via\n              * the viewer (the underlying HTML viewport element is a ref object)\n              * and won't show the segments in the user interface unless an update\n              * is forced.\n              */\n              this.forceUpdate()\n            }\n\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Segmentation instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Segmentation instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = async (): Promise<void> => {\n    return await new Promise<void>((resolve, reject) => {\n      console.info('search for Parametric Map instances')\n      const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n      client.searchForSeries({\n        studyInstanceUID: this.props.studyInstanceUID,\n        queryParams: {\n          Modality: 'OT'\n        }\n      }).then((matchedSeries): void => {\n        if (matchedSeries == null) {\n          matchedSeries = []\n        }\n        matchedSeries.forEach(s => {\n          const { dataset } = dmv.metadata.formatMetadata(s)\n          const series = dataset as dmv.metadata.Series\n          client.retrieveSeriesMetadata({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: series.SeriesInstanceUID\n          }).then((retrievedMetadata): void => {\n            const parametricMaps: dmv.metadata.ParametricMap[] = []\n            retrievedMetadata.forEach(metadata => {\n              const pm = new dmv.metadata.ParametricMap({ metadata })\n              const refImage = this.props.slide.volumeImages[0]\n              if (\n                pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n                pm.ContainerIdentifier === refImage.ContainerIdentifier\n              ) {\n                parametricMaps.push(pm)\n              } else {\n                console.warn(\n                  `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n                )\n              }\n            })\n            if (parametricMaps.length > 0) {\n              try {\n                this.volumeViewer.addParameterMappings(parametricMaps)\n              } catch (error: any) {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                NotificationMiddleware.onError(\n                  NotificationMiddlewareContext.SLIM,\n                  new CustomError(\n                    errorTypes.VISUALIZATION,\n                    'Parametric Map cannot be displayed'\n                  )\n                )\n                console.error('failed to add mappings: ', error)\n              }\n              /*\n               * React is not aware of the fact that mappings have been added via\n               * the viewer (the underlying HTML viewport element is a ref object)\n               * and won't show the mappings in the user interface unless an update\n               * is forced.\n               */\n              this.forceUpdate()\n            }\n            resolve()\n          }).catch((error) => {\n            console.error(error)\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Retrieval of metadata of Parametric Map instances failed.'\n              )\n            )\n          })\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Search for Parametric Map instances failed.'\n          )\n        )\n        reject(error instanceof Error ? error : new Error(String(error)))\n      })\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    // Handle promises properly with catch blocks\n    void this.addAnnotations()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotations:', error)\n      })\n\n    void this.addAnnotationGroups()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add annotation groups:', error)\n      })\n\n    void this.addSegmentations()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add segmentations:', error)\n      })\n\n    void this.addParametricMaps()\n      .then(() => {\n        if (this.props.derivedDataset != null) {\n          this.loadDerivedDataset(this.props.derivedDataset)\n        }\n      })\n      .catch(error => {\n        console.error('Failed to add parametric maps:', error)\n      })\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer != null) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiDoubleClicked = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi != null) {\n      this.setState({\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  setHoveredRoiAttributes = (hoveredRois: dmv.roi.ROI[]): void => {\n    const rois = this.volumeViewer.getAllROIs()\n    if (rois.length === 0) {\n      this.setState({ hoveredRoiAttributes: [] })\n      return\n    }\n\n    const result = hoveredRois.map((roi) => {\n      const attributes: Array<{ name: string, value: string }> = []\n      const evaluations = roi.evaluations\n      evaluations.forEach((\n        item: (\n          dcmjs.sr.valueTypes.TextContentItem |\n          dcmjs.sr.valueTypes.CodeContentItem\n        )\n      ) => {\n        const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n        const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n        const name = `${nameMeaning}`\n        if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n          const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n          // For consistency with Segment and Annotation Group\n          if (nameValue === '276214006') {\n            attributes.push({\n              name: 'Property category',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '121071') {\n            attributes.push({\n              name: 'Property type',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '111001') {\n            attributes.push({\n              name: 'Algorithm Name',\n              value: `${valueMeaning}`\n            })\n          } else {\n            attributes.push({\n              name: name,\n              value: `${valueMeaning}`\n            })\n          }\n        } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n          const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n          attributes.push({\n            name: name,\n            value: textContentItem.TextValue\n          })\n        }\n      })\n\n      const index = (rois.findIndex((r) => r.uid === roi.uid) ?? 0) + 1\n      return { index, roiUid: roi.uid, attributes }\n    }, [] as Array<dcmjs.sr.valueTypes.CodeContentItem | dcmjs.sr.valueTypes.TextContentItem>)\n\n    this.setState({ hoveredRoiAttributes: result })\n  }\n\n  clearHoveredRois = (): void => {\n    this.hoveredRois = [] as any\n  }\n\n  getUniqueHoveredRois = (newRoi: dmv.roi.ROI | null): dmv.roi.ROI[] => {\n    if (newRoi == null) {\n      return []\n    }\n    const allRois = [...this.hoveredRois, newRoi]\n    const uniqueIds = Array.from(new Set(allRois.map(roi => roi.uid)))\n    return uniqueIds.map(id => allRois.find(roi => roi.uid === id))\n      .filter((roi): roi is dmv.roi.ROI => roi !== undefined)\n  }\n\n  isSamePixelAsLast = (event: any): boolean => {\n    return event.clientX === this.lastPixel[0] && event.clientY === this.lastPixel[1]\n  }\n\n  onPointerMove = (event: CustomEventInit): void => {\n    const { feature: hoveredRoi, event: evt } = event.detail.payload\n    const originalEvent = evt.originalEvent\n\n    if (!this.isSamePixelAsLast(originalEvent)) {\n      this.lastPixel = [originalEvent.clientX, originalEvent.clientY]\n      this.clearHoveredRois()\n    }\n\n    this.hoveredRois = this.getUniqueHoveredRois(hoveredRoi)\n\n    if (this.hoveredRois.length > 0) {\n      this.setHoveredRoiAttributes(this.hoveredRois)\n      this.setState({\n        isHoveredRoiTooltipVisible: true,\n        hoveredRoiTooltipX: originalEvent.clientX,\n        hoveredRoiTooltipY: originalEvent.clientY\n      })\n    } else {\n      this.setState({\n        isHoveredRoiTooltipVisible: false\n      })\n    }\n  }\n\n  getUpdatedSelectedRois = (newSelectedRoiUid?: string): { selectedRoiUIDs: Set<string>, selectedRoi?: dmv.roi.ROI} => {\n    const selectedRoiUid = newSelectedRoiUid\n    const emptySelection = {\n      selectedRoiUIDs: new Set<string>(),\n      selectedRoi: undefined\n    }\n\n    if (selectedRoiUid === undefined) {\n      return emptySelection\n    }\n\n    const selectedRoi = this.volumeViewer.getROI(selectedRoiUid)\n    if (selectedRoi === undefined) {\n      return emptySelection\n    }\n\n    console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n\n    if (!this.keysDown.has('Shift')) {\n      return {\n        selectedRoiUIDs: new Set([selectedRoi.uid]),\n        selectedRoi\n      }\n    }\n\n    const oldSelectedRois = Array.from(this.state.selectedRoiUIDs)\n    return {\n      selectedRoiUIDs: new Set([...oldSelectedRois, selectedRoi.uid]),\n      selectedRoi\n    }\n  }\n\n  resetUnselectedRoiStyles = (selectionState: { selectedRoiUIDs: Set<string> }): void => {\n    this.volumeViewer.getAllROIs().forEach(roi => {\n      const uid = roi.uid\n\n      if (selectionState.selectedRoiUIDs.has(uid) || !this.state.visibleRoiUIDs.has(uid)) {\n        return\n      }\n\n      const key = _getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(uid, style)\n    })\n  }\n\n  onMapClicked = (event: CustomEventInit): void => {\n    const roisClicked = (event.detail?.payload?.rois ?? []) as dmv.roi.ROI[]\n\n    if (roisClicked.length !== 0) {\n      return\n    }\n\n    const updatedSelectedRois = this.getUpdatedSelectedRois()\n    this.setState(updatedSelectedRois)\n\n    // @ts-expect-error\n    this.volumeViewer.clearSelections()\n\n    this.resetUnselectedRoiStyles(updatedSelectedRois)\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoiUid = event.detail?.payload?.uid as string\n    const updatedSelectedRois = this.getUpdatedSelectedRois(selectedRoiUid)\n    this.setState(updatedSelectedRois)\n\n    this.resetUnselectedRoiStyles(updatedSelectedRois)\n  }\n\n  handleAnnotationSelection (uid: string): void {\n    // @ts-expect-error\n    this.volumeViewer.clearSelections()\n\n    const updatedSelectedRois = this.getUpdatedSelectedRois(uid)\n    this.setState(updatedSelectedRois)\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (updatedSelectedRois.selectedRoiUIDs.has(roi.uid)) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  handleRoiSelectionCancellation (): void {\n    this.setState({\n      isSelectedRoiModalVisible: false\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load frame')\n  }\n\n  onLoadingError = (event: CustomEventInit): void => {\n    const message = (event.detail?.payload?.message ?? 'Failed to load data') as string\n    console.error(message)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        message\n      ) as any\n    )\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray != null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID == null) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_viewport_clicked',\n      this.onMapClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyDown\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyDown = (event: KeyboardEvent): void => {\n    this.keysDown.add(event.key)\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    this.keysDown.delete(event.key)\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount (): void {\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_viewport_clicked',\n      this.onMapClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_error',\n      this.onLoadingError\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_error',\n      this.onFrameLoadingError\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    document.body.addEventListener(\n      'keydown',\n      this.onKeyDown\n    )\n    window.addEventListener('beforeunload', this.componentCleanup)\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount (): void {\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection (value: any): void {\n    if (value != null) {\n      const x = Number(value)\n      const start = this.state.validXCoordinateRange[0]\n      const end = this.state.validXCoordinateRange[1]\n      if (x >= start && x <= end) {\n        this.setState({\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedXCoordinate: undefined,\n      isSelectedXCoordinateValid: false\n    })\n  }\n\n  handleYCoordinateSelection (value: any): void {\n    if (value != null) {\n      const y = Number(value)\n      const start = this.state.validYCoordinateRange[0]\n      const end = this.state.validYCoordinateRange[1]\n      if (y >= start && y <= end) {\n        this.setState({\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedYCoordinate: undefined,\n      isSelectedYCoordinateValid: false\n    })\n  }\n\n  handleMagnificationSelection (value: any): void {\n    if (value != null) {\n      if (value > 0 && value <= 40) {\n        this.setState({\n          selectedMagnification: Number(value),\n          isSelectedMagnificationValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedMagnification: undefined,\n      isSelectedMagnificationValid: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection (): void {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n      this.state.selectedXCoordinate != null &&\n      this.state.selectedYCoordinate != null &&\n      this.state.selectedMagnification != null\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation (): void {\n    console.log('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      isSelectedMagnificationValid: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Could not complete annotation configuration'\n        )\n      )\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    this.setState((prevState) => {\n      const report = generateReport({\n        rois,\n        metadata,\n        user: this.props.user,\n        app: this.props.app,\n        visibleRoiUIDs: prevState.visibleRoiUIDs\n      })\n      return {\n        isReportModalVisible: report.isReportModalVisible,\n        generatedReport: report.generatedReport\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Annotations could not be saved'\n          )\n        )\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(roi.uid, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Failed to show annotation group.'\n          )\n        )\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void {\n    console.log(`change style of annotation group ${uid}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        uid,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of annotation group.'\n        )\n      )\n      throw error\n    }\n  }\n\n  generateRoiStyle (\n    styleOptions: StyleOptions): dmv.viewer.ROIStyleOptions {\n    const opacity = styleOptions.opacity ?? DEFAULT_ANNOTATION_OPACITY\n    const strokeColor = styleOptions.color ?? DEFAULT_ANNOTATION_STROKE_COLOR\n    const fillColor = styleOptions.contourOnly ? [0, 0, 0, 0] : strokeColor.map((c) => Math.min(c + 25, 255))\n    const style = _formatRoiStyle({\n      fill: { color: [...fillColor, opacity] },\n      stroke: { color: [...strokeColor, opacity] },\n      radius: this.defaultRoiStyle.stroke?.width\n    })\n    return style\n  }\n\n  handleRoiStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: StyleOptions\n  }): void {\n    console.log(`change style of ROI ${uid}`)\n    try {\n      this.defaultAnnotationStyles[uid] = styleOptions\n      const style = this.generateRoiStyle(styleOptions)\n\n      const roi = this.volumeViewer.getROI(uid)\n      const key = _getRoiKey(roi) as string\n      this.roiStyles[key] = style\n      this.volumeViewer.setROIStyle(uid, style)\n      this.state.visibleRoiUIDs.add(uid)\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of ROI.'\n        )\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState (): void {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState != null) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Presentation State could not be found'\n          )\n        )\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (!this.state.areRoisHidden) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  handleAnnotationGroupClick = (annotationGroupUID: string): void => {\n    this.volumeViewer.zoomToROI(annotationGroupUID)\n  }\n\n  /**\n   * Handler that will toggle the ICC profile color management, i.e., either\n   * enable or disable it, depending on its current state.\n   */\n  handleICCProfilesToggle = (event: CheckboxChangeEvent): void => {\n    const checked = event.target.checked\n    this.setState({ isICCProfilesEnabled: checked })\n    this.volumeViewer.toggleICCProfiles()\n  }\n\n  formatAnnotation = (annotation: AnnotationCategoryAndType | dmv.roi.ROI): void => {\n    const roi = this.volumeViewer.getROI(annotation.uid)\n    const key = _getRoiKey(roi) as string\n    const color = this.roiStyles[key] !== undefined\n      ? this.roiStyles[key].stroke?.color.slice(0, 3)\n      : DEFAULT_ANNOTATION_COLOR_PALETTE[\n        Object.keys(this.roiStyles).length % DEFAULT_ANNOTATION_COLOR_PALETTE.length\n      ]\n    this.defaultAnnotationStyles[annotation.uid] = {\n      color: color as number[],\n      opacity: DEFAULT_ANNOTATION_OPACITY,\n      contourOnly: false\n    }\n\n    this.roiStyles[key] = this.generateRoiStyle(\n      this.defaultAnnotationStyles[annotation.uid]\n    )\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const filteredAnnotationGroups = allAnnotationGroups?.filter((annotationGroup) =>\n      annotationGroup.referencedSeriesInstanceUID === this.props.seriesInstanceUID\n    )\n    annotationGroups.push(...filteredAnnotationGroups)\n\n    const annotations = rois.map(roi => adaptRoiToAnnotation(roi))\n\n    const openSubMenuItems = [\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\n    ]\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map((finding, index) => {\n      return (\n        <Select.Option\n          key={(finding.CodeValue !== undefined && finding.CodeValue !== '') ? finding.CodeValue : `finding-${index}`}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n          placeholder='Select finding'\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach((evaluation, index) => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={(code.CodeValue !== undefined && code.CodeValue !== '') ? code.CodeValue : `evaluation-${index}`}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n            placeholder='Select geometry type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const equipmentMenu = (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach((instance, index) => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={(instance.SOPInstanceUID !== undefined && instance.SOPInstanceUID !== '') ? instance.SOPInstanceUID : `presentation-state-${index}`}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription !== undefined && instance.ContentDescription !== '' ? instance.ContentDescription : 'Untitled'}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={undefined}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          <></>\n        </Select.Option>\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={<UndoOutlined />}\n                type='primary'\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametric-maps')\n    }\n\n    let annotationGroupMenu\n\n    annotations?.forEach?.(this.formatAnnotation.bind(this))\n\n    if (annotationGroups.length > 0) {\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const defaultAnnotationGroupStyles: {\n        [annotationUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            onAnnotationGroupClick={this.handleAnnotationGroupClick}\n            // when adding annotationGroups to annotationCategory list,\n            // make so that this is uses this.defaultAnnotationStyles later instead of defaultAnnotationGroupStyles\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    const annotationTools = [\n      <Button\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Button\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Button\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Button\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Button\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Button\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Button\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    let cursor = 'default'\n    if (this.state.isLoading) {\n      cursor = 'progress'\n    }\n\n    let selectedRoiInformation\n    if (this.state.selectedRoi != null) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence != null) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit != null) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      selectedRoiInformation = (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n\n    const iccProfilesMenu = this.volumeViewer.getICCProfiles().length > 0 && (\n      <div style={{ margin: '0.9rem' }}>\n        <Checkbox\n          checked={this.state.isICCProfilesEnabled}\n          onChange={this.handleICCProfilesToggle}\n        >\n          ICC Profiles\n        </Checkbox>\n      </div>\n    )\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden',\n              cursor: cursor\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            open={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            okButtonProps={{ disabled: !(this.state.selectedFinding !== undefined && this.state.selectedGeometryType !== undefined) }}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {annotationConfigurations}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isSelectedRoiModalVisible}\n            title='Selected ROI'\n            onCancel={this.handleRoiSelectionCancellation}\n            maskClosable\n            footer={null}\n          >\n            <Space align='start' direction='vertical'>\n              {selectedRoiInformation}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isGoToModalVisible}\n            title='Go to slide position'\n            onOk={this.handleSlidePositionSelection}\n            onCancel={this.handleSlidePositionSelectionCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validXCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validXCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='X Coordinate [mm]'\n                onChange={this.handleXCoordinateSelection}\n                onPressEnter={this.handleXCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedXCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validYCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validYCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='Y Coordinate [mm]'\n                onChange={this.handleYCoordinateSelection}\n                onPressEnter={this.handleYCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedYCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder='[0 - 40]'\n                prefix='Magnification'\n                onChange={this.handleMagnificationSelection}\n                onPressEnter={this.handleMagnificationSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedMagnificationValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n            onOpenChange={() => {\n              // Give menu item time to render before updating viewer size\n              setTimeout(() => {\n                if (this.labelViewer != null) {\n                  this.labelViewer.resize()\n                }\n              }, 100)\n            }}\n          >\n            {this.labelViewportRef.current != null && (\n              <Menu.SubMenu key='label' title='Slide label'>\n                <Menu.Item style={{ height: '100%' }} key='image'>\n                  <div\n                    style={{ height: '220px' }}\n                    ref={this.labelViewportRef}\n                  />\n                </Menu.Item>\n              </Menu.SubMenu>\n            )}\n            {specimenMenu}\n            {iccProfilesMenu}\n            {equipmentMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {annotations.length === 0\n              ? (\n                <></>\n                )\n              : (\n                <Menu.SubMenu\n                  key='annotation-categories'\n                  title='Annotation Categories'\n                >\n                  <AnnotationCategoryList\n                    annotations={annotations}\n                    onChange={this.handleAnnotationVisibilityChange}\n                    checkedAnnotationUids={this.state.visibleRoiUIDs}\n                    onStyleChange={this.handleRoiStyleChange}\n                    defaultAnnotationStyles={this.defaultAnnotationStyles}\n                  />\n                </Menu.SubMenu>\n                )}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n        {this.state.isHoveredRoiTooltipVisible &&\n        this.state.hoveredRoiAttributes.length > 0\n          ? (\n            <HoveredRoiTooltip\n              xPosition={this.state.hoveredRoiTooltipX}\n              yPosition={this.state.hoveredRoiTooltipY}\n              rois={this.state.hoveredRoiAttributes}\n            />\n            )\n          : (\n            <></>\n            )}\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID != null) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null | undefined\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Value of option \"images\" have been non-zero length.'\n        )\n      )\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID != null) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (hasImageFlavor(image, ImageFlavors.VOLUME)) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID !== null && image.PyramidUID !== undefined) {\n          for (const identifier of Object.keys(opticalPathIdentifiers)) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.THUMBNAIL)) {\n        /* Only include THUMBNAIL if no equivalent VOLUME image exists */\n        const hasEquivalentVolume = options.images.some(img =>\n          hasImageFlavor(img, ImageFlavors.VOLUME) &&\n          img.FrameOfReferenceUID === image.FrameOfReferenceUID &&\n          img.OpticalPathSequence.every(opt => opt.OpticalPathIdentifier === image.OpticalPathSequence[0].OpticalPathIdentifier)\n        )\n        if (!hasEquivalentVolume) {\n          console.debug('Does not have equivalent volume for thumbnail, using thumbnail.', image.FrameOfReferenceUID)\n          frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n          if (image.PyramidUID !== null && image.PyramidUID !== undefined) {\n            for (const identifier of Object.keys(opticalPathIdentifiers)) {\n              pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n            }\n          }\n          volumeImages.push(image)\n        }\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n\n    if (volumeImages.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'At least one VOLUME image must be provided for a slide.'\n        )\n      )\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n            'image that has not been resampled per optical path'\n        )\n      }\n    }\n\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All images of a slide must have the same Container Identifier.'\n        )\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must have ' +\n          'the same Frame of Reference UID.'\n        )\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `All VOLUME images for optical path \"${identifier}\"` +\n              'must be part of the same multi-resolution pyramid.'\n            )\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must be part of the same  ' +\n          'acquisition and have the same Acquisition UID.'\n        )\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) =>\n        hasImageFlavor(image, ImageFlavors.VOLUME) ||\n        (hasImageFlavor(image, ImageFlavors.THUMBNAIL) &&\n          !series.some(img =>\n            hasImageFlavor(img, ImageFlavors.VOLUME) &&\n            img.FrameOfReferenceUID === image.FrameOfReferenceUID &&\n            img.OpticalPathSequence.every(opt => opt.OpticalPathIdentifier === image.OpticalPathSequence[0].OpticalPathIdentifier)\n          ))\n      )\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import * as dmv from 'dicom-microscopy-viewer'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './NotificationMiddleware'\nimport { createSlides, Slide } from '../data/slides'\n\ninterface FetchImageMetadataParams {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  onSuccess: (slides: Slide[]) => void\n  onError: (error: Error) => void\n}\n\nexport const fetchImageMetadata = async ({\n  clients,\n  studyInstanceUID,\n  onSuccess,\n  onError\n}: FetchImageMetadataParams): Promise<void> => {\n  try {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n\n    const client = clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(\n      matchedSeries.map(async (s) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const loadingSeries = dataset as dmv.metadata.Series\n        console.info(\n          `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n        )\n        const retrievedMetadata = await client.retrieveSeriesMetadata({\n          studyInstanceUID: studyInstanceUID,\n          seriesInstanceUID: loadingSeries.SeriesInstanceUID\n        })\n\n        const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n        retrievedMetadata.forEach((item) => {\n          if (\n            item['00080016']?.Value?.[0] ===\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        })\n\n        if (seriesImages.length > 0) {\n          images.push(seriesImages)\n        }\n      })\n    )\n    const newSlides = createSlides(images)\n    onSuccess(newSlides)\n  } catch (err) {\n    console.error(err)\n    const customError = new CustomError(\n      errorTypes.ENCODINGANDDECODING,\n      'Image metadata could not be retrieved or decoded.'\n    )\n    onError(customError)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      customError\n    )\n  }\n}\n","import { useState, useEffect } from 'react'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\nimport { fetchImageMetadata } from '../services/fetchImageMetadata'\n\ninterface UseSlidesProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\ninterface UseSlidesReturn {\n  slides: Slide[]\n  isLoading: boolean\n  error: Error | null\n}\n\nconst slidesCache = new Map<string, Slide[]>()\nconst pendingRequests = new Map<string, Promise<Slide[]>>()\n\n/**\n * Hook to fetch and manage whole slide microscopy images for a given study.\n * Values are cached so they can be reused if props are not provided.\n *\n * @param props - Hook configuration props\n * @param props.clients - Map of DICOM web clients keyed by storage class\n */\nexport const useSlides = ({ clients, studyInstanceUID }: UseSlidesProps): UseSlidesReturn => {\n  const [slides, setSlides] = useState<Slide[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    if (studyInstanceUID === undefined) {\n      setSlides([])\n      setIsLoading(false)\n      return\n    }\n\n    const cachedData = slidesCache.get(studyInstanceUID)\n    if (cachedData !== undefined) {\n      setSlides(cachedData)\n      setIsLoading(false)\n      return\n    }\n\n    setIsLoading(true)\n\n    const fetchSlides = async (): Promise<void> => {\n      // Check if there's already a pending request for this study\n      let pendingRequest = pendingRequests.get(studyInstanceUID)\n\n      if (pendingRequest === undefined) {\n        // Create a new promise for this request\n        pendingRequest = new Promise((resolve, reject): void => {\n          fetchImageMetadata({\n            clients,\n            studyInstanceUID,\n            onSuccess: (newSlides) => {\n              slidesCache.set(studyInstanceUID, newSlides)\n              resolve(newSlides)\n            },\n            onError: (err) => {\n              reject(err)\n            }\n          }).catch((err) => {\n            reject(err)\n          })\n        })\n        pendingRequests.set(studyInstanceUID, pendingRequest)\n      }\n\n      try {\n        const newSlides = await pendingRequest\n        setSlides(newSlides)\n        setError(null)\n      } catch (err) {\n        setError(err as Error)\n        setSlides([])\n      } finally {\n        pendingRequests.delete(studyInstanceUID)\n        setIsLoading(false)\n      }\n    }\n\n    void fetchSlides()\n  }, [clients, studyInstanceUID])\n\n  return { slides, isLoading, error }\n}\n","import { Routes, Route, useLocation, useParams } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\nimport * as dcmjs from 'dcmjs'\nimport { useEffect, useState } from 'react'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide } from '../data/slides'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { useSlides } from '../hooks/useSlides'\nimport { StorageClasses } from '../data/uids'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface NaturalizedInstance {\n  SeriesInstanceUID: string\n  SOPInstanceUID: string\n  ReferencedSeriesSequence?: Array<{\n    SeriesInstanceUID: string\n  }>\n  ContentSequence?: Array<{\n    ConceptNameCodeSequence: Array<{\n      CodeValue: string\n    }>\n    ContentSequence?: Array<{\n      ContentSequence: Array<{\n        ReferencedSOPSequence: Array<{\n          ReferencedSOPInstanceUID: string\n        }>\n      }>\n    }>\n  }>\n}\n\ninterface ReferencedSlideResult {\n  slide: Slide | undefined\n  metadata: NaturalizedInstance\n}\n\nconst findSeriesSlide = (slides: Slide[], seriesInstanceUID: string): Slide | undefined => {\n  return slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n}\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID = '', seriesInstanceUID = '' } = useParams<{ studyInstanceUID: string, seriesInstanceUID: string }>()\n  const location = useLocation()\n\n  const [selectedSlide, setSelectedSlide] = useState(findSeriesSlide(slides, seriesInstanceUID))\n  const [derivedDataset, setDerivedDataset] = useState<NaturalizedInstance | null>(null)\n\n  useEffect(() => {\n    const seriesSlide = findSeriesSlide(slides, seriesInstanceUID)\n    if (seriesSlide !== null) {\n      setSelectedSlide(seriesSlide)\n    }\n  }, [seriesInstanceUID, slides])\n\n  useEffect(() => {\n    const findReferencedSlide = async ({ clients, studyInstanceUID, seriesInstanceUID }: {\n      clients: { [key: string]: DicomWebManager }\n      studyInstanceUID: string\n      seriesInstanceUID: string\n    }): Promise<ReferencedSlideResult | null> => await new Promise<ReferencedSlideResult | null>((resolve, reject) => {\n      try {\n        const allClients = Object.values(StorageClasses).map((storageClass) => clients[storageClass])\n        Promise.all(allClients.map(async (client) => {\n          const seriesMetadata = await client.retrieveSeriesMetadata({\n            studyInstanceUID: studyInstanceUID,\n            seriesInstanceUID: seriesInstanceUID\n          })\n          const [naturalizedSeriesMetadata] = seriesMetadata.map((metadata) => naturalizeDataset(metadata)) as NaturalizedInstance[]\n\n          if (naturalizedSeriesMetadata.ReferencedSeriesSequence != null) {\n            const referencedSeriesInstanceUID = naturalizedSeriesMetadata.ReferencedSeriesSequence[0].SeriesInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.seriesInstanceUIDs.find((uid: string) => {\n                return uid === referencedSeriesInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n\n          const IMAGE_LIBRARY_CONCEPT_NAME_CODE = '111028'\n          const imageLibrary = naturalizedSeriesMetadata.ContentSequence?.find(\n            contentItem => contentItem.ConceptNameCodeSequence[0].CodeValue === IMAGE_LIBRARY_CONCEPT_NAME_CODE\n          )\n          if ((imageLibrary?.ContentSequence?.[0]?.ContentSequence?.[0]?.ReferencedSOPSequence?.[0]) != null) {\n            const referencedSOPInstanceUID = imageLibrary.ContentSequence[0].ContentSequence[0].ReferencedSOPSequence[0].ReferencedSOPInstanceUID\n            const referencedSlide = slides.find((slide: Slide) => {\n              return slide.volumeImages.find((image: { SOPInstanceUID: string }) => {\n                return image.SOPInstanceUID === referencedSOPInstanceUID\n              })\n            })\n            resolve({ slide: referencedSlide, metadata: naturalizedSeriesMetadata })\n          }\n        })).catch(reject)\n      } catch (error) {\n        reject(error)\n      }\n    })\n\n    if (selectedSlide === null || selectedSlide === undefined) {\n      void findReferencedSlide({ clients, studyInstanceUID, seriesInstanceUID }).then((result: ReferencedSlideResult | null) => {\n        if (result !== null) {\n          setSelectedSlide(result.slide)\n          setDerivedDataset(result.metadata)\n        }\n      }).catch(error => {\n        console.error('Error finding referenced slide:', error)\n      })\n    }\n  }, [slides, clients, selectedSlide, studyInstanceUID, seriesInstanceUID])\n\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string | null | undefined\n  if (!searchParams.has('access_token')) {\n    presentationStateUID = searchParams.get('state')\n    if (presentationStateUID === null) {\n      presentationStateUID = undefined\n    }\n  }\n\n  let viewer = null\n  if (selectedSlide != null) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n        derivedDataset={derivedDataset}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\nfunction Viewer (props: ViewerProps): JSX.Element | null {\n  const { clients, studyInstanceUID, location, navigate } = props\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n\n  const handleSeriesSelection = ({ seriesInstanceUID }: { seriesInstanceUID: string }): void => {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n\n    if (location.pathname.includes('/projects/')) {\n      urlPath = location.pathname\n      if (!location.pathname.includes('/series/')) {\n        urlPath += `/series/${seriesInstanceUID}`\n      } else {\n        urlPath = urlPath.replace(/\\/series\\/[^/]+/, `/series/${seriesInstanceUID}`)\n      }\n    }\n\n    if (\n      location.pathname.includes('/series/') &&\n      location.search != null\n    ) {\n      urlPath += location.search\n    }\n\n    navigate(urlPath, { replace: true })\n  }\n\n  if (isLoading) {\n    return null\n  }\n\n  if (slides.length === 0) {\n    return null\n  }\n\n  const firstSlide = slides[0]\n  const volumeInstances = firstSlide.volumeImages\n  if (volumeInstances.length === 0) {\n    return null\n  }\n  const refImage = volumeInstances[0]\n\n  /* If a series is encoded in the path, route the viewer to this series.\n   * Otherwise select the first series correspondent to\n   * the first slide contained in the study.\n   */\n  let selectedSeriesInstanceUID: string\n  if (location.pathname.includes('series/')) {\n    const seriesFragment = location.pathname.split('series/')[1]\n    selectedSeriesInstanceUID = seriesFragment.includes('/') ? seriesFragment.split('/')[0] : seriesFragment\n  } else {\n    selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n  }\n\n  let clinicalTrialMenu\n  if (refImage.ClinicalTrialSponsorName != null) {\n    clinicalTrialMenu = (\n      <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n        <ClinicalTrial metadata={refImage} />\n      </Menu.SubMenu>\n    )\n  }\n\n  return (\n    <Layout style={{ height: '100%' }} hasSider>\n      <Layout.Sider\n        width={300}\n        style={{\n          height: '100%',\n          borderRight: 'solid',\n          borderRightWidth: 0.25,\n          overflow: 'hidden',\n          background: 'none'\n        }}\n      >\n        <Menu\n          mode='inline'\n          defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n          style={{ height: '100%' }}\n          inlineIndent={14}\n        >\n          <Menu.SubMenu key='patient' title='Patient'>\n            <Patient metadata={refImage} />\n          </Menu.SubMenu>\n          <Menu.SubMenu key='study' title='Study'>\n            <Study metadata={refImage} />\n          </Menu.SubMenu>\n          {clinicalTrialMenu}\n          <Menu.SubMenu key='slides' title='Slides'>\n            <SlideList\n              clients={props.clients}\n              metadata={slides}\n              selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n              onSeriesSelection={handleSeriesSelection}\n            />\n          </Menu.SubMenu>\n        </Menu>\n      </Layout.Sider>\n\n      <Routes>\n        <Route\n          path='/series/:seriesInstanceUID'\n          element={\n            <ParametrizedSlideViewer\n              clients={props.clients}\n              slides={slides}\n              preload={props.preload}\n              annotations={props.annotations}\n              enableAnnotationTools={props.enableAnnotationTools}\n              app={props.app}\n              user={props.user}\n            />\n          }\n        />\n      </Routes>\n    </Layout>\n  )\n}\n\nexport default withRouter(Viewer)\n","import dcmjs from 'dcmjs'\n\nconst { DicomMetaDictionary } = dcmjs.data\n\ninterface TagInfo {\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TagInfo[]\n  level: number\n}\n\nexport interface DicomTag {\n  name: string\n  vr: string\n  Value?: any[]\n  [key: string]: any\n}\n\nconst formatValue = (val: any): string => {\n  if (typeof val === 'object' && val !== null) {\n    return JSON.stringify(val)\n  }\n  return String(val)\n}\n\nexport const formatTagValue = (tag: DicomTag): string => {\n  if (tag.Value == null) return ''\n\n  if (Array.isArray(tag.Value)) {\n    return tag.Value.map(formatValue).join(', ')\n  }\n\n  return formatValue(tag.Value)\n}\n\n/**\n * Processes DICOM metadata and returns a flattened array of tag information\n * @param metadata - The DICOM metadata object to process\n * @param depth - The current depth level for nested sequences (default: 0)\n * @returns Array of processed tag information\n */\nexport function getRows (metadata: Record<string, any>, depth = 0): TagInfo[] {\n  if (metadata === undefined || metadata === null) return []\n  const keywords = Object.keys(metadata).filter(key => key !== '_vrMap')\n\n  return keywords.flatMap(keyword => {\n    // @ts-expect-error\n    const tagInfo = DicomMetaDictionary.nameMap[keyword] as TagInfo | undefined\n    let value = metadata[keyword]\n\n    // Handle private or unknown tags\n    if (tagInfo === undefined) {\n      const regex = /[0-9A-Fa-f]{6}/g\n      if (keyword.match(regex) == null) return []\n\n      return [{\n        tag: `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`,\n        vr: '',\n        keyword: 'Private Tag',\n        value: value?.toString() ?? '',\n        level: depth\n      }]\n    }\n\n    // Handle sequence values (SQ VR)\n    if (tagInfo.vr === 'SQ' && value !== undefined) {\n      const sequenceItems = Array.isArray(value) ? value : [value]\n\n      // Create a parent sequence node\n      const sequenceNode: TagInfo = {\n        tag: tagInfo.tag,\n        vr: tagInfo.vr,\n        keyword,\n        value: `Sequence with ${sequenceItems.length} item(s)`,\n        level: depth,\n        children: []\n      }\n\n      // Create individual nodes for each sequence item\n      sequenceNode.children = sequenceItems.map((item, index) => {\n        const itemNode: TagInfo = {\n          tag: `${tagInfo.tag}.${index + 1}`,\n          vr: 'Item',\n          keyword: `Item ${index + 1}`,\n          value: `Sequence Item ${index + 1}`,\n          level: depth + 1,\n          children: getRows(item, depth + 2)\n        }\n        return itemNode\n      })\n\n      return [sequenceNode]\n    }\n\n    // Handle array values\n    if (Array.isArray(value)) {\n      value = value.map(formatValue).join('\\\\')\n    } else if (typeof value === 'object' && value !== null) {\n      value = formatValue(value)\n    }\n\n    return [{\n      tag: tagInfo.tag,\n      vr: tagInfo.vr,\n      keyword: keyword.replace('RETIRED_', ''),\n      value: value?.toString() ?? '',\n      level: depth\n    }]\n  })\n}\n\n/**\n * Sorts DICOM tags alphabetically by tag value\n * @param metadata - The DICOM metadata object to process\n * @returns Sorted array of tag information\n */\nexport function getSortedTags (metadata: Record<string, any>): TagInfo[] {\n  const tagList = getRows(metadata)\n  return tagList.sort((a, b) => a.tag.localeCompare(b.tag))\n}\n","/**\n * Formats a DICOM datetime string (YYYYMMDD:HHmmss) into a human-readable format\n *\n * @param dateStr - DICOM datetime string in format \"YYYYMMDD:HHmmss\"\n * @returns Formatted date string (e.g., \"Mon, Jan 1 2024\")\n * @example\n * formatDicomDate(\"20240101:120000\") // Returns \"Mon, Jan 1 2024\"\n * formatDicomDate(\"invalid\") // Returns \"invalid\"\n */\nexport const formatDicomDate = (dateStr: string): string => {\n  // Parse YYYYMMDD:HHmmss format\n  const match = dateStr.match(/^(\\d{4})(\\d{2})(\\d{2}):(\\d{2})(\\d{2})(\\d{2})/)\n  if (match == null) return dateStr\n\n  const [, year, month, day, hour, minute, second] = match\n\n  // Validate month and day\n  const monthNum = parseInt(month)\n  const dayNum = parseInt(day)\n  if (monthNum < 1 || monthNum > 12 || dayNum < 1 || dayNum > 31) {\n    return dateStr\n  }\n\n  const date = new Date(\n    parseInt(year),\n    monthNum - 1, // months are 0-based\n    dayNum,\n    parseInt(hour),\n    parseInt(minute),\n    parseInt(second)\n  )\n\n  // Check if the date is invalid or if the month/day combination is invalid\n  // This catches cases like February 31st where the date rolls over to March\n  if (\n    date.getMonth() !== monthNum - 1 || // month rolled over\n    date.getDate() !== dayNum // day rolled over\n  ) {\n    return dateStr\n  }\n\n  // Format parts separately to avoid the extra comma\n  const weekday = date.toLocaleDateString('en-US', { weekday: 'short' })\n  const monthName = date.toLocaleDateString('en-US', { month: 'short' })\n  const dayFormatted = date.getDate()\n  const yearNum = date.getFullYear()\n\n  return `${weekday}, ${monthName} ${dayFormatted} ${yearNum}`\n}\n","import { v4 as generateUUID } from 'uuid'\n\n/**\n * Consumer must implement:\n * this.listeners = {}\n * this.EVENTS = { \"EVENT_KEY\": \"EVENT_VALUE\" }\n */\nconst pubSubInterface = {\n  subscribe,\n  _broadcastEvent,\n  _unsubscribe,\n  _isValidEvent\n}\n\nexport default pubSubInterface\n\n/**\n * Subscribe to updates.\n *\n * @param {string} eventName The name of the event\n * @param {Function} callback Events callback\n * @return {Object} Observable object with actions\n */\nfunction subscribe (this: PubSubService, eventName: string, callback: Function): { unsubscribe: () => any } {\n  if (this._isValidEvent(eventName)) {\n    const listenerId = generateUUID()\n    const subscription = { id: listenerId, callback }\n\n    // console.info(`Subscribing to '${eventName}'.`);\n    if (Array.isArray(this.listeners[eventName])) {\n      this.listeners[eventName].push(subscription)\n    } else {\n      this.listeners[eventName] = [subscription]\n    }\n\n    return {\n      unsubscribe: () => this._unsubscribe(eventName, listenerId)\n    }\n  } else {\n    throw new Error(`Event ${eventName} not supported.`)\n  }\n}\n\n/**\n * Unsubscribe to measurement updates.\n *\n * @param {string} eventName The name of the event\n * @param {string} listenerId The listeners id\n * @return void\n */\nfunction _unsubscribe (this: PubSubService, eventName: string, listenerId: string): void {\n  if (this.listeners[eventName] === undefined) {\n    return\n  }\n\n  const listeners = this.listeners[eventName]\n  if (Array.isArray(listeners)) {\n    this.listeners[eventName] = listeners.filter(({ id }) => id !== listenerId)\n  } else {\n    this.listeners[eventName] = []\n  }\n}\n\n/**\n * Check if a given event is valid.\n *\n * @param {string} eventName The name of the event\n * @return {boolean} Event name validation\n */\nfunction _isValidEvent (this: PubSubService, eventName: string): boolean {\n  return Object.values(this.EVENTS).includes(eventName)\n}\n\n/**\n * Broadcasts changes.\n *\n * @param {string} eventName - The event name\n * @param {func} callbackProps - Properties to pass callback\n * @return void\n */\nfunction _broadcastEvent (this: PubSubService, eventName: string, callbackProps: any): void {\n  const hasListeners = Object.keys(this.listeners).length > 0\n  const hasCallbacks = Array.isArray(this.listeners[eventName])\n\n  if (hasListeners && hasCallbacks) {\n    this.listeners[eventName].forEach((listener: { id: string, callback: Function }) => {\n      listener.callback(callbackProps)\n    })\n  }\n}\n\n/** Export a PubSubService class to be used instead of the individual items */\nexport class PubSubService {\n  EVENTS: any\n  subscribe: (\n    eventName: string,\n    callback: Function\n  ) => { unsubscribe: () => any }\n\n  _broadcastEvent: (eventName: string, callbackProps: any) => void\n  _unsubscribe: (eventName: string, listenerId: string) => void\n  _isValidEvent: (eventName: string) => boolean\n  listeners: { [key: string]: Array<{ id: string, callback: Function }> }\n  unsubscriptions: any[]\n  constructor (EVENTS: Record<string, string>) {\n    this.EVENTS = EVENTS\n    this.subscribe = subscribe\n    this._broadcastEvent = _broadcastEvent\n    this._unsubscribe = _unsubscribe\n    this._isValidEvent = _isValidEvent\n    this.listeners = {}\n    this.unsubscriptions = []\n  }\n\n  reset (): void {\n    this.unsubscriptions.forEach((unsub) => unsub())\n    this.unsubscriptions = []\n  }\n\n  /**\n   * Creates an event that records whether or not someone\n   * has consumed it.  Call eventData.consume() to consume the event.\n   * Check eventData.isConsumed to see if it is consumed or not.\n   * @param props - to include in the event\n   */\n  protected createConsumableEvent (props: Record<string, any>): Record<string, any> {\n    return {\n      ...props,\n      isConsumed: false,\n      consume: function Consume () {\n        this.isConsumed = true\n      }\n    }\n  }\n}\n","import { Instance, Series } from '../services/DICOMMetadataStore'\n\nfunction createSeriesMetadata (SeriesInstanceUID: string, defaultInstances?: Instance[]): Series {\n  const instances: Instance[] = []\n  const instancesMap = new Map<string, Instance>()\n\n  return {\n    SeriesInstanceUID,\n    Modality: '',\n    SeriesNumber: 0,\n    SeriesDescription: '',\n    SeriesDate: '',\n    SeriesTime: '',\n    ...defaultInstances?.[0],\n    instances,\n    addInstance: function (newInstance: Instance) {\n      this.addInstances([newInstance])\n    },\n    addInstances: function (newInstances: Instance[]) {\n      for (let i = 0, len = newInstances.length; i < len; i++) {\n        const instance = newInstances[i]\n\n        if (!instancesMap.has(instance.SOPInstanceUID)) {\n          instancesMap.set(instance.SOPInstanceUID, instance)\n          instances.push(instance)\n        }\n      }\n    },\n    getInstance: function (SOPInstanceUID: string) {\n      return instancesMap.get(SOPInstanceUID)\n    }\n  }\n}\n\nexport default createSeriesMetadata\n","import createSeriesMetadata from './createSeriesMetadata'\n\nimport { Study, Series, Instance } from '../services/DICOMMetadataStore'\n\nfunction createStudyMetadata (StudyInstanceUID: string): Study {\n  return {\n    StudyInstanceUID,\n    StudyDescription: '',\n    PatientID: '',\n    PatientName: '',\n    StudyDate: '',\n    AccessionNumber: '',\n    NumInstances: 0,\n    ModalitiesInStudy: [],\n    isLoaded: false,\n    series: [] as Series[],\n    /**\n     * @param {object} instance\n     */\n    addInstanceToSeries: function (instance: Instance) {\n      this.addInstancesToSeries([instance])\n    },\n    /**\n     * @param {object[]} instances\n     * @param {string} instances[].SeriesInstanceUID\n     * @param {string} instances[].StudyDescription\n     */\n    addInstancesToSeries: function (instances: Instance[]) {\n      const { SeriesInstanceUID } = instances[0]\n\n      if (this.StudyDescription !== '' && this.StudyDescription !== undefined) {\n        this.StudyDescription = instances[0].StudyDescription\n      }\n\n      let series = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (series == null) {\n        series = createSeriesMetadata(SeriesInstanceUID, instances)\n        this.series.push(series)\n      }\n\n      series.addInstances(instances)\n    },\n\n    setSeriesMetadata: function (\n      SeriesInstanceUID: string,\n      seriesMetadata: any\n    ) {\n      let existingSeries = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (existingSeries != null) {\n        existingSeries = Object.assign(existingSeries, seriesMetadata)\n      } else {\n        const series = createSeriesMetadata(SeriesInstanceUID)\n        this.series.push(Object.assign(series, seriesMetadata))\n      }\n    }\n  }\n}\n\nexport default createStudyMetadata\n","import dcmjs from 'dcmjs'\n\nimport pubSubServiceInterface from '../utils/pubSubServiceInterface'\nimport createStudyMetadata from '../utils/createStudyMetadata'\n\nexport const EVENTS = {\n  STUDY_ADDED: 'event::dicomMetadataStore:studyAdded',\n  INSTANCES_ADDED: 'event::dicomMetadataStore:instancesAdded',\n  SERIES_ADDED: 'event::dicomMetadataStore:seriesAdded',\n  SERIES_UPDATED: 'event::dicomMetadataStore:seriesUpdated'\n}\n\nexport interface Instance {\n  SOPInstanceUID: string\n  SOPClassUID: string\n  Rows: number\n  Columns: number\n  PatientSex: string\n  Modality: string\n  InstanceNumber: string\n  imageId?: string\n  [key: string]: any // For dynamic metadata properties\n}\n\nexport interface Series {\n  Modality: string\n  SeriesInstanceUID: string\n  SeriesNumber: number\n  SeriesDate: string\n  SeriesTime: string\n  SeriesDescription: string\n  instances: Instance[]\n  addInstance: (newInstance: Instance) => void\n  addInstances: (newInstances: Instance[]) => void\n  getInstance: (SOPInstanceUID: string) => Instance | undefined\n}\n\nexport interface Study {\n  StudyInstanceUID: string\n  StudyDescription: string\n  PatientID: string\n  PatientName: string\n  StudyDate: string\n  AccessionNumber: string\n  NumInstances: number\n  ModalitiesInStudy: any[]\n  NumberOfStudyRelatedSeries?: number\n  isLoaded: boolean\n  series: Series[]\n  addInstanceToSeries: (instance: Instance) => void\n  addInstancesToSeries: (instances: Instance[]) => void\n  setSeriesMetadata: (SeriesInstanceUID: string, metadata: any) => void\n}\n\ninterface Model {\n  studies: Study[]\n}\n\nconst _model: Model = {\n  studies: []\n}\n\nfunction _getStudyInstanceUIDs (): string[] {\n  return _model.studies.map((aStudy) => aStudy.StudyInstanceUID)\n}\n\nfunction _getStudy (StudyInstanceUID: string): Study | undefined {\n  return _model.studies.find(\n    (aStudy) => aStudy.StudyInstanceUID === StudyInstanceUID\n  )\n}\n\nfunction _getSeries (StudyInstanceUID: string, SeriesInstanceUID: string): Series | undefined {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  return study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n}\n\nfunction _getInstance (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  SOPInstanceUID: string\n): Instance | undefined {\n  const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n\n  if (series == null) {\n    return\n  }\n\n  return series.getInstance(SOPInstanceUID)\n}\n\nfunction _getInstanceByImageId (imageId: string): Instance | undefined {\n  for (const study of _model.studies) {\n    for (const series of study.series) {\n      for (const instance of series.instances) {\n        if (instance.imageId === imageId) {\n          return instance\n        }\n      }\n    }\n  }\n}\n\n/**\n * Update the metadata of a specific series\n * @param {*} StudyInstanceUID\n * @param {*} SeriesInstanceUID\n * @param {*} metadata metadata inform of key value pairs\n * @returns\n */\nfunction _updateMetadataForSeries (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  metadata: Record<string, any>\n): void {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  const series = study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n\n  if (series == null) {\n    return\n  }\n\n  const { instances } = series\n  instances.forEach((instance) => {\n    Object.keys(metadata).forEach((key) => {\n      if (typeof metadata[key] === 'object') {\n        instance[key] = { ...instance[key], ...metadata[key] }\n      } else {\n        instance[key] = metadata[key]\n      }\n    })\n  })\n}\n\ninterface BaseImplementationType {\n  EVENTS: typeof EVENTS\n  listeners: Record<string, any>\n  addInstance: (dicomJSONDatasetOrP10ArrayBuffer: ArrayBuffer | Record<string, any>) => void\n  addInstances: (instances: Instance[], madeInClient?: boolean) => void\n  updateSeriesMetadata: (seriesMetadata: Record<string, any>) => void\n  addSeriesMetadata: (seriesSummaryMetadata: Array<Record<string, any>>, madeInClient?: boolean) => void\n  addStudy: (study: Record<string, any>) => void\n  getStudyInstanceUIDs: typeof _getStudyInstanceUIDs\n  getStudy: typeof _getStudy\n  getSeries: typeof _getSeries\n  getInstance: typeof _getInstance\n  getInstanceByImageId: typeof _getInstanceByImageId\n  updateMetadataForSeries: typeof _updateMetadataForSeries\n  _broadcastEvent: (eventName: string, data: any) => void\n}\n\nconst BaseImplementation: BaseImplementationType = {\n  EVENTS,\n  listeners: {},\n  addInstance (dicomJSONDatasetOrP10ArrayBuffer) {\n    let dicomJSONDataset\n\n    // If Arraybuffer, parse to DICOMJSON before naturalizing.\n    if (dicomJSONDatasetOrP10ArrayBuffer instanceof ArrayBuffer) {\n      const dicomData = dcmjs.data.DicomMessage.readFile(\n        dicomJSONDatasetOrP10ArrayBuffer\n      )\n\n      dicomJSONDataset = dicomData.dict\n    } else {\n      dicomJSONDataset = dicomJSONDatasetOrP10ArrayBuffer\n    }\n\n    let naturalizedDataset: Instance\n\n    if (!('SeriesInstanceUID' in dicomJSONDataset)) {\n      naturalizedDataset =\n        dcmjs.data.DicomMetaDictionary.naturalizeDataset(dicomJSONDataset) as Instance\n    } else {\n      naturalizedDataset = dicomJSONDataset as unknown as Instance\n    }\n\n    const { StudyInstanceUID } = naturalizedDataset\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstanceToSeries(naturalizedDataset)\n  },\n  addInstances (instances, madeInClient = false) {\n    const { StudyInstanceUID, SeriesInstanceUID } = instances[0]\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstancesToSeries(instances)\n\n    // Broadcast an event even if we used cached data.\n    // This is because the mode needs to listen to instances that are added to build up its active displaySets.\n    // It will see there are cached displaySets and end early if this Series has already been fired in this\n    // Mode session for some reason.\n    this._broadcastEvent(EVENTS.INSTANCES_ADDED, {\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      madeInClient\n    })\n  },\n  updateSeriesMetadata (seriesMetadata) {\n    const { StudyInstanceUID, SeriesInstanceUID } = seriesMetadata\n    const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n    if (series == null) {\n      return\n    }\n\n    const study = _getStudy(StudyInstanceUID)\n    if (study != null) {\n      study.setSeriesMetadata(SeriesInstanceUID, seriesMetadata)\n    }\n  },\n  addSeriesMetadata (seriesSummaryMetadata, madeInClient = false) {\n    if (\n      seriesSummaryMetadata === undefined ||\n      seriesSummaryMetadata.length === 0 ||\n      seriesSummaryMetadata[0] === undefined\n    ) {\n      return\n    }\n\n    const { StudyInstanceUID } = seriesSummaryMetadata[0]\n    let study = _getStudy(StudyInstanceUID)\n    if (study == null) {\n      study = createStudyMetadata(StudyInstanceUID)\n      // Will typically be undefined with a compliant DICOMweb server, reset later\n      study.StudyDescription = seriesSummaryMetadata[0].StudyDescription\n      seriesSummaryMetadata?.forEach((item) => {\n        if (study !== undefined && !study.ModalitiesInStudy?.includes(item.Modality)) {\n          study.ModalitiesInStudy?.push(item.Modality)\n        }\n      })\n      study.NumberOfStudyRelatedSeries = seriesSummaryMetadata.length\n      _model.studies.push(study)\n    }\n\n    seriesSummaryMetadata.forEach((series) => {\n      const { SeriesInstanceUID } = series\n      study?.setSeriesMetadata(SeriesInstanceUID, series)\n    })\n\n    this._broadcastEvent(EVENTS.SERIES_ADDED, {\n      StudyInstanceUID,\n      seriesSummaryMetadata,\n      madeInClient\n    })\n  },\n  addStudy (study) {\n    const { StudyInstanceUID } = study\n\n    const existingStudy = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (existingStudy == null) {\n      const newStudy = createStudyMetadata(StudyInstanceUID)\n\n      newStudy.PatientID = study.PatientID\n      newStudy.PatientName = study.PatientName\n      newStudy.StudyDate = study.StudyDate\n      newStudy.ModalitiesInStudy = study.ModalitiesInStudy\n      newStudy.StudyDescription = study.StudyDescription\n      newStudy.AccessionNumber = study.AccessionNumber\n      newStudy.NumInstances = study.NumInstances // todo: Correct naming?\n\n      _model.studies.push(newStudy)\n    }\n  },\n  getStudyInstanceUIDs: _getStudyInstanceUIDs,\n  getStudy: _getStudy,\n  getSeries: _getSeries,\n  getInstance: _getInstance,\n  getInstanceByImageId: _getInstanceByImageId,\n  updateMetadataForSeries: _updateMetadataForSeries,\n  _broadcastEvent (eventName: string, data: any): void {\n  }\n}\n\ninterface DicomMetadataStoreType extends BaseImplementationType {\n  subscribe: (event: string, callback: (data: any) => void) => { unsubscribe: () => any }\n  unsubscribe: (event: string, callback: (data: any) => void) => void\n}\n\nconst DicomMetadataStore = Object.assign(\n  {},\n  BaseImplementation,\n  pubSubServiceInterface\n) as unknown as DicomMetadataStoreType\n\nexport { DicomMetadataStore }\nexport default DicomMetadataStore\n","import { useState, useEffect } from 'react'\n\n/**\n * A hook that delays updating a value for the specified time\n * @param value The value to debounce\n * @param delay The delay time in milliseconds\n * @returns The debounced value\n * @example\n * const debouncedSearchTerm = useDebounce(searchTerm, 300)\n */\nexport const useDebounce = <T,>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import { useState, useMemo, useEffect } from 'react'\nimport { Select, Input, Slider, Typography, Table } from 'antd'\nimport { SearchOutlined } from '@ant-design/icons'\n\nimport DicomWebManager from '../../DicomWebManager'\nimport './DicomTagBrowser.css'\nimport { useSlides } from '../../hooks/useSlides'\nimport { getSortedTags } from './dicomTagUtils'\nimport { formatDicomDate } from '../../utils/formatDicomDate'\nimport DicomMetadataStore, { Series, Study } from '../../services/DICOMMetadataStore'\nimport { useDebounce } from '../../hooks/useDebounce'\n\nconst { Option } = Select\n\ninterface DisplaySet {\n  displaySetInstanceUID: number\n  SeriesDate?: string\n  SeriesTime?: string\n  SeriesNumber: string\n  SeriesDescription?: string\n  Modality: string\n  images: any[]\n}\n\ninterface TableDataItem {\n  key: string\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TableDataItem[]\n}\n\ninterface DicomTagBrowserProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\nconst DicomTagBrowser = ({ clients, studyInstanceUID }: DicomTagBrowserProps): JSX.Element => {\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n  const [study, setStudy] = useState<Study | undefined>(undefined)\n\n  const [displaySets, setDisplaySets] = useState<DisplaySet[]>([])\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] = useState(0)\n  const [instanceNumber, setInstanceNumber] = useState(1)\n  const [filterValue, setFilterValue] = useState('')\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([])\n  const [searchInput, setSearchInput] = useState('')\n\n  const debouncedSearchValue = useDebounce(searchInput, 300)\n\n  useEffect(() => {\n    if (debouncedSearchValue === '') {\n      setFilterValue('')\n      setExpandedKeys([])\n    } else {\n      setFilterValue(debouncedSearchValue)\n    }\n  }, [debouncedSearchValue])\n\n  useEffect(() => {\n    const handler = (event: any): void => {\n      const study: Study | undefined = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n      setStudy(study)\n    }\n    const seriesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.SERIES_ADDED, handler)\n    const instancesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.INSTANCES_ADDED, handler)\n\n    const study = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n    setStudy(study)\n\n    return () => {\n      seriesAddedSubscription.unsubscribe()\n      instancesAddedSubscription.unsubscribe()\n    }\n  }, [studyInstanceUID])\n\n  useEffect(() => {\n    let displaySets: DisplaySet[] = []\n    let derivedDisplaySets: DisplaySet[] = []\n    const processedSeries: string[] = []\n    let index = 0\n\n    if (slides.length > 0) {\n      displaySets = slides\n        .map((slide): DisplaySet | null => {\n          const { volumeImages } = slide\n          if (volumeImages?.[0] === undefined) return null\n\n          const {\n            SeriesDate,\n            SeriesTime,\n            SeriesNumber,\n            SeriesInstanceUID,\n            SeriesDescription,\n            Modality\n          } = volumeImages[0]\n\n          processedSeries.push(SeriesInstanceUID)\n\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate,\n            SeriesTime,\n            SeriesInstanceUID,\n            // @ts-expect-error\n            SeriesNumber,\n            SeriesDescription,\n            Modality,\n            images: volumeImages\n          }\n          index++\n          return ds\n        })\n        .filter((set): set is DisplaySet => set !== null)\n    }\n\n    if (study !== undefined && study.series?.length > 0) {\n      derivedDisplaySets = study.series.filter(s => !processedSeries.includes(s.SeriesInstanceUID))\n        .map((series: Series): DisplaySet => {\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate: series.SeriesDate,\n            SeriesTime: series.SeriesTime,\n            // @ts-expect-error\n            SeriesNumber: series.SeriesNumber,\n            SeriesDescription: series.SeriesDescription,\n            SeriesInstanceUID: series.SeriesInstanceUID,\n            Modality: series.Modality,\n            images: series?.instances?.length > 0 ? series.instances : [series]\n          }\n          index++\n          return ds\n        })\n    }\n\n    setDisplaySets([...displaySets, ...derivedDisplaySets])\n  }, [slides, study])\n\n  const displaySetList = useMemo(() => {\n    displaySets.sort((a, b) => Number(a.SeriesNumber) - Number(b.SeriesNumber))\n    return displaySets.map((displaySet, index) => {\n      const {\n        SeriesDate = '',\n        SeriesTime = '',\n        SeriesNumber = '',\n        SeriesDescription = '',\n        Modality = ''\n      } = displaySet\n\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0]\n      const displayDate = formatDicomDate(dateStr)\n\n      return {\n        value: index,\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\n        description: displayDate\n      }\n    })\n  }, [displaySets])\n\n  const showInstanceList =\n    displaySets[selectedDisplaySetInstanceUID]?.images.length > 1\n\n  console.debug('displaySets:', displaySets)\n\n  const instanceSliderMarks = useMemo(() => {\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return {}\n    const totalInstances = displaySets[selectedDisplaySetInstanceUID].images.length\n\n    // Create marks for first, middle, and last instances\n    const marks: Record<number, string> = {\n      1: '1', // First\n      [Math.ceil(totalInstances / 2)]: String(Math.ceil(totalInstances / 2)), // Middle\n      [totalInstances]: String(totalInstances) // Last\n    }\n\n    return marks\n  }, [selectedDisplaySetInstanceUID, displaySets])\n\n  const columns = [\n    {\n      title: 'Tag',\n      dataIndex: 'tag',\n      key: 'tag',\n      width: '30%'\n    },\n    {\n      title: 'VR',\n      dataIndex: 'vr',\n      key: 'vr',\n      width: '5%'\n    },\n    {\n      title: 'Keyword',\n      dataIndex: 'keyword',\n      key: 'keyword',\n      width: '30%'\n    },\n    {\n      title: 'Value',\n      dataIndex: 'value',\n      key: 'value',\n      width: '40%'\n    }\n  ]\n\n  const tableData = useMemo(() => {\n    const transformTagsToTableData = (tags: any[], parentKey = ''): TableDataItem[] => {\n      return tags.map((tag, index) => {\n        // Create a unique key using tag value if available, otherwise use index\n        const keyBase: string = tag.tag !== '' ? tag.tag.replace(/[(),]/g, '') : index.toString()\n        const currentKey: string = parentKey !== '' ? `${parentKey}-${keyBase}` : keyBase\n\n        const item: TableDataItem = {\n          key: currentKey,\n          tag: tag.tag,\n          vr: tag.vr,\n          keyword: tag.keyword,\n          value: tag.value\n        }\n\n        if (tag.children !== undefined && tag.children.length > 0) {\n          item.children = transformTagsToTableData(tag.children, currentKey)\n        }\n\n        return item\n      })\n    }\n\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return []\n    const metadata = displaySets[selectedDisplaySetInstanceUID]?.images[instanceNumber - 1]\n    const tags = getSortedTags(metadata)\n    return transformTagsToTableData(tags)\n  }, [instanceNumber, selectedDisplaySetInstanceUID, displaySets])\n\n  const filteredData = useMemo(() => {\n    if (filterValue === undefined || filterValue === '') return tableData\n\n    const searchLower = filterValue.toLowerCase()\n    const matchedKeys = new Set<string>()\n\n    const nodeMatches = (node: TableDataItem): boolean => {\n      return (\n        (node.tag?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.vr?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.keyword?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.value?.toString().toLowerCase() ?? '').includes(searchLower)\n      )\n    }\n\n    // First pass: find all matching nodes and their parent paths\n    const findMatchingPaths = (\n      node: TableDataItem,\n      parentPath: TableDataItem[] = []\n    ): TableDataItem[][] => {\n      const currentPath = [...parentPath, node]\n      let matchingPaths: TableDataItem[][] = []\n\n      if (nodeMatches(node)) {\n        matchingPaths.push(currentPath)\n      }\n\n      if (node.children != null) {\n        node.children.forEach(child => {\n          const childPaths = findMatchingPaths(child, currentPath)\n          matchingPaths = [...matchingPaths, ...childPaths]\n        })\n      }\n\n      return matchingPaths\n    }\n\n    // Find all paths that contain matches\n    const matchingPaths = tableData.flatMap(node => findMatchingPaths(node))\n\n    // Second pass: reconstruct the tree with matching paths\n    const reconstructTree = (\n      paths: TableDataItem[][],\n      level = 0\n    ): TableDataItem[] => {\n      if (paths.length === 0 || level >= paths[0].length) return []\n\n      const nodesAtLevel = new Map<string, {\n        node: TableDataItem\n        childPaths: TableDataItem[][]\n      }>()\n\n      paths.forEach(path => {\n        if (level < path.length) {\n          const node = path[level]\n          if (!nodesAtLevel.has(node.key)) {\n            nodesAtLevel.set(node.key, {\n              node: { ...node },\n              childPaths: []\n            })\n          }\n          if (level + 1 < path.length) {\n            nodesAtLevel.get(node.key)?.childPaths.push(path)\n          }\n        }\n      })\n\n      return Array.from(nodesAtLevel.values()).map(({ node, childPaths }) => {\n        matchedKeys.add(node.key)\n        const children = reconstructTree(childPaths, level + 1)\n        return children.length > 0 ? { ...node, children } : node\n      })\n    }\n\n    const filtered = reconstructTree(matchingPaths)\n    setExpandedKeys(Array.from(matchedKeys))\n\n    return filtered\n  }, [tableData, filterValue])\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div className='dicom-tag-browser'>\n      <div\n        style={{\n          width: '100%',\n          padding: '16px 20px 20px'\n        }}\n      >\n        <div style={{ display: 'flex', gap: '24px', marginBottom: '32px' }}>\n          <div style={{ flex: 1 }}>\n            <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>Slides</Typography.Text>\n            <Select\n              style={{ width: '100%' }}\n              value={selectedDisplaySetInstanceUID}\n              onChange={(value) => {\n                setSelectedDisplaySetInstanceUID(value)\n                setInstanceNumber(1)\n              }}\n              optionLabelProp='label'\n              optionFilterProp='label'\n            >\n              {displaySetList.map((item) => (\n                <Option key={item.value} value={item.value} label={item.label}>\n                  <div>\n                    <div>{item.label}</div>\n                    <div\n                      style={{ fontSize: '12px', color: 'rgba(0, 0, 0, 0.45)' }}\n                    >\n                      {item.description}\n                    </div>\n                  </div>\n                </Option>\n              ))}\n            </Select>\n          </div>\n\n          {showInstanceList && (\n            <div style={{ flex: 1 }}>\n              <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>\n                Instance Number: {instanceNumber}\n              </Typography.Text>\n              <Slider\n                min={1}\n                max={displaySets[selectedDisplaySetInstanceUID]?.images.length}\n                value={instanceNumber}\n                onChange={(value) => setInstanceNumber(value)}\n                marks={instanceSliderMarks}\n                tooltip={{\n                  formatter: (value: number | undefined) => value !== undefined ? `Instance ${value}` : ''\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        <Input\n          style={{ marginBottom: '20px' }}\n          placeholder='Search DICOM tags...'\n          prefix={<SearchOutlined />}\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n        />\n\n        <Table\n          columns={columns}\n          dataSource={filteredData}\n          pagination={false}\n          expandable={{\n            expandedRowKeys: expandedKeys,\n            onExpandedRowsChange: (keys) => setExpandedKeys(keys as string[])\n          }}\n          size='small'\n          scroll={{ y: 500 }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default DicomTagBrowser\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Modal,\n  Row,\n  Space,\n  Badge,\n  Collapse,\n  Radio,\n  Tooltip\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  FileSearchOutlined,\n  UnorderedListOutlined,\n  UserOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport NotificationMiddleware, { NotificationMiddlewareEvents } from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\nimport { v4 as uuidv4 } from 'uuid'\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser'\nimport DicomWebManager from '../DicomWebManager'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  clients?: { [key: string]: DicomWebManager }\n  defaultClients?: { [key: string]: DicomWebManager }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface ExtendedCustomError extends CustomError {\n  source: string\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n  errorObj: ExtendedCustomError[]\n  errorCategory: string[]\n  warnings: string[]\n  serverSelectionMode: 'default' | 'custom'\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    const cachedMode = window.localStorage.getItem('slim_server_selection_mode') as 'default' | 'custom' | null\n\n    this.state = {\n      errorObj: [],\n      errorCategory: [],\n      warnings: [],\n      selectedServerUrl: cachedServerUrl ?? '',\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl),\n      serverSelectionMode: cachedMode === 'custom' && cachedServerUrl !== null && cachedServerUrl !== '' ? 'custom' : 'default'\n    }\n\n    const onErrorHandler = ({ source, error }: {\n      source: string\n      error: CustomError\n    }): void => {\n      this.setState(state => ({\n        ...state,\n        errorObj: [...state.errorObj, { ...error, source }],\n        errorCategory: [...state.errorCategory, error.type]\n      }))\n    }\n\n    const onWarningHandler = (warning: string): void => {\n      this.setState(state => ({\n        ...state,\n        warnings: [...state.warnings, warning]\n      }))\n    }\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnError,\n      onErrorHandler\n    )\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnWarning,\n      onWarningHandler\n    )\n  }\n\n  componentDidUpdate (prevProps: Readonly<HeaderProps>, prevState: Readonly<HeaderState>): void {\n    if (((prevState.warnings.length > 0) || (prevState.errorObj.length > 0)) && this.props.location.pathname !== prevProps.location.pathname) {\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true,\n        errorObj: [],\n        errorCategory: [],\n        warnings: []\n      })\n    }\n  }\n\n  isValidServerUrl = (url: string | null | undefined): boolean => {\n    if (url == null || url === '') {\n      return false\n    }\n    try {\n      const urlObj = new URL(url)\n      return urlObj.protocol.startsWith('http') && urlObj.pathname.length > 0\n    } catch (TypeError) {\n      return false\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleDicomTagBrowserButtonClick = (): void => {\n    const width = window.innerWidth - 200\n    Modal.info({\n      title: 'DICOM Tag Browser',\n      width,\n      content: <DicomTagBrowser\n        clients={this.props.clients ?? {}}\n        studyInstanceUID={this.props.params.studyInstanceUID ?? ''}\n               />,\n      onOk (): void {}\n    })\n  }\n\n  handleDebugButtonClick = (): void => {\n    const errorMsgs: {\n      Authentication: string[]\n      Communication: string[]\n      EncodingDecoding: string[]\n      Visualization: string[]\n    } = {\n      Authentication: [],\n      Communication: [],\n      EncodingDecoding: [],\n      Visualization: []\n    }\n\n    type ObjectKey = keyof typeof errorMsgs\n    const errorNum = this.state.errorObj.length\n\n    if (errorNum > 0) {\n      for (let i = 0; i < errorNum; i++) {\n        const category = this.state.errorCategory[i] as ObjectKey\n        errorMsgs[category].push(`${this.state.errorObj[i].message as string} (Source: ${this.state.errorObj[i].source})`)\n      }\n    }\n\n    const { Panel } = Collapse\n\n    const showErrorCount = (errcount: number): JSX.Element => (\n      <Badge count={errcount} />\n    )\n\n    const showWarningCount = (warncount: number): JSX.Element => (\n      <Badge color='green' count={warncount} />\n    )\n\n    Modal.info({\n      title: 'Debug Information\\n (Check console for more information)',\n      width: 800,\n      content: (\n        <Collapse>\n          <Panel\n            header='Communication Error'\n            key='communicationerror'\n            extra={showErrorCount(errorMsgs.Communication.length)}\n          >\n            <ol>\n              {errorMsgs.Communication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Data Encoding/Decoding error'\n            key='encodedecodeerror'\n            extra={showErrorCount(errorMsgs.EncodingDecoding.length)}\n          >\n            <ol>\n              {errorMsgs.EncodingDecoding.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Visualization error'\n            key='visualizationerror'\n            extra={showErrorCount(errorMsgs.Visualization.length)}\n          >\n            <ol>\n              {errorMsgs.Visualization.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Authentication error'\n            key='autherror'\n            extra={showErrorCount(errorMsgs.Authentication.length)}\n          >\n            <ol>\n              {errorMsgs.Authentication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Warning'\n            key='warning'\n            extra={showWarningCount(this.state.warnings.length)}\n          >\n            <ol>\n              {this.state.warnings.map(warning => (\n                <li key={uuidv4()}>{warning}</li>\n              ))}\n            </ol>\n          </Panel>\n        </Collapse>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  handleServerSelectionInput = (\n    event: React.FormEvent<HTMLInputElement>\n  ): void => {\n    const value = event.currentTarget.value\n    this.setState({\n      selectedServerUrl: value,\n      isServerSelectionDisabled: !this.isValidServerUrl(value)\n    })\n  }\n\n  handleServerSelectionCancellation = (): void => {\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    this.setState({\n      serverSelectionMode: cachedServerUrl !== null && cachedServerUrl !== '' ? 'custom' : 'default',\n      selectedServerUrl: cachedServerUrl ?? undefined,\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: !this.isValidServerUrl(cachedServerUrl)\n    })\n  }\n\n  handleServerSelectionModeChange = (e: any): void => {\n    const mode = e.target.value\n    this.setState({ serverSelectionMode: mode })\n  }\n\n  handleServerSelection = (): void => {\n    window.localStorage.setItem('slim_server_selection_mode', this.state.serverSelectionMode)\n\n    if (this.state.serverSelectionMode === 'default') {\n      this.props.onServerSelection({ url: '' })\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: false\n      })\n      return\n    }\n\n    const url = this.state.selectedServerUrl\n    let closeModal = false\n    if (url != null && url !== '') {\n      if (url.startsWith('http://') || url.startsWith('https://')) {\n        this.props.onServerSelection({ url })\n        closeModal = true\n      }\n    }\n    this.setState({\n      isServerSelectionModalVisible: !closeModal,\n      isServerSelectionDisabled: !closeModal\n    })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = { items: userMenuItems }\n      user = (\n        <Dropdown menu={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    const debugButton = (\n      <Badge count={this.state.errorObj.length} style={{ zIndex: 1000 }}>\n        <Badge color='green' count={this.state.warnings.length} style={{ zIndex: 1001 }}>\n          <Button\n            icon={SettingOutlined}\n            tooltip='Debug info'\n            onClick={this.handleDebugButtonClick}\n          />\n        </Badge>\n      </Badge>\n    )\n\n    const showDicomTagBrowser = this.props.location.pathname.includes('/studies/')\n\n    const dicomTagBrowserButton = showDicomTagBrowser\n      ? (\n        <Button\n          icon={FileSearchOutlined}\n          tooltip='Dicom Tag Browser'\n          onClick={this.handleDicomTagBrowserButtonClick}\n        />\n        )\n      : null\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    const selectedServerUrl = this.state.serverSelectionMode === 'custom'\n      ? this.state.selectedServerUrl\n      : this.props.clients?.default?.baseURL ?? this.props.defaultClients?.default?.baseURL\n\n    const urlInfo = selectedServerUrl != null && selectedServerUrl !== ''\n      ? (\n        <Tooltip title={selectedServerUrl}>\n          <div\n            style={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap',\n              paddingRight: '20px',\n              paddingLeft: '20px'\n            }}\n            title={selectedServerUrl}\n          >\n            {selectedServerUrl}\n          </div>\n        </Tooltip>\n        )\n      : null\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row style={{ flexWrap: 'nowrap' }}>\n            <Col style={{ flexShrink: 0 }}>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' style={{ minWidth: 0, overflow: 'hidden' }}>\n              <div style={{ width: '100%', overflow: 'hidden' }}>\n                {this.props.showServerSelectionButton ? urlInfo : ''}\n              </div>\n            </Col>\n            <Col style={{ flexShrink: 0 }}>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {debugButton}\n                {dicomTagBrowserButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          open={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={this.handleServerSelection}\n          onCancel={this.handleServerSelectionCancellation}\n        >\n          <Radio.Group\n            value={this.state.serverSelectionMode}\n            onChange={this.handleServerSelectionModeChange}\n            style={{ marginBottom: '16px' }}\n          >\n            <Radio value='default'>Use default server</Radio>\n            <Radio value='custom'>Use custom server</Radio>\n          </Radio.Group>\n\n          {this.state.serverSelectionMode === 'custom' && (\n            <Tooltip title={this.state.selectedServerUrl}>\n              <Input\n                placeholder='Enter base URL of DICOMweb Study Service'\n                value={this.state.selectedServerUrl}\n                onChange={this.handleServerSelectionInput}\n                onPressEnter={this.handleServerSelection}\n                addonAfter={\n                this.state.isServerSelectionDisabled\n                  ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                  : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                }\n              />\n            </Tooltip>\n          )}\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { Button, Input, Space, Table, TablePaginationConfig } from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'An error occured. Search for studies failed.'\n          )\n        )\n      })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Request to search for studies failed.'\n          )\n        )\n      })\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\nimport NotificationMiddleware,\n{ NotificationMiddlewareContext } from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nconst createUser = (userData: UserData | null): User => {\n  let profile\n  if (userData !== null) {\n    profile = userData.profile\n  }\n\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.AUTH,\n        new CustomError(\n          errorTypes.AUTHENTICATION,\n          'Failed to obtain user \"name\" and \"email\".'\n        )\n      )\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.AUTH,\n      new CustomError(\n        errorTypes.AUTHENTICATION,\n        'Failed to obtain user profile.'\n      )\n    )\n  }\n  return {\n    name: undefined,\n    email: undefined\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string|undefined> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user profile.'\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user information.'\n          )\n        )\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\nimport * as dcmjs from 'dcmjs'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\nimport DicomMetadataStore, { Instance } from './services/DICOMMetadataStore'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'At least one server needs to be configured.'\n          )\n        )\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Either path or full URL needs to be configured for server.'\n          )\n        )\n      }\n\n      const hasHttpsUrl = (url?: string): boolean => url?.startsWith('https') ?? false\n\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n\n      const shouldUpgradeInsecure = serverSettings.upgradeInsecureRequests === true && [\n        serviceUrl,\n        serverSettings.qidoPathPrefix,\n        serverSettings.wadoPathPrefix,\n        serverSettings.stowPathPrefix\n      ].some(hasHttpsUrl)\n\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n\n      if (shouldUpgradeInsecure) {\n        clientSettings.headers = {\n          ...clientSettings.headers,\n          'Content-Security-Policy': 'upgrade-insecure-requests'\n        }\n      }\n\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one store is supported for now.'\n        )\n      )\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const studySummaryMetadata = await this.stores[0].client.retrieveStudyMetadata(options)\n    const naturalized = naturalizeDataset(studySummaryMetadata)\n    DicomMetadataStore.addStudy(naturalized)\n    return studySummaryMetadata\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const seriesSummaryMetadata = await this.stores[0].client.retrieveSeriesMetadata(options)\n    const naturalized = seriesSummaryMetadata.map(naturalizeDataset)\n    DicomMetadataStore.addSeriesMetadata(naturalized, true)\n    return seriesSummaryMetadata\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    const instance = await this.stores[0].client.retrieveInstance(options)\n    const data = dcmjs.data.DicomMessage.readFile(instance)\n    const { dataset } = dmv.metadata.formatMetadata(data.dict)\n    DicomMetadataStore.addInstances([dataset as Instance])\n    return instance\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <CaseViewer\n      clients={clients}\n      user={user}\n      annotations={config.annotations}\n      preload={preload}\n      app={app}\n      enableAnnotationTools={enableAnnotationTools}\n      studyInstanceUID={studyInstanceUID}\n    />\n  )\n}\n\nfunction _createClientMapping ({ baseUri, gcpBaseUrl, settings, onError }: {\n  baseUri: string\n  gcpBaseUrl: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      if (window.location.pathname.includes('/projects/')) {\n        const pathname = window.location.pathname.split('/study/')[0]\n        const pathUrl = `${gcpBaseUrl}${pathname}/dicomWeb`\n        serverSettings.url = pathUrl\n      }\n\n      storageClassMapping.default += 1\n      clientMapping.default = new DicomWebManager({\n        baseUri,\n        settings: [serverSettings],\n        onError\n      })\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.COMMUNICATION,\n        'Only one default server can be configured without specification ' +\n        'of storage classes.'\n      )\n    )\n  }\n\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one configured server can specify a given storage class. ' +\n          `Storage class \"${key}\" is specified by more than one ` +\n          'of the configured servers.'\n        )\n      )\n    }\n  }\n\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n  }\n\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  defaultClients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'User is not authorized to access DICOMweb resources.')\n      )\n    }\n\n    const logServerError = (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'An unexpected server error occured.'\n        )\n      )\n    }\n\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          logServerError()\n        }\n      })\n    } else if (error.status === 500) {\n      logServerError()\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'One server needs to be configured.')\n      )\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n    this.addGcpSecondaryAnnotationServer(props.config)\n\n    const defaultClients = _createClientMapping({\n      baseUri,\n      gcpBaseUrl: props.config.gcpBaseUrl ?? 'https://healthcare.googleapis.com/v1',\n      settings: props.config.servers,\n      onError: this.handleDICOMwebError\n    })\n\n    this.state = {\n      clients: defaultClients,\n      defaultClients,\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  addGcpSecondaryAnnotationServer (config: AppProps['config']): void {\n    const serverId = 'gcp_secondary_annotation_server'\n    const urlParams = new URLSearchParams(window.location.search)\n    const url = urlParams.get('gcp')\n    const gcpSecondaryAnnotationServer = config.servers.find(\n      (server) => server.id === serverId\n    )\n    if (gcpSecondaryAnnotationServer === undefined && typeof url === 'string') {\n      config.servers.push({\n        id: serverId,\n        write: true,\n        url,\n        storageClasses: [\n          StorageClasses.COMPREHENSIVE_SR,\n          StorageClasses.COMPREHENSIVE_3D_SR,\n          StorageClasses.SEGMENTATION,\n          StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION,\n          StorageClasses.PARAMETRIC_MAP,\n          StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE,\n          StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n        ]\n      })\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    if (url === '' || window.localStorage.getItem('slim_server_selection_mode') === 'default') {\n      this.setState({ clients: this.state.defaultClients })\n      return\n    }\n    window.localStorage.setItem('slim_selected_server', url)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath !== null && storedPath !== '') {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch !== null && storedSearch !== '') {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Could not sign-in user.')\n        )\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path === null || path === '') {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n\n    // Restore cached server selection if it exists\n    const cachedServerUrl = window.localStorage.getItem('slim_selected_server')\n    if (cachedServerUrl !== null && cachedServerUrl !== '') {\n      this.handleServerSelection({ url: cachedServerUrl })\n    }\n\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n              clients={this.state.clients}\n              defaultClients={this.state.defaultClients}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/projects/:project/locations/:location/datasets/:dataset/dicomStores/:dicomStore/study/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                    clients={this.state.clients}\n                    defaultClients={this.state.defaultClients}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","PatientID","PatientName","PatientSex","PatientBirthDate","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","_subscriptions","Symbol","_lastSubscriptionId","PubSub","eventName","callback","Error","hasOwnProperty","subscriptionId","callbacks","payload","errorTypes","CustomError","type","message","stack","NotificationMiddlewareEvents","NotificationMiddlewareContext","NotificationType","NotificationSourceDefinition","sources","category","notificationType","outerContext","args","publish","Array","from","warn","console","JSON","stringify","arguments","includes","apply","prototype","slice","call","source","error","notificationMsg","errorCategory","find","s","String","notification","description","duration","state","isLoading","overviewViewportRef","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","info","ContainerIdentifier","dmv","client","clients","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","disableInteractions","resizeFactor","errorInterceptor","NotificationMiddleware","render","container","resize","style","height","containerIdentifier","ref","textAlign","display","alignItems","justifyContent","fontSize","color","letterSpacing","seriesInstanceUIDs","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","AnnotationGroupControls","settings","direction","placement","content","overlayStyle","shape","SettingOutlined","AnnotationGroupBadgeDescription","isBadgeVisible","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","annotationGroupUID","annotationGroup","handleAnnotationGroupClick","onAnnotationGroupClick","handleMeasurementSelection","handleOpacityChange","handleColorRChange","handleColorGChange","handleColorBChange","getCurrentColor","currentStyle","opacity","defaultStyle","onStyleChange","styleOptions","limitValues","isArray","option","codeComponents","measurement","schemeDesignator","meaning","colorSettings","windowSettings","explorationSettings","AnnotationGroupSequence","findIndex","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","AnnotationCoordinateType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","plain","justify","gutter","range","min","max","step","handleLowerLimitChange","handleLimitChange","handleUpperLimitChange","minWidth","defaultValue","annotationGroups","onAnnotationGroupVisibilityChange","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupStyleChange","handleClick","text","button","Icon","isSelected","tooltip","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","overflowY","handleRemoval","getCurrentColors","paletteColorLookupTable","previousProps","previousState","opticalPath","opticalPathIdentifier","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","specimenDescriptions","maxValue","Math","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","SeriesInstanceUID","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","mappingUID","mapping","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","segmentUID","segment","algorithmName","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","contourOnly","annotationGroupsUIDs","updateCurrentStyle","handleShowOutlineOnly","target","checkedAnnotationUids","defaultAnnotationStyles","types","checkAll","every","uids","indeterminate","some","handleChangeCheckedType","e","mouseEnterDelay","reduce","acc","marginLeft","shortenedCodeMeaning","displayCodeMeaning","isChecked","indeterminateType","flexDirection","categories","categoriesAcc","annotation","categoryKey","typeKey","oldCategory","oldType","Object","keys","typesArr","getCategories","xPosition","yPosition","position","top","left","backgroundColor","minHeight","pointerEvents","attr","roiUid","adaptRoiToAnnotation","result","user","app","refImage","observer","refSpecimen","debug","sr","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","trackingIdentifier","referencedRegion","graphicType","graphicData","qualitativeEvaluations","filter","ContentTemplateSequence","MappingResource","TemplateIdentifier","measurementReport","languageOfContentItemAndDescendants","procedureReported","isReportModalVisible","generatedReport","evidence","seriesNumber","seriesDescription","sopInstanceUID","instanceNumber","manufacturer","previousVersions","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","DEFAULT_ANNOTATION_STROKE_COLOR","DEFAULT_ANNOTATION_COLOR_PALETTE","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","_areROIsEqual","a","b","s1","s2","j","_formatRoiStyle","stroke","fill","image","circle","radius","_constructViewers","preload","volumeImages","labelViewer","volumeViewer","clientMapping","controls","activateSelectInteraction","labelImages","_implementsTID1500","templateSeq","_describesSpecimenSubject","subjectClassValue","retrievedConcept","expectedConcept","_containsROIAnnotations","measurementGroups","foundRegion","regions","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","hoveredRois","lastPixel","keysDown","Set","defaultRoiStyle","roiStyles","selectionStrokeColor","selectionFillColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","rawInstance","instance","SOPInstanceUID","retrieveInstance","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","selectedPresentationStateUID","setPresentationState","presentationStates","catch","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","activateOpticalPath","showOpticalPath","add","searchParams","URLSearchParams","search","set","pathname","replace","getRoiStyle","loadDerivedDataset","derivedDataset","SOPClassUID","getAllROIs","handleAnnotationVisibilityChange","getAllAnnotationGroups","handleAnnotationGroupVisibilityChange","getAllSegments","handleSegmentVisibilityChange","getAllParameterMappings","parameterMapping","handleMappingVisibilityChange","handleOpticalPathVisibilityChange","addAnnotationGroups","Promise","resolve","reject","MICROSCOPY_BULK_SIMPLE_ANNOTATION","searchForSeries","matchedSeries","series","retrieveSeriesMetadata","retrievedMetadata","ann","finding","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","forceUpdate","addSegmentations","SEGMENTATION","segmentations","seg","FrameOfReferenceUID","addSegments","addParametricMaps","PARAMETRIC_MAP","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","addAnnotations","onRoiModified","onWindowResize","onRoiDrawn","detail","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","addROI","onRoiDoubleClicked","isSelectedRoiModalVisible","setHoveredRoiAttributes","r","hoveredRoiAttributes","clearHoveredRois","getUniqueHoveredRois","newRoi","allRois","isSamePixelAsLast","clientX","clientY","onPointerMove","hoveredRoi","feature","originalEvent","isHoveredRoiTooltipVisible","hoveredRoiTooltipX","hoveredRoiTooltipY","getUpdatedSelectedRois","newSelectedRoiUid","selectedRoiUid","emptySelection","selectedRoi","getROI","oldSelectedRois","resetUnselectedRoiStyles","selectionState","setROIStyle","onMapClicked","updatedSelectedRois","clearSelections","onRoiSelected","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingError","onLoadingError","onFrameLoadingEnded","delete","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","onKeyDown","onKeyUp","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","isAnnotationModalVisible","isGoToModalVisible","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","zoomToROI","handleICCProfilesToggle","isICCProfilesEnabled","toggleICCProfiles","formatAnnotation","generateRoiStyle","geometryTypes","componentSetup","componentCleanup","handleRoiSelectionCancellation","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationGroupStyleChange","handleRoiStyleChange","handleXCoordinateSelection","handleYCoordinateSelection","handleMagnificationSelection","handleSlidePositionSelection","handleSlidePositionSelectionCancellation","handleReportVerification","handleReportCancellation","handleSegmentStyleChange","handleMappingStyleChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","handleAnnotationSelection","boundingBox","isSelectedMagnificationValid","isSelectedXCoordinateValid","isSelectedYCoordinateValid","selectedXCoordinate","validXCoordinateRange","selectedYCoordinate","validYCoordinateRange","selectedMagnification","areRoisHidden","cleanup","isOpticalPathVisible","isOpticalPathActive","COMPREHENSIVE_3D_SR","otherROI","roiAsAnnotation","document","body","removeEventListener","window","addEventListener","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","selectedMarkup","filteredEvaluations","x","Number","start","end","y","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","point","log","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","prevState","generateReport","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","showAnnotationGroup","hideAnnotationGroup","strokeColor","fillColor","c","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","sort","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","showROIs","hideROIs","allAnnotationGroups","filteredAnnotationGroups","referencedSeriesInstanceUID","annotationMenuItems","openSubMenuItems","geometryTypeOptionsMapping","box","polygon","line","freehandpolygon","freehandline","annotationConfigurations","defaultActiveFirstOption","placeholder","onClear","specimenMenu","equipmentMenu","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","selectedRoiInformation","cursor","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","iccProfilesMenu","getICCProfiles","margin","hasSider","overflow","open","onOk","okButtonProps","onCancel","okText","maskClosable","footer","prefix","onPressEnter","addonAfter","CheckOutlined","StopOutlined","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","setTimeout","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","areSameAcquisition","AcquisitionUID","Slide","options","acquisitionUID","opticalPathIdentifiers","pyramidUIDs","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","PyramidUID","THUMBNAIL","img","opt","samplesPerPixel","SamplesPerPixel","requirePyramidUID","PhotometricInterpretation","createSlides","slideMetadata","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","imgA","imgB","fetchImageMetadata","onSuccess","onError","StudyInstanceUID","all","loadingSeries","seriesImages","newSlides","customError","slidesCache","Map","pendingRequests","useSlides","useState","setSlides","setIsLoading","setError","useEffect","cachedData","get","fetchSlides","pendingRequest","err","naturalizeDataset","findSeriesSlide","ParametrizedSlideViewer","selectedSlide","setSelectedSlide","setDerivedDataset","seriesSlide","findReferencedSlide","allClients","storageClass","seriesMetadata","naturalizedSeriesMetadata","ReferencedSeriesSequence","referencedSlide","imageLibrary","contentItem","referencedSOPInstanceUID","presentationStateUID","viewer","volumeInstances","clinicalTrialMenu","seriesFragment","borderRight","borderRightWidth","path","element","DicomMetaDictionary","formatValue","val","getRows","depth","keywords","flatMap","keyword","tagInfo","nameMap","match","tag","sequenceItems","sequenceNode","getSortedTags","subscribe","_broadcastEvent","_unsubscribe","_isValidEvent","listenerId","subscription","listeners","unsubscribe","EVENTS","callbackProps","hasListeners","hasCallbacks","listener","defaultInstances","instances","instancesMap","SeriesNumber","SeriesDescription","SeriesDate","SeriesTime","addInstance","newInstance","addInstances","newInstances","len","getInstance","StudyDescription","NumInstances","ModalitiesInStudy","isLoaded","addInstanceToSeries","addInstancesToSeries","createSeriesMetadata","setSeriesMetadata","existingSeries","assign","STUDY_ADDED","INSTANCES_ADDED","SERIES_ADDED","SERIES_UPDATED","_model","studies","_getStudy","aStudy","_getSeries","study","aSeries","BaseImplementation","dicomJSONDatasetOrP10ArrayBuffer","dicomJSONDataset","naturalizedDataset","ArrayBuffer","createStudyMetadata","madeInClient","updateSeriesMetadata","addSeriesMetadata","seriesSummaryMetadata","NumberOfStudyRelatedSeries","addStudy","existingStudy","newStudy","getStudyInstanceUIDs","getStudy","getSeries","getInstanceByImageId","imageId","updateMetadataForSeries","pubSubServiceInterface","setStudy","displaySets","setDisplaySets","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","expandedKeys","setExpandedKeys","searchInput","setSearchInput","debouncedSearchValue","delay","debouncedValue","setDebouncedValue","timer","clearTimeout","useDebounce","handler","DicomMetadataStore","seriesAddedSubscription","instancesAddedSubscription","derivedDisplaySets","processedSeries","ds","displaySetInstanceUID","displaySetList","useMemo","displaySet","displayDate","dateStr","hour","minute","second","monthNum","parseInt","dayNum","date","Date","getMonth","getDate","weekday","toLocaleDateString","monthName","dayFormatted","yearNum","getFullYear","formatDicomDate","showInstanceList","instanceSliderMarks","totalInstances","tableData","transformTagsToTableData","tags","parentKey","keyBase","currentKey","filteredData","searchLower","toLowerCase","matchedKeys","nodeMatches","node","findMatchingPaths","parentPath","currentPath","matchingPaths","child","childPaths","filtered","reconstructTree","paths","nodesAtLevel","className","gap","marginBottom","flex","strong","optionLabelProp","optionFilterProp","marks","formatter","SearchOutlined","columns","dataIndex","dataSource","pagination","expandable","expandedRowKeys","onExpandedRowsChange","scroll","isValidServerUrl","url","urlObj","URL","protocol","startsWith","TypeError","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleDicomTagBrowserButtonClick","innerWidth","handleDebugButtonClick","errorMsgs","Authentication","Communication","EncodingDecoding","Visualization","errorNum","errorObj","warncount","Panel","Collapse","showErrorCount","errcount","uuidv4","warnings","warning","handleServerSelectionButtonClick","isServerSelectionModalVisible","handleServerSelectionInput","currentTarget","selectedServerUrl","isServerSelectionDisabled","handleServerSelectionCancellation","cachedServerUrl","localStorage","getItem","serverSelectionMode","handleServerSelectionModeChange","handleServerSelection","setItem","onServerSelection","closeModal","cachedMode","prevProps","worklistButton","userMenuItems","onUserLogout","userMenu","menu","trigger","UserOutlined","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","debugButton","zIndex","dicomTagBrowserButton","FileSearchOutlined","showServerSelectionButton","ApiOutlined","default","baseURL","defaultClients","urlInfo","textOverflow","paddingRight","flexWrap","flexShrink","src","process","alt","subTitle","defaultPageSize","handleSearch","confirm","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","filterIcon","fetchData","handleChange","numStudies","pageSize","searchOptions","searchForStudies","limit","searchCriteria","fuzzymatching","filters","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","record","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","status","errorMessage","attemptFailedError","DicomWebManager","stores","handleError","updateHeaders","fields","f","headers","retrieveStudyMetadata","studySummaryMetadata","naturalized","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","shouldUpgradeInsecure","upgradeInsecureRequests","qidoPathPrefix","wadoPathPrefix","stowPathPrefix","qidoURLPrefix","wadoURLPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","read","dwc","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","auth","handleDICOMwebError","logServerError","errorMessages","setting","Authorization","storedPath","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","addGcpSecondaryAnnotationServer","gcpBaseUrl","storageClassMapping","storageClasses","pathUrl","server","_createClientMapping","wasAuthSuccessful","serverId","COMPREHENSIVE_SR","COLOR_SOFTCOPY_PRESENTATION_STATE","GRAYSCALE_SOFTCOPY_PRESENTATION_STATE","PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE","tmpClient","redirectTo","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}