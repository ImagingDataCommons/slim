{"version":3,"file":"static/js/687.cd0a08b4.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","data/uids.tsx","utils/PubSub.js","utils/CustomError.js","services/NotificationMiddleware.js","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","utils/router.tsx","components/ColorSettingsMenu.tsx","components/AnnotationCategoryItem.tsx","components/AnnotationCategoryList.tsx","components/HoveredRoiTooltip.tsx","services/RoiToAnnotationAdapter.ts","components/SlideViewer.tsx","data/slides.tsx","services/fetchImageMetadata.ts","hooks/useSlides.ts","components/CaseViewer.tsx","components/DicomTagBrowser/dicomTagUtils.ts","utils/formatDicomDate.ts","utils/pubSubServiceInterface.ts","utils/createSeriesMetadata.ts","utils/createStudyMetadata.ts","services/DICOMMetadataStore.ts","hooks/useDebounce.ts","components/DicomTagBrowser/DicomTagBrowser.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Gender',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","export enum StorageClasses {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","// Use symbols to prevent exposing private attributes\nconst _subscriptions = Symbol('subscriptions')\nconst _lastSubscriptionId = Symbol('lastSubscriptionId')\n\n/**\n * Class to enable implementation of publish/subscribe pattern\n * @class\n * @classdesc Enables publishing/subscribing\n */\nexport default class PubSub {\n  constructor () {\n    this[_subscriptions] = {}\n    this[_lastSubscriptionId] = 0\n  }\n\n  /**\n   * Adds a subscription callback to the provided event name\n   * @param {string} eventName Event name that will trigger the callback\n   * @param {Function} callback Function to be executed when event is published\n   * @returns {void}\n   */\n  subscribe (eventName, callback) {\n    if (eventName === undefined) {\n      throw new Error('Trying to subscribe to an inexistent event')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('The provided callback must be a function')\n    }\n\n    if (!this[_subscriptions].hasOwnProperty(eventName)) {\n      this[_subscriptions][eventName] = {}\n    }\n\n    const subscriptionId = `sub${this[_lastSubscriptionId]++}`\n    this[_subscriptions][eventName][subscriptionId] = callback\n  }\n\n  /**\n   * Removes a subscription callback for the provided event name\n   * @param {string} eventName Event name for the registerd callback\n   * @param {Function} [callback] Function to have its subscription removed\n   * @returns {void}\n   */\n  unsubscribe (eventName, callback) {\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      if (!callback) {\n        delete callbacks[subscriptionId]\n      } else if (callbacks[subscriptionId] === callback) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n\n  /**\n   * Trigger all registered subscription callbacks for a specific event name\n   * @param {String} eventName Event name to trigger subscriptions from\n   * @param {any} [payload] Payload that will be passed to the callback fuction\n   * @returns {void}\n   */\n  publish (eventName, ...payload) {\n    if (eventName === undefined) {\n      throw new Error('Trying to publish an inexistent event')\n    }\n\n    const callbacks = this[_subscriptions][eventName] || {}\n    for (const subscriptionId in callbacks) {\n      callbacks[subscriptionId](...payload)\n    }\n  }\n\n  /**\n   * Cleares all subscriptions for current instance\n   * @returns {void}\n   */\n  unsubscribeFromAll () {\n    for (const eventName in this[_subscriptions]) {\n      const callbacks = this[_subscriptions][eventName]\n      for (const subscriptionId in callbacks) {\n        delete callbacks[subscriptionId]\n      }\n    }\n  }\n}\n","const errorTypes = {\n  AUTHENTICATION: 'Authentication',\n  COMMUNICATION: 'Communication',\n  ENCODINGANDDECODING: 'EncodingDecoding',\n  VISUALIZATION: 'Visualization'\n}\n\nclass CustomError extends Error {\n  constructor (type, message) {\n    super()\n    this.message = message\n    this.stack = new Error().stack\n    this.type = type\n  }\n}\n\nexport { errorTypes, CustomError }\n","import PubSub from '../utils/PubSub'\nimport { notification } from 'antd'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nexport const NotificationMiddlewareEvents = {\n  OnError: 'onError',\n  OnWarning: 'onWarning'\n}\n\nexport const NotificationMiddlewareContext = {\n  DICOMWEB: 'dicomweb-client',\n  DMV: 'dicom-microscopy-viewer',\n  DCMJS: 'dcmjs',\n  SLIM: 'slim',\n  AUTH: 'authentication'\n}\n\nconst NotificationType = {\n  TOAST: 'toast',\n  CONSOLE: 'console'\n}\n\n/* Sources of Error:\n  1. 'dicomweb-client': Error while requesting/fetching data, tagged as 'Communication'\n  2. 'slim' and 'dicom-microscopy-viewer' library: Error related to dicom data encoding/decoding,\n  could directly/indirectly impact image-related visualization, tagged as 'Visualization' or\n  'Encoding/Decoding' accordingly\n  3. 'dcmjs' library: Data parsing error, tagged as 'DICOMError'\n  4. 'authentication': Error during user authentication, tagged as 'Authentication'\n  */\nconst NotificationSourceDefinition = {\n  sources: [\n    {\n      category: errorTypes.AUTHENTICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.COMMUNICATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.VISUALIZATION,\n      notificationType: NotificationType.TOAST\n    },\n    {\n      category: errorTypes.ENCODINGANDDECODING,\n      notificationType: NotificationType.CONSOLE\n    },\n    {\n      category: 'Warning',\n      notificationType: NotificationType.TOAST\n    }\n  ]\n}\n\nclass NotificationMiddleware extends PubSub {\n  constructor () {\n    super()\n\n    const outerContext = (args) => {\n      this.publish(NotificationMiddlewareEvents.OnWarning, Array.from(args).join(' '))\n    }\n\n    (function () {\n      const warn = console.warn\n      console.warn = function () {\n        if (!JSON.stringify(arguments).includes('request')) {\n          outerContext(arguments)\n        }\n        warn.apply(this, Array.prototype.slice.call(arguments))\n      }\n    }())\n  }\n\n  /**\n   * Error handling middleware function\n   *\n   * @param source - source of error - dicomweb-client, dmv, dcmjs or slim itself\n   * @param error - error object\n   */\n  onError (source, error) {\n    const errorCategory = error.type\n    const sourceConfig = NotificationSourceDefinition.sources.find(\n      s => s.category === errorCategory\n    )\n\n    const { notificationType } = sourceConfig\n\n    this.publish(NotificationMiddlewareEvents.OnError, {\n      source,\n      error\n    })\n\n    let notificationMsg\n    if (error instanceof CustomError) {\n      notificationMsg = error.message\n    } else {\n      notificationMsg = String(error)\n    }\n\n    switch (notificationType) {\n      case NotificationType.TOAST:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        return notification.error({\n          message: `${errorCategory} error`,\n          description: notificationMsg,\n          duration: 3\n        })\n\n      case NotificationType.CONSOLE:\n        console.error(`A ${errorCategory} error occurred: `, error)\n        break\n\n      default:\n    }\n  }\n}\n\nexport default new NotificationMiddleware()\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\n\ninterface SlideItemProps {\n  clients: { [key: string]: DicomWebManager }\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = { isLoading: false }\n\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewportRef.current !== null) {\n        this.overviewViewportRef.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of slide ' +\n          `\"${metadata.ContainerIdentifier}\"`\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.clients[\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ],\n          metadata: metadata,\n          resizeFactor: 1,\n          errorInterceptor: (error: CustomError) => {\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.DMV,\n              error\n            )\n          }\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewportRef.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.resize()\n    }\n    const attributes = []\n    const description = this.props.slide.description\n    if (description != null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          {(this.overviewViewportRef.current != null) && <div style={{ height: '100px' }} ref={this.overviewViewportRef} />}\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  clients: { [key: string]: DicomWebManager }\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          clients={this.props.clients}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: ({ roiUID }: { roiUID: string }) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection({ roiUID: object.key })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n    color: number[]\n  }\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    limitValues?: number[]\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({\n        currentStyle: {\n          opacity: value,\n          color: this.state.currentStyle.color,\n          limitValues: this.state.currentStyle.limitValues\n        }\n      })\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      uid: this.props.annotationGroup.uid,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value != null && option.children != null) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.props.onStyleChange({\n        uid: this.props.annotationGroup.uid,\n        styleOptions: {\n          color: this.props.defaultStyle.color\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          color: this.props.defaultStyle.color,\n          limitValues: undefined\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      // {\n      //   name: 'Algorithm Name',\n      //   value: this.props.annotationGroup.algorithmName\n      // },\n      {\n        name: 'Graphic type',\n        value: item.GraphicType\n      },\n      {\n        name: 'Annotation coordinate type',\n        value: this.props.metadata.AnnotationCoordinateType\n      }\n    ]\n\n    const measurementsSequence = item.MeasurementsSequence ?? []\n    const measurementOptions = measurementsSequence.map((measurementItem, i) => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      return (\n        <Select.Option\n          key={i}\n          value={`${name.CodingSchemeDesignator}-${name.CodeValue}`}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    })\n    measurementOptions.push(\n      <Select.Option\n        key='-'\n        value={undefined}\n        dropdownMatchSelectWidth={false}\n        size='small'\n        disabled={!this.props.isVisible}\n      >\n        <></>\n      </Select.Option>\n    )\n\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>\n            Color\n          </Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Red\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Green\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>\n              Blue\n            </Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    let windowSettings\n    let explorationSettings\n    if (measurementsSequence.length > 0) {\n      if (this.state.currentStyle.limitValues != null) {\n        // TODO: need to get default min/max values from viewer first\n        const minValue = 0\n        const maxValue = 1000\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={minValue}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      explorationSettings = (\n        <>\n          <Divider plain>\n            Exploration\n          </Divider>\n          <Row justify='start' align='middle' gutter={[8, 8]}>\n            <Col span={8}>\n              Measurement\n            </Col>\n            <Col span={16}>\n              <Select\n                style={{ minWidth: '65px', width: '90%' }}\n                onSelect={this.handleMeasurementSelection}\n                key='annotation-group-measurements'\n                defaultValue={undefined}\n              >\n                {measurementOptions}\n              </Select>\n            </Col>\n          </Row>\n        </>\n      )\n    }\n\n    const settings = (\n      <div>\n        {colorSettings}\n        {windowSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        {explorationSettings}\n      </div>\n    )\n\n    const color = this.getCurrentColor()\n    const isBadgeVisible = (\n      this.state.isVisible && this.state.currentStyle.measurement == null\n    )\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Badge\n            offset={[-20, 20]}\n            count={' '}\n            style={{\n              borderStyle: 'solid',\n              borderWidth: '1px',\n              borderColor: 'gray',\n              visibility: isBadgeVisible ? 'visible' : 'hidden',\n              backgroundImage: `linear-gradient(to bottom, ${color}, ${color}`\n            }}\n          >\n            <Description\n              header={this.props.annotationGroup.label}\n              attributes={attributes}\n              selectable\n              hasLongValues\n            />\n          </Badge>\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n      color: number[]\n    }\n  }\n  onAnnotationGroupVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<AnnotationGroupListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.ENCODINGANDDECODING,\n        'Content item \"Imaging Measurements\" not found.' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\".'\n      )\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Tracking Unique Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Finding\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Image Region\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: any\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Content item \"Image Region\" has unknown graphic type ' +\n            `\"${regionItem.GraphicType}\". ` +\n            'Content of Comprehensive 3D SR document is not structured ' +\n            'based on TID 1500 \"Measurement Report\" -> ' +\n            'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n          )\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen UID\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Content item \"Specimen Container Identifier\" not found. ' +\n          'Content of Comprehensive 3D SR document is not structured based on ' +\n          'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n          'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n        )\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number | null\n  ): void {\n    if (value != null) {\n      const identifier = this.props.opticalPath.identifier\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { opacity: value }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          color: state.currentStyle.color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: value,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n    }\n  }\n\n  handleColorRChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[] | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number | null\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (value != null && this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    try {\n      specimenDescriptions.forEach(description => {\n        const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] =\n          description.SpecimenPreparationSequence ?? []\n        specimenPreparationSteps.forEach(\n          (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n            step.SpecimenPreparationStepContentItemSequence.forEach((\n              item: (\n                dcmjs.sr.valueTypes.CodeContentItem |\n                dcmjs.sr.valueTypes.TextContentItem |\n                dcmjs.sr.valueTypes.UIDRefContentItem |\n                dcmjs.sr.valueTypes.PNameContentItem |\n                dcmjs.sr.valueTypes.DateTimeContentItem\n              ),\n              index: number\n            ) => {\n              const name = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptNameCodeSequence[0].CodeValue,\n                schemeDesignator:\n                    item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n              })\n              if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n                item = item as dcmjs.sr.valueTypes.CodeContentItem\n                const value = new dcmjs.sr.coding.CodedConcept({\n                  value: item.ConceptCodeSequence[0].CodeValue,\n                  schemeDesignator:\n                      item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                  meaning: item.ConceptCodeSequence[0].CodeMeaning\n                })\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: value.CodeMeaning\n                    })\n                  }\n                }\n              } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n                item = item as dcmjs.sr.valueTypes.TextContentItem\n                if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                  if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                    attributes.push({\n                      name: 'Tissue stain',\n                      value: item.TextValue\n                    })\n                  }\n                }\n              }\n            })\n          }\n        )\n      })\n    } catch (error: any) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DCMJS,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          error.message\n        )\n      )\n    }\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        mappingUID: this.props.mapping.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: value\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Description',\n        value: this.props.mapping.description\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={this.props.mapping.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.onStyleChange({\n        segmentUID: this.props.segment.uid,\n        styleOptions: {\n          opacity: value\n        }\n      })\n      this.setState({ currentStyle: { opacity: value } })\n    }\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","import React from 'react'\nimport { Checkbox, Col, Divider, InputNumber, Row, Slider } from 'antd'\n\ninterface ColorSettingsMenuProps {\n  annotationGroupsUIDs: string[]\n  defaultStyle: {\n    opacity: number\n    color: number[]\n    contourOnly: boolean\n  }\n  onStyleChange: Function\n}\n\ninterface ColorSettingsMenuState {\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    contourOnly: boolean\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass ColorSettingsMenu extends React.Component<\nColorSettingsMenuProps,\nColorSettingsMenuState\n> {\n  constructor (props: ColorSettingsMenuProps) {\n    super(props)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.getCurrentColor = this.getCurrentColor.bind(this)\n    this.state = {\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        contourOnly: this.props.defaultStyle.contourOnly\n      }\n    }\n  }\n\n  handleOpacityChange (value: number | null): void {\n    if (value != null) {\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: this.state.currentStyle.color,\n            opacity: value,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n      this.updateCurrentStyle({ opacity: value })\n    }\n  }\n\n  handleColorRChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorGChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleColorBChange (value: number | number[] | null): void {\n    if (value != null && this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.updateCurrentStyle({ color })\n      this.props.annotationGroupsUIDs.forEach((uid) => {\n        this.props.onStyleChange({\n          uid,\n          styleOptions: {\n            color: color,\n            opacity: this.state.currentStyle.opacity,\n            contourOnly: this.state.currentStyle.contourOnly\n          }\n        })\n      })\n    }\n  }\n\n  handleShowOutlineOnly (value: boolean): void {\n    this.updateCurrentStyle({ contourOnly: value })\n\n    this.props.annotationGroupsUIDs.forEach((uid) => {\n      this.props.onStyleChange({\n        uid,\n        styleOptions: {\n          color: this.state.currentStyle.color,\n          opacity: this.state.currentStyle.opacity,\n          contourOnly: value\n        }\n      })\n    })\n  }\n\n  getCurrentColor (): string {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.state.currentStyle.color != null) {\n      return rgb2hex(this.state.currentStyle.color)\n    } else {\n      return 'white'\n    }\n  }\n\n  updateCurrentStyle ({\n    color,\n    opacity,\n    contourOnly\n  }: {\n    color?: number[]\n    opacity?: number\n    contourOnly?: boolean\n  }): void {\n    this.setState((state) => ({\n      currentStyle: {\n        opacity: opacity ?? state.currentStyle.opacity,\n        color: color ?? state.currentStyle.color,\n        contourOnly: contourOnly ?? state.currentStyle.contourOnly\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    let colorSettings\n    if (this.state.currentStyle.color != null) {\n      colorSettings = (\n        <>\n          <Divider plain>Color</Divider>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Red</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[0]}\n                onChange={this.handleColorRChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Green</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[1]}\n                onChange={this.handleColorGChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={5}>Blue</Col>\n            <Col span={14}>\n              <Slider\n                range={false}\n                min={0}\n                max={255}\n                step={1}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n            <Col span={5}>\n              <InputNumber\n                min={0}\n                max={255}\n                size='small'\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.color[2]}\n                onChange={this.handleColorBChange}\n              />\n            </Col>\n          </Row>\n          <Divider plain />\n        </>\n      )\n    }\n\n    return (\n      <div>\n        {colorSettings}\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>Opacity</Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Checkbox\n            value={this.state.currentStyle.contourOnly}\n            onChange={(event) =>\n              this.handleShowOutlineOnly(event.target.checked)}\n          >\n            Show outline only\n          </Checkbox>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default ColorSettingsMenu\n","import React from 'react'\nimport { Menu, Space, Checkbox, Tooltip, Popover, Button } from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { Category, Type } from './AnnotationCategoryList'\nimport ColorSettingsMenu from './ColorSettingsMenu'\n\nconst AnnotationCategoryItem = ({\n  category,\n  onChange,\n  checkedAnnotationUids,\n  onStyleChange,\n  defaultAnnotationStyles\n}: {\n  category: Category\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const { types } = category\n\n  const onCheckCategoryChange = (e: any): void => {\n    const isVisible = e.target.checked\n    types.forEach((type: Type) => {\n      handleChangeCheckedType({ type, isVisible })\n    })\n  }\n\n  const checkAll = types.every((type: Type) =>\n    type.uids.every((uid: string) => checkedAnnotationUids.has(uid))\n  )\n  const indeterminate =\n    !checkAll &&\n    types.some((type: Type) =>\n      type.uids.some((uid: string) => checkedAnnotationUids.has(uid))\n    )\n\n  const handleChangeCheckedType = ({\n    type,\n    isVisible\n  }: {\n    type: Type\n    isVisible: boolean\n  }): void => {\n    type.uids.forEach((uid: string) => {\n      onChange({ roiUID: uid, isVisible })\n    })\n  }\n\n  return (\n    <Menu.Item\n      style={{ height: '100%', paddingLeft: '3px' }}\n      key={category.CodeMeaning}\n    >\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px', color: 'black' }}>\n          <Space direction='vertical' align='end'>\n            <Checkbox\n              indeterminate={indeterminate}\n              checked={checkAll}\n              onChange={onCheckCategoryChange}\n            >\n              <Tooltip\n                title={`${category.CodeValue}:${category.CodingSchemeDesignator}`}\n                mouseEnterDelay={1}\n              >\n                {category.CodeMeaning}\n              </Tooltip>\n              <Popover\n                placement='topLeft'\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n                content={() => (\n                  <ColorSettingsMenu\n                    annotationGroupsUIDs={types.reduce(\n                      (acc: string[], type) => {\n                        return [...acc, ...type.uids]\n                      },\n                      []\n                    )}\n                    onStyleChange={onStyleChange}\n                    defaultStyle={\n                      defaultAnnotationStyles[types[0].uids[0]]\n                    }\n                  />\n                )}\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  style={{ marginLeft: '10px' }}\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Checkbox>\n          </Space>\n          {types.map((type: Type) => {\n            const { CodeMeaning, CodingSchemeDesignator, CodeValue, uids } =\n              type\n            const shortenedCodeMeaning = CodeMeaning.slice(0, 22)\n            const displayCodeMeaning = shortenedCodeMeaning === CodeMeaning ? CodeMeaning : `${shortenedCodeMeaning}...`\n            const isChecked = uids.every((uid: string) =>\n              checkedAnnotationUids.has(uid)\n            )\n            const indeterminateType =\n              !isChecked &&\n              uids.some((uid: string) => checkedAnnotationUids.has(uid))\n            return (\n              <div\n                key={`${type.CodingSchemeDesignator}:${type.CodeMeaning}`}\n                style={{\n                  paddingLeft: '25px',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'row'\n                }}\n              >\n                <Checkbox\n                  indeterminate={indeterminateType}\n                  checked={isChecked}\n                  onChange={(e: any) =>\n                    handleChangeCheckedType({\n                      type,\n                      isVisible: e.target.checked\n                    })}\n                />\n                <div style={{ paddingLeft: '5px' }}>\n                  <Tooltip\n                    title={`${CodeValue}:${CodingSchemeDesignator}`}\n                    mouseEnterDelay={1}\n                  >\n                    {displayCodeMeaning}\n                  </Tooltip>\n                  <Popover\n                    placement='topLeft'\n                    overlayStyle={{ width: '350px' }}\n                    title='Display Settings'\n                    content={() => (\n                      <ColorSettingsMenu\n                        annotationGroupsUIDs={type.uids}\n                        onStyleChange={onStyleChange}\n                        defaultStyle={defaultAnnotationStyles[type.uids[0]]}\n                      />\n                    )}\n                  >\n                    <Button\n                      type='primary'\n                      shape='circle'\n                      style={{ marginLeft: '10px' }}\n                      icon={<SettingOutlined />}\n                    />\n                  </Popover>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </Space>\n    </Menu.Item>\n  )\n}\n\nexport default AnnotationCategoryItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport AnnotationCategoryItem from './AnnotationCategoryItem'\n\nexport interface AnnotationCategoryAndType {\n  uid: string\n  type: Omit<Type, 'uids'>\n  category: Omit<Category, 'types'>\n}\nexport interface Type {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  uids: string[]\n}\nexport interface Category {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  types: Type[]\n}\n\nconst getCategories = (annotations: any): Record<string, Category> => {\n  const categories = annotations?.reduce(\n    (\n      categoriesAcc: Record<string, Category & { types: Record<string, Type> }>,\n      annotation: AnnotationCategoryAndType\n    ) => {\n      const { category, type, uid } = annotation\n      const categoryKey = category.CodeMeaning\n      const typeKey = type.CodeMeaning\n\n      const oldCategory = categoriesAcc[categoryKey] ?? {\n        ...category,\n        types: {}\n      }\n      const oldType = oldCategory.types[typeKey] ?? {\n        ...type,\n        uids: []\n      }\n\n      return {\n        ...categoriesAcc,\n        [categoryKey]: {\n          ...oldCategory,\n          types: {\n            ...oldCategory.types,\n            [typeKey]: { ...oldType, uids: [...oldType.uids, uid] }\n          }\n        }\n      }\n    },\n    {}\n  )\n\n  // Normalizing types so that it's an array instead of an object:\n  Object.keys(categories).forEach((categoryKey: string) => {\n    const category = categories[categoryKey]\n    const { types } = category\n    const typesArr = Object.keys(types).map(\n      (typeKey: string) => types[typeKey]\n    )\n    categories[categoryKey].types = typesArr\n  })\n\n  return categories\n}\n\nconst AnnotationCategoryList = ({\n  annotations,\n  onChange,\n  onStyleChange,\n  defaultAnnotationStyles,\n  checkedAnnotationUids\n}: {\n  annotations: AnnotationCategoryAndType[]\n  onChange: Function\n  onStyleChange: Function\n  defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }\n  checkedAnnotationUids: Set<string>\n}): JSX.Element => {\n  const categories: Record<string, Category> = getCategories(annotations)\n\n  if (Object.keys(categories).length === 0) {\n    return <></>\n  }\n\n  const items = Object.keys(categories).map((categoryKey: any) => {\n    const category = categories[categoryKey]\n    return (\n      <AnnotationCategoryItem\n        key={category.CodeMeaning}\n        category={category}\n        onChange={onChange}\n        onStyleChange={onStyleChange}\n        defaultAnnotationStyles={defaultAnnotationStyles}\n        checkedAnnotationUids={checkedAnnotationUids}\n      />\n    )\n  })\n\n  return <Menu selectable={false}>{items}</Menu>\n}\nexport default AnnotationCategoryList\n","const HoveredRoiTooltip = ({\n  xPosition,\n  yPosition,\n  rois\n}: {\n  xPosition: number\n  yPosition: number\n  rois: Array<{ index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n}): JSX.Element => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: `${yPosition}px`,\n        left: `${xPosition}px`,\n        backgroundColor: 'rgba(230, 230, 230, 0.65)',\n        minWidth: '150px',\n        minHeight: '60px',\n        padding: '20px',\n        fontWeight: 'bold',\n        pointerEvents: 'none'\n      }}\n    >\n      {rois.map((roi, i) => {\n        const attributes = roi.attributes\n        return (\n          <div key={roi.roiUid}>\n            <span>ROI {roi.index}</span>\n            {attributes.map((attr) => {\n              return (\n                <div key={attr.name + roi.roiUid}>\n                  {attr.name}: <span style={{ fontWeight: 500 }}>{attr.value}</span>\n                </div>\n              )\n            })}\n          </div>\n\n        )\n      })}\n    </div>\n  )\n}\n\nexport default HoveredRoiTooltip\n","import * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { AnnotationCategoryAndType } from '../components/AnnotationCategoryList'\n\nexport const adaptRoiToAnnotation = (roi: dmv.roi.ROI): AnnotationCategoryAndType => {\n  const { uid, evaluations } = roi\n\n  const result = {\n    category: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    },\n    type: {\n      CodeValue: 'undefined',\n      CodeMeaning: 'undefined',\n      CodingSchemeDesignator: 'undefined'\n    }\n  }\n\n  evaluations.forEach((\n    item: (\n      dcmjs.sr.valueTypes.TextContentItem |\n      dcmjs.sr.valueTypes.CodeContentItem\n    )\n  ) => {\n    const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n    if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n      const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n      const value = codeContentItem.ConceptCodeSequence[0]\n      // For consistency with Segment and Annotation Group\n      if (nameValue === '276214006') {\n        result.category = { ...value }\n      } else if (nameValue === '121071') {\n        result.type = { ...value }\n      }\n    }\n  })\n\n  return {\n    ...result,\n    uid\n  }\n}\n","import React from 'react'\nimport {\n  FaCrosshairs,\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  Descriptions,\n  Divider,\n  InputNumber,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space,\n  Tooltip\n} from 'antd'\nimport { UndoOutlined, CheckOutlined, StopOutlined } from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Equipment from './Equipment'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { Slide } from '../data/slides'\nimport { StorageClasses } from '../data/uids'\nimport { findContentItemsByName } from '../utils/sr'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\nimport AnnotationCategoryList from './AnnotationCategoryList'\nimport HoveredRoiTooltip from './HoveredRoiTooltip'\nimport { adaptRoiToAnnotation } from '../services/RoiToAnnotationAdapter'\n\nconst DEFAULT_ROI_STROKE_COLOR: number[] = [255, 234, 0] // [0, 126, 163]\nconst DEFAULT_ROI_FILL_COLOR: number[] = [255, 234, 0, 0.2] // [0, 126, 163, 0.2]\nconst DEFAULT_ROI_STROKE_WIDTH: number = 2\nconst DEFAULT_ROI_RADIUS: number = 5\n\nconst DEFAULT_ANNOTATION_OPACITY = 0.4\nconst DEFAULT_ANNOTATION_STROKE_COLOR = [0, 0, 0]\nconst DEFAULT_ANNOTATION_COLOR_PALETTE = [\n  [255, 0, 0],\n  [0, 255, 0],\n  [0, 0, 255],\n  [255, 255, 0],\n  [0, 255, 255],\n  [0, 0, 0]\n]\n\nconst _buildKey = (concept: {\n  CodeValue: string\n  CodeMeaning: string\n  CodingSchemeDesignator: string\n  CodingSchemeVersion?: string\n}): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string | undefined => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    console.warn(`no finding found for ROI ${roi.uid}`)\n    return\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _formatRoiStyle = (style: {\n  stroke?: {\n    color?: number[]\n    width?: number\n  }\n  fill?: {\n    color?: number[]\n  }\n  radius?: number\n}): dmv.viewer.ROIStyleOptions => {\n  const stroke = {\n    color: DEFAULT_ROI_STROKE_COLOR,\n    width: DEFAULT_ROI_STROKE_WIDTH\n  }\n  if (style.stroke != null) {\n    if (style.stroke.color != null) {\n      stroke.color = style.stroke.color\n    }\n    if (style.stroke.width != null) {\n      stroke.width = style.stroke.width\n    }\n  }\n  const fill = {\n    color: DEFAULT_ROI_FILL_COLOR\n  }\n  if (style.fill != null) {\n    if (style.fill.color != null) {\n      fill.color = style.fill.color\n    }\n  }\n  return {\n    stroke,\n    fill,\n    image: {\n      circle: {\n        radius: style.radius != null\n          ? style.radius\n          : Math.max(5 - stroke.width, 1),\n        stroke,\n        fill\n      }\n    }\n  }\n}\n\nconst _constructViewers = ({ clients, slide, preload }: {\n  clients: { [key: string]: dwc.api.DICOMwebClient }\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  console.info(\n    'instantiate viewer for VOLUME images of slide ' +\n    `\"${slide.volumeImages[0].ContainerIdentifier}\"`\n  )\n  try {\n    const volumeViewer = new dmv.viewer.VolumeImageViewer({\n      clientMapping: clients,\n      metadata: slide.volumeImages,\n      controls: ['overview', 'position'],\n      preload: preload,\n      errorInterceptor: (error: CustomError) => {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DMV, error\n        )\n      }\n    })\n    volumeViewer.activateSelectInteraction({})\n\n    let labelViewer\n    if (slide.labelImages.length > 0) {\n      console.info(\n        'instantiate viewer for LABEL image of slide ' +\n        `\"${slide.labelImages[0].ContainerIdentifier}\"`\n      )\n      labelViewer = new dmv.viewer.LabelImageViewer({\n        client: clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE],\n        metadata: slide.labelImages[0],\n        resizeFactor: 1,\n        orientation: 'vertical',\n        errorInterceptor: (error: CustomError) => {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.DMV,\n            error\n          )\n        }\n      })\n    }\n\n    return { volumeViewer, labelViewer }\n  } catch (error) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        'Failed to instantiate viewer'\n      )\n    )\n    throw error\n  }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface Measurement {\n  name: dcmjs.sr.coding.CodedConcept\n  value?: number\n  unit: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload?: boolean\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n}\n\ninterface SlideViewerState {\n  visibleRoiUIDs: Set<string>\n  visibleSegmentUIDs: Set<string>\n  visibleMappingUIDs: Set<string>\n  visibleAnnotationGroupUIDs: Set<string>\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  selectedRoi?: dmv.roi.ROI\n  selectedRoiUIDs: Set<string>\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isSelectedRoiModalVisible: boolean\n  isHoveredRoiTooltipVisible: boolean\n  hoveredRoiAttributes: Array<{index: number, roiUid: string, attributes: Array<{ name: string, value: string }>}>\n  hoveredRoiTooltipX: number\n  hoveredRoiTooltipY: number\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  isGoToModalVisible: boolean\n  isSelectedMagnificationValid: boolean\n  isSelectedXCoordinateValid: boolean\n  isSelectedYCoordinateValid: boolean\n  selectedXCoordinate?: number\n  validXCoordinateRange: number[]\n  selectedYCoordinate?: number\n  validYCoordinateRange: number[]\n  selectedMagnification?: number\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n  loadingFrames: Set<string>\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private hoveredRois = [] as dmv.roi.ROI[]\n\n  private lastPixel = [0, 0] as [number, number]\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: DEFAULT_ROI_STROKE_COLOR,\n      width: DEFAULT_ROI_STROKE_WIDTH\n    },\n    fill: {\n      color: DEFAULT_ROI_FILL_COLOR\n    },\n    image: {\n      circle: {\n        fill: {\n          color: DEFAULT_ROI_STROKE_COLOR\n        },\n        radius: DEFAULT_ROI_RADIUS\n      }\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private defaultAnnotationStyles: {\n    [annotationUID: string]: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  } = {}\n\n  private readonly selectionColor: number[] = [140, 184, 198]\n\n  private readonly selectedRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\n    fill: { color: [...this.selectionColor, 0.2] },\n    image: {\n      circle: {\n        radius: 5,\n        fill: { color: [...this.selectionColor, 1] }\n      }\n    }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = _formatRoiStyle(annotation.style)\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n\n    this.onWindowResize = this.onWindowResize.bind(this)\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleRoiSelectionCancellation = this.handleRoiSelectionCancellation.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleRoiStyleChange = this.handleRoiStyleChange.bind(this)\n    this.handleGoTo = this.handleGoTo.bind(this)\n    this.handleXCoordinateSelection = this.handleXCoordinateSelection.bind(this)\n    this.handleYCoordinateSelection = this.handleYCoordinateSelection.bind(this)\n    this.handleMagnificationSelection = this.handleMagnificationSelection.bind(this)\n    this.handleSlidePositionSelection = this.handleSlidePositionSelection.bind(this)\n    this.handleSlidePositionSelectionCancellation = this.handleSlidePositionSelectionCancellation.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n\n    const { volumeViewer, labelViewer } = _constructViewers({\n      clients: this.props.clients,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    const [offset, size] = this.volumeViewer.boundingBox\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isHoveredRoiTooltipVisible: false,\n      hoveredRoiTooltipX: 0,\n      hoveredRoiTooltipY: 0,\n      hoveredRoiAttributes: [],\n      isSelectedMagnificationValid: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      selectedXCoordinate: undefined,\n      validXCoordinateRange: [offset[0], offset[0] + size[0]],\n      selectedYCoordinate: undefined,\n      validYCoordinateRange: [offset[1], offset[1] + size[1]],\n      selectedMagnification: undefined,\n      areRoisHidden: false,\n      pixelDataStatistics: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\n      loadingFrames: new Set()\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.clients !== previousProps.clients\n    ) {\n      if (this.volumeViewportRef.current != null) {\n        this.volumeViewportRef.current.innerHTML = ''\n      }\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        if (this.labelViewportRef.current != null) {\n          this.labelViewportRef.current.innerHTML = ''\n        }\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        clients: this.props.clients,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n\n      const [offset, size] = this.volumeViewer.boundingBox\n\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: [],\n        loadingFrames: new Set(),\n        validXCoordinateRange: [offset[0], offset[0] + size[0]],\n        validYCoordinateRange: [offset[1], offset[1] + size[1]]\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    const client = this.props.clients[\n      StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE\n    ]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach((rawInstance, index) => {\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                index === 0 &&\n                this.props.selectedPresentationStateUID == null\n              ) {\n                this.setPresentationState(presentationState)\n              } else {\n                if (\n                  presentationState.SOPInstanceUID ===\n                  this.props.selectedPresentationStateUID\n                ) {\n                  this.setPresentationState(presentationState)\n                }\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Presentation State could not be loaded'\n            )\n          )\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Presentation State could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Set presentation state as specified by a DICOM Presentation State instance.\n   */\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths and reset style\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        /**\n         * Referenced Instance Sequence should be used instead of Referenced\n         * Image Sequence, but that's easy to mix up and we have encountered\n         * implementations that get it wrong.\n         */\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\n            imageItem.ReferencedSOPInstanceUID\n          ) as boolean\n          if (isReferenced) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID != null\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    const searchParams = new URLSearchParams(this.props.location.search)\n    searchParams.set('state', presentationState.SOPInstanceUID)\n    this.props.navigate(\n      {\n        pathname: this.props.location.pathname,\n        search: searchParams.toString()\n      },\n      { replace: true }\n    )\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key?: string): dmv.viewer.ROIStyleOptions => {\n    if (key == null) {\n      return this.defaultRoiStyle\n    }\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotations = (): void => {\n    console.info('search for Comprehensive 3D SR instances')\n    const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n    client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach(i => {\n        const { dataset } = dmv.metadata.formatMetadata(i)\n        const instance = dataset as dmv.metadata.Instance\n        if (instance.SOPClassUID === StorageClasses.COMPREHENSIVE_3D_SR) {\n          console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n          client.retrieveInstance({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: instance.SeriesInstanceUID,\n            sopInstanceUID: instance.SOPInstanceUID\n          }).then((retrievedInstance): void => {\n            const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n            const { dataset } = dmv.metadata.formatMetadata(data.dict)\n            const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n            /*\n             * Perform a couple of checks to ensure the document content of the\n             * report fullfils the requirements of the application.\n             */\n            if (!_implementsTID1500(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it is not structured according to template ' +\n                'TID 1500 \"MeasurementReport\"'\n              )\n              return\n            }\n            if (!_describesSpecimenSubject(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not describe a specimen subject'\n              )\n              return\n            }\n            if (!_containsROIAnnotations(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not contain any suitable ROI annotations'\n              )\n              return\n            }\n\n            const content = new MeasurementReport(report)\n            content.ROIs.forEach(roi => {\n              console.info(`add ROI \"${roi.uid}\"`)\n              const scoord3d = roi.scoord3d\n              const image = this.props.slide.volumeImages[0]\n              if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                /*\n                 * ROIs may get assigned new UIDs upon re-rendering of the\n                 * page and we need to ensure that we don't add them twice.\n                 * The same ROI may be stored in multiple SR documents and\n                 * we don't want them to show up twice.\n                 * TODO: We should probably either \"merge\" measurements and\n                 * quantitative evaluations or pick the ROI from the \"best\"\n                 * available report (COMPLETE and VERIFIED).\n                 */\n                const doesROIExist = this.volumeViewer.getAllROIs().some(\n                  (otherROI: dmv.roi.ROI): boolean => {\n                    return _areROIsEqual(otherROI, roi)\n                  }\n                )\n                if (!doesROIExist) {\n                  try {\n                    // Add ROI without style such that it won't be visible.\n                    this.volumeViewer.addROI(roi, {})\n                  } catch {\n                    console.error(`could not add ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                }\n              } else {\n                console.debug(\n                  `skip ROI \"${roi.uid}\" ` +\n                  `of SR document \"${report.SOPInstanceUID}\"` +\n                  'because it is defined in another frame of reference'\n                )\n              }\n            })\n          }).catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            NotificationMiddleware.onError(\n              NotificationMiddlewareContext.SLIM,\n              new CustomError(\n                errorTypes.VISUALIZATION,\n                'Annotations could not be loaded'\n              )\n            )\n            console.error(\n              'failed to load ROIs ' +\n              `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n              `of series \"${instance.SeriesInstanceUID}\" ` +\n              `of study \"${this.props.studyInstanceUID}\": `,\n              error\n            )\n          })\n          /*\n           * React is not aware of the fact that ROIs have been added via the\n           * viewer (the viewport is a ref object) and won't show the\n           * annotations in the user interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Annotations could not be loaded'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = (): void => {\n    console.info('search for Microscopy Bulk Simple Annotations instances')\n    const client = this.props.clients[\n      StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION\n    ]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'ANN'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[] = retrievedMetadata.map(metadata => {\n            return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n              metadata\n            })\n          })\n          // annotations = annotations.filter(ann => {\n          //   const refImage = this.props.slide.volumeImages[0]\n          //   return (\n          //     ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n          //     ann.ContainerIdentifier === refImage.ContainerIdentifier\n          //   )\n          // })\n          annotations.forEach(ann => {\n            try {\n              this.volumeViewer.addAnnotationGroups(ann)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Microscopy Bulk Simple Annotations cannot be displayed.'\n                )\n              )\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              console.error('failed to add annotation groups:', error)\n            }\n            ann.AnnotationGroupSequence.forEach(item => {\n              const annotationGroupUID = item.AnnotationGroupUID\n              const finding = item.AnnotationPropertyTypeCodeSequence[0]\n              const key = _buildKey(finding)\n              const style = this.roiStyles[key]\n              // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n              if (style != null && style.fill != null) {\n                this.volumeViewer.setAnnotationGroupStyle(\n                  annotationGroupUID,\n                  { color: style.fill.color }\n                )\n              }\n            })\n          })\n          /*\n           * React is not aware of the fact that annotation groups have been\n           * added via the viewer (the underlying HTML viewport element is a\n           * ref object) and won't show the annotation groups in the user\n           * interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n              'instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Microscopy Bulk Simple Annotations instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = (): void => {\n    console.info('search for Segmentation instances')\n    const client = this.props.clients[StorageClasses.SEGMENTATION]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SEG'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach((s, i) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const segmentations: dmv.metadata.Segmentation[] = []\n          retrievedMetadata.forEach(metadata => {\n            const seg = new dmv.metadata.Segmentation({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              seg.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              segmentations.push(seg)\n            }\n          })\n          if (segmentations.length > 0) {\n            try {\n              this.volumeViewer.addSegments(segmentations)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Segmentations cannot be displayed'\n                )\n              )\n              console.error('failed to add segments: ', error)\n            }\n            /*\n           * React is not aware of the fact that segments have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the segments in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Segmentation instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Segmentation instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = (): void => {\n    console.info('search for Parametric Map instances')\n    const client = this.props.clients[StorageClasses.PARAMETRIC_MAP]\n    client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'OT'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const parametricMaps: dmv.metadata.ParametricMap[] = []\n          retrievedMetadata.forEach(metadata => {\n            const pm = new dmv.metadata.ParametricMap({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              pm.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              parametricMaps.push(pm)\n            } else {\n              console.warn(\n                `skip Parametric Map instance \"${pm.SOPInstanceUID}\"`\n              )\n            }\n          })\n          if (parametricMaps.length > 0) {\n            try {\n              this.volumeViewer.addParameterMappings(parametricMaps)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              NotificationMiddleware.onError(\n                NotificationMiddlewareContext.SLIM,\n                new CustomError(\n                  errorTypes.VISUALIZATION,\n                  'Parametric Map cannot be displayed'\n                )\n              )\n              console.error('failed to add mappings: ', error)\n            }\n            /*\n           * React is not aware of the fact that mappings have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the mappings in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error) => {\n          console.error(error)\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.VISUALIZATION,\n              'Retrieval of metadata of Parametric Map instances failed.'\n            )\n          )\n        })\n      })\n    }).catch((error) => {\n      console.error(error)\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Search for Parametric Map instances failed.'\n        )\n      )\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    this.addAnnotations()\n    this.addAnnotationGroups()\n    this.addSegmentations()\n    this.addParametricMaps()\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onWindowResize = (event: Event): void => {\n    console.info('resize viewports')\n    this.volumeViewer.resize()\n    if (this.labelViewer != null) {\n      this.labelViewer.resize()\n    }\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiDoubleClicked = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi != null) {\n      this.setState({\n        isSelectedRoiModalVisible: true\n      })\n    } else {\n      this.setState({\n        isSelectedRoiModalVisible: false\n      })\n    }\n  }\n\n  setHoveredRoiAttributes = (hoveredRois: dmv.roi.ROI[]): void => {\n    const rois = this.volumeViewer.getAllROIs()\n    const result = hoveredRois.map((roi) => {\n      const attributes: Array<{ name: string, value: string }> = []\n      const evaluations = roi.evaluations\n      evaluations.forEach((\n        item: (\n          dcmjs.sr.valueTypes.TextContentItem |\n          dcmjs.sr.valueTypes.CodeContentItem\n        )\n      ) => {\n        const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n        const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n        const name = `${nameMeaning}`\n        if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n          const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n          // For consistency with Segment and Annotation Group\n          if (nameValue === '276214006') {\n            attributes.push({\n              name: 'Property category',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '121071') {\n            attributes.push({\n              name: 'Property type',\n              value: `${valueMeaning}`\n            })\n          } else if (nameValue === '111001') {\n            attributes.push({\n              name: 'Algorithm Name',\n              value: `${valueMeaning}`\n            })\n          } else {\n            attributes.push({\n              name: name,\n              value: `${valueMeaning}`\n            })\n          }\n        } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n          const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n          attributes.push({\n            name: name,\n            value: textContentItem.TextValue\n          })\n        }\n      })\n\n      const index = (rois.findIndex((r) => r.uid === roi.uid) ?? 0) + 1\n      return { index, roiUid: roi.uid, attributes }\n    }, [] as Array<dcmjs.sr.valueTypes.CodeContentItem | dcmjs.sr.valueTypes.TextContentItem>)\n\n    this.setState({ hoveredRoiAttributes: result })\n  }\n\n  clearHoveredRois = (): void => {\n    this.hoveredRois = [] as any\n  }\n\n  getUniqueHoveredRois = (newRoi: dmv.roi.ROI | null): dmv.roi.ROI[] => {\n    if (newRoi == null) {\n      return []\n    }\n    const allRois = [...this.hoveredRois, newRoi]\n    const uniqueIds = Array.from(new Set(allRois.map(roi => roi.uid)))\n    // @ts-expect-error\n    return uniqueIds.map(id => allRois.find(roi => roi.uid === id)).filter(roi => roi !== undefined)\n  }\n\n  isSamePixelAsLast = (event: any): boolean => {\n    return event.clientX === this.lastPixel[0] && event.clientY === this.lastPixel[1]\n  }\n\n  onPointerMove = (event: CustomEventInit): void => {\n    const { feature: hoveredRoi, event: evt } = event.detail.payload\n    const originalEvent = evt.originalEvent\n\n    if (!this.isSamePixelAsLast(originalEvent)) {\n      this.lastPixel = [originalEvent.clientX, originalEvent.clientY]\n      this.clearHoveredRois()\n    }\n\n    this.hoveredRois = this.getUniqueHoveredRois(hoveredRoi)\n\n    if (this.hoveredRois.length > 0) {\n      this.setHoveredRoiAttributes(this.hoveredRois)\n      this.setState({\n        isHoveredRoiTooltipVisible: true,\n        hoveredRoiTooltipX: originalEvent.clientX,\n        hoveredRoiTooltipY: originalEvent.clientY\n      })\n    } else {\n      this.setState({\n        isHoveredRoiTooltipVisible: false\n      })\n    }\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI | null\n    if (selectedRoi == null) {\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        selectedRoi: undefined\n      })\n      return\n    }\n\n    console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n    const oldSelectedRois = Array.from(this.state.selectedRoiUIDs)\n    this.setState({\n      selectedRoiUIDs: new Set([...oldSelectedRois, selectedRoi.uid]),\n      selectedRoi: selectedRoi\n    })\n  }\n\n  handleRoiSelectionCancellation (): void {\n    this.setState({\n      isSelectedRoiModalVisible: false\n    })\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n    } = event.detail.payload\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.add(key)\n      return state\n    })\n  }\n\n  onFrameLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load frame')\n  }\n\n  onLoadingError = (event: CustomEventInit): void => {\n    console.error('Failed to load data')\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    const message = (event.detail?.payload?.message === null ? 'Failed to load data' : event.detail?.payload?.message) as string\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.VISUALIZATION,\n        message\n      ) as any\n    )\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo: {\n      studyInstanceUID: string\n      seriesInstanceUID: string\n      sopInstanceUID: string\n      sopClassUID: string\n      frameNumber: string\n      channelIdentifier: string\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\n    } = event.detail.payload\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\n    this.setState(state => {\n      state.loadingFrames.delete(key)\n      let isLoading: boolean = false\n      if (state.loadingFrames.size > 0) {\n        isLoading = true\n      }\n      return {\n        isLoading,\n        loadingFrames: state.loadingFrames\n      }\n    })\n    if (\n      frameInfo.sopClassUID === StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\n        frameInfo.pixelArray != null\n      ) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues: number[] = []\n        const maxValues: number[] = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          if (state.selectedPresentationStateUID == null) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\n            }\n            style.limitValues = [\n              stats[opticalPathIdentifier].min,\n              stats[opticalPathIdentifier].max\n            ]\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.removeEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.removeEventListener('resize', this.onWindowResize)\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  onKeyUp = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      if (this.state.isRoiDrawingActive) {\n        console.info('deactivate drawing of ROIs')\n        this.volumeViewer.deactivateDrawInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiModificationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateModifyInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      } else if (this.state.isRoiTranslationActive) {\n        console.info('deactivate modification of ROIs')\n        this.volumeViewer.deactivateTranslateInteraction()\n        this.volumeViewer.activateSelectInteraction({})\n      }\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else if (event.altKey) {\n      if (event.code === 'KeyD') {\n        this.handleRoiDrawing()\n      } else if (event.code === 'KeyM') {\n        this.handleRoiModification()\n      } else if (event.code === 'KeyT') {\n        this.handleRoiTranslation()\n      } else if (event.code === 'KeyR') {\n        this.handleRoiRemoval()\n      } else if (event.code === 'KeyV') {\n        this.handleRoiVisibilityChange()\n      } else if (event.code === 'KeyS') {\n        this.handleReportGeneration()\n      } else if (event.code === 'KeyG') {\n        this.handleGoTo()\n      }\n    }\n  }\n\n  componentWillUnmount (): void {\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_double_clicked',\n      this.onRoiDoubleClicked\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_pointer_move',\n      this.onPointerMove\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_error',\n      this.onLoadingError\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_started',\n      this.onFrameLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_error',\n      this.onFrameLoadingError\n    )\n    document.body.addEventListener(\n      'keyup',\n      this.onKeyUp\n    )\n    window.addEventListener('beforeunload', this.componentCleanup)\n    window.addEventListener('resize', this.onWindowResize)\n  }\n\n  componentDidMount (): void {\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  handleXCoordinateSelection (value: any): void {\n    if (value != null) {\n      const x = Number(value)\n      const start = this.state.validXCoordinateRange[0]\n      const end = this.state.validXCoordinateRange[1]\n      if (x >= start && x <= end) {\n        this.setState({\n          selectedXCoordinate: x,\n          isSelectedXCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedXCoordinate: undefined,\n      isSelectedXCoordinateValid: false\n    })\n  }\n\n  handleYCoordinateSelection (value: any): void {\n    if (value != null) {\n      const y = Number(value)\n      const start = this.state.validYCoordinateRange[0]\n      const end = this.state.validYCoordinateRange[1]\n      if (y >= start && y <= end) {\n        this.setState({\n          selectedYCoordinate: y,\n          isSelectedYCoordinateValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedYCoordinate: undefined,\n      isSelectedYCoordinateValid: false\n    })\n  }\n\n  handleMagnificationSelection (value: any): void {\n    if (value != null) {\n      if (value > 0 && value <= 40) {\n        this.setState({\n          selectedMagnification: Number(value),\n          isSelectedMagnificationValid: true\n        })\n        return\n      }\n    }\n    this.setState({\n      selectedMagnification: undefined,\n      isSelectedMagnificationValid: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of slide position was\n   * completed.\n   */\n  handleSlidePositionSelection (): void {\n    if (\n      this.state.isSelectedXCoordinateValid &&\n      this.state.isSelectedYCoordinateValid &&\n      this.state.isSelectedMagnificationValid &&\n      this.state.selectedXCoordinate != null &&\n      this.state.selectedYCoordinate != null &&\n      this.state.selectedMagnification != null\n    ) {\n      console.info(\n        'select slide position ' +\n        `(${this.state.selectedXCoordinate}, ` +\n        `${this.state.selectedYCoordinate}) ` +\n        `at ${this.state.selectedMagnification}x magnification`\n      )\n\n      const factor = this.state.selectedMagnification\n      /**\n       * On an optical microscope an objective with 1x magnification\n       * corresponds to approximately 10 micrometer pixel spacing\n       * (due to the ocular).\n       */\n      const targetPixelSpacing = 0.01 / factor\n      const diffs = []\n      for (let i = 0; i < this.volumeViewer.numLevels; i++) {\n        const actualPixelSpacing = this.volumeViewer.getPixelSpacing(i)[0]\n        diffs.push(Math.abs(targetPixelSpacing - actualPixelSpacing))\n      }\n      const level = diffs.indexOf(Math.min(...diffs))\n      this.volumeViewer.navigate({\n        position: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate\n        ],\n        level: level\n      })\n      const point = new dmv.scoord3d.Point({\n        coordinates: [\n          this.state.selectedXCoordinate,\n          this.state.selectedYCoordinate,\n          0\n        ],\n        frameOfReferenceUID: this.volumeViewer.frameOfReferenceUID\n      })\n      const roi = new dmv.roi.ROI({ scoord3d: point })\n      this.volumeViewer.addROI(roi, this.defaultRoiStyle)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return {\n          visibleRoiUIDs,\n          isGoToModalVisible: false\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when the selection of a slide position was\n   * canceled.\n   */\n  handleSlidePositionSelectionCancellation (): void {\n    console.log('cancel slide position selection')\n    this.setState({\n      isGoToModalVisible: false,\n      isSelectedXCoordinateValid: false,\n      isSelectedYCoordinateValid: false,\n      isSelectedMagnificationValid: false,\n      selectedXCoordinate: undefined,\n      selectedYCoordinate: undefined,\n      selectedMagnification: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Could not complete annotation configuration'\n        )\n      )\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    // Metadata should be sorted such that the image with the highest\n    // resolution is the last item in the array.\n    const refImage = metadata[metadata.length - 1]\n    // We assume that there is only one specimen (tissue section) per\n    // ontainer (slide). Only the tissue section is tracked with a unique\n    // identifier, even if the section may be composed of different biological\n    // samples.\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'More than one specimen has been described for the slide'\n        )\n      )\n    }\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n    console.debug('create Observation Context')\n    let observer\n    if (this.props.user !== undefined) {\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: this.props.user.name,\n        loginName: this.props.user.email\n      })\n    } else {\n      console.warn('no user information available')\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: 'ANONYMOUS'\n      })\n    }\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121006',\n          schemeDesignator: 'DCM',\n          meaning: 'Person'\n        }),\n        observerIdentifyingAttributes: observer\n      }),\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121007',\n          schemeDesignator: 'DCM',\n          meaning: 'Device'\n        }),\n        observerIdentifyingAttributes:\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\n            uid: this.props.app.uid,\n            manufacturerName: 'MGH Computational Pathology',\n            modelName: this.props.app.name\n          })\n      }),\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\n          value: '121027',\n          schemeDesignator: 'DCM',\n          meaning: 'Specimen'\n        }),\n        subjectClassSpecificContext:\n          new dcmjs.sr.templates.SubjectContextSpecimen({\n            uid: refSpecimen.SpecimenUID,\n            identifier: refSpecimen.SpecimenIdentifier,\n            containerIdentifier: refImage.ContainerIdentifier\n          })\n      })\n    })\n\n    console.debug('encode Imaging Measurements')\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\n    for (let i = 0; i < rois.length; i++) {\n      const roi = rois[i]\n      if (!this.state.visibleRoiUIDs.has(roi.uid)) {\n        continue\n      }\n      let findingType = roi.evaluations.find(\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n        }\n      )\n      if (findingType === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            `No finding type was specified for ROI \"${roi.uid}\"`\n          )\n        )\n      }\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.properties.trackingUID ?? roi.uid,\n          identifier: `ROI #${i + 1}`\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: findingType.ConceptCodeSequence[0].CodeValue,\n          schemeDesignator:\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n        }),\n        qualitativeEvaluations: roi.evaluations.filter(\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n          }\n        ),\n        measurements: roi.measurements\n      })\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\n      measurements[0].ContentTemplateSequence = [{\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }]\n      imagingMeasurements.push(...measurements)\n    }\n\n    console.debug('create Measurement Report document content')\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\n      observationContext: observationContext,\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\n        value: '112703',\n        schemeDesignator: 'DCM',\n        meaning: 'Whole Slide Imaging'\n      }),\n      imagingMeasurements: imagingMeasurements\n    })\n\n    console.info('create Comprehensive 3D SR document')\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n      content: measurementReport[0],\n      evidence: [refImage],\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      seriesNumber: 1,\n      seriesDescription: 'Annotation',\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      instanceNumber: 1,\n      manufacturer: 'MGH Computational Pathology',\n      previousVersions: undefined // TODO\n    })\n\n    this.setState({\n      isReportModalVisible: true,\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      const client = this.props.clients[StorageClasses.COMPREHENSIVE_3D_SR]\n      client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'Annotations could not be saved'\n          )\n        )\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when an annotation has been selected from the\n   * current list of annotations.\n   */\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\n    console.log(`selected ROI ${roiUID}`)\n    this.setState({ selectedRoiUIDs: new Set([roiUID]) })\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (roi.uid === roiUID) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.setROIStyle(roi.uid, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      try {\n        this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      } catch (error) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Failed to show annotation group.'\n          )\n        )\n        throw error\n      }\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }): void {\n    console.log(`change style of annotation group ${uid}`)\n    try {\n      this.volumeViewer.setAnnotationGroupStyle(\n        uid,\n        styleOptions\n      )\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of annotation group.'\n        )\n      )\n      throw error\n    }\n  }\n\n  generateRoiStyle (\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      contourOnly: boolean\n    }): dmv.viewer.ROIStyleOptions {\n    const opacity = styleOptions.opacity ?? DEFAULT_ANNOTATION_OPACITY\n    const strokeColor = styleOptions.color ?? DEFAULT_ANNOTATION_STROKE_COLOR\n    const fillColor = styleOptions.contourOnly ? [0, 0, 0, 0] : strokeColor.map((c) => Math.min(c + 25, 255))\n    const style = _formatRoiStyle({\n      fill: { color: [...fillColor, opacity] },\n      stroke: { color: [...strokeColor, opacity] },\n      radius: this.defaultRoiStyle.stroke?.width\n    })\n    return style\n  }\n\n  handleRoiStyleChange ({ uid, styleOptions }: {\n    uid: string\n    styleOptions: {\n      opacity: number\n      color: number[]\n      contourOnly: boolean\n    }\n  }): void {\n    console.log(`change style of ROI ${uid}`)\n    try {\n      this.defaultAnnotationStyles[uid] = styleOptions\n      const style = this.generateRoiStyle(styleOptions)\n\n      const roi = this.volumeViewer.getROI(uid)\n      const key = _getRoiKey(roi) as string\n      this.roiStyles[key] = style\n      this.volumeViewer.setROIStyle(uid, style)\n      this.state.visibleRoiUIDs.add(uid)\n    } catch (error) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.VISUALIZATION,\n          'Failed to change style of ROI.'\n        )\n      )\n      throw error\n    }\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Set default presentation state that is either defined by metadata included\n   * in the DICOM Slide Microscopy instance or by the viewer.\n   */\n  setDefaultPresentationState (): void {\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first n optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [255, 255, 255]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < defaultColors.length) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState != null) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.VISUALIZATION,\n            'Presentation State could not be found'\n          )\n        )\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isSelectedRoiModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isGoToModalVisible: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isSelectedRoiModalVisible: false,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false,\n        isGoToModalVisible: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  handleGoTo (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateSelectInteraction()\n    this.setState({\n      isGoToModalVisible: true,\n      isAnnotationModalVisible: false,\n      isSelectedRoiModalVisible: false,\n      isReportModalVisible: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (this.volumeViewer.areROIsVisible) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    const allAnnotationGroups = this.volumeViewer.getAllAnnotationGroups()\n    const filteredAnnotationGroups = allAnnotationGroups?.filter((annotationGroup) =>\n      annotationGroup.referencedSeriesInstanceUID === this.props.seriesInstanceUID\n    )\n    annotationGroups.push(...filteredAnnotationGroups)\n\n    const annotations = rois.map(roi => adaptRoiToAnnotation(roi))\n\n    const openSubMenuItems = [\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\n    ]\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map(finding => {\n      return (\n        <Select.Option\n          key={finding.CodeValue}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const annotationConfigurations: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach(evaluation => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={code.CodeValue}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        annotationConfigurations.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      annotationConfigurations.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      annotationConfigurations.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const equipmentMenu = (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier.localeCompare(b.identifier) === 1) {\n        return 1\n      } else if (b.identifier.localeCompare(a.identifier) === 1) {\n        return -1\n      }\n      return 0\n    })\n    const opticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = {\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\n      }\n      opticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={opticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach(instance => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={instance.SOPInstanceUID}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={undefined}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          <></>\n        </Select.Option>\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={<UndoOutlined />}\n                type='primary'\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametric-maps')\n    }\n\n    let annotationGroupMenu\n\n    if (annotations.length > 0) {\n      annotations.forEach((annotation) => {\n        const roi = this.volumeViewer.getROI(annotation.uid)\n        const key = _getRoiKey(roi) as string\n        const color = this.roiStyles[key] !== undefined\n          ? this.roiStyles[key].stroke?.color.slice(0, 3)\n          : DEFAULT_ANNOTATION_COLOR_PALETTE[\n            Object.keys(this.roiStyles).length % DEFAULT_ANNOTATION_COLOR_PALETTE.length\n          ]\n        this.defaultAnnotationStyles[annotation.uid] = {\n          color,\n          opacity: DEFAULT_ANNOTATION_OPACITY,\n          contourOnly: false\n        } as any\n\n        this.roiStyles[key] = this.generateRoiStyle(\n          this.defaultAnnotationStyles[annotation.uid]\n        )\n      })\n    }\n\n    if (annotationGroups.length > 0) {\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const defaultAnnotationGroupStyles: {\n        [annotationUID: string]: {\n          opacity: number\n          color: number[]\n        }\n      } = {}\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            // when adding annotationGroups to annotationCategory list,\n            // make so that this is uses this.defaultAnnotationStyles later instead of defaultAnnotationGroupStyles\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    const annotationTools = [\n      <Button\n        tooltip='Draw ROI [Alt+D]'\n        icon={FaDrawPolygon}\n        onClick={this.handleRoiDrawing}\n        isSelected={this.state.isRoiDrawingActive}\n        key='draw-roi-button'\n      />,\n      <Button\n        tooltip='Modify ROIs [Alt+M]'\n        icon={FaHandPointer}\n        onClick={this.handleRoiModification}\n        isSelected={this.state.isRoiModificationActive}\n        key='modify-roi-button'\n      />,\n      <Button\n        tooltip='Translate ROIs [Alt+T]'\n        icon={FaHandPaper}\n        onClick={this.handleRoiTranslation}\n        isSelected={this.state.isRoiTranslationActive}\n        key='translate-roi-button'\n      />,\n      <Button\n        tooltip='Remove selected ROI [Alt+R]'\n        onClick={this.handleRoiRemoval}\n        icon={FaTrash}\n        key='remove-roi-button'\n      />,\n      <Button\n        tooltip='Show/Hide ROIs [Alt+V]'\n        icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n        onClick={this.handleRoiVisibilityChange}\n        isSelected={this.state.areRoisHidden}\n        key='toggle-roi-visibility-button'\n      />,\n      <Button\n        tooltip='Save ROIs [Alt+S]'\n        icon={FaSave}\n        onClick={this.handleReportGeneration}\n        key='generate-report-button'\n      />\n    ]\n    const controlTools = [\n      <Button\n        tooltip='Go to [Alt+G]'\n        icon={FaCrosshairs}\n        onClick={this.handleGoTo}\n        key='go-to-slide-position-button'\n      />\n    ]\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row justify='start'>\n          {annotationTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n          {controlTools.map((item, i) => {\n            return <React.Fragment key={i}>{item}</React.Fragment>\n          })}\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    let cursor = 'default'\n    if (this.state.isLoading) {\n      cursor = 'progress'\n    }\n\n    let selectedRoiInformation\n    if (this.state.selectedRoi != null) {\n      const roiAttributes: Array<{\n        name: string\n        value: string\n        unit?: string\n      }> = [\n        {\n          name: 'UID',\n          value: this.state.selectedRoi.uid\n        }\n      ]\n      const roiScoordAttributes: Array<{\n        name: string\n        value: string\n      }> = [\n        {\n          name: 'Graphic type',\n          value: this.state.selectedRoi.scoord3d.graphicType\n        }\n      ]\n      const roiEvaluationAttributes: Array<{\n        name: string\n        value: string\n      }> = []\n      this.state.selectedRoi.evaluations.forEach(item => {\n        if (item.ValueType === 'CODE') {\n          const codeItem = item as dcmjs.sr.valueTypes.CodeContentItem\n          roiEvaluationAttributes.push({\n            name: codeItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: codeItem.ConceptCodeSequence[0].CodeMeaning\n          })\n        } else {\n          const textItem = item as dcmjs.sr.valueTypes.TextContentItem\n          roiEvaluationAttributes.push({\n            name: textItem.ConceptNameCodeSequence[0].CodeMeaning,\n            value: textItem.TextValue\n          })\n        }\n      })\n      const roiMeasurmentAttributesPerOpticalPath: {\n        [identifier: string]: Array<{\n          name: string\n          value: string\n          unit?: string\n        }>\n      } = {}\n      this.state.selectedRoi.measurements.forEach(item => {\n        let identifier = 'default'\n        if (item.ContentSequence != null) {\n          const refItems = findContentItemsByName({\n            content: item.ContentSequence,\n            name: new dcmjs.sr.coding.CodedConcept({\n              value: '121112',\n              meaning: 'Source of Measurement',\n              schemeDesignator: 'DCM'\n            })\n          })\n          if (refItems.length > 0) {\n            identifier = (\n              refItems[0]\n                // @ts-expect-error\n                .ReferencedSOPSequence[0]\n                .ReferencedOpticalPathIdentifier\n            )\n          }\n        }\n        if (!(identifier in roiMeasurmentAttributesPerOpticalPath)) {\n          roiMeasurmentAttributesPerOpticalPath[identifier] = []\n        }\n        const measuredValueItem = item.MeasuredValueSequence[0]\n        roiMeasurmentAttributesPerOpticalPath[identifier].push({\n          name: item.ConceptNameCodeSequence[0].CodeMeaning,\n          value: measuredValueItem.NumericValue.toString(),\n          unit: measuredValueItem.MeasurementUnitsCodeSequence[0].CodeMeaning\n        })\n      })\n      const createRoiDescription = (\n        attributes: Array<{ name: string, value: string, unit?: string }>\n      ): React.ReactNode[] => {\n        return attributes.map(item => {\n          let value\n          if (item.unit != null) {\n            value = `${item.value} [${item.unit}]`\n          } else {\n            value = item.value\n          }\n          return (\n            <Descriptions.Item\n              key={item.name}\n              label={item.name}\n            >\n              {value}\n            </Descriptions.Item>\n          )\n        })\n      }\n      const roiDescriptions = createRoiDescription(roiAttributes)\n      const roiScoordDescriptions = createRoiDescription(\n        roiScoordAttributes\n      )\n      const roiEvaluationDescriptions = createRoiDescription(\n        roiEvaluationAttributes\n      )\n      const roiMeasurementDescriptions = []\n      for (const identifier in roiMeasurmentAttributesPerOpticalPath) {\n        const descriptions = createRoiDescription(\n          roiMeasurmentAttributesPerOpticalPath[identifier]\n        )\n        if (identifier === 'default') {\n          roiMeasurementDescriptions.push(descriptions)\n        } else {\n          roiMeasurementDescriptions.push(\n            <>\n              <Divider orientation='left' orientationMargin={0} dashed plain>\n                {identifier}\n              </Divider>\n              {descriptions}\n            </>\n          )\n        }\n      }\n      selectedRoiInformation = (\n        <>\n          <Descriptions layout='horizontal' column={1}>\n            {roiDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Spatial coordinates\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiScoordDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Evaluations\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiEvaluationDescriptions}\n          </Descriptions>\n          <Divider orientation='left' orientationMargin={0}>\n            Measurements\n          </Divider>\n          <Descriptions layout='horizontal' column={1}>\n            {roiMeasurementDescriptions}\n          </Descriptions>\n        </>\n      )\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden',\n              cursor: cursor\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            open={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {annotationConfigurations}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isSelectedRoiModalVisible}\n            title='Selected ROI'\n            onCancel={this.handleRoiSelectionCancellation}\n            maskClosable\n            footer={null}\n          >\n            <Space align='start' direction='vertical'>\n              {selectedRoiInformation}\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isGoToModalVisible}\n            title='Go to slide position'\n            onOk={this.handleSlidePositionSelection}\n            onCancel={this.handleSlidePositionSelectionCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validXCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validXCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='X Coordinate [mm]'\n                onChange={this.handleXCoordinateSelection}\n                onPressEnter={this.handleXCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedXCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder={\n                  '[' +\n                  `${this.state.validYCoordinateRange[0]}` +\n                  ', ' +\n                  `${this.state.validYCoordinateRange[1]}` +\n                  ']'\n                }\n                prefix='Y Coordinate [mm]'\n                onChange={this.handleYCoordinateSelection}\n                onPressEnter={this.handleYCoordinateSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedYCoordinateValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n              <InputNumber\n                placeholder='[0 - 40]'\n                prefix='Magnification'\n                onChange={this.handleMagnificationSelection}\n                onPressEnter={this.handleMagnificationSelection}\n                controls={false}\n                addonAfter={\n                  this.state.isSelectedMagnificationValid\n                    ? (\n                      <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                    : (\n                      <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                      )\n                }\n              />\n            </Space>\n          </Modal>\n\n          <Modal\n            open={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n            onOpenChange={() => {\n              // Give menu item time to render before updating viewer size\n              setTimeout(() => {\n                if (this.labelViewer != null) {\n                  this.labelViewer.resize()\n                }\n              }, 100)\n            }}\n          >\n            {this.labelViewportRef.current != null && (\n              <Menu.SubMenu key='label' title='Slide label'>\n                <Menu.Item style={{ height: '100%' }} key='image'>\n                  <div\n                    style={{ height: '220px' }}\n                    ref={this.labelViewportRef}\n                  />\n                </Menu.Item>\n              </Menu.SubMenu>\n            )}\n            {specimenMenu}\n            {equipmentMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {annotations.length === 0\n              ? (\n                <></>\n                )\n              : (\n                <Menu.SubMenu\n                  key='annotation-category'\n                  title='Annotation Categories'\n                >\n                  <AnnotationCategoryList\n                    annotations={annotations}\n                    onChange={this.handleAnnotationVisibilityChange}\n                    checkedAnnotationUids={this.state.visibleRoiUIDs}\n                    onStyleChange={this.handleRoiStyleChange}\n                    defaultAnnotationStyles={this.defaultAnnotationStyles}\n                  />\n                </Menu.SubMenu>\n                )}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n        {this.state.isHoveredRoiTooltipVisible &&\n        this.state.hoveredRoiAttributes.length > 0\n          ? (\n            <HoveredRoiTooltip\n              xPosition={this.state.hoveredRoiTooltipX}\n              yPosition={this.state.hoveredRoiTooltipY}\n              rois={this.state.hoveredRoiAttributes}\n            />\n            )\n          : (\n            <></>\n            )}\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\nconst areSameAcquisition = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean => {\n  if (image.AcquisitionUID != null) {\n    return image.AcquisitionUID === refImage.AcquisitionUID\n  }\n  return false\n}\n\ninterface SlideImageCollection {\n  acquisitionUID?: string\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly acquisitionUID: string | null | undefined\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly pyramidUIDs: string[] = []\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'Value of option \"images\" have been non-zero length.'\n        )\n      )\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const acquisitionUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = {\n      VOLUME: new Set([] as string[]),\n      LABEL: new Set([] as string[]),\n      OVERVIEW: new Set([] as string[])\n    }\n    const pyramidUIDs: {\n      [key: string]: { [opticalPathIdentifier: string]: Set<string> }\n    } = {\n      VOLUME: {}\n    }\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (image.AcquisitionUID != null) {\n        acquisitionUIDs.add(image.AcquisitionUID)\n      }\n      if (\n        hasImageFlavor(image, ImageFlavors.VOLUME) ||\n        hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n      ) {\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\n        if (image.PyramidUID != null) {\n          for (const identifier in opticalPathIdentifiers) {\n            pyramidUIDs.VOLUME[identifier].add(image.PyramidUID)\n          }\n        }\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\n        overviewImages.push(image)\n      }\n    })\n    if (volumeImages.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'At least one VOLUME image must be provided for a slide.'\n        )\n      )\n    } else {\n      if (acquisitionUIDs.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.ENCODINGANDDECODING,\n            'All VOLUME images of a slide must have the same number of ' +\n            'Samples per Pixel.'\n          )\n        )\n      }\n      const isNotResampled = volumeImages.filter(image => {\n        return image.ImageType[3] !== 'RESAMPLED'\n      })\n      if (isNotResampled.length > opticalPathIdentifiers.size) {\n        console.warn(\n          'the set of VOLUME images of a slide must contain only a single ' +\n            'image that has not been resampled per optical path'\n        )\n      }\n    }\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n\n    if (containerIdentifiers.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All images of a slide must have the same Container Identifier.'\n        )\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must have ' +\n          'the same Frame of Reference UID.'\n        )\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\n\n    let requirePyramidUID = false\n    if (Object.keys(pyramidUIDs.VOLUME).length > 0) {\n      requirePyramidUID = true\n    }\n    this.opticalPathIdentifiers.forEach(identifier => {\n      if (pyramidUIDs.VOLUME[identifier] != null) {\n        if (pyramidUIDs.VOLUME[identifier].size > 1) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `All VOLUME images for optical path \"${identifier}\"` +\n              'must be part of the same multi-resolution pyramid.'\n            )\n          )\n        } else if (pyramidUIDs.VOLUME[identifier].size === 1) {\n          this.pyramidUIDs.push([...pyramidUIDs.VOLUME[identifier]][0])\n        } else {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      } else {\n        if (requirePyramidUID) {\n          NotificationMiddleware.onError(\n            NotificationMiddlewareContext.SLIM,\n            new CustomError(\n              errorTypes.ENCODINGANDDECODING,\n              `The VOLUME images for optical path \"${identifier}\" ` +\n              'lack the Pyramid UID, while the images for other optical paths ' +\n              'contain it.'\n            )\n          )\n        }\n      }\n    })\n\n    if (acquisitionUIDs.size > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.ENCODINGANDDECODING,\n          'All VOLUME images of a slide must be part of the same  ' +\n          'acquisition and have the same Acquisition UID.'\n        )\n      )\n    } else if (acquisitionUIDs.size === 1) {\n      this.acquisitionUID = [...acquisitionUIDs][0]\n    } else {\n      this.acquisitionUID = null\n    }\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) => {\n        return (\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n        )\n      })\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n\n        const labelImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.LABEL)\n        })\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (labelImages.length > 1) {\n          filteredLabelImages = labelImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredLabelImages = labelImages\n        }\n        const overviewImages = series.filter((image) => {\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n        })\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n        if (overviewImages.length > 1) {\n          filteredOverviewImages = overviewImages.filter((image) => {\n            return areSameAcquisition(image, refImage)\n          })\n        } else {\n          filteredOverviewImages = overviewImages\n        }\n\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            acquisitionUID: refImage.AcquisitionUID,\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: filteredLabelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier &&\n    slide.acquisitionUID === image.AcquisitionUID\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import * as dmv from 'dicom-microscopy-viewer'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { StorageClasses } from '../data/uids'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './NotificationMiddleware'\nimport { createSlides, Slide } from '../data/slides'\n\ninterface FetchImageMetadataParams {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  onSuccess: (slides: Slide[]) => void\n  onError: (error: Error) => void\n}\n\nexport const fetchImageMetadata = async ({\n  clients,\n  studyInstanceUID,\n  onSuccess,\n  onError\n}: FetchImageMetadataParams): Promise<void> => {\n  try {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n\n    const client = clients[StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE]\n    const matchedSeries = await client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(\n      matchedSeries.map(async (s) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const loadingSeries = dataset as dmv.metadata.Series\n        console.info(\n          `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n        )\n        const retrievedMetadata = await client.retrieveSeriesMetadata({\n          studyInstanceUID: studyInstanceUID,\n          seriesInstanceUID: loadingSeries.SeriesInstanceUID\n        })\n\n        const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n        retrievedMetadata.forEach((item) => {\n          if (\n            item['00080016']?.Value?.[0] ===\n            StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n          ) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        })\n\n        if (seriesImages.length > 0) {\n          images.push(seriesImages)\n        }\n      })\n    )\n    const newSlides = createSlides(images)\n    onSuccess(newSlides)\n  } catch (err) {\n    console.error(err)\n    const customError = new CustomError(\n      errorTypes.ENCODINGANDDECODING,\n      'Image metadata could not be retrieved or decoded.'\n    )\n    onError(customError)\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      customError\n    )\n  }\n}\n","import { useState, useEffect } from 'react'\n\nimport DicomWebManager from '../DicomWebManager'\nimport { Slide } from '../data/slides'\nimport { fetchImageMetadata } from '../services/fetchImageMetadata'\n\ninterface UseSlidesProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\ninterface UseSlidesReturn {\n  slides: Slide[]\n  isLoading: boolean\n  error: Error | null\n}\n\nconst slidesCache = new Map<string, Slide[]>()\nconst pendingRequests = new Map<string, Promise<Slide[]>>()\n\n/**\n * Hook to fetch and manage whole slide microscopy images for a given study.\n * Values are cached so they can be reused if props are not provided.\n *\n * @param props - Hook configuration props\n * @param props.clients - Map of DICOM web clients keyed by storage class\n */\nexport const useSlides = ({ clients, studyInstanceUID }: UseSlidesProps): UseSlidesReturn => {\n  const [slides, setSlides] = useState<Slide[]>([])\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  useEffect(() => {\n    if (studyInstanceUID === undefined) {\n      setSlides([])\n      setIsLoading(false)\n      return\n    }\n\n    const cachedData = slidesCache.get(studyInstanceUID)\n    if (cachedData !== undefined) {\n      setSlides(cachedData)\n      setIsLoading(false)\n      return\n    }\n\n    setIsLoading(true)\n\n    const fetchSlides = async (): Promise<void> => {\n      // Check if there's already a pending request for this study\n      let pendingRequest = pendingRequests.get(studyInstanceUID)\n\n      if (pendingRequest === undefined) {\n        // Create a new promise for this request\n        pendingRequest = new Promise((resolve, reject): void => {\n          fetchImageMetadata({\n            clients,\n            studyInstanceUID,\n            onSuccess: (newSlides) => {\n              slidesCache.set(studyInstanceUID, newSlides)\n              resolve(newSlides)\n            },\n            onError: (err) => {\n              reject(err)\n            }\n          }).catch((err) => {\n            reject(err)\n          })\n        })\n        pendingRequests.set(studyInstanceUID, pendingRequest)\n      }\n\n      try {\n        const newSlides = await pendingRequest\n        setSlides(newSlides)\n        setError(null)\n      } catch (err) {\n        setError(err as Error)\n        setSlides([])\n      } finally {\n        pendingRequests.delete(studyInstanceUID)\n        setIsLoading(false)\n      }\n    }\n\n    void fetchSlides()\n  }, [clients, studyInstanceUID])\n\n  return { slides, isLoading, error }\n}\n","import { Routes, Route, useLocation, useParams } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide } from '../data/slides'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport { useSlides } from '../hooks/useSlides'\n\nfunction ParametrizedSlideViewer ({\n  clients,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  clients: { [key: string]: DicomWebManager }\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID, seriesInstanceUID } = useParams()\n  const location = useLocation()\n\n  const selectedSlide = slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string | null | undefined\n  if (!searchParams.has('access_token')) {\n    presentationStateUID = searchParams.get('state')\n    if (presentationStateUID === null) {\n      presentationStateUID = undefined\n    }\n  }\n  let viewer = null\n  if (selectedSlide != null) {\n    viewer = (\n      <SlideViewer\n        clients={clients}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\nfunction Viewer (props: ViewerProps): JSX.Element | null {\n  const { clients, studyInstanceUID, location, navigate } = props\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n\n  const handleSeriesSelection = ({ seriesInstanceUID }: { seriesInstanceUID: string }): void => {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n\n    if (location.pathname.includes('/projects/')) {\n      urlPath = location.pathname\n      if (!location.pathname.includes('/series/')) {\n        urlPath += `/series/${seriesInstanceUID}`\n      } else {\n        urlPath = urlPath.replace(/\\/series\\/[^/]+/, `/series/${seriesInstanceUID}`)\n      }\n    }\n\n    if (\n      location.pathname.includes('/series/') &&\n      location.search != null\n    ) {\n      urlPath += location.search\n    }\n\n    navigate(urlPath, { replace: true })\n  }\n\n  if (isLoading) {\n    return null\n  }\n\n  if (slides.length === 0) {\n    return null\n  }\n\n  const firstSlide = slides[0]\n  const volumeInstances = firstSlide.volumeImages\n  if (volumeInstances.length === 0) {\n    return null\n  }\n  const refImage = volumeInstances[0]\n\n  /* If a series is encoded in the path, route the viewer to this series.\n   * Otherwise select the first series correspondent to\n   * the first slide contained in the study.\n   */\n  let selectedSeriesInstanceUID: string\n  if (location.pathname.includes('series/')) {\n    const seriesFragment = location.pathname.split('series/')[1]\n    selectedSeriesInstanceUID = seriesFragment.includes('/') ? seriesFragment.split('/')[0] : seriesFragment\n  } else {\n    selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n  }\n\n  let clinicalTrialMenu\n  if (refImage.ClinicalTrialSponsorName != null) {\n    clinicalTrialMenu = (\n      <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n        <ClinicalTrial metadata={refImage} />\n      </Menu.SubMenu>\n    )\n  }\n\n  return (\n    <Layout style={{ height: '100%' }} hasSider>\n      <Layout.Sider\n        width={300}\n        style={{\n          height: '100%',\n          borderRight: 'solid',\n          borderRightWidth: 0.25,\n          overflow: 'hidden',\n          background: 'none'\n        }}\n      >\n        <Menu\n          mode='inline'\n          defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n          style={{ height: '100%' }}\n          inlineIndent={14}\n        >\n          <Menu.SubMenu key='patient' title='Patient'>\n            <Patient metadata={refImage} />\n          </Menu.SubMenu>\n          <Menu.SubMenu key='study' title='Study'>\n            <Study metadata={refImage} />\n          </Menu.SubMenu>\n          {clinicalTrialMenu}\n          <Menu.SubMenu key='slides' title='Slides'>\n            <SlideList\n              clients={props.clients}\n              metadata={slides}\n              selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n              onSeriesSelection={handleSeriesSelection}\n            />\n          </Menu.SubMenu>\n        </Menu>\n      </Layout.Sider>\n\n      <Routes>\n        <Route\n          path='/series/:seriesInstanceUID'\n          element={\n            <ParametrizedSlideViewer\n              clients={props.clients}\n              slides={slides}\n              preload={props.preload}\n              annotations={props.annotations}\n              enableAnnotationTools={props.enableAnnotationTools}\n              app={props.app}\n              user={props.user}\n            />\n          }\n        />\n      </Routes>\n    </Layout>\n  )\n}\n\nexport default withRouter(Viewer)\n","import dcmjs from 'dcmjs'\n\nconst { DicomMetaDictionary } = dcmjs.data\n\ninterface TagInfo {\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TagInfo[]\n  level: number\n}\n\nexport interface DicomTag {\n  name: string\n  vr: string\n  Value?: any[]\n  [key: string]: any\n}\n\nconst formatValue = (val: any): string => {\n  if (typeof val === 'object' && val !== null) {\n    return JSON.stringify(val)\n  }\n  return String(val)\n}\n\nexport const formatTagValue = (tag: DicomTag): string => {\n  if (tag.Value == null) return ''\n\n  if (Array.isArray(tag.Value)) {\n    return tag.Value.map(formatValue).join(', ')\n  }\n\n  return formatValue(tag.Value)\n}\n\n/**\n * Processes DICOM metadata and returns a flattened array of tag information\n * @param metadata - The DICOM metadata object to process\n * @param depth - The current depth level for nested sequences (default: 0)\n * @returns Array of processed tag information\n */\nexport function getRows (metadata: Record<string, any>, depth = 0): TagInfo[] {\n  if (metadata === undefined || metadata === null) return []\n  const keywords = Object.keys(metadata).filter(key => key !== '_vrMap')\n\n  return keywords.flatMap(keyword => {\n    // @ts-expect-error\n    const tagInfo = DicomMetaDictionary.nameMap[keyword] as TagInfo | undefined\n    let value = metadata[keyword]\n\n    // Handle private or unknown tags\n    if (tagInfo === undefined) {\n      const regex = /[0-9A-Fa-f]{6}/g\n      if (keyword.match(regex) == null) return []\n\n      return [{\n        tag: `(${keyword.substring(0, 4)},${keyword.substring(4, 8)})`,\n        vr: '',\n        keyword: 'Private Tag',\n        value: value?.toString() ?? '',\n        level: depth\n      }]\n    }\n\n    // Handle sequence values (SQ VR)\n    if (tagInfo.vr === 'SQ' && value !== undefined) {\n      const sequenceItems = Array.isArray(value) ? value : [value]\n\n      // Create a parent sequence node\n      const sequenceNode: TagInfo = {\n        tag: tagInfo.tag,\n        vr: tagInfo.vr,\n        keyword,\n        value: `Sequence with ${sequenceItems.length} item(s)`,\n        level: depth,\n        children: []\n      }\n\n      // Create individual nodes for each sequence item\n      sequenceNode.children = sequenceItems.map((item, index) => {\n        const itemNode: TagInfo = {\n          tag: `${tagInfo.tag}.${index + 1}`,\n          vr: 'Item',\n          keyword: `Item ${index + 1}`,\n          value: `Sequence Item ${index + 1}`,\n          level: depth + 1,\n          children: getRows(item, depth + 2)\n        }\n        return itemNode\n      })\n\n      return [sequenceNode]\n    }\n\n    // Handle array values\n    if (Array.isArray(value)) {\n      value = value.map(formatValue).join('\\\\')\n    } else if (typeof value === 'object' && value !== null) {\n      value = formatValue(value)\n    }\n\n    return [{\n      tag: tagInfo.tag,\n      vr: tagInfo.vr,\n      keyword: keyword.replace('RETIRED_', ''),\n      value: value?.toString() ?? '',\n      level: depth\n    }]\n  })\n}\n\n/**\n * Sorts DICOM tags alphabetically by tag value\n * @param metadata - The DICOM metadata object to process\n * @returns Sorted array of tag information\n */\nexport function getSortedTags (metadata: Record<string, any>): TagInfo[] {\n  const tagList = getRows(metadata)\n  return tagList.sort((a, b) => a.tag.localeCompare(b.tag))\n}\n","/**\n * Formats a DICOM datetime string (YYYYMMDD:HHmmss) into a human-readable format\n *\n * @param dateStr - DICOM datetime string in format \"YYYYMMDD:HHmmss\"\n * @returns Formatted date string (e.g., \"Mon, Jan 1 2024\")\n * @example\n * formatDicomDate(\"20240101:120000\") // Returns \"Mon, Jan 1 2024\"\n * formatDicomDate(\"invalid\") // Returns \"invalid\"\n */\nexport const formatDicomDate = (dateStr: string): string => {\n  // Parse YYYYMMDD:HHmmss format\n  const match = dateStr.match(/^(\\d{4})(\\d{2})(\\d{2}):(\\d{2})(\\d{2})(\\d{2})/)\n  if (match == null) return dateStr\n\n  const [, year, month, day, hour, minute, second] = match\n\n  // Validate month and day\n  const monthNum = parseInt(month)\n  const dayNum = parseInt(day)\n  if (monthNum < 1 || monthNum > 12 || dayNum < 1 || dayNum > 31) {\n    return dateStr\n  }\n\n  const date = new Date(\n    parseInt(year),\n    monthNum - 1, // months are 0-based\n    dayNum,\n    parseInt(hour),\n    parseInt(minute),\n    parseInt(second)\n  )\n\n  // Check if the date is invalid or if the month/day combination is invalid\n  // This catches cases like February 31st where the date rolls over to March\n  if (\n    date.getMonth() !== monthNum - 1 || // month rolled over\n    date.getDate() !== dayNum // day rolled over\n  ) {\n    return dateStr\n  }\n\n  // Format parts separately to avoid the extra comma\n  const weekday = date.toLocaleDateString('en-US', { weekday: 'short' })\n  const monthName = date.toLocaleDateString('en-US', { month: 'short' })\n  const dayFormatted = date.getDate()\n  const yearNum = date.getFullYear()\n\n  return `${weekday}, ${monthName} ${dayFormatted} ${yearNum}`\n}\n","import { v4 as generateUUID } from 'uuid'\n\n/**\n * Consumer must implement:\n * this.listeners = {}\n * this.EVENTS = { \"EVENT_KEY\": \"EVENT_VALUE\" }\n */\nconst pubSubInterface = {\n  subscribe,\n  _broadcastEvent,\n  _unsubscribe,\n  _isValidEvent\n}\n\nexport default pubSubInterface\n\n/**\n * Subscribe to updates.\n *\n * @param {string} eventName The name of the event\n * @param {Function} callback Events callback\n * @return {Object} Observable object with actions\n */\nfunction subscribe (this: PubSubService, eventName: string, callback: Function): { unsubscribe: () => any } {\n  if (this._isValidEvent(eventName)) {\n    const listenerId = generateUUID()\n    const subscription = { id: listenerId, callback }\n\n    // console.info(`Subscribing to '${eventName}'.`);\n    if (Array.isArray(this.listeners[eventName])) {\n      this.listeners[eventName].push(subscription)\n    } else {\n      this.listeners[eventName] = [subscription]\n    }\n\n    return {\n      unsubscribe: () => this._unsubscribe(eventName, listenerId)\n    }\n  } else {\n    throw new Error(`Event ${eventName} not supported.`)\n  }\n}\n\n/**\n * Unsubscribe to measurement updates.\n *\n * @param {string} eventName The name of the event\n * @param {string} listenerId The listeners id\n * @return void\n */\nfunction _unsubscribe (this: PubSubService, eventName: string, listenerId: string): void {\n  if (this.listeners[eventName] === undefined) {\n    return\n  }\n\n  const listeners = this.listeners[eventName]\n  if (Array.isArray(listeners)) {\n    this.listeners[eventName] = listeners.filter(({ id }) => id !== listenerId)\n  } else {\n    this.listeners[eventName] = []\n  }\n}\n\n/**\n * Check if a given event is valid.\n *\n * @param {string} eventName The name of the event\n * @return {boolean} Event name validation\n */\nfunction _isValidEvent (this: PubSubService, eventName: string): boolean {\n  return Object.values(this.EVENTS).includes(eventName)\n}\n\n/**\n * Broadcasts changes.\n *\n * @param {string} eventName - The event name\n * @param {func} callbackProps - Properties to pass callback\n * @return void\n */\nfunction _broadcastEvent (this: PubSubService, eventName: string, callbackProps: any): void {\n  const hasListeners = Object.keys(this.listeners).length > 0\n  const hasCallbacks = Array.isArray(this.listeners[eventName])\n\n  if (hasListeners && hasCallbacks) {\n    this.listeners[eventName].forEach((listener: { id: string, callback: Function }) => {\n      listener.callback(callbackProps)\n    })\n  }\n}\n\n/** Export a PubSubService class to be used instead of the individual items */\nexport class PubSubService {\n  EVENTS: any\n  subscribe: (\n    eventName: string,\n    callback: Function\n  ) => { unsubscribe: () => any }\n\n  _broadcastEvent: (eventName: string, callbackProps: any) => void\n  _unsubscribe: (eventName: string, listenerId: string) => void\n  _isValidEvent: (eventName: string) => boolean\n  listeners: { [key: string]: Array<{ id: string, callback: Function }> }\n  unsubscriptions: any[]\n  constructor (EVENTS: Record<string, string>) {\n    this.EVENTS = EVENTS\n    this.subscribe = subscribe\n    this._broadcastEvent = _broadcastEvent\n    this._unsubscribe = _unsubscribe\n    this._isValidEvent = _isValidEvent\n    this.listeners = {}\n    this.unsubscriptions = []\n  }\n\n  reset (): void {\n    this.unsubscriptions.forEach((unsub) => unsub())\n    this.unsubscriptions = []\n  }\n\n  /**\n   * Creates an event that records whether or not someone\n   * has consumed it.  Call eventData.consume() to consume the event.\n   * Check eventData.isConsumed to see if it is consumed or not.\n   * @param props - to include in the event\n   */\n  protected createConsumableEvent (props: Record<string, any>): Record<string, any> {\n    return {\n      ...props,\n      isConsumed: false,\n      consume: function Consume () {\n        this.isConsumed = true\n      }\n    }\n  }\n}\n","import { Instance, Series } from '../services/DICOMMetadataStore'\n\nfunction createSeriesMetadata (SeriesInstanceUID: string, defaultInstances?: Instance[]): Series {\n  const instances: Instance[] = []\n  const instancesMap = new Map<string, Instance>()\n\n  return {\n    SeriesInstanceUID,\n    Modality: '',\n    SeriesNumber: 0,\n    SeriesDescription: '',\n    SeriesDate: '',\n    SeriesTime: '',\n    ...defaultInstances?.[0],\n    instances,\n    addInstance: function (newInstance: Instance) {\n      this.addInstances([newInstance])\n    },\n    addInstances: function (newInstances: Instance[]) {\n      for (let i = 0, len = newInstances.length; i < len; i++) {\n        const instance = newInstances[i]\n\n        if (!instancesMap.has(instance.SOPInstanceUID)) {\n          instancesMap.set(instance.SOPInstanceUID, instance)\n          instances.push(instance)\n        }\n      }\n    },\n    getInstance: function (SOPInstanceUID: string) {\n      return instancesMap.get(SOPInstanceUID)\n    }\n  }\n}\n\nexport default createSeriesMetadata\n","import createSeriesMetadata from './createSeriesMetadata'\n\nimport { Study, Series, Instance } from '../services/DICOMMetadataStore'\n\nfunction createStudyMetadata (StudyInstanceUID: string): Study {\n  return {\n    StudyInstanceUID,\n    StudyDescription: '',\n    PatientID: '',\n    PatientName: '',\n    StudyDate: '',\n    AccessionNumber: '',\n    NumInstances: 0,\n    ModalitiesInStudy: [],\n    isLoaded: false,\n    series: [] as Series[],\n    /**\n     * @param {object} instance\n     */\n    addInstanceToSeries: function (instance: Instance) {\n      this.addInstancesToSeries([instance])\n    },\n    /**\n     * @param {object[]} instances\n     * @param {string} instances[].SeriesInstanceUID\n     * @param {string} instances[].StudyDescription\n     */\n    addInstancesToSeries: function (instances: Instance[]) {\n      const { SeriesInstanceUID } = instances[0]\n\n      if (this.StudyDescription !== '' && this.StudyDescription !== undefined) {\n        this.StudyDescription = instances[0].StudyDescription\n      }\n\n      let series = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (series == null) {\n        series = createSeriesMetadata(SeriesInstanceUID, instances)\n        this.series.push(series)\n      }\n\n      series.addInstances(instances)\n    },\n\n    setSeriesMetadata: function (\n      SeriesInstanceUID: string,\n      seriesMetadata: any\n    ) {\n      let existingSeries = this.series.find(\n        (s) => s.SeriesInstanceUID === SeriesInstanceUID\n      )\n\n      if (existingSeries != null) {\n        existingSeries = Object.assign(existingSeries, seriesMetadata)\n      } else {\n        const series = createSeriesMetadata(SeriesInstanceUID)\n        this.series.push(Object.assign(series, seriesMetadata))\n      }\n    }\n  }\n}\n\nexport default createStudyMetadata\n","import dcmjs from 'dcmjs'\n\nimport pubSubServiceInterface from '../utils/pubSubServiceInterface'\nimport createStudyMetadata from '../utils/createStudyMetadata'\n\nexport const EVENTS = {\n  STUDY_ADDED: 'event::dicomMetadataStore:studyAdded',\n  INSTANCES_ADDED: 'event::dicomMetadataStore:instancesAdded',\n  SERIES_ADDED: 'event::dicomMetadataStore:seriesAdded',\n  SERIES_UPDATED: 'event::dicomMetadataStore:seriesUpdated'\n}\n\nexport interface Instance {\n  SOPInstanceUID: string\n  SOPClassUID: string\n  Rows: number\n  Columns: number\n  PatientSex: string\n  Modality: string\n  InstanceNumber: string\n  imageId?: string\n  [key: string]: any // For dynamic metadata properties\n}\n\nexport interface Series {\n  Modality: string\n  SeriesInstanceUID: string\n  SeriesNumber: number\n  SeriesDate: string\n  SeriesTime: string\n  SeriesDescription: string\n  instances: Instance[]\n  addInstance: (newInstance: Instance) => void\n  addInstances: (newInstances: Instance[]) => void\n  getInstance: (SOPInstanceUID: string) => Instance | undefined\n}\n\nexport interface Study {\n  StudyInstanceUID: string\n  StudyDescription: string\n  PatientID: string\n  PatientName: string\n  StudyDate: string\n  AccessionNumber: string\n  NumInstances: number\n  ModalitiesInStudy: any[]\n  NumberOfStudyRelatedSeries?: number\n  isLoaded: boolean\n  series: Series[]\n  addInstanceToSeries: (instance: Instance) => void\n  addInstancesToSeries: (instances: Instance[]) => void\n  setSeriesMetadata: (SeriesInstanceUID: string, metadata: any) => void\n}\n\ninterface Model {\n  studies: Study[]\n}\n\nconst _model: Model = {\n  studies: []\n}\n\nfunction _getStudyInstanceUIDs (): string[] {\n  return _model.studies.map((aStudy) => aStudy.StudyInstanceUID)\n}\n\nfunction _getStudy (StudyInstanceUID: string): Study | undefined {\n  return _model.studies.find(\n    (aStudy) => aStudy.StudyInstanceUID === StudyInstanceUID\n  )\n}\n\nfunction _getSeries (StudyInstanceUID: string, SeriesInstanceUID: string): Series | undefined {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  return study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n}\n\nfunction _getInstance (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  SOPInstanceUID: string\n): Instance | undefined {\n  const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n\n  if (series == null) {\n    return\n  }\n\n  return series.getInstance(SOPInstanceUID)\n}\n\nfunction _getInstanceByImageId (imageId: string): Instance | undefined {\n  for (const study of _model.studies) {\n    for (const series of study.series) {\n      for (const instance of series.instances) {\n        if (instance.imageId === imageId) {\n          return instance\n        }\n      }\n    }\n  }\n}\n\n/**\n * Update the metadata of a specific series\n * @param {*} StudyInstanceUID\n * @param {*} SeriesInstanceUID\n * @param {*} metadata metadata inform of key value pairs\n * @returns\n */\nfunction _updateMetadataForSeries (\n  StudyInstanceUID: string,\n  SeriesInstanceUID: string,\n  metadata: Record<string, any>\n): void {\n  const study = _getStudy(StudyInstanceUID)\n\n  if (study == null) {\n    return\n  }\n\n  const series = study.series.find(\n    (aSeries) => aSeries.SeriesInstanceUID === SeriesInstanceUID\n  )\n\n  if (series == null) {\n    return\n  }\n\n  const { instances } = series\n  instances.forEach((instance) => {\n    Object.keys(metadata).forEach((key) => {\n      if (typeof metadata[key] === 'object') {\n        instance[key] = { ...instance[key], ...metadata[key] }\n      } else {\n        instance[key] = metadata[key]\n      }\n    })\n  })\n}\n\ninterface BaseImplementationType {\n  EVENTS: typeof EVENTS\n  listeners: Record<string, any>\n  addInstance: (dicomJSONDatasetOrP10ArrayBuffer: ArrayBuffer | Record<string, any>) => void\n  addInstances: (instances: Instance[], madeInClient?: boolean) => void\n  updateSeriesMetadata: (seriesMetadata: Record<string, any>) => void\n  addSeriesMetadata: (seriesSummaryMetadata: Array<Record<string, any>>, madeInClient?: boolean) => void\n  addStudy: (study: Record<string, any>) => void\n  getStudyInstanceUIDs: typeof _getStudyInstanceUIDs\n  getStudy: typeof _getStudy\n  getSeries: typeof _getSeries\n  getInstance: typeof _getInstance\n  getInstanceByImageId: typeof _getInstanceByImageId\n  updateMetadataForSeries: typeof _updateMetadataForSeries\n  _broadcastEvent: (eventName: string, data: any) => void\n}\n\nconst BaseImplementation: BaseImplementationType = {\n  EVENTS,\n  listeners: {},\n  addInstance (dicomJSONDatasetOrP10ArrayBuffer) {\n    let dicomJSONDataset\n\n    // If Arraybuffer, parse to DICOMJSON before naturalizing.\n    if (dicomJSONDatasetOrP10ArrayBuffer instanceof ArrayBuffer) {\n      const dicomData = dcmjs.data.DicomMessage.readFile(\n        dicomJSONDatasetOrP10ArrayBuffer\n      )\n\n      dicomJSONDataset = dicomData.dict\n    } else {\n      dicomJSONDataset = dicomJSONDatasetOrP10ArrayBuffer\n    }\n\n    let naturalizedDataset: Instance\n\n    if (!('SeriesInstanceUID' in dicomJSONDataset)) {\n      naturalizedDataset =\n        dcmjs.data.DicomMetaDictionary.naturalizeDataset(dicomJSONDataset) as Instance\n    } else {\n      naturalizedDataset = dicomJSONDataset as unknown as Instance\n    }\n\n    const { StudyInstanceUID } = naturalizedDataset\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstanceToSeries(naturalizedDataset)\n  },\n  addInstances (instances, madeInClient = false) {\n    const { StudyInstanceUID, SeriesInstanceUID } = instances[0]\n\n    let study = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (study == null) {\n      _model.studies.push(createStudyMetadata(StudyInstanceUID))\n      study = _model.studies[_model.studies.length - 1]\n    }\n\n    study.addInstancesToSeries(instances)\n\n    // Broadcast an event even if we used cached data.\n    // This is because the mode needs to listen to instances that are added to build up its active displaySets.\n    // It will see there are cached displaySets and end early if this Series has already been fired in this\n    // Mode session for some reason.\n    this._broadcastEvent(EVENTS.INSTANCES_ADDED, {\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      madeInClient\n    })\n  },\n  updateSeriesMetadata (seriesMetadata) {\n    const { StudyInstanceUID, SeriesInstanceUID } = seriesMetadata\n    const series = _getSeries(StudyInstanceUID, SeriesInstanceUID)\n    if (series == null) {\n      return\n    }\n\n    const study = _getStudy(StudyInstanceUID)\n    if (study != null) {\n      study.setSeriesMetadata(SeriesInstanceUID, seriesMetadata)\n    }\n  },\n  addSeriesMetadata (seriesSummaryMetadata, madeInClient = false) {\n    if (\n      seriesSummaryMetadata === undefined ||\n      seriesSummaryMetadata.length === 0 ||\n      seriesSummaryMetadata[0] === undefined\n    ) {\n      return\n    }\n\n    const { StudyInstanceUID } = seriesSummaryMetadata[0]\n    let study = _getStudy(StudyInstanceUID)\n    if (study == null) {\n      study = createStudyMetadata(StudyInstanceUID)\n      // Will typically be undefined with a compliant DICOMweb server, reset later\n      study.StudyDescription = seriesSummaryMetadata[0].StudyDescription\n      seriesSummaryMetadata?.forEach((item) => {\n        if (study !== undefined && !study.ModalitiesInStudy?.includes(item.Modality)) {\n          study.ModalitiesInStudy?.push(item.Modality)\n        }\n      })\n      study.NumberOfStudyRelatedSeries = seriesSummaryMetadata.length\n      _model.studies.push(study)\n    }\n\n    seriesSummaryMetadata.forEach((series) => {\n      const { SeriesInstanceUID } = series\n      study?.setSeriesMetadata(SeriesInstanceUID, series)\n    })\n\n    this._broadcastEvent(EVENTS.SERIES_ADDED, {\n      StudyInstanceUID,\n      seriesSummaryMetadata,\n      madeInClient\n    })\n  },\n  addStudy (study) {\n    const { StudyInstanceUID } = study\n\n    const existingStudy = _model.studies.find(\n      (study) => study.StudyInstanceUID === StudyInstanceUID\n    )\n\n    if (existingStudy == null) {\n      const newStudy = createStudyMetadata(StudyInstanceUID)\n\n      newStudy.PatientID = study.PatientID\n      newStudy.PatientName = study.PatientName\n      newStudy.StudyDate = study.StudyDate\n      newStudy.ModalitiesInStudy = study.ModalitiesInStudy\n      newStudy.StudyDescription = study.StudyDescription\n      newStudy.AccessionNumber = study.AccessionNumber\n      newStudy.NumInstances = study.NumInstances // todo: Correct naming?\n\n      _model.studies.push(newStudy)\n    }\n  },\n  getStudyInstanceUIDs: _getStudyInstanceUIDs,\n  getStudy: _getStudy,\n  getSeries: _getSeries,\n  getInstance: _getInstance,\n  getInstanceByImageId: _getInstanceByImageId,\n  updateMetadataForSeries: _updateMetadataForSeries,\n  _broadcastEvent (eventName: string, data: any): void {\n  }\n}\n\ninterface DicomMetadataStoreType extends BaseImplementationType {\n  subscribe: (event: string, callback: (data: any) => void) => { unsubscribe: () => any }\n  unsubscribe: (event: string, callback: (data: any) => void) => void\n}\n\nconst DicomMetadataStore = Object.assign(\n  {},\n  BaseImplementation,\n  pubSubServiceInterface\n) as unknown as DicomMetadataStoreType\n\nexport { DicomMetadataStore }\nexport default DicomMetadataStore\n","import { useState, useEffect } from 'react'\n\n/**\n * A hook that delays updating a value for the specified time\n * @param value The value to debounce\n * @param delay The delay time in milliseconds\n * @returns The debounced value\n * @example\n * const debouncedSearchTerm = useDebounce(searchTerm, 300)\n */\nexport const useDebounce = <T,>(value: T, delay: number): T => {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import { useState, useMemo, useEffect } from 'react'\nimport { Select, Input, Slider, Typography, Table } from 'antd'\nimport { SearchOutlined } from '@ant-design/icons'\n\nimport DicomWebManager from '../../DicomWebManager'\nimport './DicomTagBrowser.css'\nimport { useSlides } from '../../hooks/useSlides'\nimport { getSortedTags } from './dicomTagUtils'\nimport { formatDicomDate } from '../../utils/formatDicomDate'\nimport DicomMetadataStore, { Series, Study } from '../../services/DICOMMetadataStore'\nimport { useDebounce } from '../../hooks/useDebounce'\n\nconst { Option } = Select\n\ninterface DisplaySet {\n  displaySetInstanceUID: number\n  SeriesDate?: string\n  SeriesTime?: string\n  SeriesNumber: string\n  SeriesDescription?: string\n  Modality: string\n  images: any[]\n}\n\ninterface TableDataItem {\n  key: string\n  tag: string\n  vr: string\n  keyword: string\n  value: string\n  children?: TableDataItem[]\n}\n\ninterface DicomTagBrowserProps {\n  clients: { [key: string]: DicomWebManager }\n  studyInstanceUID: string\n}\n\nconst DicomTagBrowser = ({ clients, studyInstanceUID }: DicomTagBrowserProps): JSX.Element => {\n  const { slides, isLoading } = useSlides({ clients, studyInstanceUID })\n  const [study, setStudy] = useState<Study | undefined>(undefined)\n\n  const [displaySets, setDisplaySets] = useState<DisplaySet[]>([])\n  const [selectedDisplaySetInstanceUID, setSelectedDisplaySetInstanceUID] = useState(0)\n  const [instanceNumber, setInstanceNumber] = useState(1)\n  const [filterValue, setFilterValue] = useState('')\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([])\n  const [searchInput, setSearchInput] = useState('')\n\n  const debouncedSearchValue = useDebounce(searchInput, 300)\n\n  useEffect(() => {\n    if (debouncedSearchValue === '') {\n      setFilterValue('')\n      setExpandedKeys([])\n    } else {\n      setFilterValue(debouncedSearchValue)\n    }\n  }, [debouncedSearchValue])\n\n  useEffect(() => {\n    const handler = (event: any): void => {\n      const study: Study | undefined = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n      setStudy(study)\n    }\n    const seriesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.SERIES_ADDED, handler)\n    const instancesAddedSubscription = DicomMetadataStore.subscribe(DicomMetadataStore.EVENTS.INSTANCES_ADDED, handler)\n\n    const study = Object.assign({}, DicomMetadataStore.getStudy(studyInstanceUID))\n    setStudy(study)\n\n    return () => {\n      seriesAddedSubscription.unsubscribe()\n      instancesAddedSubscription.unsubscribe()\n    }\n  }, [studyInstanceUID])\n\n  useEffect(() => {\n    let displaySets: DisplaySet[] = []\n    let derivedDisplaySets: DisplaySet[] = []\n    const processedSeries: string[] = []\n    let index = 0\n\n    if (slides.length > 0) {\n      displaySets = slides\n        .map((slide): DisplaySet | null => {\n          const { volumeImages } = slide\n          if (volumeImages?.[0] === undefined) return null\n\n          const {\n            SeriesDate,\n            SeriesTime,\n            SeriesNumber,\n            SeriesInstanceUID,\n            SeriesDescription,\n            Modality\n          } = volumeImages[0]\n\n          processedSeries.push(SeriesInstanceUID)\n\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate,\n            SeriesTime,\n            SeriesInstanceUID,\n            // @ts-expect-error\n            SeriesNumber,\n            SeriesDescription,\n            Modality,\n            images: volumeImages\n          }\n          index++\n          return ds\n        })\n        .filter((set): set is DisplaySet => set !== null)\n    }\n\n    if (study !== undefined && study.series?.length > 0) {\n      derivedDisplaySets = study.series.filter(s => !processedSeries.includes(s.SeriesInstanceUID))\n        .map((series: Series): DisplaySet => {\n          const ds: DisplaySet = {\n            displaySetInstanceUID: index,\n            SeriesDate: series.SeriesDate,\n            SeriesTime: series.SeriesTime,\n            // @ts-expect-error\n            SeriesNumber: series.SeriesNumber,\n            SeriesDescription: series.SeriesDescription,\n            SeriesInstanceUID: series.SeriesInstanceUID,\n            Modality: series.Modality,\n            images: series?.instances?.length > 0 ? series.instances : [series]\n          }\n          index++\n          return ds\n        })\n    }\n\n    setDisplaySets([...displaySets, ...derivedDisplaySets])\n  }, [slides, study])\n\n  const displaySetList = useMemo(() => {\n    displaySets.sort((a, b) => Number(a.SeriesNumber) - Number(b.SeriesNumber))\n    return displaySets.map((displaySet, index) => {\n      const {\n        SeriesDate = '',\n        SeriesTime = '',\n        SeriesNumber = '',\n        SeriesDescription = '',\n        Modality = ''\n      } = displaySet\n\n      const dateStr = `${SeriesDate}:${SeriesTime}`.split('.')[0]\n      const displayDate = formatDicomDate(dateStr)\n\n      return {\n        value: index,\n        label: `${SeriesNumber} (${Modality}): ${SeriesDescription}`,\n        description: displayDate\n      }\n    })\n  }, [displaySets])\n\n  const showInstanceList =\n    displaySets[selectedDisplaySetInstanceUID]?.images.length > 1\n\n  console.debug('displaySets:', displaySets)\n\n  const instanceSliderMarks = useMemo(() => {\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return {}\n    const totalInstances = displaySets[selectedDisplaySetInstanceUID].images.length\n\n    // Create marks for first, middle, and last instances\n    const marks: Record<number, string> = {\n      1: '1', // First\n      [Math.ceil(totalInstances / 2)]: String(Math.ceil(totalInstances / 2)), // Middle\n      [totalInstances]: String(totalInstances) // Last\n    }\n\n    return marks\n  }, [selectedDisplaySetInstanceUID, displaySets])\n\n  const columns = [\n    {\n      title: 'Tag',\n      dataIndex: 'tag',\n      key: 'tag',\n      width: '30%'\n    },\n    {\n      title: 'VR',\n      dataIndex: 'vr',\n      key: 'vr',\n      width: '5%'\n    },\n    {\n      title: 'Keyword',\n      dataIndex: 'keyword',\n      key: 'keyword',\n      width: '30%'\n    },\n    {\n      title: 'Value',\n      dataIndex: 'value',\n      key: 'value',\n      width: '40%'\n    }\n  ]\n\n  const tableData = useMemo(() => {\n    const transformTagsToTableData = (tags: any[], parentKey = ''): TableDataItem[] => {\n      return tags.map((tag, index) => {\n        // Create a unique key using tag value if available, otherwise use index\n        const keyBase: string = tag.tag !== '' ? tag.tag.replace(/[(),]/g, '') : index.toString()\n        const currentKey: string = parentKey !== '' ? `${parentKey}-${keyBase}` : keyBase\n\n        const item: TableDataItem = {\n          key: currentKey,\n          tag: tag.tag,\n          vr: tag.vr,\n          keyword: tag.keyword,\n          value: tag.value\n        }\n\n        if (tag.children !== undefined && tag.children.length > 0) {\n          item.children = transformTagsToTableData(tag.children, currentKey)\n        }\n\n        return item\n      })\n    }\n\n    if (displaySets[selectedDisplaySetInstanceUID] === undefined) return []\n    const metadata = displaySets[selectedDisplaySetInstanceUID]?.images[instanceNumber - 1]\n    const tags = getSortedTags(metadata)\n    return transformTagsToTableData(tags)\n  }, [instanceNumber, selectedDisplaySetInstanceUID, displaySets])\n\n  const filteredData = useMemo(() => {\n    if (filterValue === undefined || filterValue === '') return tableData\n\n    const searchLower = filterValue.toLowerCase()\n    const matchedKeys = new Set<string>()\n\n    const nodeMatches = (node: TableDataItem): boolean => {\n      return (\n        (node.tag?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.vr?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.keyword?.toLowerCase() ?? '').includes(searchLower) ||\n        (node.value?.toString().toLowerCase() ?? '').includes(searchLower)\n      )\n    }\n\n    // First pass: find all matching nodes and their parent paths\n    const findMatchingPaths = (\n      node: TableDataItem,\n      parentPath: TableDataItem[] = []\n    ): TableDataItem[][] => {\n      const currentPath = [...parentPath, node]\n      let matchingPaths: TableDataItem[][] = []\n\n      if (nodeMatches(node)) {\n        matchingPaths.push(currentPath)\n      }\n\n      if (node.children != null) {\n        node.children.forEach(child => {\n          const childPaths = findMatchingPaths(child, currentPath)\n          matchingPaths = [...matchingPaths, ...childPaths]\n        })\n      }\n\n      return matchingPaths\n    }\n\n    // Find all paths that contain matches\n    const matchingPaths = tableData.flatMap(node => findMatchingPaths(node))\n\n    // Second pass: reconstruct the tree with matching paths\n    const reconstructTree = (\n      paths: TableDataItem[][],\n      level = 0\n    ): TableDataItem[] => {\n      if (paths.length === 0 || level >= paths[0].length) return []\n\n      const nodesAtLevel = new Map<string, {\n        node: TableDataItem\n        childPaths: TableDataItem[][]\n      }>()\n\n      paths.forEach(path => {\n        if (level < path.length) {\n          const node = path[level]\n          if (!nodesAtLevel.has(node.key)) {\n            nodesAtLevel.set(node.key, {\n              node: { ...node },\n              childPaths: []\n            })\n          }\n          if (level + 1 < path.length) {\n            nodesAtLevel.get(node.key)?.childPaths.push(path)\n          }\n        }\n      })\n\n      return Array.from(nodesAtLevel.values()).map(({ node, childPaths }) => {\n        matchedKeys.add(node.key)\n        const children = reconstructTree(childPaths, level + 1)\n        return children.length > 0 ? { ...node, children } : node\n      })\n    }\n\n    const filtered = reconstructTree(matchingPaths)\n    setExpandedKeys(Array.from(matchedKeys))\n\n    return filtered\n  }, [tableData, filterValue])\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div className='dicom-tag-browser'>\n      <div\n        style={{\n          width: '100%',\n          padding: '16px 20px 20px'\n        }}\n      >\n        <div style={{ display: 'flex', gap: '24px', marginBottom: '32px' }}>\n          <div style={{ flex: 1 }}>\n            <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>Slides</Typography.Text>\n            <Select\n              style={{ width: '100%' }}\n              value={selectedDisplaySetInstanceUID}\n              onChange={(value) => {\n                setSelectedDisplaySetInstanceUID(value)\n                setInstanceNumber(1)\n              }}\n              optionLabelProp='label'\n              optionFilterProp='label'\n            >\n              {displaySetList.map((item) => (\n                <Option key={item.value} value={item.value} label={item.label}>\n                  <div>\n                    <div>{item.label}</div>\n                    <div\n                      style={{ fontSize: '12px', color: 'rgba(0, 0, 0, 0.45)' }}\n                    >\n                      {item.description}\n                    </div>\n                  </div>\n                </Option>\n              ))}\n            </Select>\n          </div>\n\n          {showInstanceList && (\n            <div style={{ flex: 1 }}>\n              <Typography.Text strong style={{ display: 'block', marginBottom: '8px' }}>\n                Instance Number: {instanceNumber}\n              </Typography.Text>\n              <Slider\n                min={1}\n                max={displaySets[selectedDisplaySetInstanceUID]?.images.length}\n                value={instanceNumber}\n                onChange={(value) => setInstanceNumber(value)}\n                marks={instanceSliderMarks}\n                tooltip={{\n                  formatter: (value: number | undefined) => value !== undefined ? `Instance ${value}` : ''\n                }}\n              />\n            </div>\n          )}\n        </div>\n\n        <Input\n          style={{ marginBottom: '20px' }}\n          placeholder='Search DICOM tags...'\n          prefix={<SearchOutlined />}\n          onChange={(e) => setSearchInput(e.target.value)}\n          value={searchInput}\n        />\n\n        <Table\n          columns={columns}\n          dataSource={filteredData}\n          pagination={false}\n          expandable={{\n            expandedRowKeys: expandedKeys,\n            onExpandedRowsChange: (keys) => setExpandedKeys(keys as string[])\n          }}\n          size='small'\n          scroll={{ y: 500 }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default DicomTagBrowser\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Modal,\n  Row,\n  Space,\n  Badge,\n  Collapse\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  FileSearchOutlined,\n  UnorderedListOutlined,\n  UserOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\nimport NotificationMiddleware, { NotificationMiddlewareEvents } from '../services/NotificationMiddleware'\nimport { CustomError } from '../utils/CustomError'\nimport { v4 as uuidv4 } from 'uuid'\nimport DicomTagBrowser from './DicomTagBrowser/DicomTagBrowser'\nimport DicomWebManager from '../DicomWebManager'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  clients: { [key: string]: DicomWebManager }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface ExtendedCustomError extends CustomError {\n  source: string\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n  errorObj: ExtendedCustomError[]\n  errorCategory: string[]\n  warnings: string[]\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    this.state = {\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: true,\n      errorObj: [],\n      errorCategory: [],\n      warnings: []\n    }\n\n    const onErrorHandler = ({ source, error }: {\n      source: string\n      error: CustomError\n    }): void => {\n      this.setState(state => ({\n        ...state,\n        errorObj: [...state.errorObj, { ...error, source }],\n        errorCategory: [...state.errorCategory, error.type]\n      }))\n    }\n\n    const onWarningHandler = (warning: string): void => {\n      this.setState(state => ({\n        ...state,\n        warnings: [...state.warnings, warning]\n      }))\n    }\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnError,\n      onErrorHandler\n    )\n\n    NotificationMiddleware.subscribe(\n      NotificationMiddlewareEvents.OnWarning,\n      onWarningHandler\n    )\n  }\n\n  componentDidUpdate (prevProps: Readonly<HeaderProps>, prevState: Readonly<HeaderState>): void {\n    if (((prevState.warnings.length > 0) || (prevState.errorObj.length > 0)) && this.props.location.pathname !== prevProps.location.pathname) {\n      this.setState({\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true,\n        errorObj: [],\n        errorCategory: [],\n        warnings: []\n      })\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleDicomTagBrowserButtonClick = (): void => {\n    const width = window.innerWidth - 200\n    Modal.info({\n      title: 'DICOM Tag Browser',\n      width,\n      content: <DicomTagBrowser\n        clients={this.props.clients}\n        studyInstanceUID={this.props.params.studyInstanceUID ?? ''}\n               />,\n      onOk (): void {}\n    })\n  }\n\n  handleDebugButtonClick = (): void => {\n    const errorMsgs: {\n      Authentication: string[]\n      Communication: string[]\n      EncodingDecoding: string[]\n      Visualization: string[]\n    } = {\n      Authentication: [],\n      Communication: [],\n      EncodingDecoding: [],\n      Visualization: []\n    }\n\n    type ObjectKey = keyof typeof errorMsgs\n    const errorNum = this.state.errorObj.length\n\n    if (errorNum > 0) {\n      for (let i = 0; i < errorNum; i++) {\n        const category = this.state.errorCategory[i] as ObjectKey\n        errorMsgs[category].push(`${this.state.errorObj[i].message as string} (Source: ${this.state.errorObj[i].source})`)\n      }\n    }\n\n    const { Panel } = Collapse\n\n    const showErrorCount = (errcount: number): JSX.Element => (\n      <Badge count={errcount} />\n    )\n\n    const showWarningCount = (warncount: number): JSX.Element => (\n      <Badge color='green' count={warncount} />\n    )\n\n    Modal.info({\n      title: 'Debug Information\\n (Check console for more information)',\n      width: 800,\n      content: (\n        <Collapse>\n          <Panel\n            header='Communication Error'\n            key='communicationerror'\n            extra={showErrorCount(errorMsgs.Communication.length)}\n          >\n            <ol>\n              {errorMsgs.Communication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Data Encoding/Decoding error'\n            key='encodedecodeerror'\n            extra={showErrorCount(errorMsgs.EncodingDecoding.length)}\n          >\n            <ol>\n              {errorMsgs.EncodingDecoding.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Visualization error'\n            key='visualizationerror'\n            extra={showErrorCount(errorMsgs.Visualization.length)}\n          >\n            <ol>\n              {errorMsgs.Visualization.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Authentication error'\n            key='autherror'\n            extra={showErrorCount(errorMsgs.Authentication.length)}\n          >\n            <ol>\n              {errorMsgs.Authentication.map(e => (\n                <li key={uuidv4()}>{e}</li>\n              ))}\n            </ol>\n          </Panel>\n          <Panel\n            header='Warning'\n            key='warning'\n            extra={showWarningCount(this.state.warnings.length)}\n          >\n            <ol>\n              {this.state.warnings.map(warning => (\n                <li key={uuidv4()}>{warning}</li>\n              ))}\n            </ol>\n          </Panel>\n        </Collapse>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = { items: userMenuItems }\n      user = (\n        <Dropdown menu={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    const debugButton = (\n      <Badge count={this.state.errorObj.length}>\n        <Badge color='green' count={this.state.warnings.length}>\n          <Button\n            icon={SettingOutlined}\n            tooltip='Debug info'\n            onClick={this.handleDebugButtonClick}\n          />\n        </Badge>\n      </Badge>\n    )\n\n    const showDicomTagBrowser = this.props.location.pathname.includes('/studies/')\n\n    const dicomTagBrowserButton = showDicomTagBrowser\n      ? (\n        <Button\n          icon={FileSearchOutlined}\n          tooltip='Dicom Tag Browser'\n          onClick={this.handleDicomTagBrowserButtonClick}\n        />\n        )\n      : null\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const handleServerSelectionInput = (\n      event: React.FormEvent<HTMLInputElement>\n    ): void => {\n      const value = event.currentTarget.value\n      let isDisabled = true\n      if (value != null) {\n        try {\n          const url = new URL(value)\n          if (url.protocol.startsWith('http') && url.pathname.length > 0) {\n            isDisabled = false\n          }\n        } catch (TypeError) {}\n      }\n      this.setState({\n        selectedServerUrl: value,\n        isServerSelectionDisabled: isDisabled\n      })\n    }\n\n    const handleServerSelectionCancellation = (): void => {\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const handleServerSelection = (): void => {\n      const url = this.state.selectedServerUrl\n      let closeModal = false\n      if (url != null && url !== '') {\n        if (url.startsWith('http://') || url.startsWith('https://')) {\n          this.props.onServerSelection({ url })\n          closeModal = true\n        }\n      }\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: !closeModal,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row>\n            <Col>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' />\n            <Col>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {debugButton}\n                {dicomTagBrowserButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          open={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={handleServerSelection}\n          onCancel={handleServerSelectionCancellation}\n        >\n          <Input\n            placeholder='Enter base URL of DICOMweb Study Service'\n            onChange={handleServerSelectionInput}\n            onPressEnter={handleServerSelection}\n            addonAfter={\n              this.state.isServerSelectionDisabled\n                ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n            }\n          />\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport { Button, Input, Space, Table, TablePaginationConfig } from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { StorageClasses } from '../data/uids'\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\nimport { CustomError, errorTypes } from '../utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from '../services/NotificationMiddleware'\n\ninterface WorklistProps extends RouteComponentProps {\n  clients: { [key: string]: DicomWebManager }\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'An error occured. Search for studies failed.'\n          )\n        )\n      })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.clients !== previousProps.clients) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    const client = this.props.clients[\n      StorageClasses.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE\n    ]\n    client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map(study => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    })\n      .catch((error) => {\n        console.error(error)\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.DICOMWEB,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Request to search for studies failed.'\n          )\n        )\n      })\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\nimport NotificationMiddleware,\n{ NotificationMiddlewareContext } from '../services/NotificationMiddleware'\nimport { CustomError, errorTypes } from '../utils/CustomError'\n\nconst createUser = (userData: UserData | null): User => {\n  let profile\n  if (userData !== null) {\n    profile = userData.profile\n  }\n\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.AUTH,\n        new CustomError(\n          errorTypes.AUTHENTICATION,\n          'Failed to obtain user \"name\" and \"email\".'\n        )\n      )\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.AUTH,\n      new CustomError(\n        errorTypes.AUTHENTICATION,\n        'Failed to obtain user profile.'\n      )\n    )\n  }\n  return {\n    name: undefined,\n    email: undefined\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string|undefined> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user profile.'\n          )\n        )\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Failed to obtain user information.'\n          )\n        )\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\nimport * as dcmjs from 'dcmjs'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\nimport DicomMetadataStore, { Instance } from './services/DICOMMetadataStore'\n\nconst { naturalizeDataset } = dcmjs.data.DicomMetaDictionary\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'At least one server needs to be configured.'\n          )\n        )\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.SLIM,\n          new CustomError(\n            errorTypes.COMMUNICATION,\n            'Either path or full URL needs to be configured for server.'\n          )\n        )\n      }\n\n      const hasHttpsUrl = (url?: string): boolean => url?.startsWith('https') ?? false\n\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n\n      const shouldUpgradeInsecure = serverSettings.upgradeInsecureRequests === true && [\n        serviceUrl,\n        serverSettings.qidoPathPrefix,\n        serverSettings.wadoPathPrefix,\n        serverSettings.stowPathPrefix\n      ].some(hasHttpsUrl)\n\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n\n      if (shouldUpgradeInsecure) {\n        clientSettings.headers = {\n          ...clientSettings.headers,\n          'Content-Security-Policy': 'upgrade-insecure-requests'\n        }\n      }\n\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one store is supported for now.'\n        )\n      )\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const studySummaryMetadata = await this.stores[0].client.retrieveStudyMetadata(options)\n    const naturalized = naturalizeDataset(studySummaryMetadata)\n    DicomMetadataStore.addStudy(naturalized)\n    return studySummaryMetadata\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    const seriesSummaryMetadata = await this.stores[0].client.retrieveSeriesMetadata(options)\n    console.debug('seriesSummaryMetadata:', seriesSummaryMetadata)\n    const naturalized = seriesSummaryMetadata.map(naturalizeDataset)\n    console.debug('naturalized:', naturalized)\n    DicomMetadataStore.addSeriesMetadata(naturalized, true)\n    return seriesSummaryMetadata\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    const instance = await this.stores[0].client.retrieveInstance(options)\n    const data = dcmjs.data.DicomMessage.readFile(instance)\n    const { dataset } = dmv.metadata.formatMetadata(data.dict)\n    DicomMetadataStore.addInstances([dataset as Instance])\n    return instance\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport { StorageClasses } from './data/uids'\nimport DicomWebManager from './DicomWebManager'\nimport { joinUrl } from './utils/url'\nimport { CustomError, errorTypes } from './utils/CustomError'\nimport NotificationMiddleware, {\n  NotificationMiddlewareContext\n} from './services/NotificationMiddleware'\n\nfunction ParametrizedCaseViewer ({ clients, user, app, config }: {\n  clients: { [key: string]: DicomWebManager }\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <CaseViewer\n      clients={clients}\n      user={user}\n      annotations={config.annotations}\n      preload={preload}\n      app={app}\n      enableAnnotationTools={enableAnnotationTools}\n      studyInstanceUID={studyInstanceUID}\n    />\n  )\n}\n\nfunction _createClientMapping ({ baseUri, gcpBaseUrl, settings, onError }: {\n  baseUri: string\n  gcpBaseUrl: string\n  settings: ServerSettings[]\n  onError: (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ) => void\n}): { [sopClassUID: string]: DicomWebManager } {\n  const storageClassMapping: { [key: string]: number } = { default: 0 }\n  const clientMapping: { [sopClassUID: string]: DicomWebManager } = {}\n\n  settings.forEach(serverSettings => {\n    if (serverSettings.storageClasses != null) {\n      serverSettings.storageClasses.forEach(sopClassUID => {\n        if (Object.values<string>(StorageClasses).includes(sopClassUID)) {\n          if (sopClassUID in storageClassMapping) {\n            storageClassMapping[sopClassUID] += 1\n          } else {\n            storageClassMapping[sopClassUID] = 1\n          }\n        } else {\n          console.warn(\n            `unknown storage class \"${sopClassUID}\" specified ` +\n            `for configured server \"${serverSettings.id}\"`\n          )\n        }\n      })\n    } else {\n      if (window.location.pathname.includes('/projects/')) {\n        const pathname = window.location.pathname.split('/study/')[0]\n        const pathUrl = `${gcpBaseUrl}${pathname}/dicomWeb`\n        serverSettings.url = pathUrl\n      }\n\n      storageClassMapping.default += 1\n      clientMapping.default = new DicomWebManager({\n        baseUri,\n        settings: [serverSettings],\n        onError\n      })\n    }\n  })\n\n  if (storageClassMapping.default > 1) {\n    NotificationMiddleware.onError(\n      NotificationMiddlewareContext.SLIM,\n      new CustomError(\n        errorTypes.COMMUNICATION,\n        'Only one default server can be configured without specification ' +\n        'of storage classes.'\n      )\n    )\n  }\n\n  for (const key in storageClassMapping) {\n    if (key === 'default') {\n      continue\n    }\n    if (storageClassMapping[key] > 1) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'Only one configured server can specify a given storage class. ' +\n          `Storage class \"${key}\" is specified by more than one ` +\n          'of the configured servers.'\n        )\n      )\n    }\n  }\n\n  if (Object.keys(storageClassMapping).length > 1) {\n    settings.forEach(server => {\n      const client = new DicomWebManager({\n        baseUri,\n        settings: [server],\n        onError\n      })\n      if (server.storageClasses != null) {\n        server.storageClasses.forEach(sopClassUID => {\n          clientMapping[sopClassUID] = client\n        })\n      }\n    })\n  }\n\n  Object.values(StorageClasses).forEach(sopClassUID => {\n    if (!(sopClassUID in clientMapping)) {\n      clientMapping[sopClassUID] = clientMapping.default\n    }\n  })\n  return clientMapping\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  clients: { [sopClassUID: string]: DicomWebManager }\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    } else if (error.status === 403) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'User is not authorized to access DICOMweb resources.')\n      )\n    }\n\n    const logServerError = (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.DICOMWEB,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'An unexpected server error occured.'\n        )\n      )\n    }\n\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach((setting: ErrorMessageSettings) => {\n        if (error.status === setting.status) {\n          this.setState({\n            error: {\n              status: error.status,\n              message: setting.message\n            }\n          })\n        } else if (error.status === 500) {\n          logServerError()\n        }\n      })\n    } else if (error.status === 500) {\n      logServerError()\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      NotificationMiddleware.onError(\n        NotificationMiddlewareContext.SLIM,\n        new CustomError(\n          errorTypes.COMMUNICATION,\n          'One server needs to be configured.')\n      )\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n    this.addGcpSecondaryAnnotationServer(props.config)\n\n    this.state = {\n      clients: _createClientMapping({\n        baseUri,\n        gcpBaseUrl: props.config.gcpBaseUrl ?? 'https://healthcare.googleapis.com/v1',\n        settings: props.config.servers,\n        onError: this.handleDICOMwebError\n      }),\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  addGcpSecondaryAnnotationServer (config: AppProps['config']): void {\n    const serverId = 'gcp_secondary_annotation_server'\n    const urlParams = new URLSearchParams(window.location.search)\n    const url = urlParams.get('gcp')\n    const gcpSecondaryAnnotationServer = config.servers.find(\n      (server) => server.id === serverId\n    )\n    if (gcpSecondaryAnnotationServer === undefined && typeof url === 'string') {\n      config.servers.push({\n        id: serverId,\n        write: true,\n        url,\n        storageClasses: [\n          StorageClasses.COMPREHENSIVE_SR,\n          StorageClasses.COMPREHENSIVE_3D_SR,\n          StorageClasses.SEGMENTATION,\n          StorageClasses.MICROSCOPY_BULK_SIMPLE_ANNOTATION,\n          StorageClasses.PARAMETRIC_MAP,\n          StorageClasses.ADVANCED_BLENDING_PRESENTATION_STATE,\n          StorageClasses.COLOR_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.GRAYSCALE_SOFTCOPY_PRESENTATION_STATE,\n          StorageClasses.PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE\n        ]\n      })\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    const tmpClient = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    tmpClient.updateHeaders(this.state.clients.default.headers)\n    /**\n     * Use the newly created client for all storage classes. We may want to\n     * make this more sophisticated in the future to allow users to override\n     * the entire server configuration.\n     */\n    this.setState(state => {\n      const clients: { [key: string]: DicomWebManager } = {}\n      for (const key in state.clients) {\n        clients[key] = tmpClient\n      }\n      return { clients }\n    })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    for (const key in this.state.clients) {\n      const client = this.state.clients[key]\n      client.updateHeaders({ Authorization: authorization })\n    }\n    const storedPath = window.localStorage.getItem('slim_path')\n    const storedSearch = window.localStorage.getItem('slim_search')\n    if (storedPath != null) {\n      const currentPath = window.location.pathname\n      if (storedPath !== currentPath) {\n        let path = storedPath\n        if (storedSearch != null) {\n          path += storedSearch\n        }\n        window.location.href = path\n      }\n    }\n    window.localStorage.removeItem('slim_path')\n    window.localStorage.removeItem('slim_search')\n    this.setState({ user: user })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error(error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        NotificationMiddleware.onError(\n          NotificationMiddlewareContext.AUTH,\n          new CustomError(\n            errorTypes.AUTHENTICATION,\n            'Could not sign-in user.')\n        )\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    const path = window.localStorage.getItem('slim_path')\n    if (path == null) {\n      window.localStorage.setItem('slim_path', window.location.pathname)\n      window.localStorage.setItem('slim_search', window.location.search)\n    }\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist clients={this.state.clients} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n              clients={this.state.clients}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/projects/:project/locations/:location/datasets/:dataset/dicomStores/:dicomStore/study/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      clients={this.state.clients}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","PatientID","PatientName","PatientSex","PatientBirthDate","AccessionNumber","StudyID","StudyDate","StudyTime","StorageClasses","_subscriptions","Symbol","_lastSubscriptionId","PubSub","eventName","callback","Error","hasOwnProperty","subscriptionId","callbacks","payload","errorTypes","CustomError","type","message","stack","NotificationMiddlewareEvents","NotificationMiddlewareContext","NotificationType","NotificationSourceDefinition","sources","category","notificationType","outerContext","args","publish","Array","from","warn","console","JSON","stringify","arguments","includes","apply","prototype","slice","call","source","error","notificationMsg","errorCategory","find","s","String","notification","description","duration","state","isLoading","overviewViewportRef","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","info","ContainerIdentifier","dmv","client","clients","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","resizeFactor","errorInterceptor","NotificationMiddleware","render","container","resize","style","height","containerIdentifier","ref","seriesInstanceUIDs","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","handleMeasurementSelection","handleOpacityChange","handleColorRChange","handleColorGChange","handleColorBChange","getCurrentColor","currentStyle","opacity","defaultStyle","color","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","limitValues","isArray","option","codeComponents","measurement","schemeDesignator","meaning","colorSettings","windowSettings","explorationSettings","AnnotationGroupSequence","findIndex","AnnotationGroupUID","propertyType","propertyCategory","GraphicType","AnnotationCoordinateType","measurementsSequence","MeasurementsSequence","measurementOptions","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","plain","justify","gutter","range","min","max","step","handleLowerLimitChange","handleLimitChange","handleUpperLimitChange","minWidth","defaultValue","settings","isBadgeVisible","direction","placement","content","overlayStyle","shape","SettingOutlined","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","annotationGroups","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupVisibilityChange","onAnnotationGroupStyleChange","handleClick","text","button","Icon","isSelected","tooltip","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","overflowY","handleRemoval","getCurrentColors","paletteColorLookupTable","previousProps","previousState","opticalPath","opticalPathIdentifier","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","specimenDescriptions","maxValue","Math","pow","BitsAllocated","isMonochromatic","colors","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","SeriesInstanceUID","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","mappingUID","mapping","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","segmentUID","segment","algorithmName","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","contourOnly","annotationGroupsUIDs","updateCurrentStyle","handleShowOutlineOnly","target","checkedAnnotationUids","defaultAnnotationStyles","types","checkAll","every","uids","indeterminate","some","handleChangeCheckedType","e","mouseEnterDelay","reduce","acc","marginLeft","shortenedCodeMeaning","displayCodeMeaning","isChecked","indeterminateType","display","flexDirection","categories","categoriesAcc","annotation","categoryKey","typeKey","oldCategory","oldType","Object","keys","typesArr","getCategories","xPosition","yPosition","position","top","left","backgroundColor","minHeight","pointerEvents","attr","roiUid","DEFAULT_ROI_STROKE_COLOR","DEFAULT_ROI_FILL_COLOR","DEFAULT_ANNOTATION_STROKE_COLOR","DEFAULT_ANNOTATION_COLOR_PALETTE","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","_formatRoiStyle","stroke","fill","image","circle","radius","_constructViewers","preload","volumeImages","labelViewer","volumeViewer","clientMapping","controls","activateSelectInteraction","labelImages","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","hoveredRois","lastPixel","defaultRoiStyle","roiStyles","selectionColor","selectedRoiStyle","loadPresentationStates","ADVANCED_BLENDING_PRESENTATION_STATE","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","rawInstance","instance","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","selectedPresentationStateUID","setPresentationState","presentationStates","catch","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","getOpticalPathDefaultStyle","setOpticalPathStyle","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","Set","activateOpticalPath","showOpticalPath","add","searchParams","URLSearchParams","search","set","pathname","replace","getRoiStyle","addAnnotations","COMPREHENSIVE_3D_SR","SOPClassUID","templateSeq","ContentTemplateSequence","TemplateIdentifier","_implementsTID1500","subjectClassValue","retrievedConcept","expectedConcept","_describesSpecimenSubject","debug","measurementGroups","foundRegion","regions","_containsROIAnnotations","FrameOfReferenceUID","doesROIExist","getAllROIs","otherROI","a","b","graphicType","graphicData","s1","s2","j","_areROIsEqual","addROI","forceUpdate","addAnnotationGroups","MICROSCOPY_BULK_SIMPLE_ANNOTATION","searchForSeries","matchedSeries","series","retrieveSeriesMetadata","retrievedMetadata","ann","finding","AnnotationPropertyTypeCodeSequence","setAnnotationGroupStyle","addSegmentations","SEGMENTATION","segmentations","seg","refImage","addSegments","addParametricMaps","PARAMETRIC_MAP","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","onRoiModified","onWindowResize","onRoiDrawn","detail","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","onRoiDoubleClicked","isSelectedRoiModalVisible","setHoveredRoiAttributes","result","r","hoveredRoiAttributes","clearHoveredRois","getUniqueHoveredRois","newRoi","allRois","filter","isSamePixelAsLast","clientX","clientY","onPointerMove","hoveredRoi","feature","originalEvent","isHoveredRoiTooltipVisible","hoveredRoiTooltipX","hoveredRoiTooltipY","onRoiSelected","selectedRoi","oldSelectedRois","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingError","onLoadingError","onFrameLoadingEnded","delete","sopClassUID","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","onKeyUp","isRoiDrawingActive","deactivateDrawInteraction","isRoiModificationActive","deactivateModifyInteraction","isRoiTranslationActive","deactivateTranslateInteraction","isAnnotationModalVisible","isGoToModalVisible","altKey","code","handleRoiDrawing","handleRoiModification","handleRoiTranslation","handleRoiRemoval","handleRoiVisibilityChange","handleReportGeneration","handleGoTo","geometryTypes","componentSetup","componentCleanup","handleRoiSelectionCancellation","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationVisibilityChange","handleAnnotationGroupVisibilityChange","handleAnnotationGroupStyleChange","handleRoiStyleChange","handleXCoordinateSelection","handleYCoordinateSelection","handleMagnificationSelection","handleSlidePositionSelection","handleSlidePositionSelectionCancellation","handleReportVerification","handleReportCancellation","handleSegmentVisibilityChange","handleSegmentStyleChange","handleMappingVisibilityChange","handleMappingStyleChange","handleOpticalPathVisibilityChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","boundingBox","generatedReport","isSelectedMagnificationValid","isReportModalVisible","isSelectedXCoordinateValid","isSelectedYCoordinateValid","selectedXCoordinate","validXCoordinateRange","selectedYCoordinate","validYCoordinateRange","selectedMagnification","areRoisHidden","cleanup","isOpticalPathVisible","isOpticalPathActive","document","body","removeEventListener","window","addEventListener","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","selectedMarkup","filteredEvaluations","x","Number","start","end","y","targetPixelSpacing","diffs","numLevels","actualPixelSpacing","getPixelSpacing","abs","level","indexOf","point","log","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","observer","refSpecimen","user","loginName","email","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","app","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","evidence","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","setROIStyle","getROI","showAnnotationGroup","hideAnnotationGroup","strokeColor","fillColor","c","generateRoiStyle","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","sort","localeCompare","paletteColorLookupTableUID","defaultColors","numVisible","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areROIsVisible","hideROIs","showROIs","getAllSegments","getAllParameterMappings","allAnnotationGroups","getAllAnnotationGroups","filteredAnnotationGroups","referencedSeriesInstanceUID","annotationMenuItems","adaptRoiToAnnotation","openSubMenuItems","geometryTypeOptionsMapping","box","polygon","line","freehandpolygon","freehandline","annotationConfigurations","defaultActiveFirstOption","onClear","specimenMenu","equipmentMenu","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","annotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","controlTools","FaCrosshairs","enableAnnotationTools","selectedRoiInformation","cursor","roiAttributes","roiScoordAttributes","roiEvaluationAttributes","codeItem","textItem","roiMeasurmentAttributesPerOpticalPath","refItems","ReferencedSOPSequence","ReferencedOpticalPathIdentifier","measuredValueItem","createRoiDescription","roiDescriptions","roiScoordDescriptions","roiEvaluationDescriptions","roiMeasurementDescriptions","descriptions","orientationMargin","dashed","hasSider","overflow","open","onOk","onCancel","okText","maskClosable","footer","placeholder","prefix","onPressEnter","addonAfter","CheckOutlined","StopOutlined","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","onOpenChange","setTimeout","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","areSameAcquisition","AcquisitionUID","Slide","options","acquisitionUID","opticalPathIdentifiers","pyramidUIDs","acquisitionUIDs","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","THUMBNAIL","PyramidUID","samplesPerPixel","SamplesPerPixel","requirePyramidUID","PhotometricInterpretation","createSlides","slideMetadata","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","imgA","imgB","fetchImageMetadata","onSuccess","onError","StudyInstanceUID","Promise","all","loadingSeries","seriesImages","newSlides","customError","slidesCache","Map","pendingRequests","useSlides","useState","setSlides","setIsLoading","setError","useEffect","cachedData","get","fetchSlides","pendingRequest","resolve","reject","err","ParametrizedSlideViewer","presentationStateUID","selectedSlide","viewer","volumeInstances","clinicalTrialMenu","seriesFragment","borderRight","borderRightWidth","path","element","DicomMetaDictionary","formatValue","val","getRows","depth","keywords","flatMap","keyword","tagInfo","nameMap","match","tag","sequenceItems","sequenceNode","getSortedTags","subscribe","_broadcastEvent","_unsubscribe","_isValidEvent","listenerId","subscription","listeners","unsubscribe","EVENTS","callbackProps","hasListeners","hasCallbacks","listener","defaultInstances","instances","instancesMap","SeriesNumber","SeriesDescription","SeriesDate","SeriesTime","addInstance","newInstance","addInstances","newInstances","len","getInstance","StudyDescription","NumInstances","ModalitiesInStudy","isLoaded","addInstanceToSeries","addInstancesToSeries","createSeriesMetadata","setSeriesMetadata","seriesMetadata","existingSeries","assign","STUDY_ADDED","INSTANCES_ADDED","SERIES_ADDED","SERIES_UPDATED","_model","studies","_getStudy","aStudy","_getSeries","study","aSeries","BaseImplementation","dicomJSONDatasetOrP10ArrayBuffer","dicomJSONDataset","naturalizedDataset","ArrayBuffer","createStudyMetadata","madeInClient","updateSeriesMetadata","addSeriesMetadata","seriesSummaryMetadata","NumberOfStudyRelatedSeries","addStudy","existingStudy","newStudy","getStudyInstanceUIDs","getStudy","getSeries","getInstanceByImageId","imageId","updateMetadataForSeries","pubSubServiceInterface","setStudy","displaySets","setDisplaySets","selectedDisplaySetInstanceUID","setSelectedDisplaySetInstanceUID","setInstanceNumber","filterValue","setFilterValue","expandedKeys","setExpandedKeys","searchInput","setSearchInput","debouncedSearchValue","delay","debouncedValue","setDebouncedValue","timer","clearTimeout","useDebounce","handler","DicomMetadataStore","seriesAddedSubscription","instancesAddedSubscription","derivedDisplaySets","processedSeries","ds","displaySetInstanceUID","displaySetList","useMemo","displaySet","displayDate","dateStr","hour","minute","second","monthNum","parseInt","dayNum","date","Date","getMonth","getDate","weekday","toLocaleDateString","monthName","dayFormatted","yearNum","getFullYear","formatDicomDate","showInstanceList","instanceSliderMarks","totalInstances","tableData","transformTagsToTableData","tags","parentKey","keyBase","currentKey","filteredData","searchLower","toLowerCase","matchedKeys","nodeMatches","node","findMatchingPaths","parentPath","currentPath","matchingPaths","child","childPaths","filtered","reconstructTree","paths","nodesAtLevel","className","gap","marginBottom","flex","strong","optionLabelProp","optionFilterProp","fontSize","marks","formatter","SearchOutlined","columns","dataIndex","dataSource","pagination","expandable","expandedRowKeys","onExpandedRowsChange","scroll","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleDicomTagBrowserButtonClick","innerWidth","handleDebugButtonClick","errorMsgs","Authentication","Communication","EncodingDecoding","Visualization","errorNum","errorObj","warncount","Panel","Collapse","showErrorCount","errcount","uuidv4","warnings","warning","handleServerSelectionButtonClick","isServerSelectionModalVisible","isServerSelectionDisabled","prevProps","prevState","worklistButton","userMenuItems","onUserLogout","userMenu","menu","trigger","UserOutlined","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","debugButton","dicomTagBrowserButton","FileSearchOutlined","showServerSelectionButton","ApiOutlined","handleServerSelection","url","selectedServerUrl","closeModal","startsWith","onServerSelection","src","process","alt","margin","currentTarget","isDisabled","URL","protocol","TypeError","alignItems","justifyContent","subTitle","defaultPageSize","handleSearch","confirm","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","filterIcon","fetchData","handleChange","numStudies","pageSize","searchOptions","searchForStudies","limit","searchCriteria","fuzzymatching","filters","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","record","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","status","errorMessage","attemptFailedError","naturalizeDataset","DicomWebManager","stores","handleError","updateHeaders","fields","f","headers","retrieveStudyMetadata","studySummaryMetadata","naturalized","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","shouldUpgradeInsecure","upgradeInsecureRequests","qidoPathPrefix","wadoPathPrefix","stowPathPrefix","qidoURLPrefix","wadoURLPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","read","dwc","baseURL","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","_createClientMapping","gcpBaseUrl","storageClassMapping","default","storageClasses","pathUrl","server","auth","handleDICOMwebError","logServerError","errorMessages","setting","Authorization","storedPath","localStorage","getItem","storedSearch","href","removeItem","host","appUri","oidcSettings","oidc","servers","addGcpSecondaryAnnotationServer","wasAuthSuccessful","serverId","COMPREHENSIVE_SR","COLOR_SOFTCOPY_PRESENTATION_STATE","GRAYSCALE_SOFTCOPY_PRESENTATION_STATE","PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE","tmpClient","redirectTo","setItem","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}