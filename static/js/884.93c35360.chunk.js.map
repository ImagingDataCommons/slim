{"version":3,"file":"static/js/884.93c35360.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","data/uids.tsx","utils/router.tsx","components/SlideViewer.tsx","data/slides.tsx","components/CaseViewer.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\nimport { v4 as generateUUID } from 'uuid'\nimport { Card, Descriptions } from 'antd'\n\nexport interface Attribute {\n  name: string\n  value: any\n}\n\nexport interface AttributeGroup {\n  name: string\n  attributes: Attribute[]\n}\n\ninterface DescriptionProps {\n  header?: string\n  icon?: any\n  attributes: Attribute[]\n  selectable?: boolean\n  hasLongValues?: boolean\n  methods?: React.ReactNode[]\n  children?: React.ReactNode\n}\n\n/**\n * React component for a description consisting of a header containing a\n * header and a body containing a list of name-value pairs.\n */\nclass Description extends React.Component<DescriptionProps, {}> {\n  render (): React.ReactNode {\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\n    let labelLineHeight = '14px'\n    const contentLineHeight = '14px'\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\n      layout = 'vertical'\n      labelLineHeight = '20px'\n    }\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\n      const uid = generateUUID()\n      return (\n        <Descriptions.Item\n          key={uid}\n          label={item.name}\n          labelStyle={{\n            lineHeight: labelLineHeight\n          }}\n          contentStyle={{\n            fontWeight: 600,\n            whiteSpace: 'pre-line',\n            lineHeight: contentLineHeight\n          }}\n          span={1}\n        >\n          {item.value}\n        </Descriptions.Item>\n      )\n    })\n    let icon = null\n    if (this.props.icon !== undefined) {\n      icon = <this.props.icon />\n    }\n    return (\n      <Card\n        title={this.props.header}\n        extra={icon}\n        size='small'\n        hoverable={this.props.selectable}\n        bordered={this.props.header !== undefined}\n        actions={this.props.methods}\n      >\n        <Descriptions\n          column={1}\n          size='small'\n          layout={layout}\n          bordered={false}\n        >\n          {items}\n        </Descriptions>\n        {this.props.children}\n      </Card>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface ClinicalTrialProps {\n  metadata: dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM ClinicalTrial Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\n  render (): React.ReactNode {\n    const attributes = []\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\n      // Attributes of Clinical Trial Subject module\n      attributes.push(\n        ...[\n          {\n            name: 'Sponsor Name',\n            value: this.props.metadata.ClinicalTrialSponsorName\n          },\n          {\n            name: 'Protocol ID',\n            value: this.props.metadata.ClinicalTrialProtocolID\n          },\n          {\n            name: 'Protocol Name',\n            value: this.props.metadata.ClinicalTrialProtocolName\n          },\n          {\n            name: 'Site Name',\n            value: this.props.metadata.ClinicalTrialSiteName\n          }\n        ]\n      )\n    }\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\n      // Attributes of Clinical Trial Study module\n      attributes.push(\n        {\n          name: 'Time Point ID',\n          value: this.props.metadata.ClinicalTrialTimePointID\n        }\n      )\n    }\n    // Attributes of Clinical Trial Subject module\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default ClinicalTrial\n","import * as dmv from 'dicom-microscopy-viewer'\n\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\n  if (typeof value === 'object' && value !== null && value !== undefined) {\n    if (value.Alphabetic !== undefined) {\n      return value.Alphabetic.split('^').join(' ')\n    }\n    return ''\n  }\n  return ''\n}\n\nfunction parseDate (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    return `${year}-${month}-${day}`\n  }\n  return ''\n}\n\nfunction parseTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const hours = value.substring(0, 2)\n    const minutes = value.substring(2, 4)\n    const seconds = value.substring(4, 6)\n    return `${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseDateTime (value: string|null|undefined): string {\n  if (value !== null && value !== undefined) {\n    const year = value.substring(0, 4)\n    const month = value.substring(4, 6)\n    const day = value.substring(6, 8)\n    const hours = value.substring(8, 10)\n    const minutes = value.substring(10, 12)\n    const seconds = value.substring(12, 14)\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n  }\n  return ''\n}\n\nfunction parseSex (value: string|null|undefined): string {\n  const lut: { [key: string]: string } = {\n    F: 'Female',\n    M: 'Male',\n    O: 'Other'\n  }\n  if (value !== null && value !== undefined) {\n    return lut[value]\n  }\n  return ''\n}\n\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseName, parseSex, parseDate } from '../utils/values'\n\ninterface PatientProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Patient Information Entity that\n * displays common study-level, patient-related attributes of contained\n * DICOM Slide Microscopy images.\n */\nclass Patient extends React.Component<PatientProps, {}> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'ID',\n        value: this.props.metadata.PatientID\n      },\n      {\n        name: 'Name',\n        value: parseName(this.props.metadata.PatientName)\n      },\n      {\n        name: 'Gender',\n        value: parseSex(this.props.metadata.PatientSex)\n      },\n      {\n        name: 'Birthdate',\n        value: parseDate(this.props.metadata.PatientBirthDate)\n      }\n    ]\n    return (\n      <Description attributes={attributes} />\n    )\n  }\n}\n\nexport default Patient\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\nimport { parseDate, parseTime } from '../utils/values'\n\ninterface StudyProps {\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\n}\n\n/**\n * React component representing a DICOM Study Information Entity that displays\n * common study-level attributes of contained DICOM Slide Microscopy images.\n */\nclass Study extends React.Component<StudyProps> {\n  render (): React.ReactNode {\n    const attributes = [\n      {\n        name: 'Accession #',\n        value: this.props.metadata.AccessionNumber\n      },\n      {\n        name: 'ID',\n        value: this.props.metadata.StudyID\n      },\n      {\n        name: 'Date',\n        value: parseDate(this.props.metadata.StudyDate)\n      },\n      {\n        name: 'Time',\n        value: parseTime(this.props.metadata.StudyTime)\n      }\n    ]\n    return <Description attributes={attributes} />\n  }\n}\n\nexport default Study\n","import React from 'react'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport Description from './Description'\nimport { Slide } from '../data/slides'\n\ninterface SlideItemProps {\n  client: DicomWebManager\n  slide: Slide\n}\n\ninterface SlideItemState {\n  isLoading: boolean\n}\n\n/**\n * React component representing a DICOM Series Information Entity that displays\n * common series-level attributes of contained DICOM Slide Microscopy images\n * as well as the OVERVIEW image (if available).\n * When selected a Slide Viewer instance is created for the display of the\n * contained images.\n */\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\n  state = {\n    isLoading: false\n  }\n\n  private readonly overviewViewport = React.createRef<HTMLDivElement>()\n\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\n\n  constructor (props: SlideItemProps) {\n    super(props)\n    this.overviewViewer = undefined\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    if (this.props.slide.overviewImages.length > 0) {\n      const metadata = this.props.slide.overviewImages[0]\n      if (this.overviewViewport.current !== null) {\n        this.overviewViewport.current.innerHTML = ''\n        console.info(\n          'instantiate viewer for OVERVIEW image of series ' +\n          metadata.SeriesInstanceUID\n        )\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\n          client: this.props.client,\n          metadata: metadata,\n          resizeFactor: 1\n        })\n        this.overviewViewer.render({\n          container: this.overviewViewport.current\n        })\n      }\n    }\n\n    this.setState({ isLoading: false })\n  }\n\n  render (): React.ReactNode {\n    if (this.overviewViewer !== undefined) {\n      this.overviewViewer.render({\n        container: this.overviewViewport.current\n      })\n      this.overviewViewer.resize()\n    }\n    const attributes = []\n    const description = this.props.slide.description\n    if (description != null && description !== '') {\n      attributes.push({\n        name: 'Description',\n        value: description\n      })\n    }\n    if (this.state.isLoading) {\n      return (<FaSpinner />)\n    }\n\n    /* Properties need to be propagated down to Menu.Item:\n     * https://github.com/react-component/menu/issues/142\n     */\n    return (\n      <Menu.Item\n        style={{ height: '100%' }}\n        key={this.props.slide.seriesInstanceUIDs[0]}\n        {...this.props}\n      >\n        <Description\n          header={this.props.slide.containerIdentifier}\n          attributes={attributes}\n          selectable\n        >\n          <div style={{ height: '100px' }} ref={this.overviewViewport} />\n        </Description>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SlideItem\n","import React from 'react'\nimport { Menu } from 'antd'\n\nimport DicomWebManager from '../DicomWebManager'\nimport SlideItem from './SlideItem'\nimport { Slide } from '../data/slides'\n\ninterface SlideListProps {\n  metadata: Slide[]\n  client: DicomWebManager\n  selectedSeriesInstanceUID: string\n  onSeriesSelection: (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ) => void\n}\n\ninterface SlideListState {\n  selectedSeriesInstanceUID: string\n}\n\n/**\n * React component representing a list of DICOM Series Information Entities.\n */\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\n  state = {\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\n  }\n\n  componentDidMount (): void {\n    this.props.onSeriesSelection({\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\n    })\n  }\n\n  render (): React.ReactNode {\n    const slideList = this.props.metadata\n    const slideItemList = []\n    for (let i = 0; i < slideList.length; ++i) {\n      const slide = slideList[i]\n      const slideItem = (\n        <SlideItem\n          key={slide.seriesInstanceUIDs[0]}\n          slide={slide}\n          client={this.props.client}\n        />\n      )\n\n      slideItemList.push(slideItem)\n    }\n\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\n      key: React.ReactText\n      keyPath: React.ReactText[]\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\n      selectedKeys?: React.ReactText[]\n    }): void => {\n      console.info(`select slide \"${key}\"`)\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\n    }\n\n    let selectedKeys\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\n      this.state.selectedSeriesInstanceUID !== null) {\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\n    }\n\n    return (\n      <Menu\n        style={{ width: '100%' }}\n        selectedKeys={selectedKeys}\n        onSelect={handleMenuItemSelection}\n        mode='inline'\n        inlineIndent={0}\n      >\n        {slideItemList}\n      </Menu>\n    )\n  }\n}\n\nexport default SlideList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Menu, Space, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface AnnotationItemProps {\n  roi: dmv.roi.ROI\n  index: number\n  isVisible: boolean\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n}\n\n/**\n * React component representing a Region of Interest (ROI) annotation.\n */\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\n  constructor (props: AnnotationItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (checked: boolean, event: Event): void {\n    this.props.onVisibilityChange({\n      roiUID: this.props.roi.uid,\n      isVisible: checked\n    })\n  }\n\n  render (): React.ReactNode {\n    const identifier = `ROI ${this.props.index + 1}`\n    const attributes: Array<{ name: string, value: string }> = []\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\n    this.props.roi.evaluations.forEach((\n      item: (\n        dcmjs.sr.valueTypes.TextContentItem |\n        dcmjs.sr.valueTypes.CodeContentItem\n      )\n    ) => {\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\n        // For consistency with Segment and Annotation Group\n        if (nameValue === '276214006') {\n          attributes.push({\n            name: 'Property category',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '121071') {\n          attributes.push({\n            name: 'Property type',\n            value: `${valueMeaning}`\n          })\n        } else if (nameValue === '111001') {\n          attributes.push({\n            name: 'Algorithm Name',\n            value: `${valueMeaning}`\n          })\n        } else {\n          attributes.push({\n            name: name,\n            value: `${valueMeaning}`\n          })\n        }\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\n        attributes.push({\n          name: name,\n          value: textContentItem.TextValue\n        })\n      }\n    })\n    this.props.roi.measurements.forEach(item => {\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\n      const name = `${nameMeaning}`\n      const seq = item.MeasuredValueSequence[0]\n      const value = seq.NumericValue.toPrecision(6)\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\n      attributes.push({\n        name: name,\n        value: `${value} ${unit}`\n      })\n    })\n    return (\n      <Space align='start'>\n        <div style={{ paddingLeft: '14px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.isVisible}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu.Item\n          style={{ height: '100%', paddingLeft: '3px' }}\n          key={this.props.roi.uid}\n          {...otherProps}\n        >\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Menu.Item>\n      </Space>\n    )\n  }\n}\n\nexport default AnnotationItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu, Switch } from 'antd'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport AnnotationItem from './AnnotationItem'\n\ninterface AnnotationListProps {\n  rois: dmv.roi.ROI[]\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  onVisibilityChange: ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }) => void\n  onSelection: ({ roiUID }: { roiUID: string }) => void\n}\n\n/**\n * React component representing a list of Region of Interest (ROI)\n * annotations.\n */\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\n  constructor (props: AnnotationListProps) {\n    super(props)\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n  }\n\n  handleVisibilityChange (checked: boolean, event: Event): void {\n    if (checked) {\n      this.props.rois.forEach(roi => {\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\n      })\n    } else {\n      this.props.visibleRoiUIDs.forEach(roiUID => {\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\n      })\n    }\n  }\n\n  handleMenuItemSelection (object: any): void {\n    this.props.onSelection({ roiUID: object.key })\n  }\n\n  render (): React.ReactNode {\n    const items = this.props.rois.map((roi, index) => (\n      <AnnotationItem\n        key={roi.uid}\n        roi={roi}\n        index={index}\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\n        onVisibilityChange={this.props.onVisibilityChange}\n      />\n    ))\n\n    return (\n      <>\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\n          <Switch\n            size='small'\n            onChange={this.handleVisibilityChange}\n            checked={this.props.visibleRoiUIDs.size > 0}\n            checkedChildren={<FaEye />}\n            unCheckedChildren={<FaEyeSlash />}\n          />\n        </div>\n        <Menu\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\n          onSelect={this.handleMenuItemSelection}\n          onClick={this.handleMenuItemSelection}\n        >\n          {items}\n        </Menu>\n      </>\n    )\n  }\n}\n\nexport default AnnotationList\n","import React from 'react'\nimport {\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Select,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Description from './Description'\n\ninterface AnnotationGroupItemProps {\n  annotationGroup: dmv.annotation.AnnotationGroup\n  isVisible: boolean\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\ninterface AnnotationGroupItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    measurement?: dcmjs.sr.coding.CodedConcept\n  }\n}\n\n/**\n * React component representing an Annotation Group.\n */\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\n  constructor (props: AnnotationGroupItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    this.props.onVisibilityChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      annotationGroupUID: this.props.annotationGroup.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState({ currentStyle: { opacity: value } })\n  }\n\n  handleMeasurementSelection (value?: string, option?: any): void {\n    if (value !== undefined) {\n      const codeComponents = value.split('-')\n      const measurement = new dcmjs.sr.coding.CodedConcept({\n        value: codeComponents[1],\n        schemeDesignator: codeComponents[0],\n        meaning: option.children\n      })\n      this.props.onStyleChange({\n        annotationGroupUID: this.props.annotationGroup.uid,\n        styleOptions: { measurement }\n      })\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity,\n          measurement\n        }\n      }))\n    } else {\n      this.setState(state => ({\n        currentStyle: {\n          opacity: state.currentStyle.opacity\n        }\n      }))\n    }\n  }\n\n  render (): React.ReactNode {\n    const identifier = `Annotation Group ${this.props.annotationGroup.number}`\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Label',\n        value: this.props.annotationGroup.label\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.annotationGroup.algorithmName\n      },\n      {\n        name: 'Property category',\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Property type',\n        value: this.props.annotationGroup.propertyType.CodeMeaning\n      }\n    ]\n\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\n    )\n    const item = this.props.metadata.AnnotationGroupSequence[index]\n    const measurementsSequence = item.MeasurementsSequence ?? []\n\n    const measurementOptions = measurementsSequence.map(measurementItem => {\n      const name = measurementItem.ConceptNameCodeSequence[0]\n      const key = `${name.CodingSchemeDesignator}-${name.CodeValue}`\n      return (\n        <Select.Option\n          key={key}\n          value={key}\n          dropdownMatchSelectWidth={false}\n          size='small'\n          disabled={!this.props.isVisible}\n        >\n          {name.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const settings = (\n      <div>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n        <Divider plain>\n          Exploration\n        </Divider>\n        <Row justify='start' align='middle' gutter={[8, 8]}>\n          <Col span={8}>\n            Measurement\n          </Col>\n          <Col span={16}>\n            <Select\n              style={{ minWidth: '65px', width: '90%' }}\n              onSelect={this.handleMeasurementSelection}\n              key='annotation-group-measurements'\n              defaultValue={undefined}\n            >\n              {measurementOptions}\n            </Select>\n          </Col>\n        </Row>\n      </div>\n    )\n\n    const {\n      annotationGroup,\n      defaultStyle,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.annotationGroup.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default AnnotationGroupItem\n","import React from 'react'\nimport { Menu } from 'antd'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport AnnotationGroupItem from './AnnotationGroupItem'\n\ninterface AnnotationGroupListProps {\n  annotationGroups: dmv.annotation.AnnotationGroup[]\n  visibleAnnotationGroupUIDs: Set<string>\n  metadata: {\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n  }\n  defaultAnnotationGroupStyles: {\n    [annotationGroupUID: string]: {\n      opacity: number\n    }\n  }\n  onAnnotationGroupVisibilityChange: ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }) => void\n  onAnnotationGroupStyleChange: ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n      measurement?: dcmjs.sr.coding.CodedConcept\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Annotation Groups.\n */\nclass AnnotationGroupList extends React.Component<AnnotationGroupListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\n      const uid = annotationGroup.uid\n      return (\n        <AnnotationGroupItem\n          key={annotationGroup.uid}\n          annotationGroup={annotationGroup}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default AnnotationGroupList\n","import React from 'react'\nimport { Button as Btn, Divider, Tooltip } from 'antd'\n\ninterface ButtonProps {\n  icon: any\n  tooltip?: string\n  label?: string\n  onClick?: (options: any) => void\n  isSelected?: boolean\n}\n\n/**\n * React component for a button.\n */\nclass Button extends React.Component<ButtonProps, {}> {\n  constructor (props: ButtonProps) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick (event: React.SyntheticEvent): void {\n    if (this.props.onClick !== undefined) {\n      this.props.onClick(event)\n    }\n  }\n\n  render (): React.ReactNode {\n    const Icon = this.props.icon\n    if (Icon === undefined) {\n      return null\n    }\n\n    let text\n    if (this.props.label != null) {\n      text = (\n        <>\n          <Divider type='vertical' />\n          {this.props.label}\n        </>\n      )\n    }\n\n    let button\n    if (this.props.isSelected ?? false) {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='primary'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    } else {\n      button = (\n        <Btn\n          onClick={this.handleClick}\n          icon={<Icon />}\n          type='default'\n          style={{ lineHeight: '1.0' }}\n        >\n          {text}\n        </Btn>\n      )\n    }\n\n    if (this.props.tooltip !== undefined) {\n      return (\n        <Tooltip title={this.props.tooltip}>\n          {button}\n        </Tooltip>\n      )\n    } else {\n      return button\n    }\n  }\n}\n\nexport default Button\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport Description from './Description'\n\ninterface EquipmentProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n}\n\n/**\n * React component representing a list of DICOM Equipment Entities.\n */\nclass Equipment extends React.Component<EquipmentProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const attributes = [\n      {\n        name: 'Manufacturer',\n        value: this.props.metadata.Manufacturer\n      },\n      {\n        name: 'Model Name',\n        value: this.props.metadata.ManufacturerModelName\n      },\n      {\n        name: 'Device Serial Number',\n        value: this.props.metadata.DeviceSerialNumber\n      },\n      {\n        name: 'Software Versions',\n        value: this.props.metadata.SoftwareVersions\n      }\n    ]\n    if (this.props.metadata.InstitutionName != null) {\n      attributes.push({\n        name: 'Institution Name',\n        value: this.props.metadata.InstitutionName\n      })\n    }\n    return <Description attributes={attributes} hasLongValues />\n  }\n}\n\nexport default Equipment\n","import * as dcmjs from 'dcmjs'\n\n/**\n * Check whether a DICOM SR content item has a given name.\n *\n * @param item - Content item\n * @param name - Coded name that should be compared\n * @returns Whether the content item has the given name\n */\nconst hasName = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  name: dcmjs.sr.coding.CodedConcept\n): boolean => {\n  const concept = item.ConceptNameCodeSequence[0]\n  return (\n    concept.CodeValue === name.CodeValue &&\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\n  )\n}\n\n/**\n * Check whether a DICOM SR content item has a given value type.\n *\n * @param item - Content item\n * @param valueType - Value Type\n * @returns Whether the content item has the given value type\n */\nconst hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: dcmjs.sr.valueTypes.ValueTypes\n): boolean => {\n  console.log(item.ValueType, valueType)\n  return item.ValueType === valueType\n}\n\n/**\n * Find content items in a DICOM SR document given their name.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param name - Coded name that should be compared\n * @returns Matched content items\n */\nexport const findContentItemsByName = (\n  { content, name }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    name: dcmjs.sr.coding.CodedConcept\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasName(i, name)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n\n/**\n * Find content items in a DICOM SR document given their value type.\n *\n * Only finds content items at the root level, but not any nested content items.\n *\n * @param content - Document content, i.e., sequence of content items\n * @param valueType - Value Type\n * @returns Matched content items\n */\nexport const findContentItemsByValueType = (\n  { content, valueType }: {\n    content: dcmjs.sr.valueTypes.ContentItem[]\n    valueType: dcmjs.sr.valueTypes.ValueTypes\n  }\n): dcmjs.sr.valueTypes.ContentItem[] => {\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, valueType)) {\n      items.push(i)\n    }\n  })\n  return items\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport { Divider } from 'antd'\nimport { v4 as generateUUID } from 'uuid'\n\nimport Description from './Description'\nimport Patient from './Patient'\nimport Study from './Study'\nimport { findContentItemsByName } from '../utils/sr'\n\nexport const hasValueType = (\n  item: dcmjs.sr.valueTypes.ContentItem,\n  valueType: string\n): boolean => {\n  return item.ValueType === valueType\n}\n\nconst findMeasurementItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.NumContentItem[] => {\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\n      items.push(measurement)\n    }\n  })\n  return items\n}\n\nconst findEvaluationItems = (\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\n  content.forEach(i => {\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\n      items.push(evaluation)\n    }\n  })\n  return items\n}\n\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\n  // TID 1500 Measurement Report\n  const matches = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (matches.length !== 1) {\n    throw new Error(\n      'Content item \"Imaging Measurements\" not found.' +\n      'Content of Comprehensive 3D SR document is not structured based on ' +\n      'TID 1500 \"Measurement Report\".'\n    )\n  }\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\n  const measurementGroupItems = findContentItemsByName({\n    content: measurementsItem.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  const rois: dmv.roi.ROI[] = []\n  measurementGroupItems.forEach((item) => {\n    const evaluations = []\n    let observerType: string\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\n    let items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '112040',\n        schemeDesignator: 'DCM',\n        meaning: 'Tracking Unique Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Tracking Unique Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121071',\n        schemeDesignator: 'DCM',\n        meaning: 'Finding'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Finding\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111001',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Name'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmNameItem)\n      observerType = 'Device'\n    } else {\n      observerType = 'Person'\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111003',\n        schemeDesignator: 'DCM',\n        meaning: 'Algorithm Version'\n      })\n    })\n    if (items.length !== 0) {\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n      evaluations.push(algorithmVersionItem)\n    }\n\n    items = findContentItemsByName({\n      content: group.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Image Region\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured ' +\n        'based on TID 1500 \"Measurement Report\" -> ' +\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n      )\n    }\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\n    let scoord3d: dmv.scoord3d.Scoord3D\n    if (regionItem.GraphicType === 'POINT') {\n      scoord3d = new dmv.scoord3d.Point({\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n        coordinates: regionItem.GraphicData\n      })\n    } else {\n      const coordinates: number[][] = []\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\n      }\n      if (regionItem.GraphicType === 'POLYGON') {\n        scoord3d = new dmv.scoord3d.Polygon({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\n        scoord3d = new dmv.scoord3d.MultiPoint({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'POLYLINE') {\n        scoord3d = new dmv.scoord3d.Polyline({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\n        scoord3d = new dmv.scoord3d.Ellipse({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\n        scoord3d = new dmv.scoord3d.Ellipsoid({\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\n          coordinates: coordinates\n        })\n      } else {\n        throw new Error(\n          'Content item \"Image Region\" has unknown graphic type ' +\n          `\"${regionItem.GraphicType}\". ` +\n          'Content of Comprehensive 3D SR document is not structured ' +\n          'based on TID 1500 \"Measurement Report\" -> ' +\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\n        )\n      }\n    }\n\n    evaluations.push(\n      ...findEvaluationItems({ content: group.ContentSequence })\n    )\n    const measurements = findMeasurementItems({\n      content: group.ContentSequence\n    })\n\n    const roi = new dmv.roi.ROI({\n      scoord3d: scoord3d,\n      uid: generateUUID(),\n      properties: {\n        trackingUID: trackingUIDItem.UID,\n        observerType: observerType,\n        evaluations: evaluations,\n        measurements: measurements\n      }\n    })\n    rois.push(roi)\n  })\n  return rois\n}\n\nclass MeasurementReport {\n  public PersonObserverName?: string\n\n  public PersonObserverLoginName?: string\n\n  public DeviceObserverUID?: string\n\n  public DeviceObserverName?: string\n\n  public SpecimenUID: string\n\n  public SpecimenIdentifier: string\n\n  public ContainerIdentifier: string\n\n  public ROIs: dmv.roi.ROI[] = []\n\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\n    let items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121039',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen UID'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen UID\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const specimenUIDItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n    )\n    this.SpecimenUID = specimenUIDItem.UID\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121041',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const specimenIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.SpecimenIdentifier = specimenIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111700',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen Container Identifier'\n      })\n    })\n    if (items.length === 0) {\n      throw new Error(\n        'Content item \"Specimen Container Identifier\" not found. ' +\n        'Content of Comprehensive 3D SR document is not structured based on ' +\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\n      )\n    }\n    const containerIdItem = (\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n    )\n    this.ContainerIdentifier = containerIdItem.TextValue\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121008',\n        schemeDesignator: 'DCM',\n        meaning: 'Person Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const personNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\n      )\n      this.PersonObserverName = personNameItem.PersonName\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '128774',\n        schemeDesignator: 'DCM',\n        meaning: \"Person Observer's Login Name\"\n      })\n    })\n    if (items.length !== 0) {\n      const personLoginNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121012',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer UID'\n      })\n    })\n    if (items.length > 0) {\n      const deviceUIDItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\n      )\n      this.DeviceObserverUID = deviceUIDItem.UID\n    }\n\n    items = findContentItemsByName({\n      content: report.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '121013',\n        schemeDesignator: 'DCM',\n        meaning: 'Device Observer Name'\n      })\n    })\n    if (items.length !== 0) {\n      const deviceNameItem = (\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\n      )\n      this.DeviceObserverName = deviceNameItem.TextValue\n    }\n\n    this.ROIs = getROIs(report)\n  }\n}\n\ninterface ReportProps {\n  dataset: dmv.metadata.Comprehensive3DSR\n}\n\n/**\n * React component representing a DICOM SR document that displays the\n * document content (a selected subset of content items).\n */\nclass Report extends React.Component<ReportProps, {}> {\n  render (): React.ReactNode {\n    const report = new MeasurementReport(this.props.dataset)\n    const containerAttrs = [\n      {\n        name: 'ID',\n        value: report.ContainerIdentifier\n      }\n    ]\n    const specimenAttrs = [\n      {\n        name: 'ID',\n        value: report.SpecimenIdentifier\n      }\n    ]\n    const observerAttrs = [\n      {\n        name: 'Name',\n        value: report.PersonObserverName\n      }\n    ]\n    const annotations = report.ROIs.map(\n      (roi, index): React.ReactNode => {\n        const id = `Region ${index + 1}`\n        const attrs: Array<{ name: string, value: string }> = []\n        roi.evaluations.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem\n          )\n        ) => {\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.ConceptCodeSequence[0].CodeMeaning\n            })\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            attrs.push({\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\n              value: item.TextValue\n            })\n          }\n        })\n        return <Description key={roi.uid} header={id} attributes={attrs} />\n      }\n    )\n\n    return (\n      <div>\n        <Divider orientation='left'>Patient</Divider>\n        <Patient metadata={this.props.dataset} />\n        <Divider orientation='left'>Case</Divider>\n        <Study metadata={this.props.dataset} />\n        <Divider orientation='left'>Slide</Divider>\n        <Description attributes={containerAttrs} />\n        <Divider orientation='left'>Specimen</Divider>\n        <Description attributes={specimenAttrs} />\n        <Divider orientation='left'>Observer</Divider>\n        <Description attributes={observerAttrs} />\n        <Divider orientation='left'>Annotations</Divider>\n        {annotations}\n      </div>\n    )\n  }\n}\n\nexport default Report\nexport { MeasurementReport }\n","import React from 'react'\nimport { List } from 'antd'\n\nimport Description, { Attribute, AttributeGroup } from './Description'\n\ninterface ItemProps {\n  uid: string\n  identifier: string\n  attributes: Attribute[]\n  groups?: AttributeGroup[]\n  children?: React.ReactElement[]\n  type?: string\n  hasLongValues?: boolean\n}\n\n/**\n * React component for a list item that consists of a header element\n * containing an identifier and a body element containing a description list\n * of attributes rendered as name-value pairs.\n */\nclass Item extends React.Component<ItemProps, {}> {\n  render (): React.ReactNode {\n    let groups = null\n    if (this.props.groups !== undefined) {\n      groups = this.props.groups.map((item, index: number) => (\n        <Description\n          key={index}\n          header={item.name}\n          attributes={item.attributes}\n        />\n      ))\n    }\n    let title\n    if (this.props.type !== undefined) {\n      title = `${this.props.type}: ${this.props.identifier}`\n    } else {\n      title = this.props.identifier\n    }\n    return (\n      <List.Item key={this.props.uid}>\n        <Description\n          header={title}\n          attributes={this.props.attributes}\n          hasLongValues={this.props.hasLongValues}\n        >\n          {groups}\n        </Description>\n        {this.props.children}\n      </List.Item>\n    )\n  }\n}\n\nexport default Item\n","import * as dcmjs from 'dcmjs'\n\nexport const SpecimenPreparationTypes: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\n    value: '433465004',\n    schemeDesignator: 'SCT',\n    meaning: 'Sampling of tissue specimen'\n  }),\n  STAINING: new dcmjs.sr.coding.CodedConcept({\n    value: '127790008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen staining'\n  }),\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '9265001',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen processing'\n  })\n}\n\nexport const SpecimenPreparationAdditives: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\n    value: '430864009',\n    schemeDesignator: 'SCT',\n    meaning: 'Tissue fixative'\n  }),\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\n    value: '430863003',\n    schemeDesignator: 'SCT',\n    meaning: 'Embedding medium'\n  })\n}\n\nexport const SpecimenPreparationStepItems: {\n  [key: string]: dcmjs.sr.coding.CodedConcept\n} = {\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '121041',\n    schemeDesignator: 'DCM',\n    meaning: 'Specimen identifier'\n  }),\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\n    value: '111705',\n    schemeDesignator: 'DCM',\n    meaning: 'Parent specimen identifier'\n  }),\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\n    value: '111701',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing type'\n  }),\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\n    value: '111702',\n    schemeDesignator: 'DCM',\n    meaning: 'Datetime of processing'\n  }),\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\n    value: '111703',\n    schemeDesignator: 'DCM',\n    meaning: 'Processing step description'\n  }),\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '17636008',\n    schemeDesignator: 'SCT',\n    meaning: 'Specimen collection'\n  }),\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\n    value: '111704',\n    schemeDesignator: 'DCM',\n    meaning: 'Sampling method'\n  }),\n  STAIN: new dcmjs.sr.coding.CodedConcept({\n    value: '424361007',\n    schemeDesignator: 'SCT',\n    meaning: 'Using substance'\n  }),\n  ...SpecimenPreparationAdditives\n}\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport Item from './Item'\nimport { Attribute } from './Description'\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface SpecimenItemProps {\n  index: number\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a DICOM Specimen Information Entity and\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\n */\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\n      this.props.index\n    ]\n    const attributes: Attribute[] = []\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\n      attributes.push({\n        name: 'Description',\n        value: specimenDescription.SpecimenShortDescription\n      })\n    }\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\n        attributes.push({\n          name: 'Anatomical structure',\n          value: structures.map(item => item.CodeMeaning).join(', ')\n        })\n      }\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\n      specimenDescription.SpecimenPreparationSequence ?? []\n    )\n    preparationSteps.forEach(\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n        step.SpecimenPreparationStepContentItemSequence.forEach((\n          item: (\n            dcmjs.sr.valueTypes.CodeContentItem |\n            dcmjs.sr.valueTypes.TextContentItem |\n            dcmjs.sr.valueTypes.UIDRefContentItem |\n            dcmjs.sr.valueTypes.PNameContentItem |\n            dcmjs.sr.valueTypes.DateTimeContentItem\n          ),\n          index: number\n        ) => {\n          const name = new dcmjs.sr.coding.CodedConcept({\n            value: item.ConceptNameCodeSequence[0].CodeValue,\n            schemeDesignator:\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n          })\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\n            const value = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\n            })\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n              if (\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\n              ) {\n                attributes.push({\n                  name: 'Collection method',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\n              ) {\n                attributes.push({\n                  name: 'Tissue fixative',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\n              ) {\n                attributes.push({\n                  name: 'Tissue embedding medium',\n                  value: value.CodeMeaning\n                })\n              } else if (\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\n                this.props.showstain\n              ) {\n                attributes.push({\n                  name: 'Tissue stain',\n                  value: value.CodeMeaning\n                })\n              }\n            }\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n            item = item as dcmjs.sr.valueTypes.TextContentItem\n            if (\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\n              this.props.showstain\n            ) {\n              attributes.push({\n                name: 'Tissue stain',\n                value: item.TextValue\n              })\n            } else if (\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\n            ) {\n              attributes.push({\n                name: 'Parent specimen',\n                value: item.TextValue\n              })\n            }\n          }\n        })\n      }\n    )\n    const uid = specimenDescription.SpecimenUID\n    const identifier = specimenDescription.SpecimenIdentifier\n    return (\n      <Item\n        uid={uid}\n        key={uid}\n        identifier={identifier}\n        attributes={attributes}\n        hasLongValues\n      />\n    )\n  }\n}\n\nexport default SpecimenItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { List } from 'antd'\n\nimport SpecimenItem from './SpecimenItem'\n\ninterface SpecimenListProps {\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\n  showstain: boolean\n}\n\n/**\n * React component representing a list of DICOM Specimen Information Entities.\n */\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n    /*\n     * Specimen Description Sequence is a type 1 attribute. However, it is\n     * nevertheless missing in some data sets. This is a violation of the\n     * standard, but it may be better to facilitate display of the data.\n     */\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\n    const items = descriptions.map(\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\n        return (\n          <SpecimenItem\n            index={index}\n            key={item.SpecimenUID}\n            metadata={this.props.metadata}\n            showstain={this.props.showstain}\n          />\n        )\n      }\n    )\n    return (\n      <List style={{ overflowY: 'auto' }}>\n        {items}\n      </List>\n    )\n  }\n}\n\nexport default SpecimenList\n","import React from 'react'\nimport {\n  Badge,\n  Button,\n  Col,\n  Divider,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch,\n  Tooltip\n} from 'antd'\nimport {\n  DeleteOutlined,\n  EyeOutlined,\n  EyeInvisibleOutlined,\n  SettingOutlined\n} from '@ant-design/icons'\nimport Description from './Description'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\n\nimport { SpecimenPreparationStepItems } from '../data/specimens'\n\ninterface OpticalPathItemProps {\n  opticalPath: dmv.opticalPath.OpticalPath\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  isVisible: boolean\n  isRemovable: boolean\n  defaultStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      limitValues?: number[]\n    }\n  }) => void\n  onRemoval: (opticalPathIdentifier: string) => void\n}\n\ninterface OpticalPathItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n    color?: number[]\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n    limitValues?: number[]\n  }\n}\n\n/**\n * React component representing an optical path of a\n * multi-channel acquistion with control of visualization parameters.\n */\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\n  constructor (props: OpticalPathItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.handleLimitChange = this.handleLimitChange.bind(this)\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\n    this.handleColorRChange = this.handleColorRChange.bind(this)\n    this.handleColorGChange = this.handleColorGChange.bind(this)\n    this.handleColorBChange = this.handleColorBChange.bind(this)\n    this.handleRemoval = this.handleRemoval.bind(this)\n    this.getCurrentColors = this.getCurrentColors.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity,\n        color: this.props.defaultStyle.color,\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\n        limitValues: this.props.defaultStyle.limitValues\n      }\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: OpticalPathItemProps,\n    previousState: OpticalPathItemState\n  ): void {\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\n      this.setState({\n        currentStyle: this.props.defaultStyle\n      })\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState({\n      isVisible: checked\n    })\n    this.props.onVisibilityChange({\n      opticalPathIdentifier: identifier,\n      isVisible: checked\n    })\n  }\n\n  handleOpacityChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { opacity: value }\n    })\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: value,\n        limitValues: state.currentStyle.limitValues\n      }\n    }))\n  }\n\n  handleColorRChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[1],\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorGChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        Array.isArray(value) ? value[0] : value,\n        this.state.currentStyle.color[2]\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  handleColorBChange (\n    value: number | number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.color !== undefined) {\n      const color = [\n        this.state.currentStyle.color[0],\n        this.state.currentStyle.color[1],\n        Array.isArray(value) ? value[0] : value\n      ]\n      this.setState(state => ({\n        currentStyle: {\n          color: color,\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n          opacity: state.currentStyle.opacity,\n          limitValues: state.currentStyle.limitValues\n        }\n      }))\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: { color: color }\n      })\n    }\n  }\n\n  getCurrentColors (): string[] {\n    const rgb2hex = (values: number[]): string => {\n      const r = values[0]\n      const g = values[1]\n      const b = values[2]\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\n    }\n\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\n      return colormap.map(values => rgb2hex(values))\n    } else if (this.state.currentStyle.color != null) {\n      return [\n        '#000000',\n        rgb2hex(this.state.currentStyle.color)\n      ]\n    } else {\n      return ['white', 'white']\n    }\n  }\n\n  handleLowerLimitChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [value, state.currentStyle.limitValues[1]]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            value,\n            this.state.currentStyle.limitValues[1]\n          ]\n        }\n      })\n    }\n  }\n\n  handleUpperLimitChange (\n    value: number\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    if (this.state.currentStyle.limitValues !== undefined) {\n      this.setState(state => {\n        if (state.currentStyle.limitValues !== undefined) {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: [state.currentStyle.limitValues[0], value]\n            }\n          }\n        } else {\n          return {\n            currentStyle: {\n              color: state.currentStyle.color,\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n              opacity: state.currentStyle.opacity,\n              limitValues: state.currentStyle.limitValues\n            }\n          }\n        }\n      })\n      this.props.onStyleChange({\n        opticalPathIdentifier: identifier,\n        styleOptions: {\n          limitValues: [\n            this.state.currentStyle.limitValues[0],\n            value\n          ]\n        }\n      })\n    }\n  }\n\n  handleLimitChange (\n    values: number[]\n  ): void {\n    const identifier = this.props.opticalPath.identifier\n    this.setState(state => ({\n      currentStyle: {\n        color: state.currentStyle.color,\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\n        opacity: state.currentStyle.opacity,\n        limitValues: values\n      }\n    }))\n    this.props.onStyleChange({\n      opticalPathIdentifier: identifier,\n      styleOptions: { limitValues: values }\n    })\n  }\n\n  handleRemoval (): void {\n    const identifier = this.props.opticalPath.identifier\n    this.props.onRemoval(identifier)\n  }\n\n  render (): React.ReactNode {\n    const identifier = this.props.opticalPath.identifier\n    const description = this.props.opticalPath.description\n    const attributes: Array<{ name: string, value: string }> = []\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination wavelength',\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\n        }\n      )\n    }\n    if (this.props.opticalPath.illuminationColor !== undefined) {\n      attributes.push(\n        {\n          name: 'Illumination color',\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\n        }\n      )\n    }\n\n    // TID 8001 \"Specimen Preparation\"\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\n    )\n    specimenDescriptions.forEach(description => {\n      const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] = (\n        description.SpecimenPreparationSequence ?? []\n      )\n      specimenPreparationSteps.forEach(\n        (step: dmv.metadata.SpecimenPreparation, index: number): void => {\n          step.SpecimenPreparationStepContentItemSequence.forEach((\n            item: (\n              dcmjs.sr.valueTypes.CodeContentItem |\n              dcmjs.sr.valueTypes.TextContentItem |\n              dcmjs.sr.valueTypes.UIDRefContentItem |\n              dcmjs.sr.valueTypes.PNameContentItem |\n              dcmjs.sr.valueTypes.DateTimeContentItem\n            ),\n            index: number\n          ) => {\n            const name = new dcmjs.sr.coding.CodedConcept({\n              value: item.ConceptNameCodeSequence[0].CodeValue,\n              schemeDesignator:\n                item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\n              meaning: item.ConceptNameCodeSequence[0].CodeMeaning\n            })\n            if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\n              item = item as dcmjs.sr.valueTypes.CodeContentItem\n              const value = new dcmjs.sr.coding.CodedConcept({\n                value: item.ConceptCodeSequence[0].CodeValue,\n                schemeDesignator:\n                  item.ConceptCodeSequence[0].CodingSchemeDesignator,\n                meaning: item.ConceptCodeSequence[0].CodeMeaning\n              })\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                  attributes.push({\n                    name: 'Tissue stain',\n                    value: value.CodeMeaning\n                  })\n                }\n              }\n            } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\n              item = item as dcmjs.sr.valueTypes.TextContentItem\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\n                  attributes.push({\n                    name: 'Tissue stain',\n                    value: item.TextValue\n                  })\n                }\n              }\n            }\n          })\n        }\n      )\n    })\n\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\n\n    const title = (\n      description != null ? `${identifier}: ${description}` : identifier\n    )\n    let settings\n    let item\n    if (this.props.opticalPath.isMonochromatic) {\n      // monochrome images that can be pseudo-colored\n      let colorSettings\n      if (this.state.currentStyle.color != null) {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Red\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[0]}\n                  onChange={this.handleColorRChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Green\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[1]}\n                  onChange={this.handleColorGChange}\n                />\n              </Col>\n            </Row>\n\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={5}>\n                Blue\n              </Col>\n              <Col span={14}>\n                <Slider\n                  range={false}\n                  min={0}\n                  max={255}\n                  step={1}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n              <Col span={5}>\n                <InputNumber\n                  min={0}\n                  max={255}\n                  size='small'\n                  style={{ width: '65px' }}\n                  value={this.state.currentStyle.color[2]}\n                  onChange={this.handleColorBChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      } else {\n        colorSettings = (\n          <>\n            <Divider plain>\n              Color\n            </Divider>\n            Custom pseudo-coloring is disabled because pixels are colorized via\n            a provided palette color lookup table.\n          </>\n        )\n      }\n\n      let windowSettings\n      if (this.state.currentStyle.limitValues != null) {\n        windowSettings = (\n          <>\n            <Divider plain>\n              Values of interest\n            </Divider>\n            <Row justify='center' align='middle' gutter={[8, 8]}>\n              <Col span={6}>\n                <InputNumber\n                  min={0}\n                  max={this.state.currentStyle.limitValues[1]}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[0]}\n                  onChange={this.handleLowerLimitChange}\n                />\n              </Col>\n              <Col span={12}>\n                <Slider\n                  range\n                  min={0}\n                  max={maxValue}\n                  step={1}\n                  value={[\n                    this.state.currentStyle.limitValues[0],\n                    this.state.currentStyle.limitValues[1]\n                  ]}\n                  onChange={this.handleLimitChange}\n                />\n              </Col>\n              <Col span={6}>\n                <InputNumber\n                  min={this.state.currentStyle.limitValues[0]}\n                  max={maxValue}\n                  size='small'\n                  style={{ width: '75px' }}\n                  value={this.state.currentStyle.limitValues[1]}\n                  onChange={this.handleUpperLimitChange}\n                />\n              </Col>\n            </Row>\n          </>\n        )\n      }\n      settings = (\n        <div>\n          {windowSettings}\n          {colorSettings}\n          <Divider plain />\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '65px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      const colors = this.getCurrentColors()\n      item = (\n        <Badge\n          offset={[-20, 20]}\n          count={' '}\n          style={{\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            borderColor: 'gray',\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\n          }}\n        >\n          <Description\n            header={title}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Badge>\n      )\n    } else {\n      // color images\n      settings = (\n        <div>\n          <Row justify='center' align='middle' gutter={[8, 8]}>\n            <Col span={6}>\n              Opacity\n            </Col>\n            <Col span={12}>\n              <Slider\n                range={false}\n                min={0}\n                max={1}\n                step={0.01}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n            <Col span={6}>\n              <InputNumber\n                min={0}\n                max={1}\n                size='small'\n                step={0.1}\n                style={{ width: '60px' }}\n                value={this.state.currentStyle.opacity}\n                onChange={this.handleOpacityChange}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n      item = (\n        <Description\n          header={title}\n          attributes={attributes}\n          selectable\n          hasLongValues\n        />\n      )\n    }\n\n    const buttons = []\n    if (this.props.isRemovable) {\n      buttons.push(\n        <Tooltip title='Remove Optical Path'>\n          <Button\n            type='default'\n            shape='circle'\n            icon={<DeleteOutlined />}\n            onClick={this.handleRemoval}\n          />\n        </Tooltip>\n      )\n    }\n\n    const {\n      defaultStyle,\n      isRemovable,\n      isVisible,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      onRemoval,\n      opticalPath,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.opticalPath.identifier}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                checked={this.state.isVisible}\n                onChange={this.handleVisibilityChange}\n                checkedChildren={<EyeOutlined />}\n                unCheckedChildren={<EyeInvisibleOutlined />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n              {buttons}\n            </Space>\n          </div>\n          {item}\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default OpticalPathItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\nimport { AppstoreAddOutlined } from '@ant-design/icons'\n\nimport OpticalPathItem from './OpticalPathItem'\n\nconst { Option } = Select\n\ninterface OpticalPathListProps {\n  opticalPaths: dmv.opticalPath.OpticalPath[]\n  metadata: {\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  }\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      opacity: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }) => void\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }) => void\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }) => void\n  selectedPresentationStateUID?: string\n}\n\ninterface OpticalPathListState {\n  selectedOpticalPathIdentifier?: string\n}\n\n/**\n * React component representing a list of optical paths.\n */\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\n  state = {\n    selectedOpticalPathIdentifier: undefined\n  }\n\n  constructor (props: OpticalPathListProps) {\n    super(props)\n    this.handleItemAddition = this.handleItemAddition.bind(this)\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\n  }\n\n  /**\n   * Handler that gets called when an optical path should be removed.\n   */\n  handleItemRemoval (opticalPathIdentifier: string): void {\n    this.props.onOpticalPathActivityChange({\n      opticalPathIdentifier,\n      isActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when the selection of an optical path should change.\n   */\n  handleItemSelectionChange (\n    value: string\n  ): void {\n    this.setState({ selectedOpticalPathIdentifier: value })\n  }\n\n  /**\n   * Handler that gets called when an optical path should be added.\n   */\n  handleItemAddition (): void {\n    const identifier = this.state.selectedOpticalPathIdentifier\n    if (identifier !== undefined) {\n      this.props.onOpticalPathActivityChange({\n        opticalPathIdentifier: identifier,\n        isActive: true\n      })\n      this.setState({ selectedOpticalPathIdentifier: undefined })\n    }\n  }\n\n  render (): React.ReactNode {\n    if (this.props.metadata === undefined) {\n      return null\n    }\n\n    const isSelectable = this.props.opticalPaths.length > 1\n    const opticalPathItems: React.ReactNode[] = []\n    const optionItems: React.ReactNode[] = []\n    this.props.opticalPaths.forEach(opticalPath => {\n      const opticalPathIdentifier = opticalPath.identifier\n      const images = this.props.metadata[opticalPathIdentifier]\n      const seriesInstanceUID = images[0].SeriesInstanceUID\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\n        const id = opticalPathItem.OpticalPathIdentifier\n        const description = opticalPathItem.OpticalPathDescription\n        if (opticalPath.identifier === id) {\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\n            opticalPathItems.push(\n              <OpticalPathItem\n                key={`${seriesInstanceUID}-${id}`}\n                opticalPath={opticalPath}\n                metadata={images}\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\n                onStyleChange={this.props.onOpticalPathStyleChange}\n                onRemoval={this.handleItemRemoval}\n                isRemovable={isSelectable}\n              />\n            )\n          } else {\n            let title\n            if (description !== '') {\n              title = `${id} - ${description}`\n            } else {\n              title = `${id}`\n            }\n            optionItems.push(\n              <Option key={id} value={id}>{title}</Option>\n            )\n          }\n        }\n      })\n    })\n\n    let opticalPathSelector\n    if (isSelectable) {\n      opticalPathSelector = (\n        <Space align='center' size={20} style={{ padding: '14px' }}>\n          <Select\n            defaultValue=''\n            style={{ width: 200 }}\n            onChange={this.handleItemSelectionChange}\n            value={this.state.selectedOpticalPathIdentifier}\n            allowClear\n          >\n            {optionItems}\n          </Select>\n          <Tooltip title='Add'>\n            <Btn\n              icon={<AppstoreAddOutlined />}\n              type='primary'\n              onClick={this.handleItemAddition}\n            />\n          </Tooltip>\n        </Space>\n      )\n    }\n\n    return (\n      <Menu selectable={false}>\n        {opticalPathItems}\n        {opticalPathSelector}\n      </Menu>\n    )\n  }\n}\n\nexport default OpticalPathList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface MappingItemProps {\n  mapping: dmv.mapping.ParameterMapping\n  metadata: dmv.metadata.ParametricMap[]\n  isVisible: boolean\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\ninterface MappingItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Real World Value Mapping.\n */\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\n  constructor (props: MappingItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: {\n        opacity: this.props.defaultStyle.opacity\n      }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    this.props.onVisibilityChange({\n      mappingUID: this.props.mapping.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      mappingUID: this.props.mapping.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState(state => ({\n      currentStyle: {\n        opacity: value\n      }\n    }))\n  }\n\n  render (): React.ReactNode {\n    const identifier = `Mapping ${this.props.mapping.number}`\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Label',\n        value: this.props.mapping.label\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      mapping,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.mapping.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end' size={100}>\n              <Space direction='vertical' align='end'>\n                <Switch\n                  size='small'\n                  onChange={this.handleVisibilityChange}\n                  checked={this.props.isVisible}\n                  checkedChildren={<FaEye />}\n                  unCheckedChildren={<FaEyeSlash />}\n                />\n                <Popover\n                  placement='left'\n                  content={settings}\n                  overlayStyle={{ width: '350px' }}\n                  title='Display Settings'\n                >\n                  <Button\n                    type='primary'\n                    shape='circle'\n                    icon={<SettingOutlined />}\n                  />\n                </Popover>\n              </Space>\n            </Space>\n          </div>\n          <Description\n            header={identifier}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default MappingItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport MappingItem from './MappingItem'\n\ninterface MappingListProps {\n  mappings: dmv.mapping.ParameterMapping[]\n  metadata: {\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\n  }\n  visibleMappingUIDs: Set<string>\n  defaultMappingStyles: {\n    [mappingUID: string]: { opacity: number }\n  }\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }) => void\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Real World Value Mappings.\n */\nclass MappingList extends React.Component<MappingListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.mappings.map((mapping, index) => {\n      const uid = mapping.uid\n      return (\n        <MappingItem\n          key={mapping.uid}\n          mapping={mapping}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\n          defaultStyle={this.props.defaultMappingStyles[uid]}\n          onVisibilityChange={this.props.onMappingVisibilityChange}\n          onStyleChange={this.props.onMappingStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default MappingList\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport {\n  Button,\n  Col,\n  InputNumber,\n  Menu,\n  Popover,\n  Row,\n  Slider,\n  Space,\n  Switch\n} from 'antd'\nimport { SettingOutlined } from '@ant-design/icons'\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\n\nimport Description from './Description'\n\ninterface SegmentItemProps {\n  segment: dmv.segment.Segment\n  isVisible: boolean\n  metadata: dmv.metadata.Segmentation[]\n  defaultStyle: {\n    opacity: number\n  }\n  onVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\ninterface SegmentItemState {\n  isVisible: boolean\n  currentStyle: {\n    opacity: number\n  }\n}\n\n/**\n * React component representing a Segment.\n */\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\n  constructor (props: SegmentItemProps) {\n    super(props)\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\n    this.state = {\n      isVisible: this.props.isVisible,\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\n    }\n  }\n\n  handleVisibilityChange (\n    checked: boolean,\n    event: Event\n  ): void {\n    this.props.onVisibilityChange({\n      segmentUID: this.props.segment.uid,\n      isVisible: checked\n    })\n    this.setState({ isVisible: checked })\n  }\n\n  handleOpacityChange (value: number): void {\n    this.props.onStyleChange({\n      segmentUID: this.props.segment.uid,\n      styleOptions: {\n        opacity: value\n      }\n    })\n    this.setState({ currentStyle: { opacity: value } })\n  }\n\n  render (): React.ReactNode {\n    const attributes: Array<{ name: string, value: string }> = [\n      {\n        name: 'Property Category',\n        value: this.props.segment.propertyCategory.CodeMeaning\n      },\n      {\n        name: 'Property Type',\n        value: this.props.segment.propertyType.CodeMeaning\n      },\n      {\n        name: 'Algorithm Name',\n        value: this.props.segment.algorithmName\n      }\n    ]\n\n    const settings = (\n      <div>\n        <Row justify='center' align='middle'>\n          <Col span={6}>\n            Opacity\n          </Col>\n          <Col span={12}>\n            <Slider\n              range={false}\n              min={0}\n              max={1}\n              step={0.01}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n          <Col span={6}>\n            <InputNumber\n              min={0}\n              max={1}\n              size='small'\n              step={0.1}\n              style={{ width: '65px' }}\n              value={this.state.currentStyle.opacity}\n              onChange={this.handleOpacityChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    )\n\n    /**\n     * This hack is required for Menu.Item to work properly:\n     * https://github.com/react-component/menu/issues/142\n     */\n    const {\n      defaultStyle,\n      isVisible,\n      segment,\n      metadata,\n      onVisibilityChange,\n      onStyleChange,\n      ...otherProps\n    } = this.props\n    return (\n      <Menu.Item\n        style={{ height: '100%', paddingLeft: '3px' }}\n        key={this.props.segment.uid}\n        {...otherProps}\n      >\n        <Space align='start'>\n          <div style={{ paddingLeft: '14px' }}>\n            <Space direction='vertical' align='end'>\n              <Switch\n                size='small'\n                onChange={this.handleVisibilityChange}\n                checked={this.props.isVisible}\n                checkedChildren={<FaEye />}\n                unCheckedChildren={<FaEyeSlash />}\n              />\n              <Popover\n                placement='left'\n                content={settings}\n                overlayStyle={{ width: '350px' }}\n                title='Display Settings'\n              >\n                <Button\n                  type='primary'\n                  shape='circle'\n                  icon={<SettingOutlined />}\n                />\n              </Popover>\n            </Space>\n          </div>\n          <Description\n            header={this.props.segment.label}\n            attributes={attributes}\n            selectable\n            hasLongValues\n          />\n        </Space>\n      </Menu.Item>\n    )\n  }\n}\n\nexport default SegmentItem\n","import React from 'react'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport { Menu } from 'antd'\n\nimport SegmentItem from './SegmentItem'\n\ninterface SegmentListProps {\n  segments: dmv.segment.Segment[]\n  visibleSegmentUIDs: Set<string>\n  metadata: {\n    [segmentUID: string]: dmv.metadata.Segmentation[]\n  }\n  defaultSegmentStyles: {\n    [segmentUID: string]: {\n      opacity: number\n    }\n  }\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }) => void\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity: number\n    }\n  }) => void\n}\n\n/**\n * React component representing a list of Segments.\n */\nclass SegmentList extends React.Component<SegmentListProps, {}> {\n  render (): React.ReactNode {\n    const items = this.props.segments.map((segment, index) => {\n      const uid = segment.uid\n      return (\n        <SegmentItem\n          key={segment.uid}\n          segment={segment}\n          metadata={this.props.metadata[uid]}\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\n          onStyleChange={this.props.onSegmentStyleChange}\n        />\n      )\n    })\n\n    return (\n      <Menu selectable={false}>\n        {items}\n      </Menu>\n    )\n  }\n}\n\nexport default SegmentList\n","export enum SOPClassUIDs {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\n}\n","import React from 'react'\nimport {\n  NavigateFunction,\n  Params,\n  useLocation,\n  useNavigate,\n  useParams,\n  Location\n} from 'react-router-dom'\n\nexport interface RouteComponentProps {\n  location: Location\n  navigate: NavigateFunction\n  params: Params<string>\n}\n\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\n  function ComponentWithRouterProp (props: any): JSX.Element {\n    const location = useLocation()\n    const navigate = useNavigate()\n    const params = useParams()\n    return (\n      <Component\n        {...props}\n        location={location}\n        navigate={navigate}\n        params={params}\n      />\n    )\n  }\n  return ComponentWithRouterProp\n}\n","import React from 'react'\nimport {\n  FaDrawPolygon,\n  FaEye,\n  FaEyeSlash,\n  FaHandPaper,\n  FaHandPointer,\n  FaTrash,\n  FaSave\n} from 'react-icons/fa'\nimport {\n  Button as Btn,\n  Checkbox,\n  message,\n  Menu,\n  Modal,\n  Layout,\n  Row,\n  Select,\n  Space,\n  Tooltip\n} from 'antd'\nimport { UndoOutlined } from '@ant-design/icons'\nimport * as dmv from 'dicom-microscopy-viewer'\nimport * as dcmjs from 'dcmjs'\nimport * as dwc from 'dicomweb-client'\n\nimport DicomWebManager from '../DicomWebManager'\nimport AnnotationList from './AnnotationList'\nimport AnnotationGroupList from './AnnotationGroupList'\nimport Button from './Button'\nimport Equipment from './Equipment'\nimport Report, { MeasurementReport } from './Report'\nimport SpecimenList from './SpecimenList'\nimport OpticalPathList from './OpticalPathList'\nimport MappingList from './MappingList'\nimport SegmentList from './SegmentList'\nimport { AnnotationSettings } from '../AppConfig'\nimport { Slide } from '../data/slides'\nimport { SOPClassUIDs } from '../data/uids'\nimport { findContentItemsByName } from '../utils/sr'\nimport { RouteComponentProps, withRouter } from '../utils/router'\n\nconst _buildKey = (concept: dcmjs.sr.coding.CodedConcept): string => {\n  const codingScheme = concept.CodingSchemeDesignator\n  const codeValue = concept.CodeValue\n  return `${codingScheme}-${codeValue}`\n}\n\nconst _getRoiKey = (roi: dmv.roi.ROI): string => {\n  const matches = findContentItemsByName({\n    content: roi.evaluations,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121071',\n      meaning: 'Finding',\n      schemeDesignator: 'DCM'\n    })\n  })\n  if (matches.length === 0) {\n    throw new Error(`No finding found for ROI ${roi.uid}`)\n  }\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const findingName = finding.ConceptCodeSequence[0]\n  return _buildKey(findingName)\n}\n\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\n    return false\n  }\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\n    return false\n  }\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\n    return false\n  }\n\n  const decimals = 6\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\n    if (a.scoord3d.graphicType === 'POINT') {\n      const s1 = a.scoord3d as dmv.scoord3d.Point\n      const s2 = b.scoord3d as dmv.scoord3d.Point\n      const c1 = s1.graphicData[i].toPrecision(decimals)\n      const c2 = s2.graphicData[i].toPrecision(decimals)\n      if (c1 !== c2) {\n        return false\n      }\n    } else {\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\n        if (c1 !== c2) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst _constructViewers = ({ client, slide, preload }: {\n  client: dwc.api.DICOMwebClient\n  slide: Slide\n  preload?: boolean\n}): {\n  volumeViewer: dmv.viewer.VolumeImageViewer\n  labelViewer?: dmv.viewer.LabelImageViewer\n} => {\n  const volumeViewer = new dmv.viewer.VolumeImageViewer({\n    client: client,\n    metadata: slide.volumeImages,\n    controls: ['overview'],\n    preload: preload\n  })\n  volumeViewer.activateSelectInteraction({})\n\n  let labelViewer\n  if (slide.labelImages.length > 0) {\n    labelViewer = new dmv.viewer.LabelImageViewer({\n      client: client,\n      metadata: slide.labelImages[0],\n      resizeFactor: 1,\n      orientation: 'vertical'\n    })\n  }\n\n  return { volumeViewer, labelViewer }\n}\n\n/*\n * Check whether the report is structured according to template\n * TID 1500 \"MeasurementReport\".\n */\nconst _implementsTID1500 = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const templateSeq = report.ContentTemplateSequence\n  if (templateSeq.length > 0) {\n    const tid = templateSeq[0].TemplateIdentifier\n    if (tid === '1500') {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n * Check whether the subject described in the report is a specimen as compared\n * to a patient, fetus, or device.\n */\nconst _describesSpecimenSubject = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const items = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '121024',\n      schemeDesignator: 'DCM',\n      meaning: 'Subject Class'\n    })\n  })\n  if (items.length === 0) {\n    return false\n  }\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: subjectClassValue.CodeValue,\n    meaning: subjectClassValue.CodeMeaning,\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\n  })\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\n    value: '121027',\n    meaning: 'Specimen',\n    schemeDesignator: 'DCM'\n  })\n  if (retrievedConcept.equals(expectedConcept)) {\n    return true\n  }\n  return false\n}\n\n/*\n * Check whether the report contains appropriate graphic ROI annotations.\n */\nconst _containsROIAnnotations = (\n  report: dmv.metadata.Comprehensive3DSR\n): boolean => {\n  const measurements = findContentItemsByName({\n    content: report.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '126010',\n      schemeDesignator: 'DCM',\n      meaning: 'Imaging Measurements'\n    })\n  })\n  if (measurements.length === 0) {\n    return false\n  }\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\n  const measurementGroups = findContentItemsByName({\n    content: container.ContentSequence,\n    name: new dcmjs.sr.coding.CodedConcept({\n      value: '125007',\n      schemeDesignator: 'DCM',\n      meaning: 'Measurement Group'\n    })\n  })\n\n  let foundRegion = false\n  measurementGroups.forEach((group) => {\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\n    const regions = findContentItemsByName({\n      content: container.ContentSequence,\n      name: new dcmjs.sr.coding.CodedConcept({\n        value: '111030',\n        schemeDesignator: 'DCM',\n        meaning: 'Image Region'\n      })\n    })\n    if (regions.length > 0) {\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\n        foundRegion = true\n      }\n    }\n  })\n\n  return foundRegion\n}\n\ninterface EvaluationOptions {\n  name: dcmjs.sr.coding.CodedConcept\n  values: dcmjs.sr.coding.CodedConcept[]\n}\n\ninterface Evaluation {\n  name: dcmjs.sr.coding.CodedConcept\n  value: dcmjs.sr.coding.CodedConcept\n}\n\ninterface Measurement {\n  name: dcmjs.sr.coding.CodedConcept\n  value?: number\n  unit: dcmjs.sr.coding.CodedConcept\n}\n\ninterface SlideViewerProps extends RouteComponentProps {\n  slide: Slide\n  client: DicomWebManager\n  studyInstanceUID: string\n  seriesInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload?: boolean\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  user?: {\n    name: string\n    email: string\n  }\n  selectedPresentationStateUID?: string\n}\n\ninterface SlideViewerState {\n  selectedRoiUIDs: Set<string>\n  visibleRoiUIDs: Set<string>\n  visibleSegmentUIDs: Set<string>\n  visibleMappingUIDs: Set<string>\n  visibleAnnotationGroupUIDs: Set<string>\n  visibleOpticalPathIdentifiers: Set<string>\n  activeOpticalPathIdentifiers: Set<string>\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\n  selectedPresentationStateUID?: string\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\n  selectedEvaluations: Evaluation[]\n  selectedGeometryType?: string\n  selectedMarkup?: string\n  generatedReport?: dmv.metadata.Comprehensive3DSR\n  isLoading: boolean\n  isAnnotationModalVisible: boolean\n  isReportModalVisible: boolean\n  isRoiDrawingActive: boolean\n  isRoiModificationActive: boolean\n  isRoiTranslationActive: boolean\n  areRoisHidden: boolean\n  pixelDataStatistics: {\n    [opticalPathIdentifier: string]: {\n      min: number\n      max: number\n      numFramesSampled: number\n    }\n  }\n  defaultOpticalPathStyles: {\n    [opticalPathIdentifier: string]: {\n      color?: number[]\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n      opacity?: number\n      limitValues?: number[]\n    }\n  }\n}\n\n/**\n * React component for interactive viewing of an individual digital slide,\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\n * potentially one or more associated DICOM Series of DICOM SR documents.\n */\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\n\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\n\n  private readonly measurements: Measurement[] = []\n\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\n\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\n\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\n\n  private volumeViewer: dmv.viewer.VolumeImageViewer\n\n  private labelViewer?: dmv.viewer.LabelImageViewer\n\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\n    stroke: {\n      color: [0, 126, 163],\n      width: 2\n    },\n    fill: {\n      color: [0, 126, 163, 0.1]\n    }\n  }\n\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\n\n  private readonly selectionColor: number[] = [140, 184, 198]\n\n  private readonly selectedRoiStyle: {\n    stroke?: { color: number[], width: number }\n    fill?: { color: number[] }\n  } = {\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\n    fill: { color: [...this.selectionColor, 0.2] }\n  }\n\n  constructor (props: SlideViewerProps) {\n    super(props)\n    console.info(\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\n      this.props.slide\n    )\n    const geometryTypeOptions = [\n      'point',\n      'circle',\n      'box',\n      'polygon',\n      'line',\n      'freehandpolygon',\n      'freehandline'\n    ]\n    props.annotations.forEach((annotation: AnnotationSettings) => {\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\n      this.findingOptions.push(finding)\n      const key = _buildKey(finding)\n      if (annotation.geometryTypes !== undefined) {\n        this.geometryTypeOptions[key] = annotation.geometryTypes\n      } else {\n        this.geometryTypeOptions[key] = geometryTypeOptions\n      }\n      this.evaluationOptions[key] = []\n      if (annotation.evaluations !== undefined) {\n        annotation.evaluations.forEach(evaluation => {\n          this.evaluationOptions[key].push({\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\n            values: evaluation.values.map(value => {\n              return new dcmjs.sr.coding.CodedConcept(value)\n            })\n          })\n        })\n      }\n      if (annotation.measurements !== undefined) {\n        annotation.measurements.forEach(measurement => {\n          this.measurements.push({\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\n            value: undefined,\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\n          })\n        })\n      }\n      if (annotation.style != null) {\n        this.roiStyles[key] = annotation.style\n      } else {\n        this.roiStyles[key] = this.defaultRoiStyle\n      }\n    })\n\n    this.componentSetup = this.componentSetup.bind(this)\n    this.componentCleanup = this.componentCleanup.bind(this)\n\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\n    this.handleRoiModification = this.handleRoiModification.bind(this)\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\n    this.handleReportVerification = this.handleReportVerification.bind(this)\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\n\n    console.info(\n      'instantiate viewers for slide of series ' +\n      this.props.seriesInstanceUID\n    )\n    const { volumeViewer, labelViewer } = _constructViewers({\n      client: this.props.client,\n      slide: this.props.slide,\n      preload: this.props.preload\n    })\n    this.volumeViewer = volumeViewer\n    this.labelViewer = labelViewer\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\n\n    /**\n     * Deactivate all optical paths. Visibility will be set later, potentially\n     * using based on available presentation state instances.\n     */\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\n    })\n\n    this.state = {\n      selectedRoiUIDs: new Set(),\n      visibleRoiUIDs: new Set(),\n      visibleSegmentUIDs: new Set(),\n      visibleMappingUIDs: new Set(),\n      visibleAnnotationGroupUIDs: new Set(),\n      visibleOpticalPathIdentifiers: new Set(),\n      activeOpticalPathIdentifiers: new Set(),\n      presentationStates: [],\n      selectedFinding: undefined,\n      selectedEvaluations: [],\n      generatedReport: undefined,\n      isLoading: false,\n      isAnnotationModalVisible: false,\n      isReportModalVisible: false,\n      isRoiDrawingActive: false,\n      isRoiTranslationActive: false,\n      isRoiModificationActive: false,\n      areRoisHidden: false,\n      pixelDataStatistics: {},\n      defaultOpticalPathStyles: {},\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID\n    }\n  }\n\n  componentDidUpdate (\n    previousProps: SlideViewerProps,\n    previousState: SlideViewerState\n  ): void {\n    /** Fetch data and update the viewports if the route has changed (\n     * i.e., if another series has been selected) or if the client has changed.\n     */\n    if (\n      this.props.location.pathname !== previousProps.location.pathname ||\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\n      this.props.slide !== previousProps.slide ||\n      this.props.client !== previousProps.client\n    ) {\n      this.volumeViewer.cleanup()\n      if (this.labelViewer != null) {\n        this.labelViewer.cleanup()\n      }\n      const { volumeViewer, labelViewer } = _constructViewers({\n        client: this.props.client,\n        slide: this.props.slide,\n        preload: this.props.preload\n      })\n      this.volumeViewer = volumeViewer\n      this.labelViewer = labelViewer\n\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\n        const identifier = opticalPath.identifier\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\n          activeOpticalPathIdentifiers.add(identifier)\n        }\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        visibleSegmentUIDs: new Set(),\n        visibleMappingUIDs: new Set(),\n        visibleAnnotationGroupUIDs: new Set(),\n        visibleOpticalPathIdentifiers,\n        activeOpticalPathIdentifiers,\n        presentationStates: []\n      })\n      this.populateViewports()\n    }\n  }\n\n  /**\n   * Retrieve Presentation State instances that reference the any images of\n   * the currently selected series.\n   */\n  loadPresentationStates = (): void => {\n    console.info('search for Presentation State instances')\n    this.props.client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'PR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach(i => {\n        const { dataset } = dmv.metadata.formatMetadata(i)\n        const instance = dataset as dmv.metadata.Instance\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\n        this.props.client.retrieveInstance({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: instance.SeriesInstanceUID,\n          sopInstanceUID: instance.SOPInstanceUID\n        }).then((retrievedInstance): void => {\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\n          if (this.props.slide.areVolumeImagesMonochrome) {\n            const presentationState = (\n              dataset as\n              unknown as\n              dmv.metadata.AdvancedBlendingPresentationState\n            )\n            let doesMatch = false\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\n                blendingItem.SeriesInstanceUID\n              )\n            }\n            )\n            if (doesMatch) {\n              console.info(\n                'include Advanced Blending Presentation State instance ' +\n                `\"${presentationState.SOPInstanceUID}\"`\n              )\n              if (\n                presentationState.SOPInstanceUID ===\n                this.props.selectedPresentationStateUID\n              ) {\n                this.setPresentationState(presentationState)\n              }\n              this.setState(state => {\n                const mapping: {\n                  [sopInstanceUID: string]:\n                  dmv.metadata.AdvancedBlendingPresentationState\n                } = {}\n                state.presentationStates.forEach(instance => {\n                  mapping[instance.SOPInstanceUID] = instance\n                })\n                mapping[presentationState.SOPInstanceUID] = presentationState\n                return { presentationStates: Object.values(mapping) }\n              })\n            }\n          } else {\n            console.info(\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\n              'application of presentation states for color images ' +\n              'has not (yet) been implemented'\n            )\n          }\n        }).catch((error) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error('Presentation State could not be loaded')\n          console.error(\n            'failed to load presentation state ' +\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n            `of series \"${instance.SeriesInstanceUID}\" ` +\n            `of study \"${this.props.studyInstanceUID}\": `,\n            error\n          )\n        })\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Presentation State could not be loaded')\n      console.error(error)\n    })\n  }\n\n  setPresentationState = (\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\n  ): void => {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    console.info(\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\n    )\n    const opticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        opacity: number\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        limitValues?: number[]\n      } | null\n    } = {}\n    opticalPaths.forEach(opticalPath => {\n      // First, deactivate and hide all optical paths\n      const identifier = opticalPath.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\n        // FIXME\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\n        if (refInstanceItems === undefined) {\n          refInstanceItems = blendingItem.ReferencedImageSequence\n        }\n        if (refInstanceItems === undefined) {\n          return\n        }\n        refInstanceItems.forEach(imageItem => {\n          const index = opticalPath.sopInstanceUIDs.indexOf(\n            imageItem.ReferencedSOPInstanceUID\n          )\n          if (index >= 0) {\n            let paletteColorLUT\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\n                uid: (\n                  cpLUTItem.PaletteColorLookupTableUID != null\n                    ? cpLUTItem.PaletteColorLookupTableUID\n                    : ''\n                ),\n                redDescriptor:\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\n                greenDescriptor:\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\n                blueDescriptor:\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\n                redData: (\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.RedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenData: (\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.GreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueData: (\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.BluePaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                redSegmentedData: (\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                greenSegmentedData: (\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\n                    )\n                    : undefined\n                ),\n                blueSegmentedData: (\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\n                    ? new Uint16Array(\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\n                    )\n                    : undefined\n                )\n              })\n            }\n\n            let limitValues\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\n              const windowCenter = voiLUTItem.WindowCenter\n              const windowWidth = voiLUTItem.WindowWidth\n              limitValues = [\n                windowCenter - windowWidth * 0.5,\n                windowCenter + windowWidth * 0.5\n              ]\n            }\n\n            opticalPathStyles[identifier] = {\n              opacity: 1,\n              paletteColorLookupTable: paletteColorLUT,\n              limitValues: limitValues\n            }\n          }\n        })\n      })\n    })\n\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\n    Object.keys(opticalPathStyles).forEach(identifier => {\n      const styleOptions = opticalPathStyles[identifier]\n      if (styleOptions != null) {\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\n        this.volumeViewer.activateOpticalPath(identifier)\n        this.volumeViewer.showOpticalPath(identifier)\n        selectedOpticalPathIdentifiers.add(identifier)\n      } else {\n        this.volumeViewer.hideOpticalPath(identifier)\n        this.volumeViewer.deactivateOpticalPath(identifier)\n      }\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\n    }))\n  }\n\n  getRoiStyle = (key: string): dmv.viewer.ROIStyleOptions => {\n    if (this.roiStyles[key] !== undefined) {\n      return this.roiStyles[key]\n    }\n    return this.defaultRoiStyle\n  }\n\n  /**\n   * Retrieve Structured Report instances that contain regions of interests\n   * with 3D spatial coordinates defined in the same frame of reference as the\n   * currently selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotations = (): void => {\n    console.info('search for Comprehensive 3D SR instances')\n    this.props.client.searchForInstances({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SR'\n      }\n    }).then((matchedInstances): void => {\n      if (matchedInstances == null) {\n        matchedInstances = []\n      }\n      matchedInstances.forEach(i => {\n        const { dataset } = dmv.metadata.formatMetadata(i)\n        const instance = dataset as dmv.metadata.Instance\n        if (instance.SOPClassUID === SOPClassUIDs.COMPREHENSIVE_3D_SR) {\n          console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\n          this.props.client.retrieveInstance({\n            studyInstanceUID: this.props.studyInstanceUID,\n            seriesInstanceUID: instance.SeriesInstanceUID,\n            sopInstanceUID: instance.SOPInstanceUID\n          }).then((retrievedInstance): void => {\n            const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\n            const { dataset } = dmv.metadata.formatMetadata(data.dict)\n            const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\n            /*\n             * Perform a couple of checks to ensure the document content of the\n             * report fullfils the requirements of the application.\n             */\n            if (!_implementsTID1500(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it is not structured according to template ' +\n                'TID 1500 \"MeasurementReport\"'\n              )\n              return\n            }\n            if (!_describesSpecimenSubject(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not describe a specimen subject'\n              )\n              return\n            }\n            if (!_containsROIAnnotations(report)) {\n              console.debug(\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\n                'because it does not contain any suitable ROI annotations'\n              )\n              return\n            }\n\n            const content = new MeasurementReport(report)\n            content.ROIs.forEach(roi => {\n              console.info(`add ROI \"${roi.uid}\"`)\n              const scoord3d = roi.scoord3d\n              const image = this.props.slide.volumeImages[0]\n              if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\n                /*\n                 * ROIs may get assigned new UIDs upon re-rendering of the\n                 * page and we need to ensure that we don't add them twice.\n                 * The same ROI may be stored in multiple SR documents and\n                 * we don't want them to show up twice.\n                 * TODO: We should probably either \"merge\" measurements and\n                 * quantitative evaluations or pick the ROI from the \"best\"\n                 * available report (COMPLETE and VERIFIED).\n                 */\n                const doesROIExist = this.volumeViewer.getAllROIs().some(\n                  (otherROI: dmv.roi.ROI): boolean => {\n                    return _areROIsEqual(otherROI, roi)\n                  }\n                )\n                if (!doesROIExist) {\n                  try {\n                    // Add ROI without style such that it won't be visible.\n                    this.volumeViewer.addROI(roi, {})\n                  } catch {\n                    console.error(`could not add ROI \"${roi.uid}\"`)\n                  }\n                } else {\n                  console.debug(`skip already existing ROI \"${roi.uid}\"`)\n                }\n              } else {\n                console.debug(\n                  `skip ROI \"${roi.uid}\" ` +\n                  `of SR document \"${report.SOPInstanceUID}\"` +\n                  'because it is defined in another frame of reference'\n                )\n              }\n            })\n          }).catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            message.error('Annotations could not be loaded')\n            console.error(\n              'failed to load ROIs ' +\n              `of SOP instance \"${instance.SOPInstanceUID}\" ` +\n              `of series \"${instance.SeriesInstanceUID}\" ` +\n              `of study \"${this.props.studyInstanceUID}\": `,\n              error\n            )\n          })\n          /*\n           * React is not aware of the fact that ROIs have been added via the\n           * viewer (the viewport is a ref object) and won't show the\n           * annotations in the user interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Annotations could not be loaded')\n      console.error(error)\n    })\n  }\n\n  /**\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\n   * annotation groups defined in the same frame of reference as the currently\n   * selected series and add them to the VOLUME image viewer.\n   */\n  addAnnotationGroups = (): void => {\n    console.info('search for Microscopy Bulk Simple Annotations instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'ANN'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          let annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[]\n          annotations = retrievedMetadata.map(metadata => {\n            return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\n              metadata\n            })\n          })\n          annotations = annotations.filter(ann => {\n            const refImage = this.props.slide.volumeImages[0]\n            return (\n              ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              ann.ContainerIdentifier === refImage.ContainerIdentifier\n            )\n          })\n          annotations.forEach(ann => {\n            try {\n              this.volumeViewer.addAnnotationGroups(ann)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error(\n                'Microscopy Bulk Simple Annotations cannot be displayed.'\n              )\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              console.error('failed to add annotation groups: ', error)\n            }\n          })\n          /*\n           * React is not aware of the fact that annotation groups have been\n           * added via the viewer (the underlying HTML viewport element is a\n           * ref object) and won't show the annotation groups in the user\n           * interface unless an update is forced.\n           */\n          this.forceUpdate()\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\n            'instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of ' +\n            'Microscopy Bulk Simple Annotations instances: ',\n            error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error(\n        'Search for Microscopy Bulk Simple Annotations instances failed.'\n      )\n      console.error(\n        'failed to search for Microscopy Bulk Simple Annotations instances: ',\n        error\n      )\n    })\n  }\n\n  /**\n   * Retrieve Segmentation instances that contain segments defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addSegmentations = (): void => {\n    console.info('search for Segmentation instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'SEG'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach((s, i) => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const segmentations: dmv.metadata.Segmentation[] = []\n          retrievedMetadata.forEach(metadata => {\n            const seg = new dmv.metadata.Segmentation({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              seg.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              segmentations.push(seg)\n            }\n          })\n          if (segmentations.length > 0) {\n            try {\n              this.volumeViewer.addSegments(segmentations)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error('Segmentations cannot be displayed')\n              console.error('failed to add segments: ', error)\n            }\n            /*\n           * React is not aware of the fact that segments have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the segments in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Segmentation instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of Segmentation instances: ',\n            error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Search for Segmentation instances failed.')\n      console.error('failed to search for Segmentation instances: ', error)\n    })\n  }\n\n  /**\n   * Retrieve Parametric Map instances that contain mappings defined in the same\n   * frame of reference as the currently selected series and add them to the\n   * VOLUME image viewer.\n   */\n  addParametricMaps = (): void => {\n    console.info('search for Parametric Map instances')\n    this.props.client.searchForSeries({\n      studyInstanceUID: this.props.studyInstanceUID,\n      queryParams: {\n        Modality: 'OT'\n      }\n    }).then((matchedSeries): void => {\n      if (matchedSeries == null) {\n        matchedSeries = []\n      }\n      matchedSeries.forEach(s => {\n        const { dataset } = dmv.metadata.formatMetadata(s)\n        const series = dataset as dmv.metadata.Series\n        this.props.client.retrieveSeriesMetadata({\n          studyInstanceUID: this.props.studyInstanceUID,\n          seriesInstanceUID: series.SeriesInstanceUID\n        }).then((retrievedMetadata): void => {\n          const parametricMaps: dmv.metadata.ParametricMap[] = []\n          retrievedMetadata.forEach(metadata => {\n            const pm = new dmv.metadata.ParametricMap({ metadata })\n            const refImage = this.props.slide.volumeImages[0]\n            if (\n              pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\n              pm.ContainerIdentifier === refImage.ContainerIdentifier\n            ) {\n              parametricMaps.push(pm)\n            }\n          })\n          if (parametricMaps.length > 0) {\n            try {\n              this.volumeViewer.addParameterMappings(parametricMaps)\n            } catch (error: any) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              message.error('Parametric Map cannot be displayed')\n              console.error('failed to add mappings: ', error)\n            }\n            /*\n           * React is not aware of the fact that mappings have been added via\n           * the viewer (the underlying HTML viewport element is a ref object)\n           * and won't show the mappings in the user interface unless an update\n           * is forced.\n           */\n            this.forceUpdate()\n          }\n        }).catch((error: any) => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.error(\n            'Retrieval of metadata of Parametric Map instances failed.'\n          )\n          console.error(\n            'failed to retrieve metadata of Parametric Map instances: ', error\n          )\n        })\n      })\n    }).catch((error: any) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('Search for Parametric Map instances failed.')\n      console.error('failed to search for Parametric Map instances: ', error)\n    })\n  }\n\n  /**\n   * Populate viewports of the VOLUME and LABEL image viewers.\n   */\n  populateViewports = (): void => {\n    console.info('populate viewports...')\n    this.setState({\n      isLoading: true,\n      presentationStates: []\n    })\n\n    if (this.volumeViewportRef.current != null) {\n      this.volumeViewportRef.current.innerHTML = ''\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\n    }\n    if (\n      this.labelViewportRef.current != null &&\n      this.labelViewer != null\n    ) {\n      this.labelViewportRef.current.innerHTML = ''\n      this.labelViewer.render({ container: this.labelViewportRef.current })\n    }\n\n    // State update will also ensure that the component is re-rendered.\n    this.setState({ isLoading: false })\n\n    this.setDefaultPresentationState()\n    this.loadPresentationStates()\n\n    this.addAnnotations()\n    this.addAnnotationGroups()\n    this.addSegmentations()\n    this.addParametricMaps()\n  }\n\n  onRoiModified = (event: CustomEventInit): void => {\n    // Update state to trigger rendering\n    this.setState(state => ({\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\n    }))\n  }\n\n  onRoiDrawn = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    const selectedFinding = this.state.selectedFinding\n    const selectedEvaluations = this.state.selectedEvaluations\n    if (roi !== undefined && selectedFinding !== undefined) {\n      console.debug(`add ROI \"${roi.uid}\"`)\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: '121071',\n          meaning: 'Finding',\n          schemeDesignator: 'DCM'\n        }),\n        value: selectedFinding,\n        relationshipType: 'CONTAINS'\n      })\n      roi.addEvaluation(findingItem)\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\n          name: evaluation.name,\n          value: evaluation.value,\n          relationshipType: 'CONTAINS'\n        })\n        roi.addEvaluation(item)\n      })\n      const key = _buildKey(selectedFinding)\n      const style = this.getRoiStyle(key)\n      this.volumeViewer.addROI(roi, style)\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.debug(`could not add ROI \"${roi.uid}\"`)\n    }\n  }\n\n  onRoiSelected = (event: CustomEventInit): void => {\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\n    if (selectedRoi !== null) {\n      console.debug(`selected ROI \"${selectedRoi.uid}\"`)\n      this.volumeViewer.setROIStyle(selectedRoi.uid, this.selectedRoiStyle)\n      const key = _getRoiKey(selectedRoi)\n      this.volumeViewer.getAllROIs().forEach((roi) => {\n        if (roi.uid !== selectedRoi.uid) {\n          this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n        }\n      })\n      this.setState({ selectedRoiUIDs: new Set([selectedRoi.uid]) })\n    } else {\n      this.setState({ selectedRoiUIDs: new Set() })\n    }\n  }\n\n  onLoadingStarted = (event: CustomEventInit): void => {\n    this.setState({ isLoading: true })\n  }\n\n  onLoadingEnded = (event: CustomEventInit): void => {\n    this.setState({ isLoading: false })\n  }\n\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\n    const frameInfo = event.detail.payload\n    if (\n      frameInfo.sopClassUID === SOPClassUIDs.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\n      this.props.slide.areVolumeImagesMonochrome\n    ) {\n      const opticalPathIdentifier = frameInfo.channelIdentifier\n      if (!(opticalPathIdentifier in this.state.pixelDataStatistics)) {\n        /*\n         * There are limits on the number of arguments Math.min and Math.max\n         * functions can accept. Therefore, we compute values in smaller chunks.\n         */\n        const size = 2 ** 16\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\n        let offset = 0\n        const minValues = []\n        const maxValues = []\n        for (let i = 0; i < chunks; i++) {\n          offset = i * size\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\n          minValues.push(Math.min(...pixels))\n          maxValues.push(Math.max(...pixels))\n        }\n        const min = Math.min(...minValues)\n        const max = Math.max(...maxValues)\n        this.setState(state => {\n          const stats = state.pixelDataStatistics\n          if (stats[opticalPathIdentifier] != null) {\n            stats[opticalPathIdentifier] = {\n              min: Math.min(stats[opticalPathIdentifier].min, min),\n              max: Math.max(stats[opticalPathIdentifier].max, max),\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\n            }\n          } else {\n            stats[opticalPathIdentifier] = {\n              min: min,\n              max: max,\n              numFramesSampled: 1\n            }\n          }\n          return state\n        })\n      }\n    }\n  }\n\n  onRoiRemoved = (event: CustomEventInit): void => {\n    const roi = event.detail.payload as dmv.roi.ROI\n    console.debug(`removed ROI \"${roi.uid}\"`)\n  }\n\n  componentCleanup (): void {\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.removeEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n\n    this.volumeViewer.cleanup()\n    if (this.labelViewer != null) {\n      this.labelViewer.cleanup()\n    }\n    /*\n     * FIXME: React appears to not clean the content of referenced\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\n     * optical paths and other display items cannot be toggled or updated after\n     * a manual page reload. I have tried using ref callbacks and passing the\n     * ref objects from the parent component via the props. Both didn't work\n     * either.\n     */\n  }\n\n  componentWillUnmount (): void {\n    window.removeEventListener('beforeunload', this.componentCleanup)\n  }\n\n  componentSetup (): void {\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_drawn',\n      this.onRoiDrawn\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_selected',\n      this.onRoiSelected\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_removed',\n      this.onRoiRemoved\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_roi_modified',\n      this.onRoiModified\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_started',\n      this.onLoadingStarted\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_loading_ended',\n      this.onLoadingEnded\n    )\n    document.body.addEventListener(\n      'dicommicroscopyviewer_frame_loading_ended',\n      this.onFrameLoadingEnded\n    )\n\n    const onKeyUp = (\n      event: KeyboardEvent\n    ): void => {\n      if (event.key === 'Escape') {\n        if (this.state.isRoiDrawingActive) {\n          console.info('deactivate drawing of ROIs')\n          this.volumeViewer.deactivateDrawInteraction()\n          this.volumeViewer.activateSelectInteraction({})\n        } else if (this.state.isRoiModificationActive) {\n          console.info('deactivate modification of ROIs')\n          this.volumeViewer.deactivateModifyInteraction()\n          this.volumeViewer.activateSelectInteraction({})\n        } else if (this.state.isRoiTranslationActive) {\n          console.info('deactivate modification of ROIs')\n          this.volumeViewer.deactivateTranslateInteraction()\n          this.volumeViewer.activateSelectInteraction({})\n        }\n        this.setState({\n          isAnnotationModalVisible: false,\n          isRoiTranslationActive: false,\n          isRoiDrawingActive: false,\n          isRoiModificationActive: false\n        })\n      } else if (event.key === 'd') {\n        this.handleRoiDrawing()\n      } else if (event.key === 'm') {\n        this.handleRoiModification()\n      } else if (event.key === 't') {\n        this.handleRoiTranslation()\n      } else if (event.key === 'r') {\n        this.handleRoiRemoval()\n      } else if (event.key === 'v') {\n        this.handleRoiVisibilityChange()\n      } else if (event.key === 's') {\n        this.handleReportGeneration()\n      }\n    }\n    document.body.addEventListener(\n      'keyup',\n      onKeyUp\n    )\n  }\n\n  componentDidMount (): void {\n    window.addEventListener('beforeunload', this.componentCleanup)\n    this.componentSetup()\n    this.populateViewports()\n\n    if (!this.props.slide.areVolumeImagesMonochrome) {\n      let hasICCProfile = false\n      const image = this.props.slide.volumeImages[0]\n      const metadataItem = image.OpticalPathSequence[0]\n      if (metadataItem.ICCProfile == null) {\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\n          // @ts-expect-error\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\n          if ('ICCProfile' in bulkdataItem) {\n            hasICCProfile = true\n          }\n        }\n      } else {\n        hasICCProfile = true\n      }\n      if (!hasICCProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.warning('No ICC Profile was found for color images')\n      }\n    }\n  }\n\n  /**\n   * Handler that gets called when a finding has been selected for annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationFindingSelection (\n    value: string,\n    option: any\n  ): void {\n    this.findingOptions.forEach(finding => {\n      if (finding.CodeValue === value) {\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\n        this.setState({\n          selectedFinding: finding,\n          selectedEvaluations: []\n        })\n      }\n    })\n  }\n\n  /**\n   * Handler that gets called when a geometry type has been selected for\n   * annotation.\n   *\n   * @param value - Code value of the coded finding that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\n    this.setState({ selectedGeometryType: value })\n  }\n\n  /**\n   * Handler that gets called when measurements have been selected for\n   * annotation.\n   */\n  handleAnnotationMeasurementActivation (event: any): void {\n    const active: boolean = event.target.checked\n    if (active) {\n      this.setState({ selectedMarkup: 'measurement' })\n    } else {\n      this.setState({ selectedMarkup: undefined })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been selected for an\n   * annotation.\n   *\n   * @param value - Code value of the coded evaluation that got selected\n   * @param option - Option that got selected\n   */\n  handleAnnotationEvaluationSelection (\n    value: string,\n    option: any\n  ): void {\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      const name = option.label\n      this.evaluationOptions[key].forEach(evaluation => {\n        if (\n          evaluation.name.CodeValue === name.CodeValue &&\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\n        ) {\n          evaluation.values.forEach(code => {\n            if (code.CodeValue === value) {\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\n                (item: Evaluation) => item.name !== evaluation.name\n              )\n              this.setState({\n                selectedEvaluations: [\n                  ...filteredEvaluations,\n                  { name: name, value: code }\n                ]\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Handler that gets called when an evaluation has been cleared for an\n   * annotation.\n   */\n  handleAnnotationEvaluationClearance (): void {\n    this.setState({\n      selectedEvaluations: []\n    })\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been completed.\n   */\n  handleAnnotationConfigurationCompletion (): void {\n    console.debug('complete annotation configuration')\n    const finding = this.state.selectedFinding\n    const geometryType = this.state.selectedGeometryType\n    const markup = this.state.selectedMarkup\n    if (geometryType !== undefined && finding !== undefined) {\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiDrawingActive: true\n      })\n    } else {\n      console.error('could not complete annotation configuration')\n    }\n  }\n\n  /**\n   * Handler that gets called when annotation configuration has been cancelled.\n   */\n  handleAnnotationConfigurationCancellation (): void {\n    console.debug('cancel annotation configuration')\n    this.setState({\n      isAnnotationModalVisible: false,\n      isRoiDrawingActive: false\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be generated for the current\n   * set of annotations.\n   */\n  handleReportGeneration (): void {\n    console.info('save ROIs')\n    const rois = this.volumeViewer.getAllROIs()\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\n      opticalPaths[0].identifier\n    )\n    // Metadata should be sorted such that the image with the highest\n    // resolution is the last item in the array.\n    const refImage = metadata[metadata.length - 1]\n    // We assume that there is only one specimen (tissue section) per\n    // ontainer (slide). Only the tissue section is tracked with a unique\n    // identifier, even if the section may be composed of different biological\n    // samples.\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\n      console.error('more than one specimen has been described for the slide')\n    }\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\n\n    console.debug('create Observation Context')\n    let observer\n    if (this.props.user !== undefined) {\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: this.props.user.name,\n        loginName: this.props.user.email\n      })\n    } else {\n      console.warn('no user information available')\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\n        name: 'ANONYMOUS'\n      })\n    }\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121006',\n          schemeDesignator: 'DCM',\n          meaning: 'Person'\n        }),\n        observerIdentifyingAttributes: observer\n      }),\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n        observerType: new dcmjs.sr.coding.CodedConcept({\n          value: '121007',\n          schemeDesignator: 'DCM',\n          meaning: 'Device'\n        }),\n        observerIdentifyingAttributes:\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\n            uid: this.props.app.uid,\n            manufacturerName: 'MGH Computational Pathology',\n            modelName: this.props.app.name\n          })\n      }),\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\n          value: '121027',\n          schemeDesignator: 'DCM',\n          meaning: 'Specimen'\n        }),\n        subjectClassSpecificContext:\n          new dcmjs.sr.templates.SubjectContextSpecimen({\n            uid: refSpecimen.SpecimenUID,\n            identifier: refSpecimen.SpecimenIdentifier,\n            containerIdentifier: refImage.ContainerIdentifier\n          })\n      })\n    })\n\n    console.debug('encode Imaging Measurements')\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\n    for (let i = 0; i < rois.length; i++) {\n      const roi = rois[i]\n      if (!this.state.visibleRoiUIDs.has(roi.uid)) {\n        continue\n      }\n      let findingType = roi.evaluations.find(\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\n        }\n      )\n      if (findingType === undefined) {\n        throw new Error(`No finding type was specified for ROI \"${roi.uid}\"`)\n      }\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.properties.trackingUID ?? roi.uid,\n          identifier: `ROI #${i + 1}`\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: findingType.ConceptCodeSequence[0].CodeValue,\n          schemeDesignator:\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\n        }),\n        qualitativeEvaluations: roi.evaluations.filter(\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\n          }\n        ),\n        measurements: roi.measurements\n      })\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\n      measurements[0].ContentTemplateSequence = [{\n        MappingResource: 'DCMR',\n        TemplateIdentifier: '1410'\n      }]\n      imagingMeasurements.push(...measurements)\n    }\n\n    console.debug('create Measurement Report document content')\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\n      observationContext: observationContext,\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\n        value: '112703',\n        schemeDesignator: 'DCM',\n        meaning: 'Whole Slide Imaging'\n      }),\n      imagingMeasurements: imagingMeasurements\n    })\n\n    console.info('create Comprehensive 3D SR document')\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n      content: measurementReport[0],\n      evidence: [refImage],\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      seriesNumber: 1,\n      seriesDescription: 'Annotation',\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n      instanceNumber: 1,\n      manufacturer: 'MGH Computational Pathology',\n      previousVersions: undefined // TODO\n    })\n\n    this.setState({\n      isReportModalVisible: true,\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\n    })\n  }\n\n  /**\n   * Handler that gets called when a report should be verified. The current\n   * list of annotations will be presented to the user together with other\n   * pertinent metadata about the patient, study, and specimen.\n   */\n  handleReportVerification (): void {\n    console.info('verfied report')\n\n    const report = this.state.generatedReport\n    if (report !== undefined) {\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\n      console.debug('create File Meta Information')\n      const fileMetaInformationVersionArray = new Uint8Array(2)\n      fileMetaInformationVersionArray[1] = 1\n      const fileMeta = {\n        // FileMetaInformationVersion\n        '00020001': {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: 'OB'\n        },\n        // MediaStorageSOPClassUID\n        '00020002': {\n          Value: [dataset.SOPClassUID],\n          vr: 'UI'\n        },\n        // MediaStorageSOPInstanceUID\n        '00020003': {\n          Value: [dataset.SOPInstanceUID],\n          vr: 'UI'\n        },\n        // TransferSyntaxUID\n        '00020010': {\n          Value: ['1.2.840.10008.1.2.1'],\n          vr: 'UI'\n        },\n        // ImplementationClassUID\n        '00020012': {\n          Value: [this.props.app.uid],\n          vr: 'UI'\n        }\n      }\n\n      console.info('store Comprehensive 3D SR document')\n      const writer = new dcmjs.data.DicomDict(fileMeta)\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\n      const buffer = writer.write()\n      this.props.client.storeInstances({ datasets: [buffer] }).then(\n        (response: any) => message.info('Annotations were saved.')\n      ).catch((error: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Annotations could not be saved')\n        console.error(error)\n      })\n    }\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when report generation has been cancelled.\n   */\n  handleReportCancellation (): void {\n    this.setState({\n      isReportModalVisible: false,\n      generatedReport: undefined\n    })\n  }\n\n  /**\n   * Handler that gets called when an annotation has been selected from the\n   * current list of annotations.\n   */\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\n    console.log(`selected ROI ${roiUID}`)\n    this.setState({ selectedRoiUIDs: new Set([roiUID]) })\n    this.volumeViewer.getAllROIs().forEach((roi) => {\n      let style = {}\n      if (roi.uid === roiUID) {\n        style = this.selectedRoiStyle\n        this.setState(state => {\n          const visibleRoiUIDs = state.visibleRoiUIDs\n          visibleRoiUIDs.add(roi.uid)\n          return { visibleRoiUIDs }\n        })\n      } else {\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\n          const key = _getRoiKey(roi)\n          style = this.getRoiStyle(key)\n        }\n      }\n      this.volumeViewer.setROIStyle(roi.uid, style)\n    })\n  }\n\n  /**\n   * Handle toggling of annotation visibility, i.e., whether a given\n   * annotation should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\n    roiUID: string\n    isVisible: boolean\n  }): void {\n    if (isVisible) {\n      console.info(`show ROI ${roiUID}`)\n      const roi = this.volumeViewer.getROI(roiUID)\n      const key = _getRoiKey(roi)\n      this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\n      this.setState(state => {\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.add(roi.uid)\n        return { visibleRoiUIDs }\n      })\n    } else {\n      console.info(`hide ROI ${roiUID}`)\n      this.setState(state => {\n        const selectedRoiUIDs = state.selectedRoiUIDs\n        selectedRoiUIDs.delete(roiUID)\n        const visibleRoiUIDs = state.visibleRoiUIDs\n        visibleRoiUIDs.delete(roiUID)\n        return { visibleRoiUIDs, selectedRoiUIDs }\n      })\n      this.volumeViewer.setROIStyle(roiUID, {})\n    }\n  }\n\n  /**\n   * Handle toggling of annotation group visibility, i.e., whether a given\n   * annotation group should be either displayed or hidden by the viewer.\n   */\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\n    annotationGroupUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\n    if (isVisible) {\n      console.info(`show annotation group ${annotationGroupUID}`)\n      this.volumeViewer.showAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    } else {\n      console.info(`hide annotation group ${annotationGroupUID}`)\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\n      this.setState(state => {\n        const visibleAnnotationGroupUIDs = new Set(\n          state.visibleAnnotationGroupUIDs\n        )\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\n        return { visibleAnnotationGroupUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of annotation group style.\n   */\n  handleAnnotationGroupStyleChange ({ annotationGroupUID, styleOptions }: {\n    annotationGroupUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of annotation group ${annotationGroupUID}`)\n    this.volumeViewer.setAnnotationGroupStyle(annotationGroupUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of segment visibility, i.e., whether a given\n   * segment should be either displayed or hidden by the viewer.\n   */\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\n    segmentUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of segment ${segmentUID}`)\n    if (isVisible) {\n      console.info(`show segment ${segmentUID}`)\n      this.volumeViewer.showSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.add(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    } else {\n      console.info(`hide segment ${segmentUID}`)\n      this.volumeViewer.hideSegment(segmentUID)\n      this.setState(state => {\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\n        visibleSegmentUIDs.delete(segmentUID)\n        return { visibleSegmentUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of segment style.\n   */\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\n    segmentUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of segment ${segmentUID}`)\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of mapping visibility, i.e., whether a given\n   * mapping should be either displayed or hidden by the viewer.\n   */\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\n    mappingUID: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of mapping ${mappingUID}`)\n    if (isVisible) {\n      console.info(`show mapping ${mappingUID}`)\n      this.volumeViewer.showParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.add(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    } else {\n      console.info(`hide mapping ${mappingUID}`)\n      this.volumeViewer.hideParameterMapping(mappingUID)\n      this.setState(state => {\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\n        visibleMappingUIDs.delete(mappingUID)\n        return { visibleMappingUIDs }\n      })\n    }\n  }\n\n  /**\n   * Handle change of mapping style.\n   */\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\n    mappingUID: string\n    styleOptions: {\n      opacity?: number\n    }\n  }): void {\n    console.log(`change style of mapping ${mappingUID}`)\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path visibility, i.e., whether a given\n   * optical path should be either displayed or hidden by the viewer.\n   */\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\n    opticalPathIdentifier: string\n    isVisible: boolean\n  }): void {\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\n    if (isVisible) {\n      console.info(`show optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`hide optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const visibleOpticalPathIdentifiers = new Set(\n          state.visibleOpticalPathIdentifiers\n        )\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { visibleOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  /**\n   * Handle change of optical path style.\n   */\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\n    opticalPathIdentifier: string\n    styleOptions: {\n      opacity?: number\n      color?: number[]\n      limitValues?: number[]\n    }\n  }): void {\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\n  }\n\n  /**\n   * Handle toggling of optical path activity, i.e., whether a given\n   * optical path should be either added or removed from the viewport.\n   */\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\n    opticalPathIdentifier: string\n    isActive: boolean\n  }): void {\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\n    if (isActive) {\n      console.info(`activate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    } else {\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\n      this.setState(state => {\n        const activeOpticalPathIdentifiers = new Set(\n          state.activeOpticalPathIdentifiers\n        )\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\n        return { activeOpticalPathIdentifiers }\n      })\n    }\n  }\n\n  setDefaultPresentationState (): void {\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => a.identifier - b.identifier)\n\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\n    const defaultOpticalPathStyles: {\n      [opticalPathIdentifier: string]: {\n        color?: number[]\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\n        opacity?: number\n        limitValues?: number[]\n      }\n    } = this.state.defaultOpticalPathStyles\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n      const identifier = item.identifier\n      this.volumeViewer.hideOpticalPath(identifier)\n      this.volumeViewer.deactivateOpticalPath(identifier)\n\n      /*\n       * Reset the style of the optical path to its default if it has\n       * previously been changed.\n       */\n      const stats = this.state.pixelDataStatistics[identifier]\n      let limitValues\n      if (stats != null) {\n        limitValues = [stats.min, stats.max]\n      }\n      if (identifier in defaultOpticalPathStyles) {\n        this.volumeViewer.setOpticalPathStyle(\n          identifier,\n          {\n            color: [255, 255, 255],\n            limitValues,\n            opacity: 1\n          }\n        )\n      }\n\n      if (item.isMonochromatic) {\n        /*\n         * If the image metadata contains a palette color lookup table for the\n         * optical path, then it will be displayed by default.\n         */\n        if (item.paletteColorLookupTableUID != null) {\n          visibleOpticalPathIdentifiers.add(identifier)\n        }\n      } else {\n        /* Color images will always be displayed by default. */\n        visibleOpticalPathIdentifiers.add(identifier)\n      }\n    })\n\n    /*\n     * If no optical paths have been selected for visualization so far, select\n     * first 3 optical paths and set a default value of interest (VOI) window\n     * (using pre-computed pixel data statistics) and a default color.\n     */\n    if (visibleOpticalPathIdentifiers.size === 0) {\n      const defaultColors = [\n        [0, 0, 255],\n        [0, 255, 0],\n        [255, 0, 0]\n      ]\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\n        const identifier = item.identifier\n        if (item.isMonochromatic) {\n          const numVisible = visibleOpticalPathIdentifiers.size\n          if (numVisible < 3) {\n            const style = {\n              ...this.volumeViewer.getOpticalPathStyle(identifier) // copy!\n            }\n            if (!(identifier in defaultOpticalPathStyles)) {\n              defaultOpticalPathStyles[identifier] = style\n            }\n            const index = numVisible\n            style.color = defaultColors[index]\n            const stats = this.state.pixelDataStatistics[item.identifier]\n            if (stats != null) {\n              style.limitValues = [stats.min, stats.max]\n            }\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\n            visibleOpticalPathIdentifiers.add(item.identifier)\n          }\n        }\n      })\n    }\n\n    console.info(\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\n      'for visualization'\n    )\n    visibleOpticalPathIdentifiers.forEach(identifier => {\n      this.volumeViewer.showOpticalPath(identifier)\n    })\n    this.setState(state => ({\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\n      defaultOpticalPathStyles: defaultOpticalPathStyles\n    }))\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateReset (): void {\n    this.setState({ selectedPresentationStateUID: undefined })\n    const urlPath = this.props.location.pathname\n    this.props.navigate(urlPath)\n    this.setDefaultPresentationState()\n  }\n\n  /**\n   * Handler that gets called when a presentation state has been selected from\n   * the current list of available presentation states.\n   */\n  handlePresentationStateSelection (\n    value?: string,\n    option?: any\n  ): void {\n    if (value != null) {\n      console.info(`select Presentation State instance \"${value}\"`)\n      let presentationState\n      this.state.presentationStates.forEach(instance => {\n        if (instance.SOPInstanceUID === value) {\n          presentationState = instance\n        }\n      })\n      if (presentationState != null) {\n        let urlPath = this.props.location.pathname\n        urlPath += `?state=${value}`\n        this.props.navigate(urlPath)\n        this.setPresentationState(presentationState)\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Presentation State could not be found')\n        console.log(\n          'failed to handle section of presentation state: ' +\n          `could not find instance \"${value}\"`\n        )\n      }\n    } else {\n      this.handlePresentationStateReset()\n    }\n    this.setState({ selectedPresentationStateUID: value })\n  }\n\n  /**\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\n   * de-activate it, depending on its current state.\n   */\n  handleRoiDrawing (): void {\n    if (this.state.isRoiDrawingActive) {\n      console.info('deactivate drawing of ROIs')\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isAnnotationModalVisible: false,\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      console.info('activate drawing of ROIs')\n      this.setState({\n        isAnnotationModalVisible: true,\n        isRoiDrawingActive: true,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI modification tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiModification (): void {\n    console.info('toggle modification of ROIs')\n    if (this.volumeViewer.isModifyInteractionActive) {\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.activateSelectInteraction({})\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiModificationActive: true,\n        isRoiDrawingActive: false,\n        isRoiTranslationActive: false\n      })\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateSnapInteraction({})\n      this.volumeViewer.activateModifyInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI translation tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiTranslation (): void {\n    console.info('toggle translation of ROIs')\n    if (this.volumeViewer.isTranslateInteractionActive) {\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.setState({\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.setState({\n        isRoiTranslationActive: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.activateTranslateInteraction({})\n    }\n  }\n\n  /**\n   * Handler that will toggle the ROI removal tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiRemoval (): void {\n    this.volumeViewer.deactivateDrawInteraction()\n    this.volumeViewer.deactivateSnapInteraction()\n    this.volumeViewer.deactivateTranslateInteraction()\n    this.volumeViewer.deactivateModifyInteraction()\n    if (this.state.selectedRoiUIDs.size > 0) {\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid === undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          message.warning('No annotation was selected for removal')\n          return\n        }\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.info('Annotation was removed')\n      })\n      this.setState({\n        selectedRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    } else {\n      this.state.visibleRoiUIDs.forEach(uid => {\n        console.info(`remove ROI \"${uid}\"`)\n        this.volumeViewer.removeROI(uid)\n      })\n      this.setState({\n        visibleRoiUIDs: new Set(),\n        isRoiTranslationActive: false,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false\n      })\n    }\n    this.volumeViewer.activateSelectInteraction({})\n  }\n\n  /**\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\n   * or de-activate it, depending on its current state.\n   */\n  handleRoiVisibilityChange (): void {\n    console.info('toggle visibility of ROIs')\n    if (this.volumeViewer.areROIsVisible) {\n      this.volumeViewer.deactivateDrawInteraction()\n      this.volumeViewer.deactivateSnapInteraction()\n      this.volumeViewer.deactivateTranslateInteraction()\n      this.volumeViewer.deactivateSelectInteraction()\n      this.volumeViewer.deactivateModifyInteraction()\n      this.volumeViewer.hideROIs()\n      this.setState({\n        areRoisHidden: true,\n        isRoiDrawingActive: false,\n        isRoiModificationActive: false,\n        isRoiTranslationActive: false\n      })\n    } else {\n      this.volumeViewer.showROIs()\n      this.volumeViewer.activateSelectInteraction({})\n      this.state.selectedRoiUIDs.forEach(uid => {\n        if (uid !== undefined) {\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\n        }\n      })\n      this.setState({ areRoisHidden: false })\n    }\n  }\n\n  render (): React.ReactNode {\n    const rois: dmv.roi.ROI[] = []\n    const segments: dmv.segment.Segment[] = []\n    const mappings: dmv.mapping.ParameterMapping[] = []\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\n    rois.push(...this.volumeViewer.getAllROIs())\n    segments.push(...this.volumeViewer.getAllSegments())\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\n    annotationGroups.push(...this.volumeViewer.getAllAnnotationGroups())\n\n    const openSubMenuItems = [\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\n    ]\n\n    let report: React.ReactNode\n    const dataset = this.state.generatedReport\n    if (dataset !== undefined) {\n      report = <Report dataset={dataset} />\n    }\n\n    let annotationMenuItems: React.ReactNode\n    if (rois.length > 0) {\n      annotationMenuItems = (\n        <AnnotationList\n          rois={rois}\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\n          onSelection={this.handleAnnotationSelection}\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\n        />\n      )\n    }\n\n    const findingOptions = this.findingOptions.map(finding => {\n      return (\n        <Select.Option\n          key={finding.CodeValue}\n          value={finding.CodeValue}\n        >\n          {finding.CodeMeaning}\n        </Select.Option>\n      )\n    })\n\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\n      freehandpolygon: (\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\n          Polygon (freehand)\n        </Select.Option>\n      ),\n      freehandline: (\n        <Select.Option key='freehandline' value='freehandline'>\n          Line (freehand)\n        </Select.Option>\n      )\n    }\n\n    const selections: React.ReactNode[] = [\n      (\n        <Select\n          style={{ minWidth: 130 }}\n          onSelect={this.handleAnnotationFindingSelection}\n          key='annotation-finding'\n          defaultActiveFirstOption\n        >\n          {findingOptions}\n        </Select>\n      )\n    ]\n\n    const selectedFinding = this.state.selectedFinding\n    if (selectedFinding !== undefined) {\n      const key = _buildKey(selectedFinding)\n      this.evaluationOptions[key].forEach(evaluation => {\n        const evaluationOptions = evaluation.values.map(code => {\n          return (\n            <Select.Option\n              key={code.CodeValue}\n              value={code.CodeValue}\n              label={evaluation.name}\n            >\n              {code.CodeMeaning}\n            </Select.Option>\n          )\n        })\n        selections.push(\n          <>\n            {evaluation.name.CodeMeaning}\n            <Select\n              style={{ minWidth: 130 }}\n              onSelect={this.handleAnnotationEvaluationSelection}\n              allowClear\n              onClear={this.handleAnnotationEvaluationClearance}\n              defaultActiveFirstOption={false}\n            >\n              {evaluationOptions}\n            </Select>\n          </>\n        )\n      })\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\n        return geometryTypeOptionsMapping[name]\n      })\n      selections.push(\n        <>\n          ROI geometry type\n          <Select\n            style={{ minWidth: 130 }}\n            onSelect={this.handleAnnotationGeometryTypeSelection}\n            key='annotation-geometry-type'\n          >\n            {geometryTypeOptions}\n          </Select>\n        </>\n      )\n      selections.push(\n        <Checkbox\n          onChange={this.handleAnnotationMeasurementActivation}\n          key='annotation-measurement'\n        >\n          measure\n        </Checkbox>\n      )\n    }\n\n    const specimenMenu = (\n      <Menu.SubMenu key='specimens' title='Specimens'>\n        <SpecimenList\n          metadata={this.props.slide.volumeImages[0]}\n          showstain={false}\n        />\n      </Menu.SubMenu>\n    )\n\n    const equipmentMenu = (\n      <Menu.SubMenu key='equipment' title='Equipment'>\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\n      </Menu.SubMenu>\n    )\n\n    const defaultOpticalPathStyles: {\n      [identifier: string]: {\n        opacity: number\n        color?: number[]\n        limitValues?: number[]\n      }\n    } = {}\n    const opticalPathMetadata: {\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\n    } = {}\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\n    opticalPaths.sort((a, b) => {\n      if (a.identifier < b.identifier) {\n        return -1\n      } else if (a.identifier > b.identifier) {\n        return 1\n      }\n      return 0\n    })\n    opticalPaths.forEach(opticalPath => {\n      const identifier = opticalPath.identifier\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\n      opticalPathMetadata[identifier] = metadata\n      const style = this.volumeViewer.getOpticalPathStyle(identifier)\n      if (this.state.selectedPresentationStateUID == null) {\n        const stats = this.state.pixelDataStatistics[identifier]\n        if (stats != null) {\n          style.limitValues = [stats.min, stats.max]\n        }\n      }\n      defaultOpticalPathStyles[identifier] = style\n    })\n    const opticalPathMenu = (\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\n        <OpticalPathList\n          metadata={opticalPathMetadata}\n          opticalPaths={opticalPaths}\n          defaultOpticalPathStyles={defaultOpticalPathStyles}\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\n        />\n      </Menu.SubMenu>\n    )\n\n    let presentationStateMenu\n    if (this.state.presentationStates.length > 0) {\n      const presentationStateOptions = []\n      this.state.presentationStates.forEach(instance => {\n        presentationStateOptions.push(\n          <Select.Option\n            key={instance.SOPInstanceUID}\n            value={instance.SOPInstanceUID}\n            dropdownMatchSelectWidth={false}\n            size='small'\n          >\n            {instance.ContentDescription}\n          </Select.Option>\n        )\n      })\n      presentationStateOptions.push(\n        <Select.Option\n          key='default-presentation-state'\n          value={null}\n          dropdownMatchSelectWidth={false}\n          size='small'\n        >\n          {}\n        </Select.Option>\n      )\n      presentationStateMenu = (\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\n          <Space align='center' size={20} style={{ padding: '14px' }}>\n            <Select\n              style={{ minWidth: 200, maxWidth: 200 }}\n              onSelect={this.handlePresentationStateSelection}\n              key='presentation-states'\n              defaultValue={this.props.selectedPresentationStateUID}\n              value={this.state.selectedPresentationStateUID}\n            >\n              {presentationStateOptions}\n            </Select>\n            <Tooltip title='Reset'>\n              <Btn\n                icon={<UndoOutlined />}\n                type='primary'\n                onClick={this.handlePresentationStateReset}\n              />\n            </Tooltip>\n          </Space>\n        </Menu.SubMenu>\n      )\n    }\n\n    let segmentationMenu\n    if (segments.length > 0) {\n      const defaultSegmentStyles: {\n        [segmentUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const segmentMetadata: {\n        [segmentUID: string]: dmv.metadata.Segmentation[]\n      } = {}\n      const segments = this.volumeViewer.getAllSegments()\n      segments.forEach(segment => {\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\n          segment.uid\n        )\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\n          segment.uid\n        )\n      })\n      segmentationMenu = (\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\n          <SegmentList\n            segments={segments}\n            metadata={segmentMetadata}\n            defaultSegmentStyles={defaultSegmentStyles}\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\n            onSegmentStyleChange={this.handleSegmentStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('segmentations')\n    }\n\n    let parametricMapMenu\n    if (mappings.length > 0) {\n      const defaultMappingStyles: {\n        [mappingUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const mappingMetadata: {\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\n      } = {}\n      mappings.forEach(mapping => {\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\n          mapping.uid\n        )\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\n          mapping.uid\n        )\n      })\n      parametricMapMenu = (\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\n          <MappingList\n            mappings={mappings}\n            metadata={mappingMetadata}\n            defaultMappingStyles={defaultMappingStyles}\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\n            onMappingStyleChange={this.handleMappingStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('parametric-maps')\n    }\n\n    let annotationGroupMenu\n    if (annotationGroups.length > 0) {\n      const defaultAnnotationGroupStyles: {\n        [annotationGroupUID: string]: {\n          opacity: number\n        }\n      } = {}\n      const annotationGroupMetadata: {\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\n      } = {}\n      const annotationGroups = this.volumeViewer.getAllAnnotationGroups()\n      annotationGroups.forEach(annotationGroup => {\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\n          annotationGroup.uid\n        )\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\n          annotationGroup.uid\n        )\n      })\n      annotationGroupMenu = (\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\n          <AnnotationGroupList\n            annotationGroups={annotationGroups}\n            metadata={annotationGroupMetadata}\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\n          />\n        </Menu.SubMenu>\n      )\n      openSubMenuItems.push('annotationGroups')\n    }\n\n    let toolbar\n    let toolbarHeight = '0px'\n    if (this.props.enableAnnotationTools) {\n      toolbar = (\n        <Row>\n          <Button\n            tooltip='Draw ROI [d]'\n            icon={FaDrawPolygon}\n            onClick={this.handleRoiDrawing}\n            isSelected={this.state.isRoiDrawingActive}\n          />\n          <Button\n            tooltip='Modify ROIs [m]'\n            icon={FaHandPointer}\n            onClick={this.handleRoiModification}\n            isSelected={this.state.isRoiModificationActive}\n          />\n          <Button\n            tooltip='Translate ROIs [t]'\n            icon={FaHandPaper}\n            onClick={this.handleRoiTranslation}\n            isSelected={this.state.isRoiTranslationActive}\n          />\n          <Button\n            tooltip='Remove selected ROI [r]'\n            onClick={this.handleRoiRemoval}\n            icon={FaTrash}\n          />\n          <Button\n            tooltip='Show/Hide ROIs [v]'\n            icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\n            onClick={this.handleRoiVisibilityChange}\n            isSelected={this.state.areRoisHidden}\n          />\n          <Button\n            tooltip='Save ROIs [s]'\n            icon={FaSave}\n            onClick={this.handleReportGeneration}\n          />\n        </Row>\n      )\n      toolbarHeight = '50px'\n    }\n\n    /* It would be nicer to use the ant Spin component, but that causes issues\n     * with the positioning of the viewport.\n     */\n    let loadingDisplay = 'none'\n    if (this.state.isLoading) {\n      loadingDisplay = 'block'\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Content style={{ height: '100%' }}>\n          {toolbar}\n\n          <div className='dimmer' style={{ display: loadingDisplay }} />\n          <div className='spinner' style={{ display: loadingDisplay }} />\n          <div\n            style={{\n              height: `calc(100% - ${toolbarHeight})`,\n              overflow: 'hidden'\n            }}\n            ref={this.volumeViewportRef}\n          />\n\n          <Modal\n            visible={this.state.isAnnotationModalVisible}\n            title='Configure annotations'\n            onOk={this.handleAnnotationConfigurationCompletion}\n            onCancel={this.handleAnnotationConfigurationCancellation}\n            okText='Select'\n          >\n            <Space align='start' direction='vertical'>\n              {selections}\n            </Space>\n          </Modal>\n\n          <Modal\n            visible={this.state.isReportModalVisible}\n            title='Verify and save report'\n            onOk={this.handleReportVerification}\n            onCancel={this.handleReportCancellation}\n            okText='Save'\n          >\n            {report}\n          </Modal>\n        </Layout.Content>\n\n        <Layout.Sider\n          width={300}\n          reverseArrow\n          style={{\n            borderLeft: 'solid',\n            borderLeftWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={openSubMenuItems}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n            forceSubMenuRender\n          >\n            <Menu.SubMenu key='label' title='Slide label'>\n              <Menu.Item style={{ height: '100%' }}>\n                <div\n                  style={{ height: '220px' }}\n                  ref={this.labelViewportRef}\n                />\n              </Menu.Item>\n            </Menu.SubMenu>\n            {specimenMenu}\n            {equipmentMenu}\n            {opticalPathMenu}\n            {presentationStateMenu}\n            <Menu.SubMenu key='annotations' title='Annotations'>\n              {annotationMenuItems}\n            </Menu.SubMenu>\n            {annotationGroupMenu}\n            {segmentationMenu}\n            {parametricMapMenu}\n          </Menu>\n        </Layout.Sider>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(SlideViewer)\n","import * as dmv from 'dicom-microscopy-viewer'\n\nenum ImageFlavors {\n  VOLUME = 'VOLUME',\n  LABEL = 'LABEL',\n  OVERVIEW = 'OVERVIEW',\n  THUMBNAIL = 'THUMBNAIL'\n}\n\nconst hasImageFlavor = (\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\n  imageFlavor: ImageFlavors\n): boolean => {\n  return image.ImageType[2] === imageFlavor\n}\n\ninterface SlideImageCollection {\n  frameOfReferenceUID: string\n  containerIdentifier: string\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n}\n\ninterface SlideOptions {\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  description?: string\n}\n\n/**\n * Slide - collection of images with the same Frame of Reference UID and\n * Container Identifier.\n */\nclass Slide {\n  readonly description: string\n  readonly frameOfReferenceUID: string\n  readonly containerIdentifier: string\n  readonly seriesInstanceUIDs: string[]\n  readonly opticalPathIdentifiers: string[]\n  readonly areVolumeImagesMonochrome: boolean\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\n\n  /**\n   * @param options\n   * @param options.images - Metadata of images associated with the slide\n   * @param options.description - Description of the slide\n   */\n  constructor (\n    options: SlideOptions\n  ) {\n    if (options.images.length === 0) {\n      throw new Error('Value of option \"images\" have been non-zero length.')\n    }\n\n    const seriesInstanceUIDs = new Set([] as string[])\n    const opticalPathIdentifiers = new Set([] as string[])\n    const containerIdentifiers = new Set([] as string[])\n    const frameOfReferenceUIDs = new Set([] as string[])\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n    options.images.forEach((image) => {\n      frameOfReferenceUIDs.add(image.FrameOfReferenceUID)\n      containerIdentifiers.add(image.ContainerIdentifier)\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\n      image.OpticalPathSequence.forEach(item => {\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\n      })\n      if (hasImageFlavor(image, ImageFlavors.VOLUME)) {\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.THUMBNAIL)) {\n        volumeImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\n        labelImages.push(image)\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\n        overviewImages.push(image)\n      }\n    })\n    if (volumeImages.length === 0) {\n      throw new Error('At least one volume image must be provided for a slide.')\n    } else {\n      const samplesPerPixel = new Set([] as number[])\n      volumeImages.forEach((image) => {\n        samplesPerPixel.add(image.SamplesPerPixel)\n      })\n      if (samplesPerPixel.size > 1) {\n        throw new Error(\n          'All volume images of a slide must have the same number of ' +\n          'Samples per Pixel.'\n        )\n      }\n    }\n    this.volumeImages = volumeImages\n    this.labelImages = labelImages\n    this.overviewImages = overviewImages\n\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\n    if (containerIdentifiers.size !== 1) {\n      throw new Error(\n        'All images of a slide must have the same Container Identifier.'\n      )\n    }\n    this.containerIdentifier = [...containerIdentifiers][0]\n    if (frameOfReferenceUIDs.size !== 1) {\n      throw new Error(\n        'All images of a slide must have the same Frame of Reference UID.'\n      )\n    }\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs][0]\n\n    this.areVolumeImagesMonochrome = (\n      this.volumeImages[0].SamplesPerPixel === 1 &&\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\n    )\n\n    this.description = (\n      options.description !== undefined ? options.description : ''\n    )\n  }\n}\n\n/**\n * Create slides.\n *\n * @param imagesPerSeries - Image instances grouped per series\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\n * @returns Slides\n */\nconst createSlides = (\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\n): Slide[] => {\n  const slideMetadata: SlideImageCollection[] = []\n  images.forEach((series) => {\n    if (series.length > 0) {\n      const volumeImages = series.filter((image) => {\n        return (\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\n        )\n      })\n      const labelImages = series.filter((image) => {\n        return hasImageFlavor(image, ImageFlavors.LABEL)\n      })\n      const overviewImages = series.filter((image) => {\n        return hasImageFlavor(image, ImageFlavors.OVERVIEW)\n      })\n\n      if (volumeImages.length > 0) {\n        const refImage = volumeImages[0]\n        const filteredVolumeImages = volumeImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const filteredOverviewImages = overviewImages.filter((image) => {\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\n        })\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\n          return _doesImageBelongToSlide(slide, refImage)\n        })\n        if (slideMetadataIndex === -1) {\n          const slideMetadataItem: SlideImageCollection = {\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\n            containerIdentifier: refImage.ContainerIdentifier,\n            volumeImages: filteredVolumeImages,\n            labelImages: labelImages,\n            overviewImages: filteredOverviewImages\n          }\n          slideMetadata.push(slideMetadataItem)\n        } else {\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\n          slideMetadataItem.labelImages.push(...labelImages)\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\n        }\n      }\n    }\n  })\n\n  let slides: Slide[] = slideMetadata.map((item) => {\n    return new Slide({\n      images: [\n        ...item.volumeImages,\n        ...item.labelImages,\n        ...item.overviewImages\n      ]\n    })\n  })\n  slides = slides.sort((a, b) => {\n    const imgA = a.volumeImages[0]\n    const imgB = b.volumeImages[0]\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\n    } else {\n      return 0\n    }\n  })\n\n  return slides\n}\n\n/**\n * Check if instance belongs to the slide.\n *\n * Compares values of Frame of Reference UID and Container Identifier attributes.\n *\n * @param slide - Slide metadata object\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\n */\nfunction _doesImageBelongToSlide (\n  slide: SlideImageCollection,\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\n): boolean {\n  if (\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\n    slide.containerIdentifier === image.ContainerIdentifier\n  ) {\n    return true\n  }\n  return false\n}\n\nexport { Slide, createSlides }\n","import React from 'react'\nimport {\n  Routes,\n  Route,\n  useLocation,\n  useParams\n} from 'react-router-dom'\nimport {\n  Layout,\n  message,\n  Menu\n} from 'antd'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { AnnotationSettings } from '../AppConfig'\nimport ClinicalTrial from './ClinicalTrial'\nimport DicomWebManager from '../DicomWebManager'\nimport Patient from './Patient'\nimport Study from './Study'\nimport SlideList from './SlideList'\nimport SlideViewer from './SlideViewer'\n\nimport { User } from '../auth'\nimport { Slide, createSlides } from '../data/slides'\nimport { SOPClassUIDs } from '../data/uids'\nimport { RouteComponentProps, withRouter } from '../utils/router'\n\nfunction ParametrizedSlideViewer ({\n  client,\n  slides,\n  user,\n  app,\n  preload,\n  enableAnnotationTools,\n  annotations\n}: {\n  client: DicomWebManager\n  slides: Slide[]\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  preload: boolean\n  enableAnnotationTools: boolean\n  annotations: AnnotationSettings[]\n}): JSX.Element | null {\n  const { studyInstanceUID, seriesInstanceUID } = useParams()\n  const location = useLocation()\n\n  const selectedSlide = slides.find((slide: Slide) => {\n    return slide.seriesInstanceUIDs.find((uid: string) => {\n      return uid === seriesInstanceUID\n    })\n  })\n  const searchParams = new URLSearchParams(location.search)\n  let presentationStateUID: string|null|undefined = searchParams.get('state')\n  if (presentationStateUID === null) {\n    presentationStateUID = undefined\n  }\n  let viewer = null\n  if (selectedSlide != null) {\n    viewer = (\n      <SlideViewer\n        client={client}\n        studyInstanceUID={studyInstanceUID}\n        seriesInstanceUID={seriesInstanceUID}\n        selectedPresentationStateUID={presentationStateUID}\n        slide={selectedSlide}\n        preload={preload}\n        annotations={annotations}\n        enableAnnotationTools={enableAnnotationTools}\n        app={app}\n        user={user}\n      />\n    )\n  }\n  return viewer\n}\n\ninterface ViewerProps extends RouteComponentProps {\n  client: DicomWebManager\n  studyInstanceUID: string\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  annotations: AnnotationSettings[]\n  enableAnnotationTools: boolean\n  preload: boolean\n  user?: {\n    name: string\n    email: string\n  }\n}\n\ninterface ViewerState {\n  slides: Slide[]\n  isLoading: boolean\n}\n\nclass Viewer extends React.Component<ViewerProps, ViewerState> {\n  state = {\n    slides: [],\n    isLoading: false\n  }\n\n  constructor (props: ViewerProps) {\n    super(props)\n    this.handleSeriesSelection = this.handleSeriesSelection.bind(this)\n  }\n\n  componentDidMount (): void {\n    this.setState({ isLoading: true })\n    this.fetchImageMetadata().then(\n      (metadata: dmv.metadata.VLWholeSlideMicroscopyImage[][]) => {\n        this.setState({\n          slides: createSlides(metadata),\n          isLoading: false\n        })\n      }\n    ).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error(\n        'An error occured. ' +\n          'Image metadata could not be retrieved or decoded.'\n      )\n      console.error(error)\n      this.setState({ isLoading: false })\n    })\n  }\n\n  /**\n   * Fetch metadata for VL Whole Slide Microscopy Image instances of the study.\n   *\n   * @returns Metadata of image instances of the study grouped per series\n   */\n  async fetchImageMetadata (): Promise<dmv.metadata.VLWholeSlideMicroscopyImage[][]> {\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\n    const studyInstanceUID = this.props.studyInstanceUID\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\n    const matchedSeries = await this.props.client.searchForSeries({\n      queryParams: {\n        Modality: 'SM',\n        StudyInstanceUID: studyInstanceUID\n      }\n    })\n\n    await Promise.all(matchedSeries.map(async (s) => {\n      const { dataset } = dmv.metadata.formatMetadata(s)\n      const loadingSeries = dataset as dmv.metadata.Series\n      console.info(\n        `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\n      )\n      const retrievedMetadata = await this.props.client.retrieveSeriesMetadata({\n        studyInstanceUID: this.props.studyInstanceUID,\n        seriesInstanceUID: loadingSeries.SeriesInstanceUID\n      })\n\n      const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\n      retrievedMetadata.forEach((item, index) => {\n        if (item['00080016'] !== undefined) {\n          const sopClassUID = item['00080016'].Value[0]\n          if (sopClassUID === SOPClassUIDs.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE) {\n            const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\n              metadata: item\n            })\n            seriesImages.push(image)\n          }\n        }\n      })\n\n      if (seriesImages.length > 0) {\n        images.push(seriesImages)\n      }\n    }))\n\n    return images\n  }\n\n  handleSeriesSelection (\n    { seriesInstanceUID }: { seriesInstanceUID: string }\n  ): void {\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\n    let urlPath = (\n      `/studies/${this.props.studyInstanceUID}` +\n      `/series/${seriesInstanceUID}`\n    )\n    if (\n      this.props.location.pathname.includes('/series/') &&\n      this.props.location.search != null\n    ) {\n      urlPath += this.props.location.search\n    }\n    this.props.navigate(urlPath, { replace: true })\n  }\n\n  render (): React.ReactNode {\n    if (this.state.slides.length === 0) {\n      return null\n    }\n    const firstSlide = this.state.slides[0] as Slide\n    const volumeInstances = firstSlide.volumeImages\n    if (volumeInstances.length === 0) {\n      return null\n    }\n    const refImage = volumeInstances[0]\n\n    /* If a series is encoded in the path, route the viewer to this series.\n     * Otherwise select the first series correspondent to\n     * the first slide contained in the study.\n     */\n    let selectedSeriesInstanceUID: string\n    if (this.props.location.pathname.includes('series/')) {\n      const fragments = this.props.location.pathname.split('/')\n      selectedSeriesInstanceUID = fragments[4]\n    } else {\n      selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\n    }\n\n    let clinicalTrialMenu\n    if (refImage.ClinicalTrialSponsorName != null) {\n      clinicalTrialMenu = (\n        <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\n          <ClinicalTrial metadata={refImage} />\n        </Menu.SubMenu>\n      )\n    }\n\n    return (\n      <Layout style={{ height: '100%' }} hasSider>\n        <Layout.Sider\n          width={300}\n          style={{\n            height: '100%',\n            borderRight: 'solid',\n            borderRightWidth: 0.25,\n            overflow: 'hidden',\n            background: 'none'\n          }}\n        >\n          <Menu\n            mode='inline'\n            defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\n            style={{ height: '100%' }}\n            inlineIndent={14}\n          >\n            <Menu.SubMenu key='patient' title='Patient'>\n              <Patient metadata={refImage} />\n            </Menu.SubMenu>\n            <Menu.SubMenu key='study' title='Study'>\n              <Study metadata={refImage} />\n            </Menu.SubMenu>\n            {clinicalTrialMenu}\n            <Menu.SubMenu key='slides' title='Slides'>\n              <SlideList\n                client={this.props.client}\n                metadata={this.state.slides}\n                selectedSeriesInstanceUID={selectedSeriesInstanceUID}\n                onSeriesSelection={this.handleSeriesSelection}\n              />\n            </Menu.SubMenu>\n          </Menu>\n        </Layout.Sider>\n\n        <Routes>\n          <Route\n            path='/series/:seriesInstanceUID'\n            element={\n              <ParametrizedSlideViewer\n                client={this.props.client}\n                slides={this.state.slides}\n                preload={this.props.preload}\n                annotations={this.props.annotations}\n                enableAnnotationTools={this.props.enableAnnotationTools}\n                app={this.props.app}\n                user={this.props.user}\n              />\n            }\n          />\n        </Routes>\n      </Layout>\n    )\n  }\n}\n\nexport default withRouter(Viewer)\n","import React from 'react'\nimport {\n  NavLink\n} from 'react-router-dom'\nimport {\n  Col,\n  Descriptions,\n  Dropdown,\n  Input,\n  Layout,\n  Menu,\n  Modal,\n  Row,\n  Space\n} from 'antd'\nimport {\n  ApiOutlined,\n  CheckOutlined,\n  InfoOutlined,\n  StopOutlined,\n  UnorderedListOutlined,\n  UserOutlined\n} from '@ant-design/icons'\nimport { detect } from 'detect-browser'\n\nimport Button from './Button'\nimport { RouteComponentProps, withRouter } from '../utils/router'\n\ninterface HeaderProps extends RouteComponentProps {\n  app: {\n    name: string\n    version: string\n    homepage: string\n    uid: string\n    organization?: string\n  }\n  user?: {\n    name: string\n    email: string\n  }\n  showWorklistButton: boolean\n  onServerSelection: ({ url }: { url: string }) => void\n  onUserLogout?: () => void\n  showServerSelectionButton: boolean\n}\n\ninterface HeaderState {\n  selectedServerUrl?: string\n  isServerSelectionModalVisible: boolean\n  isServerSelectionDisabled: boolean\n}\n\n/**\n * React component for the application header.\n */\nclass Header extends React.Component<HeaderProps, HeaderState> {\n  constructor (props: HeaderProps) {\n    super(props)\n    this.state = {\n      isServerSelectionModalVisible: false,\n      isServerSelectionDisabled: true\n    }\n  }\n\n  handleInfoButtonClick = (): void => {\n    const browser = detect()\n    const environment: {\n      browser: {\n        name?: string\n        version?: string\n      }\n      os: {\n        name?: string\n      }\n    } = {\n      browser: {},\n      os: {}\n    }\n    if (browser != null) {\n      environment.browser = {\n        name: browser.name != null ? browser.name : undefined,\n        version: browser.version != null ? browser.version : undefined\n      }\n      environment.os = {\n        name: browser.os != null ? browser.os : undefined\n      }\n    }\n\n    Modal.info({\n      title: 'About',\n      width: 600,\n      content: (\n        <>\n          <Descriptions title='Application' column={1}>\n            <Descriptions.Item label='Name'>\n              {this.props.app.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {this.props.app.version}\n            </Descriptions.Item>\n            <Descriptions.Item label='Homepage'>\n              {this.props.app.homepage}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Browser' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.browser.name}\n            </Descriptions.Item>\n            <Descriptions.Item label='Version'>\n              {environment.browser.version}\n            </Descriptions.Item>\n          </Descriptions>\n          <Descriptions title='Operating System' column={1}>\n            <Descriptions.Item label='Name'>\n              {environment.os.name}\n            </Descriptions.Item>\n          </Descriptions>\n        </>\n      ),\n      onOk (): void {}\n    })\n  }\n\n  handleServerSelectionButtonClick = (): void => {\n    this.setState({ isServerSelectionModalVisible: true })\n  }\n\n  render (): React.ReactNode {\n    let user = null\n    if (this.props.user !== undefined) {\n      const userMenuItems = []\n      if (this.props.onUserLogout !== undefined) {\n        userMenuItems.push(\n          {\n            label: 'Logout',\n            key: 'user-logout',\n            onClick: () => {\n              if (this.props.onUserLogout !== undefined) {\n                this.props.onUserLogout()\n              }\n            }\n          }\n        )\n      }\n      const userMenu = <Menu items={userMenuItems} />\n      user = (\n        <Dropdown overlay={userMenu} trigger={['click']}>\n          <Button\n            icon={UserOutlined}\n            onClick={e => e.preventDefault()}\n            label={`${this.props.user.name} (${this.props.user.email})`}\n          />\n        </Dropdown>\n      )\n    }\n\n    let worklistButton\n    if (this.props.showWorklistButton) {\n      worklistButton = (\n        <NavLink to='/'>\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\n        </NavLink>\n      )\n    }\n\n    const infoButton = (\n      <Button\n        icon={InfoOutlined}\n        tooltip='Get app info'\n        onClick={this.handleInfoButtonClick}\n      />\n    )\n\n    let serverSelectionButton\n    if (this.props.showServerSelectionButton) {\n      serverSelectionButton = (\n        <Button\n          icon={ApiOutlined}\n          tooltip='Select server'\n          onClick={this.handleServerSelectionButtonClick}\n        />\n      )\n    }\n\n    const handleServerSelectionInput = (event: any): void => {\n      const value = event.target.value\n      let isDisabled = true\n      if (value != null) {\n        try {\n          const url = new URL(value)\n          if (url.protocol.startsWith('http') && url.pathname.length > 0) {\n            isDisabled = false\n          }\n        } catch (TypeError) {}\n      }\n      this.setState({\n        selectedServerUrl: value,\n        isServerSelectionDisabled: isDisabled\n      })\n    }\n\n    const handleServerSelectionCancellation = (event: any): void => {\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: false,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const handleServerSelection = (event: any): void => {\n      const url = this.state.selectedServerUrl\n      let closeModal = false\n      if (url != null && url !== '') {\n        if (url.startsWith('http://') || url.startsWith('https://')) {\n          this.props.onServerSelection({ url })\n          closeModal = true\n        }\n      }\n      this.setState({\n        selectedServerUrl: undefined,\n        isServerSelectionModalVisible: !closeModal,\n        isServerSelectionDisabled: true\n      })\n    }\n\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\n\n    return (\n      <>\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\n          <Row>\n            <Col>\n              <Space align='center' direction='horizontal'>\n                <img\n                  src={logoUrl}\n                  alt=''\n                  style={{ height: '64px', margin: '-14px' }}\n                />\n              </Space>\n            </Col>\n            <Col flex='auto' />\n            <Col>\n              <Space direction='horizontal'>\n                {worklistButton}\n                {infoButton}\n                {serverSelectionButton}\n                {user}\n              </Space>\n            </Col>\n          </Row>\n        </Layout.Header>\n\n        <Modal\n          visible={this.state.isServerSelectionModalVisible}\n          title='Select DICOMweb server'\n          onOk={handleServerSelection}\n          onCancel={handleServerSelectionCancellation}\n        >\n          <Input\n            placeholder='Enter base URL of DICOMweb Study Service'\n            onChange={handleServerSelectionInput}\n            onPressEnter={handleServerSelection}\n            addonAfter={\n              this.state.isServerSelectionDisabled\n                ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n            }\n          />\n        </Modal>\n      </>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from 'react'\nimport { Result } from 'antd'\n\ninterface InfoPageProps {\n  type: string\n  title?: string\n  message?: string\n}\n\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\n  return (\n    <div style={{\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }}\n    >\n      <Result\n        title={title}\n        subTitle={message}\n      />\n    </div>\n  )\n}\n\nexport default InfoPage\n","import React from 'react'\nimport {\n  Button,\n  Input,\n  message,\n  Space,\n  Table,\n  TablePaginationConfig\n} from 'antd'\nimport { ColumnsType } from 'antd/es/table'\nimport { FilterConfirmProps } from 'antd/es/table/interface'\nimport { SearchOutlined } from '@ant-design/icons'\nimport DicomWebManager from '../DicomWebManager'\n\nimport * as dmv from 'dicom-microscopy-viewer'\n\nimport { withRouter, RouteComponentProps } from '../utils/router'\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\n\ninterface WorklistProps extends RouteComponentProps {\n  client: DicomWebManager\n}\n\ninterface WorklistState {\n  studies: dmv.metadata.Study[]\n  isLoading: boolean\n  numStudies: number\n  pageSize: number\n}\n\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\n  private readonly defaultPageSize = 20\n\n  constructor (props: WorklistProps) {\n    super(props)\n    this.fetchData = this.fetchData.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.state = {\n      studies: [],\n      isLoading: false,\n      numStudies: 0,\n      pageSize: this.defaultPageSize\n    }\n  }\n\n  searchForStudies (): void {\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\n    const searchOptions = { queryParams }\n    // TODO: retrieve remaining results\n    this.props.client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        numStudies: studies.length,\n        studies: studies.slice(0, this.state.pageSize).map((study) => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    }).catch((error) => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      message.error('An error occured. Search for studies failed.')\n      console.error(error)\n    })\n  }\n\n  componentDidMount (): void {\n    this.searchForStudies()\n  }\n\n  componentDidUpdate (previousProps: WorklistProps): void {\n    if (this.props.client !== previousProps.client) {\n      this.searchForStudies()\n    }\n  }\n\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\n  }\n\n  fetchData ({ offset, limit, searchCriteria }: {\n    offset: number\n    limit: number\n    searchCriteria?: { [attribute: string]: string }\n  }): void {\n    const queryParams: { [key: string]: any } = {\n      ModalitiesInStudy: 'SM',\n      offset: offset,\n      limit: limit\n    }\n    if (searchCriteria !== undefined) {\n      for (const key in searchCriteria) {\n        const value = searchCriteria[key]\n        if (key === 'PersonName') {\n          queryParams[key] = `*${value}*`\n        } else {\n          queryParams[key] = value\n        }\n      }\n      queryParams.fuzzymatching = 'true'\n    }\n    const searchOptions = { queryParams }\n    this.props.client.searchForStudies(searchOptions).then((studies) => {\n      this.setState({\n        studies: studies.map((study) => {\n          const { dataset } = dmv.metadata.formatMetadata(study)\n          return dataset as dmv.metadata.Study\n        })\n      })\n    }).catch(() => message.error('Request to search for studies failed.'))\n  }\n\n  handleChange (\n    pagination: TablePaginationConfig,\n    filters: any\n  ): void {\n    this.setState({ isLoading: true })\n    let index = pagination.current\n    if (index === undefined) {\n      index = 1\n    }\n    let pageSize = pagination.pageSize\n    if (pageSize === undefined) {\n      pageSize = this.state.pageSize\n    }\n    const offset = pageSize * (index - 1)\n    const limit = pageSize\n    console.debug(`search for studies of page #${index}...`)\n    const searchCriteria: { [attribute: string]: string } = {}\n    for (const dataIndex in filters) {\n      if (filters[dataIndex] !== null) {\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\n      }\n    }\n    this.fetchData({ offset, limit, searchCriteria })\n    this.setState({ isLoading: false, pageSize: pageSize })\n  }\n\n  handleSearch = (\n    selectedKeys: React.Key[],\n    confirm: (params?: FilterConfirmProps) => void,\n    dataIndex: string\n  ): void => {\n    confirm()\n  }\n\n  handleReset = (clearFilters: () => void): void => {\n    clearFilters()\n  }\n\n  render (): React.ReactNode {\n    const columns: ColumnsType<dmv.metadata.Study> = [\n      {\n        title: 'Accession Number',\n        dataIndex: 'AccessionNumber',\n        ...this.getColumnSearchProps('AccessionNumber')\n      },\n      {\n        title: 'Study ID',\n        dataIndex: 'StudyID',\n        ...this.getColumnSearchProps('StudyID')\n      },\n      {\n        title: 'Study Date',\n        dataIndex: 'StudyDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: 'Study Time',\n        dataIndex: 'StudyTime',\n        render: (value: string): string => parseTime(value)\n      },\n      {\n        title: 'Patient ID',\n        dataIndex: 'PatientID',\n        ...this.getColumnSearchProps('PatientID')\n      },\n      {\n        title: \"Patient's Name\",\n        dataIndex: 'PatientName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\n        ...this.getColumnSearchProps('PatientName')\n      },\n      {\n        title: \"Patient's Sex\",\n        dataIndex: 'PatientSex',\n        render: (value: string): string => parseSex(value)\n      },\n      {\n        title: \"Patient's Birthdate\",\n        dataIndex: 'PatientBirthDate',\n        render: (value: string): string => parseDate(value)\n      },\n      {\n        title: \"Referring Physician's Name\",\n        dataIndex: 'ReferringPhysicianName',\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\n      },\n      {\n        title: 'Modalities in Study',\n        dataIndex: 'ModalitiesInStudy',\n        render: (value: string[] | string): string => {\n          if (value === undefined) {\n            /*\n             * This should not happen, since the attribute is required.\n             * However, some origin servers don't include it.\n             */\n            return ''\n          } else {\n            return String(value)\n          }\n        }\n      }\n    ]\n\n    const pagination = {\n      defaultPageSize: this.defaultPageSize,\n      pageSize: this.state.pageSize,\n      hideOnSinglePage: true,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total: number, range: number[]) => {\n        return `${range[0]}-${range[1]} of ${total} studies`\n      },\n      total: this.state.numStudies\n    }\n\n    return (\n      <Table<dmv.metadata.Study>\n        style={{ cursor: 'pointer' }}\n        columns={columns}\n        rowKey={record => record.StudyInstanceUID}\n        dataSource={this.state.studies}\n        pagination={pagination}\n        onRow={(record: dmv.metadata.Study): object => {\n          return {\n            onClick: (event: React.SyntheticEvent): void => {\n              return this.handleClick(event, record)\n            }\n          }\n        }}\n        onChange={this.handleChange}\n        size='small'\n        loading={this.state.isLoading}\n      />\n    )\n  }\n\n  getColumnSearchProps = (dataIndex: string): object => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\n      selectedKeys: React.Key[]\n      confirm: (params?: FilterConfirmProps) => void\n      clearFilters: () => void\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          placeholder='Search'\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(\n            e.target.value !== undefined ? [e.target.value] : []\n          )}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type='primary'\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size='small'\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered: boolean) => (\n      <SearchOutlined\n        style={{ color: filtered ? '#1890ff' : undefined }}\n      />\n    )\n  })\n}\n\nexport default withRouter(Worklist)\n","/**\n * Join a URI with a path to form a full URL.\n *\n * @param path - Path component\n * @param uri - Base URI to which the path component should be added\n */\nexport const joinUrl = (path: string, uri: string): string => {\n  let baseUri = uri\n  if (!baseUri.endsWith('/')) {\n    baseUri += '/'\n  }\n  const url = new URL(path, baseUri)\n  return url.toString()\n}\n\n/**\n * Check whether a URL contains an OAuth 2.0 authorization code.\n *\n * @param location - URL components (JavaScript location object)\n * @returns Whether the URL contains a code\n */\nexport const isAuthorizationCodeInUrl = (location: {\n  search: string\n  hash: string\n}): boolean => {\n  const searchParams = new URLSearchParams(location.search)\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\n\n  return Boolean(\n    searchParams.get('code') ??\n    searchParams.get('id_token') ??\n    searchParams.get('session_state') ??\n    hashParams.get('code') ??\n    hashParams.get('id_token') ??\n    hashParams.get('session_state')\n  )\n}\n","import { UserManager, User as UserData } from 'oidc-client'\n\nimport { OidcSettings } from '../AppConfig'\nimport { isAuthorizationCodeInUrl } from '../utils/url'\nimport { User, AuthManager, SignInCallback } from './'\n\nconst createUser = (userData: UserData): User => {\n  const profile = userData.profile\n  if (profile !== undefined) {\n    if (profile.name === undefined || profile.email === undefined) {\n      throw Error('Failed to obtain user \"name\" and \"email\".')\n    } else {\n      return {\n        name: profile.name,\n        email: profile.email\n      }\n    }\n  } else {\n    throw Error('Failed to obtain user profile.')\n  }\n}\n\nexport default class OidcManager implements AuthManager {\n  private _oidc: UserManager\n\n  constructor (baseUri: string, settings: OidcSettings) {\n    let responseType = 'code'\n    if (settings.grantType !== undefined) {\n      if (settings.grantType === 'implicit') {\n        responseType = 'id_token token'\n      }\n    }\n    this._oidc = new UserManager({\n      authority: settings.authority,\n      client_id: settings.clientId,\n      redirect_uri: baseUri,\n      scope: settings.scope,\n      response_type: responseType,\n      loadUserInfo: true,\n      automaticSilentRenew: true,\n      revokeAccessTokenOnSignout: true,\n      post_logout_redirect_uri: `${baseUri}/logout`\n    })\n    if (settings.endSessionEndpoint != null) {\n      /*\n       * Unfortunately, the end session endpoint alone cannot be provided to\n       * the construction of UserManager and the other metadata parameters\n       * would need to be provided as well. However, configuring all of them\n       * individually would not be desirable and they will be automatically\n       * determined anyways. Therefore, we first construct an object, get the\n       * metadata, update the metadata, and then reconstruct an object with the\n       * updated metadata.\n       */\n      this._oidc.metadataService.getMetadata().then(metadata => {\n        if (settings.endSessionEndpoint != null) {\n          metadata.end_session_endpoint = settings.endSessionEndpoint\n          this._oidc = new UserManager({\n            authority: settings.authority,\n            client_id: settings.clientId,\n            redirect_uri: baseUri,\n            scope: settings.scope,\n            response_type: responseType,\n            loadUserInfo: true,\n            automaticSilentRenew: true,\n            revokeAccessTokenOnSignout: true,\n            post_logout_redirect_uri: `${baseUri}/logout`,\n            metadata\n          })\n        }\n      }).catch((error) => {\n        console.error(\n          'failed to get metadata from authorization server: ',\n          error\n        )\n      })\n    }\n  }\n\n  /**\n   * Sign-in to authenticate the user and obtain authorization.\n   */\n  signIn = async ({ onSignIn }: {\n    onSignIn?: SignInCallback\n  }): Promise<void> => {\n    const handleSignIn = (userData: UserData): void => {\n      const user = createUser(userData)\n      const authorization = `${userData.token_type} ${userData.access_token}`\n      if (onSignIn != null) {\n        console.info('handling sign-in using provided callback function')\n        onSignIn({ user: user, authorization: authorization })\n      } else {\n        console.warn('no callback function was provided to handle sign-in')\n      }\n    }\n\n    if (isAuthorizationCodeInUrl(window.location)) {\n      /* Handle the callback from the authorization server: extract the code\n       * from the callback URL, obtain user information and the access token\n       * for the DICOMweb server.\n       */\n      console.info('obtaining authorization')\n      const userData = await this._oidc.signinCallback()\n      if (userData != null) {\n        console.info('obtained user data: ', userData)\n        handleSignIn(userData)\n      }\n    } else {\n      /* Redirect to the authorization server to authenticate the user\n       * and authorize the application to obtain user information and access\n       * the DICOMweb server.\n       */\n      const userData = await this._oidc.getUser()\n      if (userData === null || userData.expired) {\n        console.info('authenticating user')\n        await this._oidc.signinRedirect()\n      } else {\n        console.info('user has already been authenticated')\n        handleSignIn(userData)\n      }\n    }\n  }\n\n  /**\n   * Sign-out to revoke authorization.\n   */\n  signOut = async (): Promise<void> => {\n    console.log('signing out user and revoking authorization')\n    return await this._oidc.signoutRedirect()\n  }\n\n  /**\n   * Get authorization. Requires prior sign-in.\n   */\n  getAuthorization = async (): Promise<string> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData !== null) {\n        return userData.access_token\n      } else {\n        throw Error('Failed to obtain access token.')\n      }\n    })\n  }\n\n  /**\n   * Get user information. Requires prior sign-in.\n   */\n  getUser = async (): Promise<User> => {\n    return await this._oidc.getUser().then((userData) => {\n      if (userData === null) {\n        throw Error('Failed to obtain user information.')\n      }\n      return createUser(userData)\n    })\n  }\n}\n","import retry from 'retry'\n\nimport {\n  RetryRequestSettings,\n  DICOMwebClientRequestHookMetadata\n} from '../AppConfig'\n\ntype RequestHook = (\n  request: XMLHttpRequest,\n  metadata: DICOMwebClientRequestHookMetadata\n) => XMLHttpRequest\n\n/**\n * Returns a configured retry request hook function\n * that can be used to add retry functionality to XHR request.\n *\n * Default options:\n *   retries: 5\n *   factor: 3\n *   minTimeout: 1 * 1000\n *   maxTimeout: 60 * 1000\n *   randomize: true\n *\n * @param options\n * @param options.retires - Number of retries\n * @param options.factor - Factor\n * @param options.minTimeout - Min number of seconds to wait before next retry\n * @param options.maxTimeout - Max number of seconds to wait before next retry\n * @param options.randomize - Whether randomization should be applied\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\n * @returns Configured retry request function\n */\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\n  retries: 5,\n  factor: 3,\n  minTimeout: 1 * 1000,\n  maxTimeout: 60 * 1000,\n  randomize: true,\n  retryableStatusCodes: [429, 500]\n}): RequestHook => {\n  const retryOptions = options\n\n  if (options.retries != null) {\n    retryOptions.retries = options.retries\n  }\n\n  if (options.factor != null) {\n    retryOptions.factor = options.factor\n  }\n\n  if (options.minTimeout != null) {\n    retryOptions.minTimeout = options.minTimeout\n  }\n\n  if (options.maxTimeout != null) {\n    retryOptions.maxTimeout = options.maxTimeout\n  }\n\n  if (options.randomize != null) {\n    retryOptions.randomize = options.randomize\n  }\n\n  if (options.retryableStatusCodes != null) {\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\n  }\n\n  /**\n   * Request hook used to add retry functionality to XHR requests.\n   *\n   * @param request - XHR request instance\n   * @param metadata - Metadata about the request\n   * @param metadata.url - URL\n   * @param metadata.method - HTTP method\n   * @returns - XHR request instance (potentially modified)\n   */\n  const xhrRetryHook = (\n    request: XMLHttpRequest,\n    metadata: DICOMwebClientRequestHookMetadata\n  ): XMLHttpRequest => {\n    const { url, method } = metadata\n\n    function faultTolerantRequestSend (...args: any): void {\n      const operation = retry.operation(retryOptions)\n\n      operation.attempt(function operationAttempt (currentAttempt) {\n        const originalOnReadyStateChange = request.onreadystatechange\n\n        /** Overriding/extending XHR function */\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\n          if (originalOnReadyStateChange != null) {\n            originalOnReadyStateChange.apply(request, args)\n          }\n\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\n            const errorMessage = `Attempt to request ${url} failed.`\n            const attemptFailedError = new Error(errorMessage)\n            operation.retry(attemptFailedError)\n          }\n        }\n\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\n        if (currentAttempt > 1) {\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\n          request.open(method, url, true)\n        }\n      })\n\n      originalRequestSend.apply(request, args)\n    }\n\n    /** Overriding/extending XHR function */\n    const originalRequestSend = request.send\n    request.send = faultTolerantRequestSend\n\n    return request\n  }\n\n  return xhrRetryHook\n}\n\nexport default getXHRRetryHook\n","import * as dwc from 'dicomweb-client'\n\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\nimport { joinUrl } from './utils/url'\nimport getXHRRetryHook from './utils/xhrRetryHook'\n\ninterface Store {\n  id: string\n  read: boolean\n  write: boolean\n  client: dwc.api.DICOMwebClient\n}\n\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\n  private readonly stores: Store[] = []\n\n  private readonly handleError: DicomWebManagerErrorHandler\n\n  constructor ({ baseUri, settings, onError }: {\n    baseUri: string\n    settings: ServerSettings[]\n    onError?: DicomWebManagerErrorHandler\n  }) {\n    if (onError != null) {\n      this.handleError = onError\n    } else {\n      this.handleError = (error, serverSettings) => {\n        console.error(error, serverSettings)\n      }\n    }\n\n    settings.forEach(serverSettings => {\n      if (serverSettings === undefined) {\n        throw Error('At least one server needs to be configured.')\n      }\n\n      let serviceUrl\n      if (serverSettings.url !== undefined) {\n        serviceUrl = serverSettings.url\n      } else if (serverSettings.path !== undefined) {\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\n      } else {\n        throw new Error(\n          'Either path or full URL needs to be configured for server.'\n        )\n      }\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\n        url: serviceUrl\n      }\n      if (serverSettings.qidoPathPrefix !== undefined) {\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\n      }\n      if (serverSettings.wadoPathPrefix !== undefined) {\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\n      }\n      if (serverSettings.stowPathPrefix !== undefined) {\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\n      }\n      if (serverSettings.retry !== undefined) {\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\n      }\n\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\n        this.handleError(error, serverSettings)\n      }\n\n      this.stores.push({\n        id: serverSettings.id,\n        write: serverSettings.write ?? false,\n        read: serverSettings.read ?? true,\n        client: new dwc.api.DICOMwebClient(clientSettings)\n      })\n    })\n\n    if (this.stores.length > 1) {\n      throw new Error('Only one store is supported for now.')\n    }\n  }\n\n  get baseURL (): string {\n    return this.stores[0].client.baseURL\n  }\n\n  updateHeaders = (fields: { [name: string]: string }): void => {\n    for (const f in fields) {\n      this.stores[0].client.headers[f] = fields[f]\n    }\n  }\n\n  get headers (): { [name: string]: string } {\n    return this.stores[0].client.headers\n  }\n\n  storeInstances = async (\n    options: dwc.api.StoreInstancesOptions\n  ): Promise<void> => {\n    if (this.stores[0].write) {\n      return await this.stores[0].client.storeInstances(options)\n    } else {\n      return await Promise.reject(\n        new Error('Store is not writable.')\n      )\n    }\n  }\n\n  searchForStudies = async (\n    options: dwc.api.SearchForStudiesOptions\n  ): Promise<dwc.api.Study[]> => {\n    return await this.stores[0].client.searchForStudies(options)\n  }\n\n  searchForSeries = async (\n    options: dwc.api.SearchForSeriesOptions\n  ): Promise<dwc.api.Series[]> => {\n    return await this.stores[0].client.searchForSeries(options)\n  }\n\n  searchForInstances = async (\n    options: dwc.api.SearchForInstancesOptions\n  ): Promise<dwc.api.Instance[]> => {\n    return await this.stores[0].client.searchForInstances(options)\n  }\n\n  retrieveStudyMetadata = async (\n    options: dwc.api.RetrieveStudyMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveStudyMetadata(options)\n  }\n\n  retrieveSeriesMetadata = async (\n    options: dwc.api.RetrieveSeriesMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveSeriesMetadata(options)\n  }\n\n  retrieveInstanceMetadata = async (\n    options: dwc.api.RetrieveInstanceMetadataOptions\n  ): Promise<dwc.api.Metadata[]> => {\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\n  }\n\n  retrieveInstance = async (\n    options: dwc.api.RetrieveInstanceOptions\n  ): Promise<dwc.api.Dataset> => {\n    return await this.stores[0].client.retrieveInstance(options)\n  }\n\n  retrieveInstanceFrames = async (\n    options: dwc.api.RetrieveInstanceFramesOptions\n  ): Promise<dwc.api.Pixeldata[]> => {\n    return await this.stores[0].client.retrieveInstanceFrames(options)\n  }\n\n  retrieveInstanceRendered = async (\n    options: dwc.api.RetrieveInstanceRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceRendered(options)\n  }\n\n  retrieveInstanceFramesRendered = async (\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\n  ): Promise<dwc.api.Pixeldata> => {\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\n  }\n\n  retrieveBulkData = async (\n    options: dwc.api.RetrieveBulkDataOptions\n  ): Promise<dwc.api.Bulkdata[]> => {\n    return await this.stores[0].client.retrieveBulkData(options)\n  }\n}\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Navigate,\n  Route,\n  Routes,\n  useParams\n} from 'react-router-dom'\nimport { Layout, message } from 'antd'\nimport { FaSpinner } from 'react-icons/fa'\nimport * as dwc from 'dicomweb-client'\n\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\nimport CaseViewer from './components/CaseViewer'\nimport Header from './components/Header'\nimport InfoPage from './components/InfoPage'\nimport Worklist from './components/Worklist'\n\nimport { joinUrl } from './utils/url'\nimport { User, AuthManager } from './auth'\nimport OidcManager from './auth/OidcManager'\nimport DicomWebManager from './DicomWebManager'\n\nfunction ParametrizedCaseViewer ({ client, user, app, config }: {\n  client: DicomWebManager\n  user?: User\n  app: {\n    name: string\n    version: string\n    uid: string\n    organization?: string\n  }\n  config: AppConfig\n}): JSX.Element {\n  const { studyInstanceUID } = useParams()\n\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\n  const preload = config.preload ?? false\n  return (\n    <CaseViewer\n      client={client}\n      user={user}\n      annotations={config.annotations}\n      preload={preload}\n      app={app}\n      enableAnnotationTools={enableAnnotationTools}\n      studyInstanceUID={studyInstanceUID}\n    />\n  )\n}\n\ninterface AppProps {\n  name: string\n  homepage: string\n  version: string\n  config: AppConfig\n}\n\ninterface AppState {\n  client: DicomWebManager\n  user?: User\n  isLoading: boolean\n  redirectTo?: string\n  wasAuthSuccessful: boolean\n  error?: ErrorMessageSettings\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private readonly auth?: AuthManager\n\n  private readonly handleDICOMwebError = (\n    error: dwc.api.DICOMwebClientError,\n    serverSettings: ServerSettings\n  ): void => {\n    if (error.status === 401) {\n      this.signIn()\n    }\n    if (serverSettings.errorMessages !== undefined) {\n      serverSettings.errorMessages.forEach(\n        ({ status, message }: ErrorMessageSettings) => {\n          if (error.status === status) {\n            this.setState({\n              error: {\n                status: error.status,\n                message\n              }\n            })\n          }\n        }\n      )\n    }\n  }\n\n  constructor (props: AppProps) {\n    super(props)\n\n    console.info('instatiate app')\n    console.info(`app is located at \"${props.config.path}\"`)\n    const { protocol, host } = window.location\n    const baseUri = `${protocol}//${host}`\n    const appUri = joinUrl(props.config.path, baseUri)\n\n    const oidcSettings = props.config.oidc\n    if (oidcSettings !== undefined) {\n      console.info(\n        'app uses the following OIDC configuration: ',\n        props.config.oidc\n      )\n      this.auth = new OidcManager(appUri, oidcSettings)\n    }\n\n    if (props.config.servers.length === 0) {\n      throw Error('One server needs to be configured.')\n    }\n    console.info(\n      'app uses the following DICOMweb server configuration: ',\n      props.config.servers\n    )\n\n    this.handleServerSelection = this.handleServerSelection.bind(this)\n\n    message.config({ duration: 5 })\n\n    this.state = {\n      client: new DicomWebManager({\n        baseUri: baseUri,\n        settings: props.config.servers,\n        onError: this.handleDICOMwebError\n      }),\n      isLoading: true,\n      wasAuthSuccessful: false\n    }\n  }\n\n  handleServerSelection ({ url }: { url: string }): void {\n    console.info('select DICOMweb server: ', url)\n    const client = new DicomWebManager({\n      baseUri: '',\n      settings: [{\n        id: 'tmp',\n        url,\n        read: true,\n        write: false\n      }],\n      onError: this.handleDICOMwebError\n    })\n    client.updateHeaders(this.state.client.headers)\n    this.setState({ client })\n  }\n\n  /**\n   * Handle successful authentication event.\n   *\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\n   * the user back to the App.\n   *\n   * @param user - Information about the user\n   * @param authorization - Value of the \"Authorization\" HTTP header field\n   */\n  handleSignIn = ({ user, authorization }: {\n    user: User\n    authorization: string\n  }): void => {\n    console.info(\n      `handle sign in of user \"${user.name}\" and ` +\n      `update authorization token \"${authorization}\"`\n    )\n    const client = this.state.client\n    client.updateHeaders({ Authorization: authorization })\n    const fullPath = window.location.pathname + window.location.search\n    const basePath = this.props.config.path\n    let path = fullPath.substring(basePath.length)\n    if (basePath === '/' || basePath === '') {\n      path = fullPath\n    }\n    this.setState({\n      user: user,\n      client: client,\n      wasAuthSuccessful: true,\n      isLoading: false,\n      redirectTo: path\n    })\n  }\n\n  signIn (): void {\n    if (this.auth !== undefined) {\n      console.info('try to sign in user')\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\n        console.info('sign-in was successful')\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: true\n        })\n      }).catch((error) => {\n        console.error('sign-in failed ', error)\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        message.error('Could not sign-in user.')\n        this.setState({\n          isLoading: false,\n          redirectTo: undefined,\n          wasAuthSuccessful: false\n        })\n      })\n    } else {\n      this.setState({\n        isLoading: false,\n        redirectTo: undefined,\n        wasAuthSuccessful: true\n      })\n    }\n  }\n\n  componentDidMount (): void {\n    this.signIn()\n  }\n\n  render (): React.ReactNode {\n    const appInfo = {\n      name: this.props.name,\n      version: this.props.version,\n      homepage: this.props.homepage,\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\n      organization: this.props.config.organization\n    }\n\n    const enableWorklist = !(\n      this.props.config.disableWorklist ?? false\n    )\n    const enableServerSelection = (\n      this.props.config.enableServerSelection ?? false\n    )\n\n    let worklist\n    if (enableWorklist) {\n      worklist = <Worklist client={this.state.client} />\n    } else {\n      worklist = <div>Worklist has been disabled.</div>\n    }\n\n    let isLogoutPossible = false\n    let onLogout: () => void\n    if (\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      this.props.config.oidc != null &&\n      this.props.config.oidc.endSessionEndpoint != null\n    ) {\n      onLogout = (): void => {\n        if (this.auth != null) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.auth.signOut()\n        }\n      }\n      isLogoutPossible = true\n    } else {\n      onLogout = () => {}\n      isLogoutPossible = false\n    }\n\n    const layoutStyle = { height: '100vh' }\n    const layoutContentStyle = { height: '100%' }\n\n    if (this.state.redirectTo !== undefined) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Navigate to={this.state.redirectTo} replace />\n        </BrowserRouter>\n      )\n    } else if (this.state.isLoading) {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Layout style={layoutStyle}>\n            <Header\n              app={appInfo}\n              user={this.state.user}\n              showWorklistButton={false}\n              onServerSelection={this.handleServerSelection}\n              showServerSelectionButton={false}\n            />\n            <Layout.Content style={layoutContentStyle}>\n              <FaSpinner />\n            </Layout.Content>\n          </Layout>\n        </BrowserRouter>\n      )\n    } else if (!this.state.wasAuthSuccessful) {\n      return (\n        <InfoPage type='error' message='Sign-in failed.' />\n      )\n    } else if (this.state.error != null) {\n      return (\n        <InfoPage type='error' message={this.state.error.message} />\n      )\n    } else {\n      return (\n        <BrowserRouter basename={this.props.config.path}>\n          <Routes>\n            <Route\n              path='/studies/:studyInstanceUID/*'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={enableWorklist}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    <ParametrizedCaseViewer\n                      client={this.state.client}\n                      user={this.state.user}\n                      config={this.props.config}\n                      app={appInfo}\n                    />\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n            <Route\n              path='/logout'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  Logged out\n                </Layout>\n              }\n            />\n            <Route\n              path='/'\n              element={\n                <Layout style={layoutStyle}>\n                  <Header\n                    app={appInfo}\n                    user={this.state.user}\n                    showWorklistButton={false}\n                    onServerSelection={this.handleServerSelection}\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\n                    showServerSelectionButton={enableServerSelection}\n                  />\n                  <Layout.Content style={layoutContentStyle}>\n                    {worklist}\n                  </Layout.Content>\n                </Layout>\n              }\n            />\n          </Routes>\n        </BrowserRouter>\n      )\n    }\n  }\n}\n\nexport default App\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","ClinicalTrial","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","Patient","PatientID","PatientName","PatientSex","PatientBirthDate","Study","AccessionNumber","StudyID","StudyDate","StudyTime","SlideItem","state","isLoading","overviewViewport","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","console","info","SeriesInstanceUID","dmv","client","resizeFactor","render","container","resize","description","style","height","containerIdentifier","ref","seriesInstanceUIDs","SlideList","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","AnnotationItem","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","AnnotationList","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","AnnotationGroupItem","handleMeasurementSelection","handleOpacityChange","currentStyle","opacity","defaultStyle","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","option","codeComponents","measurement","schemeDesignator","meaning","number","algorithmName","propertyCategory","propertyType","AnnotationGroupSequence","findIndex","AnnotationGroupUID","measurementOptions","MeasurementsSequence","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","settings","justify","gutter","range","min","max","step","plain","minWidth","defaultValue","direction","placement","content","overlayStyle","type","shape","SettingOutlined","AnnotationGroupList","annotationGroups","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupVisibilityChange","onAnnotationGroupStyleChange","Button","handleClick","text","button","Icon","isSelected","tooltip","Equipment","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","Error","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","GraphicType","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","slice","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ContainerIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","Report","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","Item","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","SpecimenItem","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","SpecimenList","overflowY","OpticalPathItem","handleLimitChange","handleLowerLimitChange","handleUpperLimitChange","handleColorRChange","handleColorGChange","handleColorBChange","handleRemoval","getCurrentColors","color","paletteColorLookupTable","limitValues","previousProps","previousState","opticalPath","opticalPathIdentifier","Array","isArray","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","maxValue","Math","pow","BitsAllocated","isMonochromatic","colorSettings","windowSettings","colors","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","OpticalPathList","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","MappingItem","mappingUID","mapping","MappingList","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","SegmentItem","segmentUID","segment","SegmentList","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","SOPClassUIDs","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","_constructViewers","labelViewer","preload","volumeViewer","volumeImages","controls","activateSelectInteraction","labelImages","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","defaultRoiStyle","stroke","fill","roiStyles","selectionColor","selectedRoiStyle","loadPresentationStates","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","instance","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","includes","selectedPresentationStateUID","setPresentationState","presentationStates","Object","catch","error","message","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","indexOf","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","Set","keys","setOpticalPathStyle","activateOpticalPath","showOpticalPath","add","getRoiStyle","addAnnotations","SOPClassUID","COMPREHENSIVE_3D_SR","templateSeq","ContentTemplateSequence","TemplateIdentifier","_implementsTID1500","subjectClassValue","retrievedConcept","expectedConcept","_describesSpecimenSubject","debug","measurementGroups","foundRegion","regions","_containsROIAnnotations","image","FrameOfReferenceUID","doesROIExist","getAllROIs","some","otherROI","a","b","graphicType","graphicData","s1","s2","j","_areROIsEqual","addROI","forceUpdate","addAnnotationGroups","searchForSeries","matchedSeries","s","series","retrieveSeriesMetadata","retrievedMetadata","filter","ann","refImage","addSegmentations","segmentations","seg","addSegments","addParametricMaps","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","onRoiModified","onRoiDrawn","detail","payload","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","onRoiSelected","selectedRoi","setROIStyle","onLoadingStarted","onLoadingEnded","onFrameLoadingEnded","frameInfo","sopClassUID","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","channelIdentifier","pixelDataStatistics","chunks","ceil","pixelArray","minValues","maxValues","pixels","stats","numFramesSampled","onRoiRemoved","annotation","finding","geometryTypes","componentSetup","componentCleanup","handleRoiDrawing","handleRoiTranslation","handleRoiModification","handleRoiVisibilityChange","handleRoiRemoval","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationVisibilityChange","handleAnnotationGroupVisibilityChange","handleAnnotationGroupStyleChange","handleReportGeneration","handleReportVerification","handleReportCancellation","handleSegmentVisibilityChange","handleSegmentStyleChange","handleMappingVisibilityChange","handleMappingStyleChange","handleOpticalPathVisibilityChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","generatedReport","isAnnotationModalVisible","isReportModalVisible","isRoiDrawingActive","isRoiTranslationActive","isRoiModificationActive","areRoisHidden","pathname","cleanup","isOpticalPathVisible","isOpticalPathActive","document","body","removeEventListener","window","addEventListener","deactivateDrawInteraction","deactivateModifyInteraction","deactivateTranslateInteraction","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","target","selectedMarkup","code","filteredEvaluations","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","observer","refSpecimen","user","loginName","email","warn","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","app","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","find","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","evidence","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","log","getROI","delete","showAnnotationGroup","hideAnnotationGroup","setAnnotationGroupStyle","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","sort","paletteColorLookupTableUID","defaultColors","numVisible","getOpticalPathStyle","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areROIsVisible","hideROIs","showROIs","getAllSegments","getAllParameterMappings","getAllAnnotationGroups","annotationMenuItems","openSubMenuItems","geometryTypeOptionsMapping","point","circle","box","polygon","line","freehandpolygon","freehandline","selections","defaultActiveFirstOption","onClear","specimenMenu","equipmentMenu","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","enableAnnotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","loadingDisplay","hasSider","className","display","overflow","visible","onOk","onCancel","okText","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","Slide","options","opticalPathIdentifiers","containerIdentifiers","frameOfReferenceUIDs","VOLUME","THUMBNAIL","LABEL","OVERVIEW","samplesPerPixel","SamplesPerPixel","PhotometricInterpretation","createSlides","slideMetadata","filteredVolumeImages","filteredOverviewImages","slideMetadataIndex","_doesImageBelongToSlide","slideMetadataItem","slides","imgA","imgB","Number","ParametrizedSlideViewer","selectedSlide","presentationStateUID","URLSearchParams","search","get","viewer","Viewer","handleSeriesSelection","fetchImageMetadata","StudyInstanceUID","Promise","all","loadingSeries","seriesImages","replace","volumeInstances","clinicalTrialMenu","borderRight","borderRightWidth","path","element","Header","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleServerSelectionButtonClick","isServerSelectionModalVisible","isServerSelectionDisabled","worklistButton","userMenuItems","onUserLogout","userMenu","overlay","trigger","UserOutlined","e","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","showServerSelectionButton","ApiOutlined","handleServerSelection","url","selectedServerUrl","closeModal","startsWith","onServerSelection","src","process","alt","margin","flex","placeholder","isDisabled","URL","protocol","TypeError","onPressEnter","addonAfter","StopOutlined","CheckOutlined","alignItems","justifyContent","subTitle","Worklist","defaultPageSize","handleSearch","confirm","dataIndex","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","marginBottom","SearchOutlined","filterIcon","filtered","fetchData","handleChange","studies","numStudies","pageSize","searchOptions","ModalitiesInStudy","searchForStudies","study","limit","searchCriteria","fuzzymatching","pagination","filters","columns","String","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","cursor","rowKey","record","dataSource","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","searchParams","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","args","apply","status","errorMessage","attemptFailedError","open","DicomWebManager","onError","stores","handleError","updateHeaders","fields","f","headers","reject","retrieveStudyMetadata","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","qidoPathPrefix","qidoURLPrefix","wadoPathPrefix","wadoURLPrefix","stowPathPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","errorInterceptor","read","dwc","baseURL","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","App","auth","handleDICOMwebError","errorMessages","Authorization","fullPath","basePath","wasAuthSuccessful","redirectTo","host","appUri","oidcSettings","oidc","servers","duration","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}